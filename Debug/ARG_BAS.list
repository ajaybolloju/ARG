
ARG_BAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080037c8  080037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080037fc  080037fc  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037fc  080037fc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003800  08003800  00004800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003804  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  0800386c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800386c  000052b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c547  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0b  00000000  00000000  000115d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000133e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a05  00000000  00000000  000140c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018676  00000000  00000000  00014ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e243  00000000  00000000  0002d13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0f7  00000000  00000000  0003b37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7475  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  000c74b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000cb098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080037b0 	.word	0x080037b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080037b0 	.word	0x080037b0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc0a 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f836 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f912 	bl	8000380 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f86e 	bl	800023c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8ba 	bl	80002d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f8e2 	bl	800032c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000168:	480f      	ldr	r0, [pc, #60]	@ (80001a8 <main+0x5c>)
 800016a:	f001 fc63 	bl	8001a34 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	490e      	ldr	r1, [pc, #56]	@ (80001ac <main+0x60>)
 8000172:	480f      	ldr	r0, [pc, #60]	@ (80001b0 <main+0x64>)
 8000174:	f002 f910 	bl	8002398 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000178:	2201      	movs	r2, #1
 800017a:	490c      	ldr	r1, [pc, #48]	@ (80001ac <main+0x60>)
 800017c:	480d      	ldr	r0, [pc, #52]	@ (80001b4 <main+0x68>)
 800017e:	f002 f90b 	bl	8002398 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timeout_counter > 5)
 8000182:	4b0d      	ldr	r3, [pc, #52]	@ (80001b8 <main+0x6c>)
 8000184:	881b      	ldrh	r3, [r3, #0]
 8000186:	2b05      	cmp	r3, #5
 8000188:	d9fb      	bls.n	8000182 <main+0x36>
	  {
		  HAL_UART_Transmit_IT(&huart2, (uint8_t *) "AT\r\n", (uint16_t)sizeof("AT\r\n"));
 800018a:	2205      	movs	r2, #5
 800018c:	490b      	ldr	r1, [pc, #44]	@ (80001bc <main+0x70>)
 800018e:	4809      	ldr	r0, [pc, #36]	@ (80001b4 <main+0x68>)
 8000190:	f002 f8cd 	bl	800232e <HAL_UART_Transmit_IT>
		  timeout_counter = 0;
 8000194:	4b08      	ldr	r3, [pc, #32]	@ (80001b8 <main+0x6c>)
 8000196:	2200      	movs	r2, #0
 8000198:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800019a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800019e:	4808      	ldr	r0, [pc, #32]	@ (80001c0 <main+0x74>)
 80001a0:	f000 ffb7 	bl	8001112 <HAL_GPIO_TogglePin>
	  if(timeout_counter > 5)
 80001a4:	e7ed      	b.n	8000182 <main+0x36>
 80001a6:	bf00      	nop
 80001a8:	20000084 	.word	0x20000084
 80001ac:	2000015e 	.word	0x2000015e
 80001b0:	200000cc 	.word	0x200000cc
 80001b4:	20000114 	.word	0x20000114
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	080037c8 	.word	0x080037c8
 80001c0:	40011000 	.word	0x40011000

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	@ 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	@ 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 ff75 	bl	80030c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 ffba 	bl	8001174 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000206:	f000 f9a1 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fa28 	bl	8001678 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800022e:	f000 f98d 	bl	800054c <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	@ 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000242:	f107 0308 	add.w	r3, r7, #8
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000250:	463b      	mov	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000258:	4b1e      	ldr	r3, [pc, #120]	@ (80002d4 <MX_TIM2_Init+0x98>)
 800025a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800025e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000260:	4b1c      	ldr	r3, [pc, #112]	@ (80002d4 <MX_TIM2_Init+0x98>)
 8000262:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000266:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000268:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <MX_TIM2_Init+0x98>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800026e:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <MX_TIM2_Init+0x98>)
 8000270:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000276:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <MX_TIM2_Init+0x98>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800027c:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <MX_TIM2_Init+0x98>)
 800027e:	2200      	movs	r2, #0
 8000280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000282:	4814      	ldr	r0, [pc, #80]	@ (80002d4 <MX_TIM2_Init+0x98>)
 8000284:	f001 fb86 	bl	8001994 <HAL_TIM_Base_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800028e:	f000 f95d 	bl	800054c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000296:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	4619      	mov	r1, r3
 800029e:	480d      	ldr	r0, [pc, #52]	@ (80002d4 <MX_TIM2_Init+0x98>)
 80002a0:	f001 fd0a 	bl	8001cb8 <HAL_TIM_ConfigClockSource>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80002aa:	f000 f94f 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002b6:	463b      	mov	r3, r7
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	@ (80002d4 <MX_TIM2_Init+0x98>)
 80002bc:	f001 feec 	bl	8002098 <HAL_TIMEx_MasterConfigSynchronization>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80002c6:	f000 f941 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000084 	.word	0x20000084

080002d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002de:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <MX_USART1_UART_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 8000310:	f001 ff32 	bl	8002178 <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800031a:	f000 f917 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000cc 	.word	0x200000cc
 8000328:	40013800 	.word	0x40013800

0800032c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000332:	4a12      	ldr	r2, [pc, #72]	@ (800037c <MX_USART2_UART_Init+0x50>)
 8000334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000336:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800033c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000364:	f001 ff08 	bl	8002178 <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800036e:	f000 f8ed 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000114 	.word	0x20000114
 800037c:	40004400 	.word	0x40004400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000394:	4b28      	ldr	r3, [pc, #160]	@ (8000438 <MX_GPIO_Init+0xb8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a27      	ldr	r2, [pc, #156]	@ (8000438 <MX_GPIO_Init+0xb8>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b25      	ldr	r3, [pc, #148]	@ (8000438 <MX_GPIO_Init+0xb8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0310 	and.w	r3, r3, #16
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b22      	ldr	r3, [pc, #136]	@ (8000438 <MX_GPIO_Init+0xb8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a21      	ldr	r2, [pc, #132]	@ (8000438 <MX_GPIO_Init+0xb8>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000438 <MX_GPIO_Init+0xb8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000438 <MX_GPIO_Init+0xb8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000438 <MX_GPIO_Init+0xb8>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b19      	ldr	r3, [pc, #100]	@ (8000438 <MX_GPIO_Init+0xb8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e2:	4816      	ldr	r0, [pc, #88]	@ (800043c <MX_GPIO_Init+0xbc>)
 80003e4:	f000 fe7d 	bl	80010e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	480e      	ldr	r0, [pc, #56]	@ (800043c <MX_GPIO_Init+0xbc>)
 8000402:	f000 fcd3 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800040a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_GPIO_Init+0xc0>)
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	480a      	ldr	r0, [pc, #40]	@ (8000444 <MX_GPIO_Init+0xc4>)
 800041c:	f000 fcc6 	bl	8000dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	2028      	movs	r0, #40	@ 0x28
 8000426:	f000 fbd8 	bl	8000bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800042a:	2028      	movs	r0, #40	@ 0x28
 800042c:	f000 fbf1 	bl	8000c12 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000430:	bf00      	nop
 8000432:	3720      	adds	r7, #32
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40021000 	.word	0x40021000
 800043c:	40011000 	.word	0x40011000
 8000440:	10110000 	.word	0x10110000
 8000444:	40010c00 	.word	0x40010c00

08000448 <HAL_UART_RxCpltCallback>:
   @param  UartHandle: UART handle.
   @note   This callback executes once defined bytes of reception completed
   @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART1)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0f      	ldr	r2, [pc, #60]	@ (8000494 <HAL_UART_RxCpltCallback+0x4c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d109      	bne.n	800046e <HAL_UART_RxCpltCallback+0x26>
  {
	    HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	490e      	ldr	r1, [pc, #56]	@ (8000498 <HAL_UART_RxCpltCallback+0x50>)
 800045e:	480f      	ldr	r0, [pc, #60]	@ (800049c <HAL_UART_RxCpltCallback+0x54>)
 8000460:	f001 ff9a 	bl	8002398 <HAL_UART_Receive_IT>
	    printf("%c", aRxBuffer);
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_UART_RxCpltCallback+0x50>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f002 fddf 	bl	800302c <putchar>
  }
  if (UartHandle->Instance == USART2)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a0b      	ldr	r2, [pc, #44]	@ (80004a0 <HAL_UART_RxCpltCallback+0x58>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d109      	bne.n	800048c <HAL_UART_RxCpltCallback+0x44>
  {
	    HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	4907      	ldr	r1, [pc, #28]	@ (8000498 <HAL_UART_RxCpltCallback+0x50>)
 800047c:	4809      	ldr	r0, [pc, #36]	@ (80004a4 <HAL_UART_RxCpltCallback+0x5c>)
 800047e:	f001 ff8b 	bl	8002398 <HAL_UART_Receive_IT>
	    printf("%c", aRxBuffer);
 8000482:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <HAL_UART_RxCpltCallback+0x50>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f002 fdd0 	bl	800302c <putchar>
  }
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40013800 	.word	0x40013800
 8000498:	2000015e 	.word	0x2000015e
 800049c:	200000cc 	.word	0x200000cc
 80004a0:	40004400 	.word	0x40004400
 80004a4:	20000114 	.word	0x20000114

080004a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART1)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a05      	ldr	r2, [pc, #20]	@ (80004cc <HAL_UART_TxCpltCallback+0x24>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d102      	bne.n	80004c0 <HAL_UART_TxCpltCallback+0x18>
  {
    /* Set transmission flag: transfer complete */
	  SerialTxReady = SET;
 80004ba:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <HAL_UART_TxCpltCallback+0x28>)
 80004bc:	2201      	movs	r2, #1
 80004be:	701a      	strb	r2, [r3, #0]
  }
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40013800 	.word	0x40013800
 80004d0:	2000015f 	.word	0x2000015f

080004d4 <HAL_GPIO_EXTI_Callback>:
   @brief EXTI line detection callbacks
   @param GPIO_Pin: Specifies the pins connected EXTI line
   @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == RAIN_GAUGE_MCU_Pin)
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004e4:	d104      	bne.n	80004f0 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    if (HAL_GPIO_ReadPin(RAIN_GAUGE_MCU_GPIO_Port, RAIN_GAUGE_MCU_Pin)
 80004e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ea:	4803      	ldr	r0, [pc, #12]	@ (80004f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80004ec:	f000 fde2 	bl	80010b4 <HAL_GPIO_ReadPin>
         == GPIO_PIN_SET)
    {
//	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    }
  }
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40010c00 	.word	0x40010c00

080004fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800050c:	d105      	bne.n	800051a <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  timeout_counter++;
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	b29a      	uxth	r2, r3
 8000516:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000518:	801a      	strh	r2, [r3, #0]
  }
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	2000015c 	.word	0x2000015c

08000528 <__io_putchar>:
   @brief  Retargets the C library APP_DEBUG_STR function to the USART.
   @param  None
   @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0XFFFF);
 8000530:	1d39      	adds	r1, r7, #4
 8000532:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000536:	2201      	movs	r2, #1
 8000538:	4803      	ldr	r0, [pc, #12]	@ (8000548 <__io_putchar+0x20>)
 800053a:	f001 fe6d 	bl	8002218 <HAL_UART_Transmit>
  return ch;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200000cc 	.word	0x200000cc

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <Error_Handler+0x8>

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <HAL_MspInit+0x5c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <HAL_MspInit+0x5c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <HAL_MspInit+0x5c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <HAL_MspInit+0x5c>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058e:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <HAL_MspInit+0x60>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <HAL_MspInit+0x60>)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000

080005bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005cc:	d113      	bne.n	80005f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <HAL_TIM_Base_MspInit+0x44>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <HAL_TIM_Base_MspInit+0x44>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <HAL_TIM_Base_MspInit+0x44>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	201c      	movs	r0, #28
 80005ec:	f000 faf5 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005f0:	201c      	movs	r0, #28
 80005f2:	f000 fb0e 	bl	8000c12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0318 	add.w	r3, r7, #24
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a3f      	ldr	r2, [pc, #252]	@ (800071c <HAL_UART_MspInit+0x118>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d13a      	bne.n	800069a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000624:	4b3e      	ldr	r3, [pc, #248]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a3d      	ldr	r2, [pc, #244]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b3b      	ldr	r3, [pc, #236]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b38      	ldr	r3, [pc, #224]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a37      	ldr	r2, [pc, #220]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b35      	ldr	r3, [pc, #212]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000654:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	4619      	mov	r1, r3
 8000668:	482e      	ldr	r0, [pc, #184]	@ (8000724 <HAL_UART_MspInit+0x120>)
 800066a:	f000 fb9f 	bl	8000dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800066e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	4619      	mov	r1, r3
 8000682:	4828      	ldr	r0, [pc, #160]	@ (8000724 <HAL_UART_MspInit+0x120>)
 8000684:	f000 fb92 	bl	8000dac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2025      	movs	r0, #37	@ 0x25
 800068e:	f000 faa4 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000692:	2025      	movs	r0, #37	@ 0x25
 8000694:	f000 fabd 	bl	8000c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000698:	e03c      	b.n	8000714 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a22      	ldr	r2, [pc, #136]	@ (8000728 <HAL_UART_MspInit+0x124>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d137      	bne.n	8000714 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 80006aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ae:	61d3      	str	r3, [r2, #28]
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a17      	ldr	r2, [pc, #92]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <HAL_UART_MspInit+0x11c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d4:	2304      	movs	r3, #4
 80006d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	4619      	mov	r1, r3
 80006e6:	480f      	ldr	r0, [pc, #60]	@ (8000724 <HAL_UART_MspInit+0x120>)
 80006e8:	f000 fb60 	bl	8000dac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ec:	2308      	movs	r3, #8
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	4619      	mov	r1, r3
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <HAL_UART_MspInit+0x120>)
 8000700:	f000 fb54 	bl	8000dac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2026      	movs	r0, #38	@ 0x26
 800070a:	f000 fa66 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800070e:	2026      	movs	r0, #38	@ 0x26
 8000710:	f000 fa7f 	bl	8000c12 <HAL_NVIC_EnableIRQ>
}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	@ 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40013800 	.word	0x40013800
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800
 8000728:	40004400 	.word	0x40004400

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077c:	f000 f93a 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <TIM2_IRQHandler+0x10>)
 800078a:	f001 f9a5 	bl	8001ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000084 	.word	0x20000084

08000798 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <USART2_IRQHandler+0x10>)
 800079e:	f001 fe21 	bl	80023e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000114 	.word	0x20000114

080007ac <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007b4:	f000 fcc6 	bl	8001144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 80007c0:	4802      	ldr	r0, [pc, #8]	@ (80007cc <USART1_IRQHandler+0x10>)
 80007c2:	f001 fe0f 	bl	80023e4 <HAL_UART_IRQHandler>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000cc 	.word	0x200000cc

080007d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	e00a      	b.n	80007f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007e2:	f3af 8000 	nop.w
 80007e6:	4601      	mov	r1, r0
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	b2ca      	uxtb	r2, r1
 80007f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3301      	adds	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dbf0      	blt.n	80007e2 <_read+0x12>
  }

  return len;
 8000800:	687b      	ldr	r3, [r7, #4]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	e009      	b.n	8000830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	60ba      	str	r2, [r7, #8]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fe7f 	bl	8000528 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbf1      	blt.n	800081c <_write+0x12>
  }
  return len;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_close>:

int _close(int file)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000868:	605a      	str	r2, [r3, #4]
  return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <_isatty>:

int _isatty(int file)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800088a:	b480      	push	{r7}
 800088c:	b085      	sub	sp, #20
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
	...

080008a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ac:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <_sbrk+0x5c>)
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <_sbrk+0x60>)
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <_sbrk+0x64>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	@ (800090c <_sbrk+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d207      	bcs.n	80008e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d4:	f002 fc44 	bl	8003160 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	e009      	b.n	80008f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <_sbrk+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20005000 	.word	0x20005000
 8000904:	00000400 	.word	0x00000400
 8000908:	20000160 	.word	0x20000160
 800090c:	200002b8 	.word	0x200002b8

08000910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800091c:	f7ff fff8 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480b      	ldr	r0, [pc, #44]	@ (8000950 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000922:	490c      	ldr	r1, [pc, #48]	@ (8000954 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000924:	4a0c      	ldr	r2, [pc, #48]	@ (8000958 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a09      	ldr	r2, [pc, #36]	@ (800095c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000938:	4c09      	ldr	r4, [pc, #36]	@ (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000946:	f002 fc11 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094a:	f7ff fbff 	bl	800014c <main>
  bx lr
 800094e:	4770      	bx	lr
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000958:	08003804 	.word	0x08003804
  ldr r2, =_sbss
 800095c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000960:	200002b4 	.word	0x200002b4

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <HAL_Init+0x28>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <HAL_Init+0x28>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f923 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	200f      	movs	r0, #15
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fde8 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f93b 	bl	8000c2e <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f903 	bl	8000bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	@ (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a03      	ldr	r2, [pc, #12]	@ (8000a14 <HAL_IncTick+0x20>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000164 	.word	0x20000164

08000a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	@ (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000164 	.word	0x20000164

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4906      	ldr	r1, [pc, #24]	@ (8000ac4 <__NVIC_EnableIRQ+0x34>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	@ (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	@ (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	@ 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	@ 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f7ff ff90 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff2d 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff42 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff90 	bl	8000b1c <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5f 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff35 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffa2 	bl	8000b80 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d008      	beq.n	8000c70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2204      	movs	r2, #4
 8000c62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e020      	b.n	8000cb2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 020e 	bic.w	r2, r2, #14
 8000c7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d005      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e051      	b.n	8000d84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 020e 	bic.w	r2, r2, #14
 8000cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a22      	ldr	r2, [pc, #136]	@ (8000d90 <HAL_DMA_Abort_IT+0xd4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d029      	beq.n	8000d5e <HAL_DMA_Abort_IT+0xa2>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a21      	ldr	r2, [pc, #132]	@ (8000d94 <HAL_DMA_Abort_IT+0xd8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d022      	beq.n	8000d5a <HAL_DMA_Abort_IT+0x9e>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1f      	ldr	r2, [pc, #124]	@ (8000d98 <HAL_DMA_Abort_IT+0xdc>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d01a      	beq.n	8000d54 <HAL_DMA_Abort_IT+0x98>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1e      	ldr	r2, [pc, #120]	@ (8000d9c <HAL_DMA_Abort_IT+0xe0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d012      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x92>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <HAL_DMA_Abort_IT+0xe4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00a      	beq.n	8000d48 <HAL_DMA_Abort_IT+0x8c>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <HAL_DMA_Abort_IT+0xe8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d102      	bne.n	8000d42 <HAL_DMA_Abort_IT+0x86>
 8000d3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d40:	e00e      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d46:	e00b      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d4c:	e008      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	e005      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d58:	e002      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	e000      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4a11      	ldr	r2, [pc, #68]	@ (8000da8 <HAL_DMA_Abort_IT+0xec>)
 8000d62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	4798      	blx	r3
    } 
  }
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40020008 	.word	0x40020008
 8000d94:	4002001c 	.word	0x4002001c
 8000d98:	40020030 	.word	0x40020030
 8000d9c:	40020044 	.word	0x40020044
 8000da0:	40020058 	.word	0x40020058
 8000da4:	4002006c 	.word	0x4002006c
 8000da8:	40020000 	.word	0x40020000

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b08b      	sub	sp, #44	@ 0x2c
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e169      	b.n	8001094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 8158 	bne.w	800108e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a9a      	ldr	r2, [pc, #616]	@ (800104c <HAL_GPIO_Init+0x2a0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d05e      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000de8:	4a98      	ldr	r2, [pc, #608]	@ (800104c <HAL_GPIO_Init+0x2a0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d875      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dee:	4a98      	ldr	r2, [pc, #608]	@ (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d058      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000df4:	4a96      	ldr	r2, [pc, #600]	@ (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d86f      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dfa:	4a96      	ldr	r2, [pc, #600]	@ (8001054 <HAL_GPIO_Init+0x2a8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d052      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e00:	4a94      	ldr	r2, [pc, #592]	@ (8001054 <HAL_GPIO_Init+0x2a8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d869      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e06:	4a94      	ldr	r2, [pc, #592]	@ (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d04c      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e0c:	4a92      	ldr	r2, [pc, #584]	@ (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d863      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e12:	4a92      	ldr	r2, [pc, #584]	@ (800105c <HAL_GPIO_Init+0x2b0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d046      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e18:	4a90      	ldr	r2, [pc, #576]	@ (800105c <HAL_GPIO_Init+0x2b0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d85d      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d82a      	bhi.n	8000e78 <HAL_GPIO_Init+0xcc>
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d859      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e26:	a201      	add	r2, pc, #4	@ (adr r2, 8000e2c <HAL_GPIO_Init+0x80>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000ea7 	.word	0x08000ea7
 8000e30:	08000e81 	.word	0x08000e81
 8000e34:	08000e93 	.word	0x08000e93
 8000e38:	08000ed5 	.word	0x08000ed5
 8000e3c:	08000edb 	.word	0x08000edb
 8000e40:	08000edb 	.word	0x08000edb
 8000e44:	08000edb 	.word	0x08000edb
 8000e48:	08000edb 	.word	0x08000edb
 8000e4c:	08000edb 	.word	0x08000edb
 8000e50:	08000edb 	.word	0x08000edb
 8000e54:	08000edb 	.word	0x08000edb
 8000e58:	08000edb 	.word	0x08000edb
 8000e5c:	08000edb 	.word	0x08000edb
 8000e60:	08000edb 	.word	0x08000edb
 8000e64:	08000edb 	.word	0x08000edb
 8000e68:	08000edb 	.word	0x08000edb
 8000e6c:	08000edb 	.word	0x08000edb
 8000e70:	08000e89 	.word	0x08000e89
 8000e74:	08000e9d 	.word	0x08000e9d
 8000e78:	4a79      	ldr	r2, [pc, #484]	@ (8001060 <HAL_GPIO_Init+0x2b4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e7e:	e02c      	b.n	8000eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e029      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e024      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	3308      	adds	r3, #8
 8000e98:	623b      	str	r3, [r7, #32]
          break;
 8000e9a:	e01f      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e01a      	b.n	8000edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e013      	b.n	8000edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d105      	bne.n	8000ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	611a      	str	r2, [r3, #16]
          break;
 8000ec6:	e009      	b.n	8000edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	615a      	str	r2, [r3, #20]
          break;
 8000ed2:	e003      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x130>
          break;
 8000eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2bff      	cmp	r3, #255	@ 0xff
 8000ee0:	d801      	bhi.n	8000ee6 <HAL_GPIO_Init+0x13a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	e001      	b.n	8000eea <HAL_GPIO_Init+0x13e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	@ 0xff
 8000ef0:	d802      	bhi.n	8000ef8 <HAL_GPIO_Init+0x14c>
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	e002      	b.n	8000efe <HAL_GPIO_Init+0x152>
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efa:	3b08      	subs	r3, #8
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	210f      	movs	r1, #15
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	6a39      	ldr	r1, [r7, #32]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80b1 	beq.w	800108e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	@ (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b4a      	ldr	r3, [pc, #296]	@ (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f44:	4a48      	ldr	r2, [pc, #288]	@ (8001068 <HAL_GPIO_Init+0x2bc>)
 8000f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a40      	ldr	r2, [pc, #256]	@ (800106c <HAL_GPIO_Init+0x2c0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d013      	beq.n	8000f98 <HAL_GPIO_Init+0x1ec>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a3f      	ldr	r2, [pc, #252]	@ (8001070 <HAL_GPIO_Init+0x2c4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1e8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001074 <HAL_GPIO_Init+0x2c8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1e4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3d      	ldr	r2, [pc, #244]	@ (8001078 <HAL_GPIO_Init+0x2cc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1e0>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000faa:	492f      	ldr	r1, [pc, #188]	@ (8001068 <HAL_GPIO_Init+0x2bc>)
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	492c      	ldr	r1, [pc, #176]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	608b      	str	r3, [r1, #8]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4928      	ldr	r1, [pc, #160]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fec:	4b23      	ldr	r3, [pc, #140]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	4922      	ldr	r1, [pc, #136]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60cb      	str	r3, [r1, #12]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	491e      	ldr	r1, [pc, #120]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4918      	ldr	r1, [pc, #96]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	4914      	ldr	r1, [pc, #80]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 800102c:	4013      	ands	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d021      	beq.n	8001080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	490e      	ldr	r1, [pc, #56]	@ (800107c <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e021      	b.n	800108e <HAL_GPIO_Init+0x2e2>
 800104a:	bf00      	nop
 800104c:	10320000 	.word	0x10320000
 8001050:	10310000 	.word	0x10310000
 8001054:	10220000 	.word	0x10220000
 8001058:	10210000 	.word	0x10210000
 800105c:	10120000 	.word	0x10120000
 8001060:	10110000 	.word	0x10110000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40011400 	.word	0x40011400
 800107c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	43db      	mvns	r3, r3
 8001088:	4909      	ldr	r1, [pc, #36]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 800108a:	4013      	ands	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	3301      	adds	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f ae8e 	bne.w	8000dc0 <HAL_GPIO_Init+0x14>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	372c      	adds	r7, #44	@ 0x2c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e001      	b.n	80010d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]
 80010ee:	4613      	mov	r3, r2
 80010f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f2:	787b      	ldrb	r3, [r7, #1]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f8:	887a      	ldrh	r2, [r7, #2]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010fe:	e003      	b.n	8001108 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	041a      	lsls	r2, r3, #16
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	611a      	str	r2, [r3, #16]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	041a      	lsls	r2, r3, #16
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43d9      	mvns	r1, r3
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	400b      	ands	r3, r1
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	611a      	str	r2, [r3, #16]
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9b6 	bl	80004d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e272      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8087 	beq.w	80012a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001194:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b04      	cmp	r3, #4
 800119e:	d00c      	beq.n	80011ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a0:	4b8f      	ldr	r3, [pc, #572]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d112      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
 80011ac:	4b8c      	ldr	r3, [pc, #560]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	4b89      	ldr	r3, [pc, #548]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d06c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x12c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d168      	bne.n	80012a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e24c      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x76>
 80011dc:	4b80      	ldr	r3, [pc, #512]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a7f      	ldr	r2, [pc, #508]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e02e      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b7b      	ldr	r3, [pc, #492]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7a      	ldr	r2, [pc, #488]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b78      	ldr	r3, [pc, #480]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a77      	ldr	r2, [pc, #476]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0xbc>
 8001216:	4b72      	ldr	r3, [pc, #456]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a71      	ldr	r2, [pc, #452]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b6f      	ldr	r3, [pc, #444]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a6e      	ldr	r2, [pc, #440]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 8001230:	4b6b      	ldr	r3, [pc, #428]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6a      	ldr	r2, [pc, #424]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b68      	ldr	r3, [pc, #416]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a67      	ldr	r2, [pc, #412]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001246:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fbe2 	bl	8000a18 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fbde 	bl	8000a18 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	@ 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e200      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b5d      	ldr	r3, [pc, #372]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xe4>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fbce 	bl	8000a18 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fbca 	bl	8000a18 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	@ 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1ec      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x10c>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ae:	4b4c      	ldr	r3, [pc, #304]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ba:	4b49      	ldr	r3, [pc, #292]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
 80012c6:	4b46      	ldr	r3, [pc, #280]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b43      	ldr	r3, [pc, #268]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1c0      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4939      	ldr	r1, [pc, #228]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <HAL_RCC_OscConfig+0x270>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fb83 	bl	8000a18 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fb7f 	bl	8000a18 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e1a1      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4927      	ldr	r1, [pc, #156]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <HAL_RCC_OscConfig+0x270>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb62 	bl	8000a18 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fb5e 	bl	8000a18 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e180      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03a      	beq.n	80013f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <HAL_RCC_OscConfig+0x274>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fb42 	bl	8000a18 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fb3e 	bl	8000a18 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e160      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 face 	bl	8001958 <RCC_Delay>
 80013bc:	e01c      	b.n	80013f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_RCC_OscConfig+0x274>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fb28 	bl	8000a18 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	e00f      	b.n	80013ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fb24 	bl	8000a18 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d908      	bls.n	80013ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e146      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	42420000 	.word	0x42420000
 80013e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b92      	ldr	r3, [pc, #584]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e9      	bne.n	80013cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a6 	beq.w	8001552 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140a:	4b8b      	ldr	r3, [pc, #556]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a87      	ldr	r2, [pc, #540]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b82      	ldr	r3, [pc, #520]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d118      	bne.n	8001470 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143e:	4b7f      	ldr	r3, [pc, #508]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7e      	ldr	r2, [pc, #504]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144a:	f7ff fae5 	bl	8000a18 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7ff fae1 	bl	8000a18 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b64      	cmp	r3, #100	@ 0x64
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e103      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	4b75      	ldr	r3, [pc, #468]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x312>
 8001478:	4b6f      	ldr	r3, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a6e      	ldr	r2, [pc, #440]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e02d      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x334>
 800148e:	4b6a      	ldr	r3, [pc, #424]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a69      	ldr	r2, [pc, #420]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	4b67      	ldr	r3, [pc, #412]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a66      	ldr	r2, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	e01c      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x356>
 80014b0:	4b61      	ldr	r3, [pc, #388]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4a60      	ldr	r2, [pc, #384]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b58      	ldr	r3, [pc, #352]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a57      	ldr	r2, [pc, #348]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d015      	beq.n	8001516 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fa95 	bl	8000a18 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fa91 	bl	8000a18 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e0b1      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ee      	beq.n	80014f2 <HAL_RCC_OscConfig+0x37e>
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fa7f 	bl	8000a18 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fa7b 	bl	8000a18 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e09b      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ee      	bne.n	800151e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d105      	bne.n	8001552 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001546:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a3b      	ldr	r2, [pc, #236]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8087 	beq.w	800166a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800155c:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d061      	beq.n	800162c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d146      	bne.n	80015fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fa4f 	bl	8000a18 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fa4b 	bl	8000a18 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e06d      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a4:	d108      	bne.n	80015b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a6:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4921      	ldr	r1, [pc, #132]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a19      	ldr	r1, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	430b      	orrs	r3, r1
 80015ca:	491b      	ldr	r1, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fa1f 	bl	8000a18 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff fa1b 	bl	8000a18 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e03d      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x46a>
 80015fc:	e035      	b.n	800166a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fa08 	bl	8000a18 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fa04 	bl	8000a18 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e026      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x498>
 800162a:	e01e      	b.n	800166a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e019      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
 8001638:	40021000 	.word	0x40021000
 800163c:	40007000 	.word	0x40007000
 8001640:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_RCC_OscConfig+0x500>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	429a      	cmp	r2, r3
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0d0      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b6a      	ldr	r3, [pc, #424]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d910      	bls.n	80016bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0207 	bic.w	r2, r3, #7
 80016a2:	4965      	ldr	r1, [pc, #404]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a58      	ldr	r2, [pc, #352]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a52      	ldr	r2, [pc, #328]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d040      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d115      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b41      	ldr	r3, [pc, #260]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e073      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3d      	ldr	r3, [pc, #244]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e06b      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b39      	ldr	r3, [pc, #228]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4936      	ldr	r1, [pc, #216]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff f956 	bl	8000a18 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff f952 	bl	8000a18 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e053      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d210      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0207 	bic.w	r2, r3, #7
 80017ae:	4922      	ldr	r1, [pc, #136]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	@ (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1cc>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f8b4 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000
 800183c:	40021000 	.word	0x40021000
 8001840:	080037d0 	.word	0x080037d0
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001866:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b04      	cmp	r3, #4
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x30>
 8001876:	2b08      	cmp	r3, #8
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x36>
 800187a:	e027      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800187e:	613b      	str	r3, [r7, #16]
      break;
 8001880:	e027      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	0c9b      	lsrs	r3, r3, #18
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c5b      	lsrs	r3, r3, #17
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	4a11      	ldr	r2, [pc, #68]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80018a6:	5cd3      	ldrb	r3, [r2, r3]
 80018a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ae:	fb03 f202 	mul.w	r2, r3, r2
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e004      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a0c      	ldr	r2, [pc, #48]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	613b      	str	r3, [r7, #16]
      break;
 80018ca:	e002      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ce:	613b      	str	r3, [r7, #16]
      break;
 80018d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d2:	693b      	ldr	r3, [r7, #16]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	007a1200 	.word	0x007a1200
 80018e8:	080037e8 	.word	0x080037e8
 80018ec:	080037f8 	.word	0x080037f8
 80018f0:	003d0900 	.word	0x003d0900

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b02      	ldr	r3, [pc, #8]	@ (8001904 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff2 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	@ (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	080037e0 	.word	0x080037e0

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffde 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0adb      	lsrs	r3, r3, #11
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	@ (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	080037e0 	.word	0x080037e0

08001958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001960:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <RCC_Delay+0x34>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <RCC_Delay+0x38>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a5b      	lsrs	r3, r3, #9
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001974:	bf00      	nop
  }
  while (Delay --);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	60fa      	str	r2, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f9      	bne.n	8001974 <RCC_Delay+0x1c>
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000000 	.word	0x20000000
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e041      	b.n	8001a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe fdfe 	bl	80005bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3304      	adds	r3, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f000 fa5c 	bl	8001e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d001      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e03a      	b.n	8001ac2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a18      	ldr	r2, [pc, #96]	@ (8001acc <HAL_TIM_Base_Start_IT+0x98>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00e      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0x58>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a76:	d009      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0x58>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d004      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0x58>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a13      	ldr	r2, [pc, #76]	@ (8001ad4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d010      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aae:	e007      	b.n	8001ac0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40000800 	.word	0x40000800

08001ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d020      	beq.n	8001b3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01b      	beq.n	8001b3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0202 	mvn.w	r2, #2
 8001b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f998 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001b28:	e005      	b.n	8001b36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f98b 	bl	8001e46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f99a 	bl	8001e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d020      	beq.n	8001b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0204 	mvn.w	r2, #4
 8001b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f972 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001b74:	e005      	b.n	8001b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f965 	bl	8001e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f974 	bl	8001e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d020      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01b      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0208 	mvn.w	r2, #8
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f94c 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f93f 	bl	8001e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f94e 	bl	8001e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d020      	beq.n	8001c20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0210 	mvn.w	r2, #16
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f926 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f919 	bl	8001e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f928 	bl	8001e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00c      	beq.n	8001c44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0201 	mvn.w	r2, #1
 8001c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7fe fc5c 	bl	80004fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00c      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fa7f 	bl	8002166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8f8 	bl	8001e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0220 	mvn.w	r2, #32
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fa52 	bl	8002154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e0b4      	b.n	8001e3e <HAL_TIM_ConfigClockSource+0x186>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d0c:	d03e      	beq.n	8001d8c <HAL_TIM_ConfigClockSource+0xd4>
 8001d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d12:	f200 8087 	bhi.w	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d1a:	f000 8086 	beq.w	8001e2a <HAL_TIM_ConfigClockSource+0x172>
 8001d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d22:	d87f      	bhi.n	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d24:	2b70      	cmp	r3, #112	@ 0x70
 8001d26:	d01a      	beq.n	8001d5e <HAL_TIM_ConfigClockSource+0xa6>
 8001d28:	2b70      	cmp	r3, #112	@ 0x70
 8001d2a:	d87b      	bhi.n	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d2c:	2b60      	cmp	r3, #96	@ 0x60
 8001d2e:	d050      	beq.n	8001dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8001d30:	2b60      	cmp	r3, #96	@ 0x60
 8001d32:	d877      	bhi.n	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d34:	2b50      	cmp	r3, #80	@ 0x50
 8001d36:	d03c      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0xfa>
 8001d38:	2b50      	cmp	r3, #80	@ 0x50
 8001d3a:	d873      	bhi.n	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d3c:	2b40      	cmp	r3, #64	@ 0x40
 8001d3e:	d058      	beq.n	8001df2 <HAL_TIM_ConfigClockSource+0x13a>
 8001d40:	2b40      	cmp	r3, #64	@ 0x40
 8001d42:	d86f      	bhi.n	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d44:	2b30      	cmp	r3, #48	@ 0x30
 8001d46:	d064      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0x15a>
 8001d48:	2b30      	cmp	r3, #48	@ 0x30
 8001d4a:	d86b      	bhi.n	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d060      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0x15a>
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d867      	bhi.n	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d05c      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0x15a>
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d05a      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0x15a>
 8001d5c:	e062      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d6e:	f000 f974 	bl	800205a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	609a      	str	r2, [r3, #8]
      break;
 8001d8a:	e04f      	b.n	8001e2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d9c:	f000 f95d 	bl	800205a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dae:	609a      	str	r2, [r3, #8]
      break;
 8001db0:	e03c      	b.n	8001e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f000 f8d4 	bl	8001f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2150      	movs	r1, #80	@ 0x50
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f92b 	bl	8002026 <TIM_ITRx_SetConfig>
      break;
 8001dd0:	e02c      	b.n	8001e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dde:	461a      	mov	r2, r3
 8001de0:	f000 f8f2 	bl	8001fc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2160      	movs	r1, #96	@ 0x60
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f91b 	bl	8002026 <TIM_ITRx_SetConfig>
      break;
 8001df0:	e01c      	b.n	8001e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f000 f8b4 	bl	8001f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2140      	movs	r1, #64	@ 0x40
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f90b 	bl	8002026 <TIM_ITRx_SetConfig>
      break;
 8001e10:	e00c      	b.n	8001e2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f000 f902 	bl	8002026 <TIM_ITRx_SetConfig>
      break;
 8001e22:	e003      	b.n	8001e2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      break;
 8001e28:	e000      	b.n	8001e2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
	...

08001e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f60 <TIM_Base_SetConfig+0xd0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00b      	beq.n	8001ec0 <TIM_Base_SetConfig+0x30>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eae:	d007      	beq.n	8001ec0 <TIM_Base_SetConfig+0x30>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f64 <TIM_Base_SetConfig+0xd4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <TIM_Base_SetConfig+0x30>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <TIM_Base_SetConfig+0xd8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d108      	bne.n	8001ed2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <TIM_Base_SetConfig+0xd0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00b      	beq.n	8001ef2 <TIM_Base_SetConfig+0x62>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee0:	d007      	beq.n	8001ef2 <TIM_Base_SetConfig+0x62>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f64 <TIM_Base_SetConfig+0xd4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d003      	beq.n	8001ef2 <TIM_Base_SetConfig+0x62>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <TIM_Base_SetConfig+0xd8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d108      	bne.n	8001f04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <TIM_Base_SetConfig+0xd0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d103      	bne.n	8001f38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f023 0201 	bic.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	611a      	str	r2, [r3, #16]
  }
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	40012c00 	.word	0x40012c00
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800

08001f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	f023 0201 	bic.w	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f023 030a 	bic.w	r3, r3, #10
 8001fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	621a      	str	r2, [r3, #32]
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f023 0210 	bic.w	r2, r3, #16
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	031b      	lsls	r3, r3, #12
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002004:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	621a      	str	r2, [r3, #32]
}
 800201c:	bf00      	nop
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800203c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	f043 0307 	orr.w	r3, r3, #7
 8002048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800205a:	b480      	push	{r7}
 800205c:	b087      	sub	sp, #28
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002074:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	021a      	lsls	r2, r3, #8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	431a      	orrs	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	4313      	orrs	r3, r2
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	609a      	str	r2, [r3, #8]
}
 800208e:	bf00      	nop
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e046      	b.n	800213e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a16      	ldr	r2, [pc, #88]	@ (8002148 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00e      	beq.n	8002112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fc:	d009      	beq.n	8002112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a12      	ldr	r2, [pc, #72]	@ (800214c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d004      	beq.n	8002112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10c      	bne.n	800212c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	4313      	orrs	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800

08002154 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e042      	b.n	8002210 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fa30 	bl	8000604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	@ 0x24
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fde5 	bl	8002d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b20      	cmp	r3, #32
 8002236:	d175      	bne.n	8002324 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_UART_Transmit+0x2c>
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e06e      	b.n	8002326 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2221      	movs	r2, #33	@ 0x21
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002256:	f7fe fbdf 	bl	8000a18 <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002270:	d108      	bne.n	8002284 <HAL_UART_Transmit+0x6c>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e003      	b.n	800228c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800228c:	e02e      	b.n	80022ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	2180      	movs	r1, #128	@ 0x80
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fb49 	bl	8002930 <UART_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e03a      	b.n	8002326 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3302      	adds	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	e007      	b.n	80022de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1cb      	bne.n	800228e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2200      	movs	r2, #0
 80022fe:	2140      	movs	r1, #64	@ 0x40
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fb15 	bl	8002930 <UART_WaitOnFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e006      	b.n	8002326 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	4613      	mov	r3, r2
 800233a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b20      	cmp	r3, #32
 8002346:	d121      	bne.n	800238c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_UART_Transmit_IT+0x26>
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e01a      	b.n	800238e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2221      	movs	r2, #33	@ 0x21
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002386:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d112      	bne.n	80023d8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_UART_Receive_IT+0x26>
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00b      	b.n	80023da <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fb07 	bl	80029e2 <UART_Start_Receive_IT>
 80023d4:	4603      	mov	r3, r0
 80023d6:	e000      	b.n	80023da <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0ba      	sub	sp, #232	@ 0xe8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_UART_IRQHandler+0x66>
 8002436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fbe3 	bl	8002c0e <UART_Receive_IT>
      return;
 8002448:	e25b      	b.n	8002902 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800244a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80de 	beq.w	8002610 <HAL_UART_IRQHandler+0x22c>
 8002454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d106      	bne.n	800246e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002464:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80d1 	beq.w	8002610 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800246e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_UART_IRQHandler+0xae>
 800247a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <HAL_UART_IRQHandler+0xd2>
 800249e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_UART_IRQHandler+0xf6>
 80024c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	f043 0204 	orr.w	r2, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d011      	beq.n	800250a <HAL_UART_IRQHandler+0x126>
 80024e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f043 0208 	orr.w	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 81f2 	beq.w	80028f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_UART_IRQHandler+0x14e>
 8002520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fb6e 	bl	8002c0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_UART_IRQHandler+0x17a>
 8002556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d04f      	beq.n	80025fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa78 	bl	8002a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d041      	beq.n	80025f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3314      	adds	r3, #20
 8002578:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002580:	e853 3f00 	ldrex	r3, [r3]
 8002584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002588:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800258c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002590:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800259e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1d9      	bne.n	8002572 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d013      	beq.n	80025ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ca:	4a7e      	ldr	r2, [pc, #504]	@ (80027c4 <HAL_UART_IRQHandler+0x3e0>)
 80025cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fb72 	bl	8000cbc <HAL_DMA_Abort_IT>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025e8:	4610      	mov	r0, r2
 80025ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ec:	e00e      	b.n	800260c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f98a 	bl	8002908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	e00a      	b.n	800260c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f986 	bl	8002908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	e006      	b.n	800260c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f982 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800260a:	e175      	b.n	80028f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	bf00      	nop
    return;
 800260e:	e173      	b.n	80028f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 814f 	bne.w	80028b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8148 	beq.w	80028b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8141 	beq.w	80028b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80b6 	beq.w	80027c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002668:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8145 	beq.w	80028fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800267a:	429a      	cmp	r2, r3
 800267c:	f080 813e 	bcs.w	80028fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002686:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b20      	cmp	r3, #32
 8002690:	f000 8088 	beq.w	80027a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026a2:	e853 3f00 	ldrex	r3, [r3]
 80026a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026d0:	e841 2300 	strex	r3, r2, [r1]
 80026d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80026d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1d9      	bne.n	8002694 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3314      	adds	r3, #20
 80026e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ea:	e853 3f00 	ldrex	r3, [r3]
 80026ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80026f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3314      	adds	r3, #20
 8002700:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002704:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002708:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800270c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002710:	e841 2300 	strex	r3, r2, [r1]
 8002714:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e1      	bne.n	80026e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3314      	adds	r3, #20
 8002722:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002726:	e853 3f00 	ldrex	r3, [r3]
 800272a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800272c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800272e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002740:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002742:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002744:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002746:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002748:	e841 2300 	strex	r3, r2, [r1]
 800274c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800274e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e3      	bne.n	800271c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	330c      	adds	r3, #12
 8002768:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800276c:	e853 3f00 	ldrex	r3, [r3]
 8002770:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002774:	f023 0310 	bic.w	r3, r3, #16
 8002778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002786:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002788:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800278c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e3      	bne.n	8002762 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fa51 	bl	8000c46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8ad 	bl	800291a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027c0:	e09c      	b.n	80028fc <HAL_UART_IRQHandler+0x518>
 80027c2:	bf00      	nop
 80027c4:	08002b19 	.word	0x08002b19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 808e 	beq.w	8002900 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8089 	beq.w	8002900 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80027fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002804:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002812:	647a      	str	r2, [r7, #68]	@ 0x44
 8002814:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e3      	bne.n	80027ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3314      	adds	r3, #20
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	623b      	str	r3, [r7, #32]
   return(result);
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3314      	adds	r3, #20
 8002846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800284a:	633a      	str	r2, [r7, #48]	@ 0x30
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e3      	bne.n	8002826 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	e853 3f00 	ldrex	r3, [r3]
 800287a:	60fb      	str	r3, [r7, #12]
   return(result);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0310 	bic.w	r3, r3, #16
 8002882:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002890:	61fa      	str	r2, [r7, #28]
 8002892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002894:	69b9      	ldr	r1, [r7, #24]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	e841 2300 	strex	r3, r2, [r1]
 800289c:	617b      	str	r3, [r7, #20]
   return(result);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e3      	bne.n	800286c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f832 	bl	800291a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028b6:	e023      	b.n	8002900 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <HAL_UART_IRQHandler+0x4f4>
 80028c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f935 	bl	8002b40 <UART_Transmit_IT>
    return;
 80028d6:	e014      	b.n	8002902 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00e      	beq.n	8002902 <HAL_UART_IRQHandler+0x51e>
 80028e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f974 	bl	8002bde <UART_EndTransmit_IT>
    return;
 80028f6:	e004      	b.n	8002902 <HAL_UART_IRQHandler+0x51e>
    return;
 80028f8:	bf00      	nop
 80028fa:	e002      	b.n	8002902 <HAL_UART_IRQHandler+0x51e>
      return;
 80028fc:	bf00      	nop
 80028fe:	e000      	b.n	8002902 <HAL_UART_IRQHandler+0x51e>
      return;
 8002900:	bf00      	nop
  }
}
 8002902:	37e8      	adds	r7, #232	@ 0xe8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002940:	e03b      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d037      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7fe f865 	bl	8000a18 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <UART_WaitOnFlagUntilTimeout+0x30>
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e03a      	b.n	80029da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d023      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b80      	cmp	r3, #128	@ 0x80
 8002976:	d020      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b40      	cmp	r3, #64	@ 0x40
 800297c:	d01d      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d116      	bne.n	80029ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f856 	bl	8002a54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2208      	movs	r2, #8
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00f      	b.n	80029da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d0b4      	beq.n	8002942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	4613      	mov	r3, r2
 80029ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2222      	movs	r2, #34	@ 0x22
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0220 	orr.w	r2, r2, #32
 8002a46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b095      	sub	sp, #84	@ 0x54
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	330c      	adds	r3, #12
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a66:	e853 3f00 	ldrex	r3, [r3]
 8002a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a84:	e841 2300 	strex	r3, r2, [r1]
 8002a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e5      	bne.n	8002a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3314      	adds	r3, #20
 8002a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3314      	adds	r3, #20
 8002aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e5      	bne.n	8002a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d119      	bne.n	8002b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f023 0310 	bic.w	r3, r3, #16
 8002ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aec:	61ba      	str	r2, [r7, #24]
 8002aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af0:	6979      	ldr	r1, [r7, #20]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	e841 2300 	strex	r3, r2, [r1]
 8002af8:	613b      	str	r3, [r7, #16]
   return(result);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e5      	bne.n	8002acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b0e:	bf00      	nop
 8002b10:	3754      	adds	r7, #84	@ 0x54
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff fee8 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b21      	cmp	r3, #33	@ 0x21
 8002b52:	d13e      	bne.n	8002bd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b5c:	d114      	bne.n	8002b88 <UART_Transmit_IT+0x48>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d110      	bne.n	8002b88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	621a      	str	r2, [r3, #32]
 8002b86:	e008      	b.n	8002b9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	1c59      	adds	r1, r3, #1
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6211      	str	r1, [r2, #32]
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
  }
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fd fc52 	bl	80004a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b08c      	sub	sp, #48	@ 0x30
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b22      	cmp	r3, #34	@ 0x22
 8002c20:	f040 80ae 	bne.w	8002d80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c2c:	d117      	bne.n	8002c5e <UART_Receive_IT+0x50>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d113      	bne.n	8002c5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	1c9a      	adds	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c5c:	e026      	b.n	8002cac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c70:	d007      	beq.n	8002c82 <UART_Receive_IT+0x74>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <UART_Receive_IT+0x82>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e008      	b.n	8002ca2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d15d      	bne.n	8002d7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0220 	bic.w	r2, r2, #32
 8002cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d135      	bne.n	8002d72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f023 0310 	bic.w	r3, r3, #16
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	623a      	str	r2, [r7, #32]
 8002d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	69f9      	ldr	r1, [r7, #28]
 8002d32:	6a3a      	ldr	r2, [r7, #32]
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e5      	bne.n	8002d0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d10a      	bne.n	8002d64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fdd5 	bl	800291a <HAL_UARTEx_RxEventCallback>
 8002d70:	e002      	b.n	8002d78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd fb68 	bl	8000448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e002      	b.n	8002d82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3730      	adds	r7, #48	@ 0x30
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002dc6:	f023 030c 	bic.w	r3, r3, #12
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <UART_SetConfig+0x114>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d103      	bne.n	8002dfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7fe fd9c 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	e002      	b.n	8002e02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7fe fd84 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002e00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <UART_SetConfig+0x118>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	0119      	lsls	r1, r3, #4
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <UART_SetConfig+0x118>)
 8002e3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	2064      	movs	r0, #100	@ 0x64
 8002e42:	fb00 f303 	mul.w	r3, r0, r3
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	3332      	adds	r3, #50	@ 0x32
 8002e4c:	4a15      	ldr	r2, [pc, #84]	@ (8002ea4 <UART_SetConfig+0x118>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e58:	4419      	add	r1, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009a      	lsls	r2, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <UART_SetConfig+0x118>)
 8002e72:	fba3 0302 	umull	r0, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2064      	movs	r0, #100	@ 0x64
 8002e7a:	fb00 f303 	mul.w	r3, r0, r3
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	3332      	adds	r3, #50	@ 0x32
 8002e84:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <UART_SetConfig+0x118>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	440a      	add	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	51eb851f 	.word	0x51eb851f

08002ea8 <std>:
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	b510      	push	{r4, lr}
 8002eac:	4604      	mov	r4, r0
 8002eae:	e9c0 3300 	strd	r3, r3, [r0]
 8002eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eb6:	6083      	str	r3, [r0, #8]
 8002eb8:	8181      	strh	r1, [r0, #12]
 8002eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ebc:	81c2      	strh	r2, [r0, #14]
 8002ebe:	6183      	str	r3, [r0, #24]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	305c      	adds	r0, #92	@ 0x5c
 8002ec6:	f000 f8fc 	bl	80030c2 <memset>
 8002eca:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <std+0x58>)
 8002ecc:	6224      	str	r4, [r4, #32]
 8002ece:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <std+0x5c>)
 8002ed2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <std+0x60>)
 8002ed6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <std+0x64>)
 8002eda:	6323      	str	r3, [r4, #48]	@ 0x30
 8002edc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f10 <std+0x68>)
 8002ede:	429c      	cmp	r4, r3
 8002ee0:	d006      	beq.n	8002ef0 <std+0x48>
 8002ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ee6:	4294      	cmp	r4, r2
 8002ee8:	d002      	beq.n	8002ef0 <std+0x48>
 8002eea:	33d0      	adds	r3, #208	@ 0xd0
 8002eec:	429c      	cmp	r4, r3
 8002eee:	d105      	bne.n	8002efc <std+0x54>
 8002ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef8:	f000 b95c 	b.w	80031b4 <__retarget_lock_init_recursive>
 8002efc:	bd10      	pop	{r4, pc}
 8002efe:	bf00      	nop
 8002f00:	0800303d 	.word	0x0800303d
 8002f04:	0800305f 	.word	0x0800305f
 8002f08:	08003097 	.word	0x08003097
 8002f0c:	080030bb 	.word	0x080030bb
 8002f10:	20000168 	.word	0x20000168

08002f14 <stdio_exit_handler>:
 8002f14:	4a02      	ldr	r2, [pc, #8]	@ (8002f20 <stdio_exit_handler+0xc>)
 8002f16:	4903      	ldr	r1, [pc, #12]	@ (8002f24 <stdio_exit_handler+0x10>)
 8002f18:	4803      	ldr	r0, [pc, #12]	@ (8002f28 <stdio_exit_handler+0x14>)
 8002f1a:	f000 b869 	b.w	8002ff0 <_fwalk_sglue>
 8002f1e:	bf00      	nop
 8002f20:	2000000c 	.word	0x2000000c
 8002f24:	080034a9 	.word	0x080034a9
 8002f28:	2000001c 	.word	0x2000001c

08002f2c <cleanup_stdio>:
 8002f2c:	6841      	ldr	r1, [r0, #4]
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <cleanup_stdio+0x34>)
 8002f30:	b510      	push	{r4, lr}
 8002f32:	4299      	cmp	r1, r3
 8002f34:	4604      	mov	r4, r0
 8002f36:	d001      	beq.n	8002f3c <cleanup_stdio+0x10>
 8002f38:	f000 fab6 	bl	80034a8 <_fflush_r>
 8002f3c:	68a1      	ldr	r1, [r4, #8]
 8002f3e:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <cleanup_stdio+0x38>)
 8002f40:	4299      	cmp	r1, r3
 8002f42:	d002      	beq.n	8002f4a <cleanup_stdio+0x1e>
 8002f44:	4620      	mov	r0, r4
 8002f46:	f000 faaf 	bl	80034a8 <_fflush_r>
 8002f4a:	68e1      	ldr	r1, [r4, #12]
 8002f4c:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <cleanup_stdio+0x3c>)
 8002f4e:	4299      	cmp	r1, r3
 8002f50:	d004      	beq.n	8002f5c <cleanup_stdio+0x30>
 8002f52:	4620      	mov	r0, r4
 8002f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f58:	f000 baa6 	b.w	80034a8 <_fflush_r>
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000168 	.word	0x20000168
 8002f64:	200001d0 	.word	0x200001d0
 8002f68:	20000238 	.word	0x20000238

08002f6c <global_stdio_init.part.0>:
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <global_stdio_init.part.0+0x30>)
 8002f70:	4c0b      	ldr	r4, [pc, #44]	@ (8002fa0 <global_stdio_init.part.0+0x34>)
 8002f72:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa4 <global_stdio_init.part.0+0x38>)
 8002f74:	4620      	mov	r0, r4
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	2104      	movs	r1, #4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f7ff ff94 	bl	8002ea8 <std>
 8002f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f84:	2201      	movs	r2, #1
 8002f86:	2109      	movs	r1, #9
 8002f88:	f7ff ff8e 	bl	8002ea8 <std>
 8002f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f90:	2202      	movs	r2, #2
 8002f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f96:	2112      	movs	r1, #18
 8002f98:	f7ff bf86 	b.w	8002ea8 <std>
 8002f9c:	200002a0 	.word	0x200002a0
 8002fa0:	20000168 	.word	0x20000168
 8002fa4:	08002f15 	.word	0x08002f15

08002fa8 <__sfp_lock_acquire>:
 8002fa8:	4801      	ldr	r0, [pc, #4]	@ (8002fb0 <__sfp_lock_acquire+0x8>)
 8002faa:	f000 b904 	b.w	80031b6 <__retarget_lock_acquire_recursive>
 8002fae:	bf00      	nop
 8002fb0:	200002a9 	.word	0x200002a9

08002fb4 <__sfp_lock_release>:
 8002fb4:	4801      	ldr	r0, [pc, #4]	@ (8002fbc <__sfp_lock_release+0x8>)
 8002fb6:	f000 b8ff 	b.w	80031b8 <__retarget_lock_release_recursive>
 8002fba:	bf00      	nop
 8002fbc:	200002a9 	.word	0x200002a9

08002fc0 <__sinit>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	f7ff fff0 	bl	8002fa8 <__sfp_lock_acquire>
 8002fc8:	6a23      	ldr	r3, [r4, #32]
 8002fca:	b11b      	cbz	r3, 8002fd4 <__sinit+0x14>
 8002fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd0:	f7ff bff0 	b.w	8002fb4 <__sfp_lock_release>
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <__sinit+0x28>)
 8002fd6:	6223      	str	r3, [r4, #32]
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <__sinit+0x2c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f5      	bne.n	8002fcc <__sinit+0xc>
 8002fe0:	f7ff ffc4 	bl	8002f6c <global_stdio_init.part.0>
 8002fe4:	e7f2      	b.n	8002fcc <__sinit+0xc>
 8002fe6:	bf00      	nop
 8002fe8:	08002f2d 	.word	0x08002f2d
 8002fec:	200002a0 	.word	0x200002a0

08002ff0 <_fwalk_sglue>:
 8002ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff4:	4607      	mov	r7, r0
 8002ff6:	4688      	mov	r8, r1
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	2600      	movs	r6, #0
 8002ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003000:	f1b9 0901 	subs.w	r9, r9, #1
 8003004:	d505      	bpl.n	8003012 <_fwalk_sglue+0x22>
 8003006:	6824      	ldr	r4, [r4, #0]
 8003008:	2c00      	cmp	r4, #0
 800300a:	d1f7      	bne.n	8002ffc <_fwalk_sglue+0xc>
 800300c:	4630      	mov	r0, r6
 800300e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003012:	89ab      	ldrh	r3, [r5, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d907      	bls.n	8003028 <_fwalk_sglue+0x38>
 8003018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800301c:	3301      	adds	r3, #1
 800301e:	d003      	beq.n	8003028 <_fwalk_sglue+0x38>
 8003020:	4629      	mov	r1, r5
 8003022:	4638      	mov	r0, r7
 8003024:	47c0      	blx	r8
 8003026:	4306      	orrs	r6, r0
 8003028:	3568      	adds	r5, #104	@ 0x68
 800302a:	e7e9      	b.n	8003000 <_fwalk_sglue+0x10>

0800302c <putchar>:
 800302c:	4b02      	ldr	r3, [pc, #8]	@ (8003038 <putchar+0xc>)
 800302e:	4601      	mov	r1, r0
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	6882      	ldr	r2, [r0, #8]
 8003034:	f000 ba60 	b.w	80034f8 <_putc_r>
 8003038:	20000018 	.word	0x20000018

0800303c <__sread>:
 800303c:	b510      	push	{r4, lr}
 800303e:	460c      	mov	r4, r1
 8003040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003044:	f000 f868 	bl	8003118 <_read_r>
 8003048:	2800      	cmp	r0, #0
 800304a:	bfab      	itete	ge
 800304c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800304e:	89a3      	ldrhlt	r3, [r4, #12]
 8003050:	181b      	addge	r3, r3, r0
 8003052:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003056:	bfac      	ite	ge
 8003058:	6563      	strge	r3, [r4, #84]	@ 0x54
 800305a:	81a3      	strhlt	r3, [r4, #12]
 800305c:	bd10      	pop	{r4, pc}

0800305e <__swrite>:
 800305e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003062:	461f      	mov	r7, r3
 8003064:	898b      	ldrh	r3, [r1, #12]
 8003066:	4605      	mov	r5, r0
 8003068:	05db      	lsls	r3, r3, #23
 800306a:	460c      	mov	r4, r1
 800306c:	4616      	mov	r6, r2
 800306e:	d505      	bpl.n	800307c <__swrite+0x1e>
 8003070:	2302      	movs	r3, #2
 8003072:	2200      	movs	r2, #0
 8003074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003078:	f000 f83c 	bl	80030f4 <_lseek_r>
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	4632      	mov	r2, r6
 8003080:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	4628      	mov	r0, r5
 8003088:	463b      	mov	r3, r7
 800308a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800308e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003092:	f000 b853 	b.w	800313c <_write_r>

08003096 <__sseek>:
 8003096:	b510      	push	{r4, lr}
 8003098:	460c      	mov	r4, r1
 800309a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800309e:	f000 f829 	bl	80030f4 <_lseek_r>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	89a3      	ldrh	r3, [r4, #12]
 80030a6:	bf15      	itete	ne
 80030a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80030aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80030ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80030b2:	81a3      	strheq	r3, [r4, #12]
 80030b4:	bf18      	it	ne
 80030b6:	81a3      	strhne	r3, [r4, #12]
 80030b8:	bd10      	pop	{r4, pc}

080030ba <__sclose>:
 80030ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030be:	f000 b809 	b.w	80030d4 <_close_r>

080030c2 <memset>:
 80030c2:	4603      	mov	r3, r0
 80030c4:	4402      	add	r2, r0
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d100      	bne.n	80030cc <memset+0xa>
 80030ca:	4770      	bx	lr
 80030cc:	f803 1b01 	strb.w	r1, [r3], #1
 80030d0:	e7f9      	b.n	80030c6 <memset+0x4>
	...

080030d4 <_close_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	2300      	movs	r3, #0
 80030d8:	4d05      	ldr	r5, [pc, #20]	@ (80030f0 <_close_r+0x1c>)
 80030da:	4604      	mov	r4, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	602b      	str	r3, [r5, #0]
 80030e0:	f7fd fbaf 	bl	8000842 <_close>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_close_r+0x1a>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_close_r+0x1a>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	200002a4 	.word	0x200002a4

080030f4 <_lseek_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	2200      	movs	r2, #0
 80030fe:	4d05      	ldr	r5, [pc, #20]	@ (8003114 <_lseek_r+0x20>)
 8003100:	602a      	str	r2, [r5, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	f7fd fbc1 	bl	800088a <_lseek>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d102      	bne.n	8003112 <_lseek_r+0x1e>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	b103      	cbz	r3, 8003112 <_lseek_r+0x1e>
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	bd38      	pop	{r3, r4, r5, pc}
 8003114:	200002a4 	.word	0x200002a4

08003118 <_read_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	4604      	mov	r4, r0
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	2200      	movs	r2, #0
 8003122:	4d05      	ldr	r5, [pc, #20]	@ (8003138 <_read_r+0x20>)
 8003124:	602a      	str	r2, [r5, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	f7fd fb52 	bl	80007d0 <_read>
 800312c:	1c43      	adds	r3, r0, #1
 800312e:	d102      	bne.n	8003136 <_read_r+0x1e>
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	b103      	cbz	r3, 8003136 <_read_r+0x1e>
 8003134:	6023      	str	r3, [r4, #0]
 8003136:	bd38      	pop	{r3, r4, r5, pc}
 8003138:	200002a4 	.word	0x200002a4

0800313c <_write_r>:
 800313c:	b538      	push	{r3, r4, r5, lr}
 800313e:	4604      	mov	r4, r0
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	2200      	movs	r2, #0
 8003146:	4d05      	ldr	r5, [pc, #20]	@ (800315c <_write_r+0x20>)
 8003148:	602a      	str	r2, [r5, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	f7fd fb5d 	bl	800080a <_write>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d102      	bne.n	800315a <_write_r+0x1e>
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	b103      	cbz	r3, 800315a <_write_r+0x1e>
 8003158:	6023      	str	r3, [r4, #0]
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	200002a4 	.word	0x200002a4

08003160 <__errno>:
 8003160:	4b01      	ldr	r3, [pc, #4]	@ (8003168 <__errno+0x8>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000018 	.word	0x20000018

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	2600      	movs	r6, #0
 8003170:	4d0c      	ldr	r5, [pc, #48]	@ (80031a4 <__libc_init_array+0x38>)
 8003172:	4c0d      	ldr	r4, [pc, #52]	@ (80031a8 <__libc_init_array+0x3c>)
 8003174:	1b64      	subs	r4, r4, r5
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	42a6      	cmp	r6, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	f000 fb18 	bl	80037b0 <_init>
 8003180:	2600      	movs	r6, #0
 8003182:	4d0a      	ldr	r5, [pc, #40]	@ (80031ac <__libc_init_array+0x40>)
 8003184:	4c0a      	ldr	r4, [pc, #40]	@ (80031b0 <__libc_init_array+0x44>)
 8003186:	1b64      	subs	r4, r4, r5
 8003188:	10a4      	asrs	r4, r4, #2
 800318a:	42a6      	cmp	r6, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f855 3b04 	ldr.w	r3, [r5], #4
 8003194:	4798      	blx	r3
 8003196:	3601      	adds	r6, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f855 3b04 	ldr.w	r3, [r5], #4
 800319e:	4798      	blx	r3
 80031a0:	3601      	adds	r6, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	080037fc 	.word	0x080037fc
 80031a8:	080037fc 	.word	0x080037fc
 80031ac:	080037fc 	.word	0x080037fc
 80031b0:	08003800 	.word	0x08003800

080031b4 <__retarget_lock_init_recursive>:
 80031b4:	4770      	bx	lr

080031b6 <__retarget_lock_acquire_recursive>:
 80031b6:	4770      	bx	lr

080031b8 <__retarget_lock_release_recursive>:
 80031b8:	4770      	bx	lr
	...

080031bc <_free_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4605      	mov	r5, r0
 80031c0:	2900      	cmp	r1, #0
 80031c2:	d040      	beq.n	8003246 <_free_r+0x8a>
 80031c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031c8:	1f0c      	subs	r4, r1, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bfb8      	it	lt
 80031ce:	18e4      	addlt	r4, r4, r3
 80031d0:	f000 f8de 	bl	8003390 <__malloc_lock>
 80031d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003248 <_free_r+0x8c>)
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	b933      	cbnz	r3, 80031e8 <_free_r+0x2c>
 80031da:	6063      	str	r3, [r4, #4]
 80031dc:	6014      	str	r4, [r2, #0]
 80031de:	4628      	mov	r0, r5
 80031e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031e4:	f000 b8da 	b.w	800339c <__malloc_unlock>
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	d908      	bls.n	80031fe <_free_r+0x42>
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	1821      	adds	r1, r4, r0
 80031f0:	428b      	cmp	r3, r1
 80031f2:	bf01      	itttt	eq
 80031f4:	6819      	ldreq	r1, [r3, #0]
 80031f6:	685b      	ldreq	r3, [r3, #4]
 80031f8:	1809      	addeq	r1, r1, r0
 80031fa:	6021      	streq	r1, [r4, #0]
 80031fc:	e7ed      	b.n	80031da <_free_r+0x1e>
 80031fe:	461a      	mov	r2, r3
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	b10b      	cbz	r3, 8003208 <_free_r+0x4c>
 8003204:	42a3      	cmp	r3, r4
 8003206:	d9fa      	bls.n	80031fe <_free_r+0x42>
 8003208:	6811      	ldr	r1, [r2, #0]
 800320a:	1850      	adds	r0, r2, r1
 800320c:	42a0      	cmp	r0, r4
 800320e:	d10b      	bne.n	8003228 <_free_r+0x6c>
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	4401      	add	r1, r0
 8003214:	1850      	adds	r0, r2, r1
 8003216:	4283      	cmp	r3, r0
 8003218:	6011      	str	r1, [r2, #0]
 800321a:	d1e0      	bne.n	80031de <_free_r+0x22>
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4408      	add	r0, r1
 8003222:	6010      	str	r0, [r2, #0]
 8003224:	6053      	str	r3, [r2, #4]
 8003226:	e7da      	b.n	80031de <_free_r+0x22>
 8003228:	d902      	bls.n	8003230 <_free_r+0x74>
 800322a:	230c      	movs	r3, #12
 800322c:	602b      	str	r3, [r5, #0]
 800322e:	e7d6      	b.n	80031de <_free_r+0x22>
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	1821      	adds	r1, r4, r0
 8003234:	428b      	cmp	r3, r1
 8003236:	bf01      	itttt	eq
 8003238:	6819      	ldreq	r1, [r3, #0]
 800323a:	685b      	ldreq	r3, [r3, #4]
 800323c:	1809      	addeq	r1, r1, r0
 800323e:	6021      	streq	r1, [r4, #0]
 8003240:	6063      	str	r3, [r4, #4]
 8003242:	6054      	str	r4, [r2, #4]
 8003244:	e7cb      	b.n	80031de <_free_r+0x22>
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	200002b0 	.word	0x200002b0

0800324c <sbrk_aligned>:
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	4e0f      	ldr	r6, [pc, #60]	@ (800328c <sbrk_aligned+0x40>)
 8003250:	460c      	mov	r4, r1
 8003252:	6831      	ldr	r1, [r6, #0]
 8003254:	4605      	mov	r5, r0
 8003256:	b911      	cbnz	r1, 800325e <sbrk_aligned+0x12>
 8003258:	f000 fa16 	bl	8003688 <_sbrk_r>
 800325c:	6030      	str	r0, [r6, #0]
 800325e:	4621      	mov	r1, r4
 8003260:	4628      	mov	r0, r5
 8003262:	f000 fa11 	bl	8003688 <_sbrk_r>
 8003266:	1c43      	adds	r3, r0, #1
 8003268:	d103      	bne.n	8003272 <sbrk_aligned+0x26>
 800326a:	f04f 34ff 	mov.w	r4, #4294967295
 800326e:	4620      	mov	r0, r4
 8003270:	bd70      	pop	{r4, r5, r6, pc}
 8003272:	1cc4      	adds	r4, r0, #3
 8003274:	f024 0403 	bic.w	r4, r4, #3
 8003278:	42a0      	cmp	r0, r4
 800327a:	d0f8      	beq.n	800326e <sbrk_aligned+0x22>
 800327c:	1a21      	subs	r1, r4, r0
 800327e:	4628      	mov	r0, r5
 8003280:	f000 fa02 	bl	8003688 <_sbrk_r>
 8003284:	3001      	adds	r0, #1
 8003286:	d1f2      	bne.n	800326e <sbrk_aligned+0x22>
 8003288:	e7ef      	b.n	800326a <sbrk_aligned+0x1e>
 800328a:	bf00      	nop
 800328c:	200002ac 	.word	0x200002ac

08003290 <_malloc_r>:
 8003290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003294:	1ccd      	adds	r5, r1, #3
 8003296:	f025 0503 	bic.w	r5, r5, #3
 800329a:	3508      	adds	r5, #8
 800329c:	2d0c      	cmp	r5, #12
 800329e:	bf38      	it	cc
 80032a0:	250c      	movcc	r5, #12
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	4606      	mov	r6, r0
 80032a6:	db01      	blt.n	80032ac <_malloc_r+0x1c>
 80032a8:	42a9      	cmp	r1, r5
 80032aa:	d904      	bls.n	80032b6 <_malloc_r+0x26>
 80032ac:	230c      	movs	r3, #12
 80032ae:	6033      	str	r3, [r6, #0]
 80032b0:	2000      	movs	r0, #0
 80032b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800338c <_malloc_r+0xfc>
 80032ba:	f000 f869 	bl	8003390 <__malloc_lock>
 80032be:	f8d8 3000 	ldr.w	r3, [r8]
 80032c2:	461c      	mov	r4, r3
 80032c4:	bb44      	cbnz	r4, 8003318 <_malloc_r+0x88>
 80032c6:	4629      	mov	r1, r5
 80032c8:	4630      	mov	r0, r6
 80032ca:	f7ff ffbf 	bl	800324c <sbrk_aligned>
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	4604      	mov	r4, r0
 80032d2:	d158      	bne.n	8003386 <_malloc_r+0xf6>
 80032d4:	f8d8 4000 	ldr.w	r4, [r8]
 80032d8:	4627      	mov	r7, r4
 80032da:	2f00      	cmp	r7, #0
 80032dc:	d143      	bne.n	8003366 <_malloc_r+0xd6>
 80032de:	2c00      	cmp	r4, #0
 80032e0:	d04b      	beq.n	800337a <_malloc_r+0xea>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	4639      	mov	r1, r7
 80032e6:	4630      	mov	r0, r6
 80032e8:	eb04 0903 	add.w	r9, r4, r3
 80032ec:	f000 f9cc 	bl	8003688 <_sbrk_r>
 80032f0:	4581      	cmp	r9, r0
 80032f2:	d142      	bne.n	800337a <_malloc_r+0xea>
 80032f4:	6821      	ldr	r1, [r4, #0]
 80032f6:	4630      	mov	r0, r6
 80032f8:	1a6d      	subs	r5, r5, r1
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7ff ffa6 	bl	800324c <sbrk_aligned>
 8003300:	3001      	adds	r0, #1
 8003302:	d03a      	beq.n	800337a <_malloc_r+0xea>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	442b      	add	r3, r5
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	f8d8 3000 	ldr.w	r3, [r8]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	bb62      	cbnz	r2, 800336c <_malloc_r+0xdc>
 8003312:	f8c8 7000 	str.w	r7, [r8]
 8003316:	e00f      	b.n	8003338 <_malloc_r+0xa8>
 8003318:	6822      	ldr	r2, [r4, #0]
 800331a:	1b52      	subs	r2, r2, r5
 800331c:	d420      	bmi.n	8003360 <_malloc_r+0xd0>
 800331e:	2a0b      	cmp	r2, #11
 8003320:	d917      	bls.n	8003352 <_malloc_r+0xc2>
 8003322:	1961      	adds	r1, r4, r5
 8003324:	42a3      	cmp	r3, r4
 8003326:	6025      	str	r5, [r4, #0]
 8003328:	bf18      	it	ne
 800332a:	6059      	strne	r1, [r3, #4]
 800332c:	6863      	ldr	r3, [r4, #4]
 800332e:	bf08      	it	eq
 8003330:	f8c8 1000 	streq.w	r1, [r8]
 8003334:	5162      	str	r2, [r4, r5]
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f82f 	bl	800339c <__malloc_unlock>
 800333e:	f104 000b 	add.w	r0, r4, #11
 8003342:	1d23      	adds	r3, r4, #4
 8003344:	f020 0007 	bic.w	r0, r0, #7
 8003348:	1ac2      	subs	r2, r0, r3
 800334a:	bf1c      	itt	ne
 800334c:	1a1b      	subne	r3, r3, r0
 800334e:	50a3      	strne	r3, [r4, r2]
 8003350:	e7af      	b.n	80032b2 <_malloc_r+0x22>
 8003352:	6862      	ldr	r2, [r4, #4]
 8003354:	42a3      	cmp	r3, r4
 8003356:	bf0c      	ite	eq
 8003358:	f8c8 2000 	streq.w	r2, [r8]
 800335c:	605a      	strne	r2, [r3, #4]
 800335e:	e7eb      	b.n	8003338 <_malloc_r+0xa8>
 8003360:	4623      	mov	r3, r4
 8003362:	6864      	ldr	r4, [r4, #4]
 8003364:	e7ae      	b.n	80032c4 <_malloc_r+0x34>
 8003366:	463c      	mov	r4, r7
 8003368:	687f      	ldr	r7, [r7, #4]
 800336a:	e7b6      	b.n	80032da <_malloc_r+0x4a>
 800336c:	461a      	mov	r2, r3
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	42a3      	cmp	r3, r4
 8003372:	d1fb      	bne.n	800336c <_malloc_r+0xdc>
 8003374:	2300      	movs	r3, #0
 8003376:	6053      	str	r3, [r2, #4]
 8003378:	e7de      	b.n	8003338 <_malloc_r+0xa8>
 800337a:	230c      	movs	r3, #12
 800337c:	4630      	mov	r0, r6
 800337e:	6033      	str	r3, [r6, #0]
 8003380:	f000 f80c 	bl	800339c <__malloc_unlock>
 8003384:	e794      	b.n	80032b0 <_malloc_r+0x20>
 8003386:	6005      	str	r5, [r0, #0]
 8003388:	e7d6      	b.n	8003338 <_malloc_r+0xa8>
 800338a:	bf00      	nop
 800338c:	200002b0 	.word	0x200002b0

08003390 <__malloc_lock>:
 8003390:	4801      	ldr	r0, [pc, #4]	@ (8003398 <__malloc_lock+0x8>)
 8003392:	f7ff bf10 	b.w	80031b6 <__retarget_lock_acquire_recursive>
 8003396:	bf00      	nop
 8003398:	200002a8 	.word	0x200002a8

0800339c <__malloc_unlock>:
 800339c:	4801      	ldr	r0, [pc, #4]	@ (80033a4 <__malloc_unlock+0x8>)
 800339e:	f7ff bf0b 	b.w	80031b8 <__retarget_lock_release_recursive>
 80033a2:	bf00      	nop
 80033a4:	200002a8 	.word	0x200002a8

080033a8 <__sflush_r>:
 80033a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	0716      	lsls	r6, r2, #28
 80033b0:	4605      	mov	r5, r0
 80033b2:	460c      	mov	r4, r1
 80033b4:	d454      	bmi.n	8003460 <__sflush_r+0xb8>
 80033b6:	684b      	ldr	r3, [r1, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	dc02      	bgt.n	80033c2 <__sflush_r+0x1a>
 80033bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	dd48      	ble.n	8003454 <__sflush_r+0xac>
 80033c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033c4:	2e00      	cmp	r6, #0
 80033c6:	d045      	beq.n	8003454 <__sflush_r+0xac>
 80033c8:	2300      	movs	r3, #0
 80033ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80033ce:	682f      	ldr	r7, [r5, #0]
 80033d0:	6a21      	ldr	r1, [r4, #32]
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	d030      	beq.n	8003438 <__sflush_r+0x90>
 80033d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	0759      	lsls	r1, r3, #29
 80033dc:	d505      	bpl.n	80033ea <__sflush_r+0x42>
 80033de:	6863      	ldr	r3, [r4, #4]
 80033e0:	1ad2      	subs	r2, r2, r3
 80033e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80033e4:	b10b      	cbz	r3, 80033ea <__sflush_r+0x42>
 80033e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033e8:	1ad2      	subs	r2, r2, r3
 80033ea:	2300      	movs	r3, #0
 80033ec:	4628      	mov	r0, r5
 80033ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033f0:	6a21      	ldr	r1, [r4, #32]
 80033f2:	47b0      	blx	r6
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	d106      	bne.n	8003408 <__sflush_r+0x60>
 80033fa:	6829      	ldr	r1, [r5, #0]
 80033fc:	291d      	cmp	r1, #29
 80033fe:	d82b      	bhi.n	8003458 <__sflush_r+0xb0>
 8003400:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <__sflush_r+0xfc>)
 8003402:	410a      	asrs	r2, r1
 8003404:	07d6      	lsls	r6, r2, #31
 8003406:	d427      	bmi.n	8003458 <__sflush_r+0xb0>
 8003408:	2200      	movs	r2, #0
 800340a:	6062      	str	r2, [r4, #4]
 800340c:	6922      	ldr	r2, [r4, #16]
 800340e:	04d9      	lsls	r1, r3, #19
 8003410:	6022      	str	r2, [r4, #0]
 8003412:	d504      	bpl.n	800341e <__sflush_r+0x76>
 8003414:	1c42      	adds	r2, r0, #1
 8003416:	d101      	bne.n	800341c <__sflush_r+0x74>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	b903      	cbnz	r3, 800341e <__sflush_r+0x76>
 800341c:	6560      	str	r0, [r4, #84]	@ 0x54
 800341e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003420:	602f      	str	r7, [r5, #0]
 8003422:	b1b9      	cbz	r1, 8003454 <__sflush_r+0xac>
 8003424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003428:	4299      	cmp	r1, r3
 800342a:	d002      	beq.n	8003432 <__sflush_r+0x8a>
 800342c:	4628      	mov	r0, r5
 800342e:	f7ff fec5 	bl	80031bc <_free_r>
 8003432:	2300      	movs	r3, #0
 8003434:	6363      	str	r3, [r4, #52]	@ 0x34
 8003436:	e00d      	b.n	8003454 <__sflush_r+0xac>
 8003438:	2301      	movs	r3, #1
 800343a:	4628      	mov	r0, r5
 800343c:	47b0      	blx	r6
 800343e:	4602      	mov	r2, r0
 8003440:	1c50      	adds	r0, r2, #1
 8003442:	d1c9      	bne.n	80033d8 <__sflush_r+0x30>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0c6      	beq.n	80033d8 <__sflush_r+0x30>
 800344a:	2b1d      	cmp	r3, #29
 800344c:	d001      	beq.n	8003452 <__sflush_r+0xaa>
 800344e:	2b16      	cmp	r3, #22
 8003450:	d11d      	bne.n	800348e <__sflush_r+0xe6>
 8003452:	602f      	str	r7, [r5, #0]
 8003454:	2000      	movs	r0, #0
 8003456:	e021      	b.n	800349c <__sflush_r+0xf4>
 8003458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800345c:	b21b      	sxth	r3, r3
 800345e:	e01a      	b.n	8003496 <__sflush_r+0xee>
 8003460:	690f      	ldr	r7, [r1, #16]
 8003462:	2f00      	cmp	r7, #0
 8003464:	d0f6      	beq.n	8003454 <__sflush_r+0xac>
 8003466:	0793      	lsls	r3, r2, #30
 8003468:	bf18      	it	ne
 800346a:	2300      	movne	r3, #0
 800346c:	680e      	ldr	r6, [r1, #0]
 800346e:	bf08      	it	eq
 8003470:	694b      	ldreq	r3, [r1, #20]
 8003472:	1bf6      	subs	r6, r6, r7
 8003474:	600f      	str	r7, [r1, #0]
 8003476:	608b      	str	r3, [r1, #8]
 8003478:	2e00      	cmp	r6, #0
 800347a:	ddeb      	ble.n	8003454 <__sflush_r+0xac>
 800347c:	4633      	mov	r3, r6
 800347e:	463a      	mov	r2, r7
 8003480:	4628      	mov	r0, r5
 8003482:	6a21      	ldr	r1, [r4, #32]
 8003484:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003488:	47e0      	blx	ip
 800348a:	2800      	cmp	r0, #0
 800348c:	dc07      	bgt.n	800349e <__sflush_r+0xf6>
 800348e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003496:	f04f 30ff 	mov.w	r0, #4294967295
 800349a:	81a3      	strh	r3, [r4, #12]
 800349c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800349e:	4407      	add	r7, r0
 80034a0:	1a36      	subs	r6, r6, r0
 80034a2:	e7e9      	b.n	8003478 <__sflush_r+0xd0>
 80034a4:	dfbffffe 	.word	0xdfbffffe

080034a8 <_fflush_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	690b      	ldr	r3, [r1, #16]
 80034ac:	4605      	mov	r5, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	b913      	cbnz	r3, 80034b8 <_fflush_r+0x10>
 80034b2:	2500      	movs	r5, #0
 80034b4:	4628      	mov	r0, r5
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	b118      	cbz	r0, 80034c2 <_fflush_r+0x1a>
 80034ba:	6a03      	ldr	r3, [r0, #32]
 80034bc:	b90b      	cbnz	r3, 80034c2 <_fflush_r+0x1a>
 80034be:	f7ff fd7f 	bl	8002fc0 <__sinit>
 80034c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f3      	beq.n	80034b2 <_fflush_r+0xa>
 80034ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80034cc:	07d0      	lsls	r0, r2, #31
 80034ce:	d404      	bmi.n	80034da <_fflush_r+0x32>
 80034d0:	0599      	lsls	r1, r3, #22
 80034d2:	d402      	bmi.n	80034da <_fflush_r+0x32>
 80034d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034d6:	f7ff fe6e 	bl	80031b6 <__retarget_lock_acquire_recursive>
 80034da:	4628      	mov	r0, r5
 80034dc:	4621      	mov	r1, r4
 80034de:	f7ff ff63 	bl	80033a8 <__sflush_r>
 80034e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034e4:	4605      	mov	r5, r0
 80034e6:	07da      	lsls	r2, r3, #31
 80034e8:	d4e4      	bmi.n	80034b4 <_fflush_r+0xc>
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	059b      	lsls	r3, r3, #22
 80034ee:	d4e1      	bmi.n	80034b4 <_fflush_r+0xc>
 80034f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034f2:	f7ff fe61 	bl	80031b8 <__retarget_lock_release_recursive>
 80034f6:	e7dd      	b.n	80034b4 <_fflush_r+0xc>

080034f8 <_putc_r>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	460d      	mov	r5, r1
 80034fc:	4614      	mov	r4, r2
 80034fe:	4606      	mov	r6, r0
 8003500:	b118      	cbz	r0, 800350a <_putc_r+0x12>
 8003502:	6a03      	ldr	r3, [r0, #32]
 8003504:	b90b      	cbnz	r3, 800350a <_putc_r+0x12>
 8003506:	f7ff fd5b 	bl	8002fc0 <__sinit>
 800350a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800350c:	07d8      	lsls	r0, r3, #31
 800350e:	d405      	bmi.n	800351c <_putc_r+0x24>
 8003510:	89a3      	ldrh	r3, [r4, #12]
 8003512:	0599      	lsls	r1, r3, #22
 8003514:	d402      	bmi.n	800351c <_putc_r+0x24>
 8003516:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003518:	f7ff fe4d 	bl	80031b6 <__retarget_lock_acquire_recursive>
 800351c:	68a3      	ldr	r3, [r4, #8]
 800351e:	3b01      	subs	r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	60a3      	str	r3, [r4, #8]
 8003524:	da05      	bge.n	8003532 <_putc_r+0x3a>
 8003526:	69a2      	ldr	r2, [r4, #24]
 8003528:	4293      	cmp	r3, r2
 800352a:	db12      	blt.n	8003552 <_putc_r+0x5a>
 800352c:	b2eb      	uxtb	r3, r5
 800352e:	2b0a      	cmp	r3, #10
 8003530:	d00f      	beq.n	8003552 <_putc_r+0x5a>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	6022      	str	r2, [r4, #0]
 8003538:	701d      	strb	r5, [r3, #0]
 800353a:	b2ed      	uxtb	r5, r5
 800353c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800353e:	07da      	lsls	r2, r3, #31
 8003540:	d405      	bmi.n	800354e <_putc_r+0x56>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	059b      	lsls	r3, r3, #22
 8003546:	d402      	bmi.n	800354e <_putc_r+0x56>
 8003548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800354a:	f7ff fe35 	bl	80031b8 <__retarget_lock_release_recursive>
 800354e:	4628      	mov	r0, r5
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	4629      	mov	r1, r5
 8003554:	4622      	mov	r2, r4
 8003556:	4630      	mov	r0, r6
 8003558:	f000 f802 	bl	8003560 <__swbuf_r>
 800355c:	4605      	mov	r5, r0
 800355e:	e7ed      	b.n	800353c <_putc_r+0x44>

08003560 <__swbuf_r>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	460e      	mov	r6, r1
 8003564:	4614      	mov	r4, r2
 8003566:	4605      	mov	r5, r0
 8003568:	b118      	cbz	r0, 8003572 <__swbuf_r+0x12>
 800356a:	6a03      	ldr	r3, [r0, #32]
 800356c:	b90b      	cbnz	r3, 8003572 <__swbuf_r+0x12>
 800356e:	f7ff fd27 	bl	8002fc0 <__sinit>
 8003572:	69a3      	ldr	r3, [r4, #24]
 8003574:	60a3      	str	r3, [r4, #8]
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	071a      	lsls	r2, r3, #28
 800357a:	d501      	bpl.n	8003580 <__swbuf_r+0x20>
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	b943      	cbnz	r3, 8003592 <__swbuf_r+0x32>
 8003580:	4621      	mov	r1, r4
 8003582:	4628      	mov	r0, r5
 8003584:	f000 f82a 	bl	80035dc <__swsetup_r>
 8003588:	b118      	cbz	r0, 8003592 <__swbuf_r+0x32>
 800358a:	f04f 37ff 	mov.w	r7, #4294967295
 800358e:	4638      	mov	r0, r7
 8003590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	6922      	ldr	r2, [r4, #16]
 8003596:	b2f6      	uxtb	r6, r6
 8003598:	1a98      	subs	r0, r3, r2
 800359a:	6963      	ldr	r3, [r4, #20]
 800359c:	4637      	mov	r7, r6
 800359e:	4283      	cmp	r3, r0
 80035a0:	dc05      	bgt.n	80035ae <__swbuf_r+0x4e>
 80035a2:	4621      	mov	r1, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f7ff ff7f 	bl	80034a8 <_fflush_r>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d1ed      	bne.n	800358a <__swbuf_r+0x2a>
 80035ae:	68a3      	ldr	r3, [r4, #8]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	60a3      	str	r3, [r4, #8]
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	6022      	str	r2, [r4, #0]
 80035ba:	701e      	strb	r6, [r3, #0]
 80035bc:	6962      	ldr	r2, [r4, #20]
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d004      	beq.n	80035ce <__swbuf_r+0x6e>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	07db      	lsls	r3, r3, #31
 80035c8:	d5e1      	bpl.n	800358e <__swbuf_r+0x2e>
 80035ca:	2e0a      	cmp	r6, #10
 80035cc:	d1df      	bne.n	800358e <__swbuf_r+0x2e>
 80035ce:	4621      	mov	r1, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	f7ff ff69 	bl	80034a8 <_fflush_r>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d0d9      	beq.n	800358e <__swbuf_r+0x2e>
 80035da:	e7d6      	b.n	800358a <__swbuf_r+0x2a>

080035dc <__swsetup_r>:
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <__swsetup_r+0xa8>)
 80035e0:	4605      	mov	r5, r0
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	460c      	mov	r4, r1
 80035e6:	b118      	cbz	r0, 80035f0 <__swsetup_r+0x14>
 80035e8:	6a03      	ldr	r3, [r0, #32]
 80035ea:	b90b      	cbnz	r3, 80035f0 <__swsetup_r+0x14>
 80035ec:	f7ff fce8 	bl	8002fc0 <__sinit>
 80035f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f4:	0719      	lsls	r1, r3, #28
 80035f6:	d422      	bmi.n	800363e <__swsetup_r+0x62>
 80035f8:	06da      	lsls	r2, r3, #27
 80035fa:	d407      	bmi.n	800360c <__swsetup_r+0x30>
 80035fc:	2209      	movs	r2, #9
 80035fe:	602a      	str	r2, [r5, #0]
 8003600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	81a3      	strh	r3, [r4, #12]
 800360a:	e033      	b.n	8003674 <__swsetup_r+0x98>
 800360c:	0758      	lsls	r0, r3, #29
 800360e:	d512      	bpl.n	8003636 <__swsetup_r+0x5a>
 8003610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003612:	b141      	cbz	r1, 8003626 <__swsetup_r+0x4a>
 8003614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003618:	4299      	cmp	r1, r3
 800361a:	d002      	beq.n	8003622 <__swsetup_r+0x46>
 800361c:	4628      	mov	r0, r5
 800361e:	f7ff fdcd 	bl	80031bc <_free_r>
 8003622:	2300      	movs	r3, #0
 8003624:	6363      	str	r3, [r4, #52]	@ 0x34
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800362c:	81a3      	strh	r3, [r4, #12]
 800362e:	2300      	movs	r3, #0
 8003630:	6063      	str	r3, [r4, #4]
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	f043 0308 	orr.w	r3, r3, #8
 800363c:	81a3      	strh	r3, [r4, #12]
 800363e:	6923      	ldr	r3, [r4, #16]
 8003640:	b94b      	cbnz	r3, 8003656 <__swsetup_r+0x7a>
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800364c:	d003      	beq.n	8003656 <__swsetup_r+0x7a>
 800364e:	4621      	mov	r1, r4
 8003650:	4628      	mov	r0, r5
 8003652:	f000 f84e 	bl	80036f2 <__smakebuf_r>
 8003656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800365a:	f013 0201 	ands.w	r2, r3, #1
 800365e:	d00a      	beq.n	8003676 <__swsetup_r+0x9a>
 8003660:	2200      	movs	r2, #0
 8003662:	60a2      	str	r2, [r4, #8]
 8003664:	6962      	ldr	r2, [r4, #20]
 8003666:	4252      	negs	r2, r2
 8003668:	61a2      	str	r2, [r4, #24]
 800366a:	6922      	ldr	r2, [r4, #16]
 800366c:	b942      	cbnz	r2, 8003680 <__swsetup_r+0xa4>
 800366e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003672:	d1c5      	bne.n	8003600 <__swsetup_r+0x24>
 8003674:	bd38      	pop	{r3, r4, r5, pc}
 8003676:	0799      	lsls	r1, r3, #30
 8003678:	bf58      	it	pl
 800367a:	6962      	ldrpl	r2, [r4, #20]
 800367c:	60a2      	str	r2, [r4, #8]
 800367e:	e7f4      	b.n	800366a <__swsetup_r+0x8e>
 8003680:	2000      	movs	r0, #0
 8003682:	e7f7      	b.n	8003674 <__swsetup_r+0x98>
 8003684:	20000018 	.word	0x20000018

08003688 <_sbrk_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	2300      	movs	r3, #0
 800368c:	4d05      	ldr	r5, [pc, #20]	@ (80036a4 <_sbrk_r+0x1c>)
 800368e:	4604      	mov	r4, r0
 8003690:	4608      	mov	r0, r1
 8003692:	602b      	str	r3, [r5, #0]
 8003694:	f7fd f906 	bl	80008a4 <_sbrk>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_sbrk_r+0x1a>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_sbrk_r+0x1a>
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	200002a4 	.word	0x200002a4

080036a8 <__swhatbuf_r>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	460c      	mov	r4, r1
 80036ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b0:	4615      	mov	r5, r2
 80036b2:	2900      	cmp	r1, #0
 80036b4:	461e      	mov	r6, r3
 80036b6:	b096      	sub	sp, #88	@ 0x58
 80036b8:	da0c      	bge.n	80036d4 <__swhatbuf_r+0x2c>
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	2100      	movs	r1, #0
 80036be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80036c2:	bf14      	ite	ne
 80036c4:	2340      	movne	r3, #64	@ 0x40
 80036c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80036ca:	2000      	movs	r0, #0
 80036cc:	6031      	str	r1, [r6, #0]
 80036ce:	602b      	str	r3, [r5, #0]
 80036d0:	b016      	add	sp, #88	@ 0x58
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	466a      	mov	r2, sp
 80036d6:	f000 f849 	bl	800376c <_fstat_r>
 80036da:	2800      	cmp	r0, #0
 80036dc:	dbed      	blt.n	80036ba <__swhatbuf_r+0x12>
 80036de:	9901      	ldr	r1, [sp, #4]
 80036e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80036e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80036e8:	4259      	negs	r1, r3
 80036ea:	4159      	adcs	r1, r3
 80036ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036f0:	e7eb      	b.n	80036ca <__swhatbuf_r+0x22>

080036f2 <__smakebuf_r>:
 80036f2:	898b      	ldrh	r3, [r1, #12]
 80036f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036f6:	079d      	lsls	r5, r3, #30
 80036f8:	4606      	mov	r6, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	d507      	bpl.n	800370e <__smakebuf_r+0x1c>
 80036fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	6123      	str	r3, [r4, #16]
 8003706:	2301      	movs	r3, #1
 8003708:	6163      	str	r3, [r4, #20]
 800370a:	b003      	add	sp, #12
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370e:	466a      	mov	r2, sp
 8003710:	ab01      	add	r3, sp, #4
 8003712:	f7ff ffc9 	bl	80036a8 <__swhatbuf_r>
 8003716:	9f00      	ldr	r7, [sp, #0]
 8003718:	4605      	mov	r5, r0
 800371a:	4639      	mov	r1, r7
 800371c:	4630      	mov	r0, r6
 800371e:	f7ff fdb7 	bl	8003290 <_malloc_r>
 8003722:	b948      	cbnz	r0, 8003738 <__smakebuf_r+0x46>
 8003724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003728:	059a      	lsls	r2, r3, #22
 800372a:	d4ee      	bmi.n	800370a <__smakebuf_r+0x18>
 800372c:	f023 0303 	bic.w	r3, r3, #3
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	81a3      	strh	r3, [r4, #12]
 8003736:	e7e2      	b.n	80036fe <__smakebuf_r+0xc>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800373e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	9b01      	ldr	r3, [sp, #4]
 8003746:	6020      	str	r0, [r4, #0]
 8003748:	b15b      	cbz	r3, 8003762 <__smakebuf_r+0x70>
 800374a:	4630      	mov	r0, r6
 800374c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003750:	f000 f81e 	bl	8003790 <_isatty_r>
 8003754:	b128      	cbz	r0, 8003762 <__smakebuf_r+0x70>
 8003756:	89a3      	ldrh	r3, [r4, #12]
 8003758:	f023 0303 	bic.w	r3, r3, #3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	431d      	orrs	r5, r3
 8003766:	81a5      	strh	r5, [r4, #12]
 8003768:	e7cf      	b.n	800370a <__smakebuf_r+0x18>
	...

0800376c <_fstat_r>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	2300      	movs	r3, #0
 8003770:	4d06      	ldr	r5, [pc, #24]	@ (800378c <_fstat_r+0x20>)
 8003772:	4604      	mov	r4, r0
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	602b      	str	r3, [r5, #0]
 800377a:	f7fd f86d 	bl	8000858 <_fstat>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d102      	bne.n	8003788 <_fstat_r+0x1c>
 8003782:	682b      	ldr	r3, [r5, #0]
 8003784:	b103      	cbz	r3, 8003788 <_fstat_r+0x1c>
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	bd38      	pop	{r3, r4, r5, pc}
 800378a:	bf00      	nop
 800378c:	200002a4 	.word	0x200002a4

08003790 <_isatty_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	2300      	movs	r3, #0
 8003794:	4d05      	ldr	r5, [pc, #20]	@ (80037ac <_isatty_r+0x1c>)
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd f86b 	bl	8000876 <_isatty>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_isatty_r+0x1a>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_isatty_r+0x1a>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	200002a4 	.word	0x200002a4

080037b0 <_init>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr

080037bc <_fini>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr
