
ARG_BAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b10  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c84  08003c84  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003c84  08003c84  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c84  08003c84  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c84  08003c84  00004c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003cf4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003cf4  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4cd  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df8  00000000  00000000  0001155e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00013358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f9  00000000  00000000  00014020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018676  00000000  00000000  00014a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1ae  00000000  00000000  0002d08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0db  00000000  00000000  0003b23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  000c735c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000cb0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c04 	.word	0x08003c04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003c04 	.word	0x08003c04

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb78 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82a 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8dc 	bl	8000314 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f862 	bl	8000224 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8ae 	bl	80002c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000164:	480b      	ldr	r0, [pc, #44]	@ (8000194 <main+0x48>)
 8000166:	f001 fbd3 	bl	8001910 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 800016a:	2201      	movs	r2, #1
 800016c:	490a      	ldr	r1, [pc, #40]	@ (8000198 <main+0x4c>)
 800016e:	480b      	ldr	r0, [pc, #44]	@ (800019c <main+0x50>)
 8000170:	f002 f84b 	bl	800220a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timeout_counter > 5)
 8000174:	4b0a      	ldr	r3, [pc, #40]	@ (80001a0 <main+0x54>)
 8000176:	881b      	ldrh	r3, [r3, #0]
 8000178:	2b05      	cmp	r3, #5
 800017a:	d9fb      	bls.n	8000174 <main+0x28>
	  {
		  printf("\n hi");
 800017c:	4809      	ldr	r0, [pc, #36]	@ (80001a4 <main+0x58>)
 800017e:	f002 fe8d 	bl	8002e9c <iprintf>
		  timeout_counter = 0;
 8000182:	4b07      	ldr	r3, [pc, #28]	@ (80001a0 <main+0x54>)
 8000184:	2200      	movs	r2, #0
 8000186:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800018c:	4806      	ldr	r0, [pc, #24]	@ (80001a8 <main+0x5c>)
 800018e:	f000 ff2e 	bl	8000fee <HAL_GPIO_TogglePin>
	  if(timeout_counter > 5)
 8000192:	e7ef      	b.n	8000174 <main+0x28>
 8000194:	20000084 	.word	0x20000084
 8000198:	20000116 	.word	0x20000116
 800019c:	200000cc 	.word	0x200000cc
 80001a0:	20000114 	.word	0x20000114
 80001a4:	08003c1c 	.word	0x08003c1c
 80001a8:	40011000 	.word	0x40011000

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	@ 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	@ 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 fecb 	bl	8002f56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001da:	2300      	movs	r3, #0
 80001dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 ff34 	bl	8001050 <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ee:	f000 f965 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 f9a2 	bl	8001554 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000216:	f000 f951 	bl	80004bc <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	@ 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000240:	4b1e      	ldr	r3, [pc, #120]	@ (80002bc <MX_TIM2_Init+0x98>)
 8000242:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000248:	4b1c      	ldr	r3, [pc, #112]	@ (80002bc <MX_TIM2_Init+0x98>)
 800024a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800024e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000250:	4b1a      	ldr	r3, [pc, #104]	@ (80002bc <MX_TIM2_Init+0x98>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000256:	4b19      	ldr	r3, [pc, #100]	@ (80002bc <MX_TIM2_Init+0x98>)
 8000258:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800025c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800025e:	4b17      	ldr	r3, [pc, #92]	@ (80002bc <MX_TIM2_Init+0x98>)
 8000260:	2200      	movs	r2, #0
 8000262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000264:	4b15      	ldr	r3, [pc, #84]	@ (80002bc <MX_TIM2_Init+0x98>)
 8000266:	2200      	movs	r2, #0
 8000268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800026a:	4814      	ldr	r0, [pc, #80]	@ (80002bc <MX_TIM2_Init+0x98>)
 800026c:	f001 fb00 	bl	8001870 <HAL_TIM_Base_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000276:	f000 f921 	bl	80004bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800027a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800027e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000280:	f107 0308 	add.w	r3, r7, #8
 8000284:	4619      	mov	r1, r3
 8000286:	480d      	ldr	r0, [pc, #52]	@ (80002bc <MX_TIM2_Init+0x98>)
 8000288:	f001 fc84 	bl	8001b94 <HAL_TIM_ConfigClockSource>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000292:	f000 f913 	bl	80004bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000296:	2300      	movs	r3, #0
 8000298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	4619      	mov	r1, r3
 80002a2:	4806      	ldr	r0, [pc, #24]	@ (80002bc <MX_TIM2_Init+0x98>)
 80002a4:	f001 fe66 	bl	8001f74 <HAL_TIMEx_MasterConfigSynchronization>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80002ae:	f000 f905 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000084 	.word	0x20000084

080002c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c4:	4b11      	ldr	r3, [pc, #68]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002c6:	4a12      	ldr	r2, [pc, #72]	@ (8000310 <MX_USART1_UART_Init+0x50>)
 80002c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ca:	4b10      	ldr	r3, [pc, #64]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002de:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e4:	4b09      	ldr	r3, [pc, #36]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002e6:	220c      	movs	r2, #12
 80002e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ea:	4b08      	ldr	r3, [pc, #32]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002f6:	4805      	ldr	r0, [pc, #20]	@ (800030c <MX_USART1_UART_Init+0x4c>)
 80002f8:	f001 feac 	bl	8002054 <HAL_UART_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000302:	f000 f8db 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200000cc 	.word	0x200000cc
 8000310:	40013800 	.word	0x40013800

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000328:	4b28      	ldr	r3, [pc, #160]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a27      	ldr	r2, [pc, #156]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b25      	ldr	r3, [pc, #148]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0310 	and.w	r3, r3, #16
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b22      	ldr	r3, [pc, #136]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a21      	ldr	r2, [pc, #132]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b1f      	ldr	r3, [pc, #124]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b1c      	ldr	r3, [pc, #112]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a1b      	ldr	r2, [pc, #108]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b19      	ldr	r3, [pc, #100]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000376:	4816      	ldr	r0, [pc, #88]	@ (80003d0 <MX_GPIO_Init+0xbc>)
 8000378:	f000 fe21 	bl	8000fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800037c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	2301      	movs	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	2302      	movs	r3, #2
 800038c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4619      	mov	r1, r3
 8000394:	480e      	ldr	r0, [pc, #56]	@ (80003d0 <MX_GPIO_Init+0xbc>)
 8000396:	f000 fc77 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800039a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_GPIO_Init+0xc0>)
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	4619      	mov	r1, r3
 80003ae:	480a      	ldr	r0, [pc, #40]	@ (80003d8 <MX_GPIO_Init+0xc4>)
 80003b0:	f000 fc6a 	bl	8000c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	2028      	movs	r0, #40	@ 0x28
 80003ba:	f000 fb7c 	bl	8000ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003be:	2028      	movs	r0, #40	@ 0x28
 80003c0:	f000 fb95 	bl	8000aee <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40011000 	.word	0x40011000
 80003d4:	10110000 	.word	0x10110000
 80003d8:	40010c00 	.word	0x40010c00

080003dc <HAL_UART_RxCpltCallback>:
   @param  UartHandle: UART handle.
   @note   This callback executes once defined bytes of reception completed
   @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART1)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a08      	ldr	r2, [pc, #32]	@ (800040c <HAL_UART_RxCpltCallback+0x30>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d109      	bne.n	8000402 <HAL_UART_RxCpltCallback+0x26>
  {
	    HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	4907      	ldr	r1, [pc, #28]	@ (8000410 <HAL_UART_RxCpltCallback+0x34>)
 80003f2:	4808      	ldr	r0, [pc, #32]	@ (8000414 <HAL_UART_RxCpltCallback+0x38>)
 80003f4:	f001 ff09 	bl	800220a <HAL_UART_Receive_IT>
	    printf("%c", aRxBuffer);
 80003f8:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <HAL_UART_RxCpltCallback+0x34>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 fd5f 	bl	8002ec0 <putchar>
  }
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40013800 	.word	0x40013800
 8000410:	20000116 	.word	0x20000116
 8000414:	200000cc 	.word	0x200000cc

08000418 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == USART1)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a05      	ldr	r2, [pc, #20]	@ (800043c <HAL_UART_TxCpltCallback+0x24>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d102      	bne.n	8000430 <HAL_UART_TxCpltCallback+0x18>
  {
    /* Set transmission flag: transfer complete */
	  SerialTxReady = SET;
 800042a:	4b05      	ldr	r3, [pc, #20]	@ (8000440 <HAL_UART_TxCpltCallback+0x28>)
 800042c:	2201      	movs	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
  }
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40013800 	.word	0x40013800
 8000440:	20000117 	.word	0x20000117

08000444 <HAL_GPIO_EXTI_Callback>:
   @brief EXTI line detection callbacks
   @param GPIO_Pin: Specifies the pins connected EXTI line
   @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == RAIN_GAUGE_MCU_Pin)
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000454:	d104      	bne.n	8000460 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    if (HAL_GPIO_ReadPin(RAIN_GAUGE_MCU_GPIO_Port, RAIN_GAUGE_MCU_Pin)
 8000456:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800045a:	4803      	ldr	r0, [pc, #12]	@ (8000468 <HAL_GPIO_EXTI_Callback+0x24>)
 800045c:	f000 fd98 	bl	8000f90 <HAL_GPIO_ReadPin>
         == GPIO_PIN_SET)
    {
//	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    }
  }
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40010c00 	.word	0x40010c00

0800046c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800047c:	d105      	bne.n	800048a <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  timeout_counter++;
 800047e:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	3301      	adds	r3, #1
 8000484:	b29a      	uxth	r2, r3
 8000486:	4b03      	ldr	r3, [pc, #12]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000488:	801a      	strh	r2, [r3, #0]
  }
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000114 	.word	0x20000114

08000498 <__io_putchar>:
   @brief  Retargets the C library APP_DEBUG_STR function to the USART.
   @param  None
   @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0XFFFF);
 80004a0:	1d39      	adds	r1, r7, #4
 80004a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004a6:	2201      	movs	r2, #1
 80004a8:	4803      	ldr	r0, [pc, #12]	@ (80004b8 <__io_putchar+0x20>)
 80004aa:	f001 fe23 	bl	80020f4 <HAL_UART_Transmit>
  return ch;
 80004ae:	687b      	ldr	r3, [r7, #4]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200000cc 	.word	0x200000cc

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <Error_Handler+0x8>

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ce:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <HAL_MspInit+0x5c>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <HAL_MspInit+0x5c>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <HAL_MspInit+0x5c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <HAL_MspInit+0x5c>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <HAL_MspInit+0x5c>)
 80004ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <HAL_MspInit+0x5c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000528 <HAL_MspInit+0x60>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <HAL_MspInit+0x60>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000
 8000528:	40010000 	.word	0x40010000

0800052c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800053c:	d113      	bne.n	8000566 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <HAL_TIM_Base_MspInit+0x44>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a0b      	ldr	r2, [pc, #44]	@ (8000570 <HAL_TIM_Base_MspInit+0x44>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <HAL_TIM_Base_MspInit+0x44>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	201c      	movs	r0, #28
 800055c:	f000 faab 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000560:	201c      	movs	r0, #28
 8000562:	f000 fac4 	bl	8000aee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <HAL_UART_MspInit+0x9c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d139      	bne.n	8000608 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000594:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <HAL_UART_MspInit+0xa0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a1e      	ldr	r2, [pc, #120]	@ (8000614 <HAL_UART_MspInit+0xa0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <HAL_UART_MspInit+0xa0>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <HAL_UART_MspInit+0xa0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a18      	ldr	r2, [pc, #96]	@ (8000614 <HAL_UART_MspInit+0xa0>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <HAL_UART_MspInit+0xa0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	480f      	ldr	r0, [pc, #60]	@ (8000618 <HAL_UART_MspInit+0xa4>)
 80005da:	f000 fb55 	bl	8000c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	4809      	ldr	r0, [pc, #36]	@ (8000618 <HAL_UART_MspInit+0xa4>)
 80005f4:	f000 fb48 	bl	8000c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2025      	movs	r0, #37	@ 0x25
 80005fe:	f000 fa5a 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000602:	2025      	movs	r0, #37	@ 0x25
 8000604:	f000 fa73 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40013800 	.word	0x40013800
 8000614:	40021000 	.word	0x40021000
 8000618:	40010800 	.word	0x40010800

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 f930 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000678:	4802      	ldr	r0, [pc, #8]	@ (8000684 <TIM2_IRQHandler+0x10>)
 800067a:	f001 f99b 	bl	80019b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000084 	.word	0x20000084

08000688 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800068c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000690:	f000 fcc6 	bl	8001020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 800069c:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <USART1_IRQHandler+0x10>)
 800069e:	f001 fdd9 	bl	8002254 <HAL_UART_IRQHandler>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000cc 	.word	0x200000cc

080006ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e00a      	b.n	80006d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006be:	f3af 8000 	nop.w
 80006c2:	4601      	mov	r1, r0
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	b2ca      	uxtb	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf0      	blt.n	80006be <_read+0x12>
  }

  return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	e009      	b.n	800070c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	60ba      	str	r2, [r7, #8]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fec9 	bl	8000498 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3301      	adds	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	dbf1      	blt.n	80006f8 <_write+0x12>
  }
  return len;
 8000714:	687b      	ldr	r3, [r7, #4]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <_close>:

int _close(int file)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000744:	605a      	str	r2, [r3, #4]
  return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <_isatty>:

int _isatty(int file)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000766:	b480      	push	{r7}
 8000768:	b085      	sub	sp, #20
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000772:	2300      	movs	r3, #0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f002 fc20 	bl	8002ff4 <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20005000 	.word	0x20005000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	20000118 	.word	0x20000118
 80007e8:	20000270 	.word	0x20000270

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f8:	f7ff fff8 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480b      	ldr	r0, [pc, #44]	@ (800082c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007fe:	490c      	ldr	r1, [pc, #48]	@ (8000830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000800:	4a0c      	ldr	r2, [pc, #48]	@ (8000834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000814:	4c09      	ldr	r4, [pc, #36]	@ (800083c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f002 fbed 	bl	8003000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fc91 	bl	800014c <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000834:	08003c8c 	.word	0x08003c8c
  ldr r2, =_sbss
 8000838:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800083c:	2000026c 	.word	0x2000026c

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f923 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	200f      	movs	r0, #15
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe32 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f93b 	bl	8000b0a <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 f903 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	@ (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <HAL_IncTick+0x1c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <HAL_IncTick+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a03      	ldr	r2, [pc, #12]	@ (80008f0 <HAL_IncTick+0x20>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000008 	.word	0x20000008
 80008f0:	2000011c 	.word	0x2000011c

080008f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	@ (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	2000011c 	.word	0x2000011c

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db0b      	blt.n	8000996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f003 021f 	and.w	r2, r3, #31
 8000984:	4906      	ldr	r1, [pc, #24]	@ (80009a0 <__NVIC_EnableIRQ+0x34>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	2001      	movs	r0, #1
 800098e:	fa00 f202 	lsl.w	r2, r0, r2
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	@ (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	@ (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	@ 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	@ 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff90 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff2d 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff42 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff90 	bl	80009f8 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5f 	bl	80009a4 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff35 	bl	800096c <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d008      	beq.n	8000b4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e020      	b.n	8000b8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 020e 	bic.w	r2, r2, #14
 8000b5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0201 	bic.w	r2, r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d005      	beq.n	8000bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e051      	b.n	8000c60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 020e 	bic.w	r2, r2, #14
 8000bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0201 	bic.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a22      	ldr	r2, [pc, #136]	@ (8000c6c <HAL_DMA_Abort_IT+0xd4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d029      	beq.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a21      	ldr	r2, [pc, #132]	@ (8000c70 <HAL_DMA_Abort_IT+0xd8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d022      	beq.n	8000c36 <HAL_DMA_Abort_IT+0x9e>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c74 <HAL_DMA_Abort_IT+0xdc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d01a      	beq.n	8000c30 <HAL_DMA_Abort_IT+0x98>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c78 <HAL_DMA_Abort_IT+0xe0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d012      	beq.n	8000c2a <HAL_DMA_Abort_IT+0x92>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <HAL_DMA_Abort_IT+0xe4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00a      	beq.n	8000c24 <HAL_DMA_Abort_IT+0x8c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1b      	ldr	r2, [pc, #108]	@ (8000c80 <HAL_DMA_Abort_IT+0xe8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d102      	bne.n	8000c1e <HAL_DMA_Abort_IT+0x86>
 8000c18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c1c:	e00e      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c22:	e00b      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c28:	e008      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2e:	e005      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c34:	e002      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c36:	2310      	movs	r3, #16
 8000c38:	e000      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <HAL_DMA_Abort_IT+0xec>)
 8000c3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	4798      	blx	r3
    } 
  }
  return status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40020008 	.word	0x40020008
 8000c70:	4002001c 	.word	0x4002001c
 8000c74:	40020030 	.word	0x40020030
 8000c78:	40020044 	.word	0x40020044
 8000c7c:	40020058 	.word	0x40020058
 8000c80:	4002006c 	.word	0x4002006c
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b08b      	sub	sp, #44	@ 0x2c
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e169      	b.n	8000f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8158 	bne.w	8000f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4a9a      	ldr	r2, [pc, #616]	@ (8000f28 <HAL_GPIO_Init+0x2a0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d05e      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cc4:	4a98      	ldr	r2, [pc, #608]	@ (8000f28 <HAL_GPIO_Init+0x2a0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d875      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cca:	4a98      	ldr	r2, [pc, #608]	@ (8000f2c <HAL_GPIO_Init+0x2a4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d058      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cd0:	4a96      	ldr	r2, [pc, #600]	@ (8000f2c <HAL_GPIO_Init+0x2a4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d86f      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cd6:	4a96      	ldr	r2, [pc, #600]	@ (8000f30 <HAL_GPIO_Init+0x2a8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d052      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cdc:	4a94      	ldr	r2, [pc, #592]	@ (8000f30 <HAL_GPIO_Init+0x2a8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d869      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000ce2:	4a94      	ldr	r2, [pc, #592]	@ (8000f34 <HAL_GPIO_Init+0x2ac>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d04c      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000ce8:	4a92      	ldr	r2, [pc, #584]	@ (8000f34 <HAL_GPIO_Init+0x2ac>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d863      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cee:	4a92      	ldr	r2, [pc, #584]	@ (8000f38 <HAL_GPIO_Init+0x2b0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d046      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cf4:	4a90      	ldr	r2, [pc, #576]	@ (8000f38 <HAL_GPIO_Init+0x2b0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d85d      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d82a      	bhi.n	8000d54 <HAL_GPIO_Init+0xcc>
 8000cfe:	2b12      	cmp	r3, #18
 8000d00:	d859      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000d02:	a201      	add	r2, pc, #4	@ (adr r2, 8000d08 <HAL_GPIO_Init+0x80>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d83 	.word	0x08000d83
 8000d0c:	08000d5d 	.word	0x08000d5d
 8000d10:	08000d6f 	.word	0x08000d6f
 8000d14:	08000db1 	.word	0x08000db1
 8000d18:	08000db7 	.word	0x08000db7
 8000d1c:	08000db7 	.word	0x08000db7
 8000d20:	08000db7 	.word	0x08000db7
 8000d24:	08000db7 	.word	0x08000db7
 8000d28:	08000db7 	.word	0x08000db7
 8000d2c:	08000db7 	.word	0x08000db7
 8000d30:	08000db7 	.word	0x08000db7
 8000d34:	08000db7 	.word	0x08000db7
 8000d38:	08000db7 	.word	0x08000db7
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000db7 	.word	0x08000db7
 8000d44:	08000db7 	.word	0x08000db7
 8000d48:	08000db7 	.word	0x08000db7
 8000d4c:	08000d65 	.word	0x08000d65
 8000d50:	08000d79 	.word	0x08000d79
 8000d54:	4a79      	ldr	r2, [pc, #484]	@ (8000f3c <HAL_GPIO_Init+0x2b4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5a:	e02c      	b.n	8000db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e029      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e024      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	3308      	adds	r3, #8
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e01f      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e01a      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e013      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d105      	bne.n	8000da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	611a      	str	r2, [r3, #16]
          break;
 8000da2:	e009      	b.n	8000db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	615a      	str	r2, [r3, #20]
          break;
 8000dae:	e003      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          break;
 8000db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2bff      	cmp	r3, #255	@ 0xff
 8000dbc:	d801      	bhi.n	8000dc2 <HAL_GPIO_Init+0x13a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	e001      	b.n	8000dc6 <HAL_GPIO_Init+0x13e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2bff      	cmp	r3, #255	@ 0xff
 8000dcc:	d802      	bhi.n	8000dd4 <HAL_GPIO_Init+0x14c>
 8000dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_Init+0x152>
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd6:	3b08      	subs	r3, #8
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	210f      	movs	r1, #15
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	6a39      	ldr	r1, [r7, #32]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 80b1 	beq.w	8000f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e08:	4b4d      	ldr	r3, [pc, #308]	@ (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b4a      	ldr	r3, [pc, #296]	@ (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e20:	4a48      	ldr	r2, [pc, #288]	@ (8000f44 <HAL_GPIO_Init+0x2bc>)
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a40      	ldr	r2, [pc, #256]	@ (8000f48 <HAL_GPIO_Init+0x2c0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d013      	beq.n	8000e74 <HAL_GPIO_Init+0x1ec>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f4c <HAL_GPIO_Init+0x2c4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00d      	beq.n	8000e70 <HAL_GPIO_Init+0x1e8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3e      	ldr	r2, [pc, #248]	@ (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e64:	2303      	movs	r3, #3
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e68:	2304      	movs	r3, #4
 8000e6a:	e004      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e74:	2300      	movs	r3, #0
 8000e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4093      	lsls	r3, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e86:	492f      	ldr	r1, [pc, #188]	@ (8000f44 <HAL_GPIO_Init+0x2bc>)
 8000e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	492c      	ldr	r1, [pc, #176]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	608b      	str	r3, [r1, #8]
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eae:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4928      	ldr	r1, [pc, #160]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ec8:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	4922      	ldr	r1, [pc, #136]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60cb      	str	r3, [r1, #12]
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed6:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	491e      	ldr	r1, [pc, #120]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4918      	ldr	r1, [pc, #96]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000efe:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4914      	ldr	r1, [pc, #80]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d021      	beq.n	8000f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	490e      	ldr	r1, [pc, #56]	@ (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e021      	b.n	8000f6a <HAL_GPIO_Init+0x2e2>
 8000f26:	bf00      	nop
 8000f28:	10320000 	.word	0x10320000
 8000f2c:	10310000 	.word	0x10310000
 8000f30:	10220000 	.word	0x10220000
 8000f34:	10210000 	.word	0x10210000
 8000f38:	10120000 	.word	0x10120000
 8000f3c:	10110000 	.word	0x10110000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <HAL_GPIO_Init+0x304>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4909      	ldr	r1, [pc, #36]	@ (8000f8c <HAL_GPIO_Init+0x304>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f ae8e 	bne.w	8000c9c <HAL_GPIO_Init+0x14>
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	372c      	adds	r7, #44	@ 0x2c
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d002      	beq.n	8000fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e001      	b.n	8000fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fce:	787b      	ldrb	r3, [r7, #1]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fda:	e003      	b.n	8000fe4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	041a      	lsls	r2, r3, #16
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	041a      	lsls	r2, r3, #16
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43d9      	mvns	r1, r3
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	400b      	ands	r3, r1
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	611a      	str	r2, [r3, #16]
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	4013      	ands	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa00 	bl	8000444 <HAL_GPIO_EXTI_Callback>
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e272      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8087 	beq.w	800117e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001070:	4b92      	ldr	r3, [pc, #584]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b04      	cmp	r3, #4
 800107a:	d00c      	beq.n	8001096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800107c:	4b8f      	ldr	r3, [pc, #572]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d112      	bne.n	80010ae <HAL_RCC_OscConfig+0x5e>
 8001088:	4b8c      	ldr	r3, [pc, #560]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001094:	d10b      	bne.n	80010ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001096:	4b89      	ldr	r3, [pc, #548]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d06c      	beq.n	800117c <HAL_RCC_OscConfig+0x12c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d168      	bne.n	800117c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e24c      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x76>
 80010b8:	4b80      	ldr	r3, [pc, #512]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a7f      	ldr	r2, [pc, #508]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e02e      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x98>
 80010ce:	4b7b      	ldr	r3, [pc, #492]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a7a      	ldr	r2, [pc, #488]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b78      	ldr	r3, [pc, #480]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a77      	ldr	r2, [pc, #476]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0xbc>
 80010f2:	4b72      	ldr	r3, [pc, #456]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a71      	ldr	r2, [pc, #452]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b6f      	ldr	r3, [pc, #444]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6e      	ldr	r2, [pc, #440]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 800110c:	4b6b      	ldr	r3, [pc, #428]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a6a      	ldr	r2, [pc, #424]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a67      	ldr	r2, [pc, #412]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fbe2 	bl	80008f4 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fbde 	bl	80008f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	@ 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e200      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b5d      	ldr	r3, [pc, #372]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0xe4>
 8001152:	e014      	b.n	800117e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fbce 	bl	80008f4 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fbca 	bl	80008f4 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	@ 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1ec      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	4b53      	ldr	r3, [pc, #332]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x10c>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d063      	beq.n	8001252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800118a:	4b4c      	ldr	r3, [pc, #304]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001196:	4b49      	ldr	r3, [pc, #292]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d11c      	bne.n	80011dc <HAL_RCC_OscConfig+0x18c>
 80011a2:	4b46      	ldr	r3, [pc, #280]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d116      	bne.n	80011dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	4b43      	ldr	r3, [pc, #268]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x176>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e1c0      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b3d      	ldr	r3, [pc, #244]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4939      	ldr	r1, [pc, #228]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	e03a      	b.n	8001252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <HAL_RCC_OscConfig+0x270>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fb83 	bl	80008f4 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fb7f 	bl	80008f4 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e1a1      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4927      	ldr	r1, [pc, #156]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <HAL_RCC_OscConfig+0x270>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fb62 	bl	80008f4 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fb5e 	bl	80008f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e180      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d03a      	beq.n	80012d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d019      	beq.n	800129a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_RCC_OscConfig+0x274>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fb42 	bl	80008f4 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fb3e 	bl	80008f4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e160      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f000 face 	bl	8001834 <RCC_Delay>
 8001298:	e01c      	b.n	80012d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_RCC_OscConfig+0x274>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fb28 	bl	80008f4 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a6:	e00f      	b.n	80012c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fb24 	bl	80008f4 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d908      	bls.n	80012c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e146      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	42420000 	.word	0x42420000
 80012c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	4b92      	ldr	r3, [pc, #584]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e9      	bne.n	80012a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a6 	beq.w	800142e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10d      	bne.n	800130e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a87      	ldr	r2, [pc, #540]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b85      	ldr	r3, [pc, #532]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b82      	ldr	r3, [pc, #520]	@ (8001518 <HAL_RCC_OscConfig+0x4c8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b7f      	ldr	r3, [pc, #508]	@ (8001518 <HAL_RCC_OscConfig+0x4c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a7e      	ldr	r2, [pc, #504]	@ (8001518 <HAL_RCC_OscConfig+0x4c8>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fae5 	bl	80008f4 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fae1 	bl	80008f4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	@ 0x64
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e103      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	4b75      	ldr	r3, [pc, #468]	@ (8001518 <HAL_RCC_OscConfig+0x4c8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x312>
 8001354:	4b6f      	ldr	r3, [pc, #444]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a6e      	ldr	r2, [pc, #440]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e02d      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x334>
 800136a:	4b6a      	ldr	r3, [pc, #424]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a69      	ldr	r2, [pc, #420]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b67      	ldr	r3, [pc, #412]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a66      	ldr	r2, [pc, #408]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	e01c      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x356>
 800138c:	4b61      	ldr	r3, [pc, #388]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a60      	ldr	r2, [pc, #384]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	4b5e      	ldr	r3, [pc, #376]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a5d      	ldr	r2, [pc, #372]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 80013a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4b58      	ldr	r3, [pc, #352]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a57      	ldr	r2, [pc, #348]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d015      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fa95 	bl	80008f4 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff fa91 	bl	80008f4 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0b1      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ee      	beq.n	80013ce <HAL_RCC_OscConfig+0x37e>
 80013f0:	e014      	b.n	800141c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fa7f 	bl	80008f4 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fa7b 	bl	80008f4 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e09b      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	4b40      	ldr	r3, [pc, #256]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ee      	bne.n	80013fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d105      	bne.n	800142e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001422:	4b3c      	ldr	r3, [pc, #240]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a3b      	ldr	r2, [pc, #236]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8087 	beq.w	8001546 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001438:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d061      	beq.n	8001508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d146      	bne.n	80014da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144c:	4b33      	ldr	r3, [pc, #204]	@ (800151c <HAL_RCC_OscConfig+0x4cc>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fa4f 	bl	80008f4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fa4b 	bl	80008f4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e06d      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146c:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001480:	d108      	bne.n	8001494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4921      	ldr	r1, [pc, #132]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a19      	ldr	r1, [r3, #32]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	430b      	orrs	r3, r1
 80014a6:	491b      	ldr	r1, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_RCC_OscConfig+0x4cc>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fa1f 	bl	80008f4 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fa1b 	bl	80008f4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e03d      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x46a>
 80014d8:	e035      	b.n	8001546 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_RCC_OscConfig+0x4cc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fa08 	bl	80008f4 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fa04 	bl	80008f4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e026      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x498>
 8001506:	e01e      	b.n	8001546 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e019      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
 8001514:	40021000 	.word	0x40021000
 8001518:	40007000 	.word	0x40007000
 800151c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_RCC_OscConfig+0x500>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	429a      	cmp	r2, r3
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0d0      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b6a      	ldr	r3, [pc, #424]	@ (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d910      	bls.n	8001598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b67      	ldr	r3, [pc, #412]	@ (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	4965      	ldr	r1, [pc, #404]	@ (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b63      	ldr	r3, [pc, #396]	@ (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b8      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b59      	ldr	r3, [pc, #356]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a52      	ldr	r2, [pc, #328]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b50      	ldr	r3, [pc, #320]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494d      	ldr	r1, [pc, #308]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d040      	beq.n	8001674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b47      	ldr	r3, [pc, #284]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d115      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07f      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b41      	ldr	r3, [pc, #260]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e073      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e06b      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4b39      	ldr	r3, [pc, #228]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f023 0203 	bic.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4936      	ldr	r1, [pc, #216]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001644:	f7ff f956 	bl	80008f4 <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	e00a      	b.n	8001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7ff f952 	bl	80008f4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e053      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	4b2d      	ldr	r3, [pc, #180]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 020c 	and.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	429a      	cmp	r2, r3
 8001672:	d1eb      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d210      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 0207 	bic.w	r2, r3, #7
 800168a:	4922      	ldr	r1, [pc, #136]	@ (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e032      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4916      	ldr	r1, [pc, #88]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490e      	ldr	r1, [pc, #56]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f821 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	490a      	ldr	r1, [pc, #40]	@ (800171c <HAL_RCC_ClockConfig+0x1c8>)
 80016f4:	5ccb      	ldrb	r3, [r1, r3]
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x1cc>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_RCC_ClockConfig+0x1d0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f8b4 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40022000 	.word	0x40022000
 8001718:	40021000 	.word	0x40021000
 800171c:	08003c24 	.word	0x08003c24
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001742:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b04      	cmp	r3, #4
 8001750:	d002      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x30>
 8001752:	2b08      	cmp	r3, #8
 8001754:	d003      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x36>
 8001756:	e027      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800175a:	613b      	str	r3, [r7, #16]
      break;
 800175c:	e027      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	0c9b      	lsrs	r3, r3, #18
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d010      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001776:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	0c5b      	lsrs	r3, r3, #17
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	4a11      	ldr	r2, [pc, #68]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001782:	5cd3      	ldrb	r3, [r2, r3]
 8001784:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800178a:	fb03 f202 	mul.w	r2, r3, r2
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e004      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a0c      	ldr	r2, [pc, #48]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	613b      	str	r3, [r7, #16]
      break;
 80017a6:	e002      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80017aa:	613b      	str	r3, [r7, #16]
      break;
 80017ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ae:	693b      	ldr	r3, [r7, #16]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	007a1200 	.word	0x007a1200
 80017c4:	08003c3c 	.word	0x08003c3c
 80017c8:	08003c4c 	.word	0x08003c4c
 80017cc:	003d0900 	.word	0x003d0900

080017d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d4:	4b02      	ldr	r3, [pc, #8]	@ (80017e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	20000000 	.word	0x20000000

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017e8:	f7ff fff2 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	4903      	ldr	r1, [pc, #12]	@ (8001808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fa:	5ccb      	ldrb	r3, [r1, r3]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40021000 	.word	0x40021000
 8001808:	08003c34 	.word	0x08003c34

0800180c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001810:	f7ff ffde 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	0adb      	lsrs	r3, r3, #11
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	@ (8001830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	08003c34 	.word	0x08003c34

08001834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <RCC_Delay+0x34>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <RCC_Delay+0x38>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0a5b      	lsrs	r3, r3, #9
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001850:	bf00      	nop
  }
  while (Delay --);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	60fa      	str	r2, [r7, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f9      	bne.n	8001850 <RCC_Delay+0x1c>
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000000 	.word	0x20000000
 800186c:	10624dd3 	.word	0x10624dd3

08001870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e041      	b.n	8001906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe fe48 	bl	800052c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f000 fa5c 	bl	8001d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d001      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e03a      	b.n	800199e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <HAL_TIM_Base_Start_IT+0x98>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00e      	beq.n	8001968 <HAL_TIM_Base_Start_IT+0x58>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001952:	d009      	beq.n	8001968 <HAL_TIM_Base_Start_IT+0x58>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <HAL_TIM_Base_Start_IT+0x9c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d004      	beq.n	8001968 <HAL_TIM_Base_Start_IT+0x58>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a13      	ldr	r2, [pc, #76]	@ (80019b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d111      	bne.n	800198c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b06      	cmp	r3, #6
 8001978:	d010      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198a:	e007      	b.n	800199c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40012c00 	.word	0x40012c00
 80019ac:	40000400 	.word	0x40000400
 80019b0:	40000800 	.word	0x40000800

080019b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d020      	beq.n	8001a18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01b      	beq.n	8001a18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0202 	mvn.w	r2, #2
 80019e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f998 	bl	8001d34 <HAL_TIM_IC_CaptureCallback>
 8001a04:	e005      	b.n	8001a12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f98b 	bl	8001d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f99a 	bl	8001d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d020      	beq.n	8001a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01b      	beq.n	8001a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0204 	mvn.w	r2, #4
 8001a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f972 	bl	8001d34 <HAL_TIM_IC_CaptureCallback>
 8001a50:	e005      	b.n	8001a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f965 	bl	8001d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f974 	bl	8001d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d020      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01b      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0208 	mvn.w	r2, #8
 8001a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2204      	movs	r2, #4
 8001a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f94c 	bl	8001d34 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f93f 	bl	8001d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f94e 	bl	8001d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d020      	beq.n	8001afc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0210 	mvn.w	r2, #16
 8001acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f926 	bl	8001d34 <HAL_TIM_IC_CaptureCallback>
 8001ae8:	e005      	b.n	8001af6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f919 	bl	8001d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f928 	bl	8001d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00c      	beq.n	8001b20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0201 	mvn.w	r2, #1
 8001b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe fca6 	bl	800046c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fa7f 	bl	8002042 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00c      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8f8 	bl	8001d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0220 	mvn.w	r2, #32
 8001b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fa52 	bl	8002030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0b4      	b.n	8001d1a <HAL_TIM_ConfigClockSource+0x186>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001be8:	d03e      	beq.n	8001c68 <HAL_TIM_ConfigClockSource+0xd4>
 8001bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bee:	f200 8087 	bhi.w	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
 8001bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bf6:	f000 8086 	beq.w	8001d06 <HAL_TIM_ConfigClockSource+0x172>
 8001bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bfe:	d87f      	bhi.n	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
 8001c00:	2b70      	cmp	r3, #112	@ 0x70
 8001c02:	d01a      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0xa6>
 8001c04:	2b70      	cmp	r3, #112	@ 0x70
 8001c06:	d87b      	bhi.n	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
 8001c08:	2b60      	cmp	r3, #96	@ 0x60
 8001c0a:	d050      	beq.n	8001cae <HAL_TIM_ConfigClockSource+0x11a>
 8001c0c:	2b60      	cmp	r3, #96	@ 0x60
 8001c0e:	d877      	bhi.n	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
 8001c10:	2b50      	cmp	r3, #80	@ 0x50
 8001c12:	d03c      	beq.n	8001c8e <HAL_TIM_ConfigClockSource+0xfa>
 8001c14:	2b50      	cmp	r3, #80	@ 0x50
 8001c16:	d873      	bhi.n	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
 8001c18:	2b40      	cmp	r3, #64	@ 0x40
 8001c1a:	d058      	beq.n	8001cce <HAL_TIM_ConfigClockSource+0x13a>
 8001c1c:	2b40      	cmp	r3, #64	@ 0x40
 8001c1e:	d86f      	bhi.n	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
 8001c20:	2b30      	cmp	r3, #48	@ 0x30
 8001c22:	d064      	beq.n	8001cee <HAL_TIM_ConfigClockSource+0x15a>
 8001c24:	2b30      	cmp	r3, #48	@ 0x30
 8001c26:	d86b      	bhi.n	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d060      	beq.n	8001cee <HAL_TIM_ConfigClockSource+0x15a>
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d867      	bhi.n	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d05c      	beq.n	8001cee <HAL_TIM_ConfigClockSource+0x15a>
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d05a      	beq.n	8001cee <HAL_TIM_ConfigClockSource+0x15a>
 8001c38:	e062      	b.n	8001d00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c4a:	f000 f974 	bl	8001f36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	609a      	str	r2, [r3, #8]
      break;
 8001c66:	e04f      	b.n	8001d08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c78:	f000 f95d 	bl	8001f36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c8a:	609a      	str	r2, [r3, #8]
      break;
 8001c8c:	e03c      	b.n	8001d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f000 f8d4 	bl	8001e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2150      	movs	r1, #80	@ 0x50
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f92b 	bl	8001f02 <TIM_ITRx_SetConfig>
      break;
 8001cac:	e02c      	b.n	8001d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f000 f8f2 	bl	8001ea4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2160      	movs	r1, #96	@ 0x60
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f91b 	bl	8001f02 <TIM_ITRx_SetConfig>
      break;
 8001ccc:	e01c      	b.n	8001d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f000 f8b4 	bl	8001e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2140      	movs	r1, #64	@ 0x40
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f90b 	bl	8001f02 <TIM_ITRx_SetConfig>
      break;
 8001cec:	e00c      	b.n	8001d08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f000 f902 	bl	8001f02 <TIM_ITRx_SetConfig>
      break;
 8001cfe:	e003      	b.n	8001d08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
      break;
 8001d04:	e000      	b.n	8001d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
	...

08001d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e3c <TIM_Base_SetConfig+0xd0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00b      	beq.n	8001d9c <TIM_Base_SetConfig+0x30>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8a:	d007      	beq.n	8001d9c <TIM_Base_SetConfig+0x30>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e40 <TIM_Base_SetConfig+0xd4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d003      	beq.n	8001d9c <TIM_Base_SetConfig+0x30>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a2b      	ldr	r2, [pc, #172]	@ (8001e44 <TIM_Base_SetConfig+0xd8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d108      	bne.n	8001dae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a22      	ldr	r2, [pc, #136]	@ (8001e3c <TIM_Base_SetConfig+0xd0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00b      	beq.n	8001dce <TIM_Base_SetConfig+0x62>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dbc:	d007      	beq.n	8001dce <TIM_Base_SetConfig+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <TIM_Base_SetConfig+0xd4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d003      	beq.n	8001dce <TIM_Base_SetConfig+0x62>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e44 <TIM_Base_SetConfig+0xd8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <TIM_Base_SetConfig+0xd0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d103      	bne.n	8001e14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f023 0201 	bic.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
  }
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40000800 	.word	0x40000800

08001e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	f023 0201 	bic.w	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f023 030a 	bic.w	r3, r3, #10
 8001e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	621a      	str	r2, [r3, #32]
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	f023 0210 	bic.w	r2, r3, #16
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	031b      	lsls	r3, r3, #12
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	621a      	str	r2, [r3, #32]
}
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f043 0307 	orr.w	r3, r3, #7
 8001f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b087      	sub	sp, #28
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	021a      	lsls	r2, r3, #8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	609a      	str	r2, [r3, #8]
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e046      	b.n	800201a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a16      	ldr	r2, [pc, #88]	@ (8002024 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd8:	d009      	beq.n	8001fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a12      	ldr	r2, [pc, #72]	@ (8002028 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a10      	ldr	r2, [pc, #64]	@ (800202c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10c      	bne.n	8002008 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40012c00 	.word	0x40012c00
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800

08002030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e042      	b.n	80020ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fa7a 	bl	8000574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2224      	movs	r2, #36	@ 0x24
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fdaf 	bl	8002bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	@ 0x28
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b20      	cmp	r3, #32
 8002112:	d175      	bne.n	8002200 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_UART_Transmit+0x2c>
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e06e      	b.n	8002202 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2221      	movs	r2, #33	@ 0x21
 800212e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002132:	f7fe fbdf 	bl	80008f4 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	88fa      	ldrh	r2, [r7, #6]
 800213c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	88fa      	ldrh	r2, [r7, #6]
 8002142:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800214c:	d108      	bne.n	8002160 <HAL_UART_Transmit+0x6c>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d104      	bne.n	8002160 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e003      	b.n	8002168 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002168:	e02e      	b.n	80021c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2200      	movs	r2, #0
 8002172:	2180      	movs	r1, #128	@ 0x80
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fb13 	bl	80027a0 <UART_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e03a      	b.n	8002202 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10b      	bne.n	80021aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	3302      	adds	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e007      	b.n	80021ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1cb      	bne.n	800216a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	2140      	movs	r1, #64	@ 0x40
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fadf 	bl	80027a0 <UART_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e006      	b.n	8002202 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e000      	b.n	8002202 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002200:	2302      	movs	r3, #2
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	4613      	mov	r3, r2
 8002216:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b20      	cmp	r3, #32
 8002222:	d112      	bne.n	800224a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_UART_Receive_IT+0x26>
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e00b      	b.n	800224c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	461a      	mov	r2, r3
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fb06 	bl	8002852 <UART_Start_Receive_IT>
 8002246:	4603      	mov	r3, r0
 8002248:	e000      	b.n	800224c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800224a:	2302      	movs	r3, #2
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0ba      	sub	sp, #232	@ 0xe8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10f      	bne.n	80022ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800229a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_UART_IRQHandler+0x66>
 80022a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fbe3 	bl	8002a7e <UART_Receive_IT>
      return;
 80022b8:	e25b      	b.n	8002772 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80de 	beq.w	8002480 <HAL_UART_IRQHandler+0x22c>
 80022c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80d1 	beq.w	8002480 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_UART_IRQHandler+0xae>
 80022ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_UART_IRQHandler+0xd2>
 800230e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_UART_IRQHandler+0xf6>
 8002332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f043 0204 	orr.w	r2, r3, #4
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800234a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d011      	beq.n	800237a <HAL_UART_IRQHandler+0x126>
 8002356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	f043 0208 	orr.w	r2, r3, #8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 81f2 	beq.w	8002768 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_UART_IRQHandler+0x14e>
 8002390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fb6e 	bl	8002a7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf14      	ite	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	2300      	moveq	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_UART_IRQHandler+0x17a>
 80023c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d04f      	beq.n	800246e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa78 	bl	80028c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d041      	beq.n	8002466 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3314      	adds	r3, #20
 80023e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023f0:	e853 3f00 	ldrex	r3, [r3]
 80023f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80023f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3314      	adds	r3, #20
 800240a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800240e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800241a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1d9      	bne.n	80023e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d013      	beq.n	800245e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243a:	4a7e      	ldr	r2, [pc, #504]	@ (8002634 <HAL_UART_IRQHandler+0x3e0>)
 800243c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fba8 	bl	8000b98 <HAL_DMA_Abort_IT>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d016      	beq.n	800247c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002458:	4610      	mov	r0, r2
 800245a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800245c:	e00e      	b.n	800247c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f98a 	bl	8002778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002464:	e00a      	b.n	800247c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f986 	bl	8002778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246c:	e006      	b.n	800247c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f982 	bl	8002778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800247a:	e175      	b.n	8002768 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800247c:	bf00      	nop
    return;
 800247e:	e173      	b.n	8002768 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	2b01      	cmp	r3, #1
 8002486:	f040 814f 	bne.w	8002728 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800248a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8148 	beq.w	8002728 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8141 	beq.w	8002728 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80b6 	beq.w	8002638 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8145 	beq.w	800276c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024ea:	429a      	cmp	r2, r3
 80024ec:	f080 813e 	bcs.w	800276c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b20      	cmp	r3, #32
 8002500:	f000 8088 	beq.w	8002614 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	330c      	adds	r3, #12
 800250a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002512:	e853 3f00 	ldrex	r3, [r3]
 8002516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800251a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800251e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002522:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	330c      	adds	r3, #12
 800252c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002530:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002538:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800253c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002540:	e841 2300 	strex	r3, r2, [r1]
 8002544:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1d9      	bne.n	8002504 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3314      	adds	r3, #20
 8002556:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800255a:	e853 3f00 	ldrex	r3, [r3]
 800255e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3314      	adds	r3, #20
 8002570:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002574:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002578:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800257c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002580:	e841 2300 	strex	r3, r2, [r1]
 8002584:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e1      	bne.n	8002550 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002596:	e853 3f00 	ldrex	r3, [r3]
 800259a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800259c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800259e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3314      	adds	r3, #20
 80025ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80025b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80025b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025b8:	e841 2300 	strex	r3, r2, [r1]
 80025bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80025be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e3      	bne.n	800258c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025dc:	e853 3f00 	ldrex	r3, [r3]
 80025e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e4:	f023 0310 	bic.w	r3, r3, #16
 80025e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80025f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025fe:	e841 2300 	strex	r3, r2, [r1]
 8002602:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e3      	bne.n	80025d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fa87 	bl	8000b22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002622:	b29b      	uxth	r3, r3
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	b29b      	uxth	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8ad 	bl	800278a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002630:	e09c      	b.n	800276c <HAL_UART_IRQHandler+0x518>
 8002632:	bf00      	nop
 8002634:	08002989 	.word	0x08002989
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002640:	b29b      	uxth	r3, r3
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 808e 	beq.w	8002770 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8089 	beq.w	8002770 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	330c      	adds	r3, #12
 8002664:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800266e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002682:	647a      	str	r2, [r7, #68]	@ 0x44
 8002684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e3      	bne.n	800265e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3314      	adds	r3, #20
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	623b      	str	r3, [r7, #32]
   return(result);
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3314      	adds	r3, #20
 80026b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80026ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e3      	bne.n	8002696 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	e853 3f00 	ldrex	r3, [r3]
 80026ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0310 	bic.w	r3, r3, #16
 80026f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002700:	61fa      	str	r2, [r7, #28]
 8002702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002704:	69b9      	ldr	r1, [r7, #24]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	e841 2300 	strex	r3, r2, [r1]
 800270c:	617b      	str	r3, [r7, #20]
   return(result);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e3      	bne.n	80026dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800271a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f832 	bl	800278a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002726:	e023      	b.n	8002770 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800272c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_UART_IRQHandler+0x4f4>
 8002734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f935 	bl	80029b0 <UART_Transmit_IT>
    return;
 8002746:	e014      	b.n	8002772 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <HAL_UART_IRQHandler+0x51e>
 8002754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f974 	bl	8002a4e <UART_EndTransmit_IT>
    return;
 8002766:	e004      	b.n	8002772 <HAL_UART_IRQHandler+0x51e>
    return;
 8002768:	bf00      	nop
 800276a:	e002      	b.n	8002772 <HAL_UART_IRQHandler+0x51e>
      return;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <HAL_UART_IRQHandler+0x51e>
      return;
 8002770:	bf00      	nop
  }
}
 8002772:	37e8      	adds	r7, #232	@ 0xe8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b0:	e03b      	b.n	800282a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d037      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7fe f89b 	bl	80008f4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e03a      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d023      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b80      	cmp	r3, #128	@ 0x80
 80027e6:	d020      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b40      	cmp	r3, #64	@ 0x40
 80027ec:	d01d      	beq.n	800282a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d116      	bne.n	800282a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f856 	bl	80028c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2208      	movs	r2, #8
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00f      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4013      	ands	r3, r2
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	429a      	cmp	r2, r3
 8002846:	d0b4      	beq.n	80027b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	4613      	mov	r3, r2
 800285e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	88fa      	ldrh	r2, [r7, #6]
 8002870:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2222      	movs	r2, #34	@ 0x22
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002896:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0220 	orr.w	r2, r2, #32
 80028b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b095      	sub	sp, #84	@ 0x54
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e5      	bne.n	80028cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3314      	adds	r3, #20
 8002906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	e853 3f00 	ldrex	r3, [r3]
 800290e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3314      	adds	r3, #20
 800291e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002928:	e841 2300 	strex	r3, r2, [r1]
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e5      	bne.n	8002900 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	2b01      	cmp	r3, #1
 800293a:	d119      	bne.n	8002970 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	60bb      	str	r3, [r7, #8]
   return(result);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f023 0310 	bic.w	r3, r3, #16
 8002952:	647b      	str	r3, [r7, #68]	@ 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800295c:	61ba      	str	r2, [r7, #24]
 800295e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	6979      	ldr	r1, [r7, #20]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	e841 2300 	strex	r3, r2, [r1]
 8002968:	613b      	str	r3, [r7, #16]
   return(result);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e5      	bne.n	800293c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800297e:	bf00      	nop
 8002980:	3754      	adds	r7, #84	@ 0x54
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff fee8 	bl	8002778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b21      	cmp	r3, #33	@ 0x21
 80029c2:	d13e      	bne.n	8002a42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029cc:	d114      	bne.n	80029f8 <UART_Transmit_IT+0x48>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d110      	bne.n	80029f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	621a      	str	r2, [r3, #32]
 80029f6:	e008      	b.n	8002a0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	1c59      	adds	r1, r3, #1
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6211      	str	r1, [r2, #32]
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4619      	mov	r1, r3
 8002a18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
  }
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd fcd2 	bl	8000418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08c      	sub	sp, #48	@ 0x30
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b22      	cmp	r3, #34	@ 0x22
 8002a90:	f040 80ae 	bne.w	8002bf0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9c:	d117      	bne.n	8002ace <UART_Receive_IT+0x50>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d113      	bne.n	8002ace <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	1c9a      	adds	r2, r3, #2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002acc:	e026      	b.n	8002b1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae0:	d007      	beq.n	8002af2 <UART_Receive_IT+0x74>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <UART_Receive_IT+0x82>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e008      	b.n	8002b12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d15d      	bne.n	8002bec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0220 	bic.w	r2, r2, #32
 8002b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d135      	bne.n	8002be2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f023 0310 	bic.w	r3, r3, #16
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9c:	623a      	str	r2, [r7, #32]
 8002b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	69f9      	ldr	r1, [r7, #28]
 8002ba2:	6a3a      	ldr	r2, [r7, #32]
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e5      	bne.n	8002b7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d10a      	bne.n	8002bd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fdd5 	bl	800278a <HAL_UARTEx_RxEventCallback>
 8002be0:	e002      	b.n	8002be8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fbfa 	bl	80003dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e002      	b.n	8002bf2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3730      	adds	r7, #48	@ 0x30
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c36:	f023 030c 	bic.w	r3, r3, #12
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d10 <UART_SetConfig+0x114>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d103      	bne.n	8002c6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c64:	f7fe fdd2 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	e002      	b.n	8002c72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7fe fdba 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8002c70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009a      	lsls	r2, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	4a22      	ldr	r2, [pc, #136]	@ (8002d14 <UART_SetConfig+0x118>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	0119      	lsls	r1, r3, #4
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009a      	lsls	r2, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <UART_SetConfig+0x118>)
 8002caa:	fba3 0302 	umull	r0, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2064      	movs	r0, #100	@ 0x64
 8002cb2:	fb00 f303 	mul.w	r3, r0, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	3332      	adds	r3, #50	@ 0x32
 8002cbc:	4a15      	ldr	r2, [pc, #84]	@ (8002d14 <UART_SetConfig+0x118>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc8:	4419      	add	r1, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <UART_SetConfig+0x118>)
 8002ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2064      	movs	r0, #100	@ 0x64
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	3332      	adds	r3, #50	@ 0x32
 8002cf4:	4a07      	ldr	r2, [pc, #28]	@ (8002d14 <UART_SetConfig+0x118>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	440a      	add	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40013800 	.word	0x40013800
 8002d14:	51eb851f 	.word	0x51eb851f

08002d18 <std>:
 8002d18:	2300      	movs	r3, #0
 8002d1a:	b510      	push	{r4, lr}
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8002d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d26:	6083      	str	r3, [r0, #8]
 8002d28:	8181      	strh	r1, [r0, #12]
 8002d2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d2c:	81c2      	strh	r2, [r0, #14]
 8002d2e:	6183      	str	r3, [r0, #24]
 8002d30:	4619      	mov	r1, r3
 8002d32:	2208      	movs	r2, #8
 8002d34:	305c      	adds	r0, #92	@ 0x5c
 8002d36:	f000 f90e 	bl	8002f56 <memset>
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <std+0x58>)
 8002d3c:	6224      	str	r4, [r4, #32]
 8002d3e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <std+0x5c>)
 8002d42:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <std+0x60>)
 8002d46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <std+0x64>)
 8002d4a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <std+0x68>)
 8002d4e:	429c      	cmp	r4, r3
 8002d50:	d006      	beq.n	8002d60 <std+0x48>
 8002d52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d56:	4294      	cmp	r4, r2
 8002d58:	d002      	beq.n	8002d60 <std+0x48>
 8002d5a:	33d0      	adds	r3, #208	@ 0xd0
 8002d5c:	429c      	cmp	r4, r3
 8002d5e:	d105      	bne.n	8002d6c <std+0x54>
 8002d60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d68:	f000 b96e 	b.w	8003048 <__retarget_lock_init_recursive>
 8002d6c:	bd10      	pop	{r4, pc}
 8002d6e:	bf00      	nop
 8002d70:	08002ed1 	.word	0x08002ed1
 8002d74:	08002ef3 	.word	0x08002ef3
 8002d78:	08002f2b 	.word	0x08002f2b
 8002d7c:	08002f4f 	.word	0x08002f4f
 8002d80:	20000120 	.word	0x20000120

08002d84 <stdio_exit_handler>:
 8002d84:	4a02      	ldr	r2, [pc, #8]	@ (8002d90 <stdio_exit_handler+0xc>)
 8002d86:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <stdio_exit_handler+0x10>)
 8002d88:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <stdio_exit_handler+0x14>)
 8002d8a:	f000 b869 	b.w	8002e60 <_fwalk_sglue>
 8002d8e:	bf00      	nop
 8002d90:	2000000c 	.word	0x2000000c
 8002d94:	080038e1 	.word	0x080038e1
 8002d98:	2000001c 	.word	0x2000001c

08002d9c <cleanup_stdio>:
 8002d9c:	6841      	ldr	r1, [r0, #4]
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <cleanup_stdio+0x34>)
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4299      	cmp	r1, r3
 8002da4:	4604      	mov	r4, r0
 8002da6:	d001      	beq.n	8002dac <cleanup_stdio+0x10>
 8002da8:	f000 fd9a 	bl	80038e0 <_fflush_r>
 8002dac:	68a1      	ldr	r1, [r4, #8]
 8002dae:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <cleanup_stdio+0x38>)
 8002db0:	4299      	cmp	r1, r3
 8002db2:	d002      	beq.n	8002dba <cleanup_stdio+0x1e>
 8002db4:	4620      	mov	r0, r4
 8002db6:	f000 fd93 	bl	80038e0 <_fflush_r>
 8002dba:	68e1      	ldr	r1, [r4, #12]
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <cleanup_stdio+0x3c>)
 8002dbe:	4299      	cmp	r1, r3
 8002dc0:	d004      	beq.n	8002dcc <cleanup_stdio+0x30>
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc8:	f000 bd8a 	b.w	80038e0 <_fflush_r>
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000120 	.word	0x20000120
 8002dd4:	20000188 	.word	0x20000188
 8002dd8:	200001f0 	.word	0x200001f0

08002ddc <global_stdio_init.part.0>:
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <global_stdio_init.part.0+0x30>)
 8002de0:	4c0b      	ldr	r4, [pc, #44]	@ (8002e10 <global_stdio_init.part.0+0x34>)
 8002de2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e14 <global_stdio_init.part.0+0x38>)
 8002de4:	4620      	mov	r0, r4
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	2104      	movs	r1, #4
 8002dea:	2200      	movs	r2, #0
 8002dec:	f7ff ff94 	bl	8002d18 <std>
 8002df0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002df4:	2201      	movs	r2, #1
 8002df6:	2109      	movs	r1, #9
 8002df8:	f7ff ff8e 	bl	8002d18 <std>
 8002dfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e00:	2202      	movs	r2, #2
 8002e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e06:	2112      	movs	r1, #18
 8002e08:	f7ff bf86 	b.w	8002d18 <std>
 8002e0c:	20000258 	.word	0x20000258
 8002e10:	20000120 	.word	0x20000120
 8002e14:	08002d85 	.word	0x08002d85

08002e18 <__sfp_lock_acquire>:
 8002e18:	4801      	ldr	r0, [pc, #4]	@ (8002e20 <__sfp_lock_acquire+0x8>)
 8002e1a:	f000 b916 	b.w	800304a <__retarget_lock_acquire_recursive>
 8002e1e:	bf00      	nop
 8002e20:	20000261 	.word	0x20000261

08002e24 <__sfp_lock_release>:
 8002e24:	4801      	ldr	r0, [pc, #4]	@ (8002e2c <__sfp_lock_release+0x8>)
 8002e26:	f000 b911 	b.w	800304c <__retarget_lock_release_recursive>
 8002e2a:	bf00      	nop
 8002e2c:	20000261 	.word	0x20000261

08002e30 <__sinit>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4604      	mov	r4, r0
 8002e34:	f7ff fff0 	bl	8002e18 <__sfp_lock_acquire>
 8002e38:	6a23      	ldr	r3, [r4, #32]
 8002e3a:	b11b      	cbz	r3, 8002e44 <__sinit+0x14>
 8002e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e40:	f7ff bff0 	b.w	8002e24 <__sfp_lock_release>
 8002e44:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <__sinit+0x28>)
 8002e46:	6223      	str	r3, [r4, #32]
 8002e48:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <__sinit+0x2c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f5      	bne.n	8002e3c <__sinit+0xc>
 8002e50:	f7ff ffc4 	bl	8002ddc <global_stdio_init.part.0>
 8002e54:	e7f2      	b.n	8002e3c <__sinit+0xc>
 8002e56:	bf00      	nop
 8002e58:	08002d9d 	.word	0x08002d9d
 8002e5c:	20000258 	.word	0x20000258

08002e60 <_fwalk_sglue>:
 8002e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e64:	4607      	mov	r7, r0
 8002e66:	4688      	mov	r8, r1
 8002e68:	4614      	mov	r4, r2
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e70:	f1b9 0901 	subs.w	r9, r9, #1
 8002e74:	d505      	bpl.n	8002e82 <_fwalk_sglue+0x22>
 8002e76:	6824      	ldr	r4, [r4, #0]
 8002e78:	2c00      	cmp	r4, #0
 8002e7a:	d1f7      	bne.n	8002e6c <_fwalk_sglue+0xc>
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e82:	89ab      	ldrh	r3, [r5, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d907      	bls.n	8002e98 <_fwalk_sglue+0x38>
 8002e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	d003      	beq.n	8002e98 <_fwalk_sglue+0x38>
 8002e90:	4629      	mov	r1, r5
 8002e92:	4638      	mov	r0, r7
 8002e94:	47c0      	blx	r8
 8002e96:	4306      	orrs	r6, r0
 8002e98:	3568      	adds	r5, #104	@ 0x68
 8002e9a:	e7e9      	b.n	8002e70 <_fwalk_sglue+0x10>

08002e9c <iprintf>:
 8002e9c:	b40f      	push	{r0, r1, r2, r3}
 8002e9e:	b507      	push	{r0, r1, r2, lr}
 8002ea0:	4906      	ldr	r1, [pc, #24]	@ (8002ebc <iprintf+0x20>)
 8002ea2:	ab04      	add	r3, sp, #16
 8002ea4:	6808      	ldr	r0, [r1, #0]
 8002ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002eaa:	6881      	ldr	r1, [r0, #8]
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	f000 f9ed 	bl	800328c <_vfiprintf_r>
 8002eb2:	b003      	add	sp, #12
 8002eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002eb8:	b004      	add	sp, #16
 8002eba:	4770      	bx	lr
 8002ebc:	20000018 	.word	0x20000018

08002ec0 <putchar>:
 8002ec0:	4b02      	ldr	r3, [pc, #8]	@ (8002ecc <putchar+0xc>)
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	6882      	ldr	r2, [r0, #8]
 8002ec8:	f000 bd32 	b.w	8003930 <_putc_r>
 8002ecc:	20000018 	.word	0x20000018

08002ed0 <__sread>:
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed8:	f000 f868 	bl	8002fac <_read_r>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	bfab      	itete	ge
 8002ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8002ee4:	181b      	addge	r3, r3, r0
 8002ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002eea:	bfac      	ite	ge
 8002eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002eee:	81a3      	strhlt	r3, [r4, #12]
 8002ef0:	bd10      	pop	{r4, pc}

08002ef2 <__swrite>:
 8002ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef6:	461f      	mov	r7, r3
 8002ef8:	898b      	ldrh	r3, [r1, #12]
 8002efa:	4605      	mov	r5, r0
 8002efc:	05db      	lsls	r3, r3, #23
 8002efe:	460c      	mov	r4, r1
 8002f00:	4616      	mov	r6, r2
 8002f02:	d505      	bpl.n	8002f10 <__swrite+0x1e>
 8002f04:	2302      	movs	r3, #2
 8002f06:	2200      	movs	r2, #0
 8002f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0c:	f000 f83c 	bl	8002f88 <_lseek_r>
 8002f10:	89a3      	ldrh	r3, [r4, #12]
 8002f12:	4632      	mov	r2, r6
 8002f14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f18:	81a3      	strh	r3, [r4, #12]
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	463b      	mov	r3, r7
 8002f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f26:	f000 b853 	b.w	8002fd0 <_write_r>

08002f2a <__sseek>:
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	460c      	mov	r4, r1
 8002f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f32:	f000 f829 	bl	8002f88 <_lseek_r>
 8002f36:	1c43      	adds	r3, r0, #1
 8002f38:	89a3      	ldrh	r3, [r4, #12]
 8002f3a:	bf15      	itete	ne
 8002f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f46:	81a3      	strheq	r3, [r4, #12]
 8002f48:	bf18      	it	ne
 8002f4a:	81a3      	strhne	r3, [r4, #12]
 8002f4c:	bd10      	pop	{r4, pc}

08002f4e <__sclose>:
 8002f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f52:	f000 b809 	b.w	8002f68 <_close_r>

08002f56 <memset>:
 8002f56:	4603      	mov	r3, r0
 8002f58:	4402      	add	r2, r0
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d100      	bne.n	8002f60 <memset+0xa>
 8002f5e:	4770      	bx	lr
 8002f60:	f803 1b01 	strb.w	r1, [r3], #1
 8002f64:	e7f9      	b.n	8002f5a <memset+0x4>
	...

08002f68 <_close_r>:
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	4d05      	ldr	r5, [pc, #20]	@ (8002f84 <_close_r+0x1c>)
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4608      	mov	r0, r1
 8002f72:	602b      	str	r3, [r5, #0]
 8002f74:	f7fd fbd3 	bl	800071e <_close>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d102      	bne.n	8002f82 <_close_r+0x1a>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	b103      	cbz	r3, 8002f82 <_close_r+0x1a>
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	2000025c 	.word	0x2000025c

08002f88 <_lseek_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	2200      	movs	r2, #0
 8002f92:	4d05      	ldr	r5, [pc, #20]	@ (8002fa8 <_lseek_r+0x20>)
 8002f94:	602a      	str	r2, [r5, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f7fd fbe5 	bl	8000766 <_lseek>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d102      	bne.n	8002fa6 <_lseek_r+0x1e>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	b103      	cbz	r3, 8002fa6 <_lseek_r+0x1e>
 8002fa4:	6023      	str	r3, [r4, #0]
 8002fa6:	bd38      	pop	{r3, r4, r5, pc}
 8002fa8:	2000025c 	.word	0x2000025c

08002fac <_read_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4604      	mov	r4, r0
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4d05      	ldr	r5, [pc, #20]	@ (8002fcc <_read_r+0x20>)
 8002fb8:	602a      	str	r2, [r5, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f7fd fb76 	bl	80006ac <_read>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d102      	bne.n	8002fca <_read_r+0x1e>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	b103      	cbz	r3, 8002fca <_read_r+0x1e>
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	2000025c 	.word	0x2000025c

08002fd0 <_write_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	4608      	mov	r0, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4d05      	ldr	r5, [pc, #20]	@ (8002ff0 <_write_r+0x20>)
 8002fdc:	602a      	str	r2, [r5, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f7fd fb81 	bl	80006e6 <_write>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d102      	bne.n	8002fee <_write_r+0x1e>
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	b103      	cbz	r3, 8002fee <_write_r+0x1e>
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	2000025c 	.word	0x2000025c

08002ff4 <__errno>:
 8002ff4:	4b01      	ldr	r3, [pc, #4]	@ (8002ffc <__errno+0x8>)
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000018 	.word	0x20000018

08003000 <__libc_init_array>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	2600      	movs	r6, #0
 8003004:	4d0c      	ldr	r5, [pc, #48]	@ (8003038 <__libc_init_array+0x38>)
 8003006:	4c0d      	ldr	r4, [pc, #52]	@ (800303c <__libc_init_array+0x3c>)
 8003008:	1b64      	subs	r4, r4, r5
 800300a:	10a4      	asrs	r4, r4, #2
 800300c:	42a6      	cmp	r6, r4
 800300e:	d109      	bne.n	8003024 <__libc_init_array+0x24>
 8003010:	f000 fdf8 	bl	8003c04 <_init>
 8003014:	2600      	movs	r6, #0
 8003016:	4d0a      	ldr	r5, [pc, #40]	@ (8003040 <__libc_init_array+0x40>)
 8003018:	4c0a      	ldr	r4, [pc, #40]	@ (8003044 <__libc_init_array+0x44>)
 800301a:	1b64      	subs	r4, r4, r5
 800301c:	10a4      	asrs	r4, r4, #2
 800301e:	42a6      	cmp	r6, r4
 8003020:	d105      	bne.n	800302e <__libc_init_array+0x2e>
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	f855 3b04 	ldr.w	r3, [r5], #4
 8003028:	4798      	blx	r3
 800302a:	3601      	adds	r6, #1
 800302c:	e7ee      	b.n	800300c <__libc_init_array+0xc>
 800302e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003032:	4798      	blx	r3
 8003034:	3601      	adds	r6, #1
 8003036:	e7f2      	b.n	800301e <__libc_init_array+0x1e>
 8003038:	08003c84 	.word	0x08003c84
 800303c:	08003c84 	.word	0x08003c84
 8003040:	08003c84 	.word	0x08003c84
 8003044:	08003c88 	.word	0x08003c88

08003048 <__retarget_lock_init_recursive>:
 8003048:	4770      	bx	lr

0800304a <__retarget_lock_acquire_recursive>:
 800304a:	4770      	bx	lr

0800304c <__retarget_lock_release_recursive>:
 800304c:	4770      	bx	lr
	...

08003050 <_free_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4605      	mov	r5, r0
 8003054:	2900      	cmp	r1, #0
 8003056:	d040      	beq.n	80030da <_free_r+0x8a>
 8003058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800305c:	1f0c      	subs	r4, r1, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	bfb8      	it	lt
 8003062:	18e4      	addlt	r4, r4, r3
 8003064:	f000 f8de 	bl	8003224 <__malloc_lock>
 8003068:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <_free_r+0x8c>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	b933      	cbnz	r3, 800307c <_free_r+0x2c>
 800306e:	6063      	str	r3, [r4, #4]
 8003070:	6014      	str	r4, [r2, #0]
 8003072:	4628      	mov	r0, r5
 8003074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003078:	f000 b8da 	b.w	8003230 <__malloc_unlock>
 800307c:	42a3      	cmp	r3, r4
 800307e:	d908      	bls.n	8003092 <_free_r+0x42>
 8003080:	6820      	ldr	r0, [r4, #0]
 8003082:	1821      	adds	r1, r4, r0
 8003084:	428b      	cmp	r3, r1
 8003086:	bf01      	itttt	eq
 8003088:	6819      	ldreq	r1, [r3, #0]
 800308a:	685b      	ldreq	r3, [r3, #4]
 800308c:	1809      	addeq	r1, r1, r0
 800308e:	6021      	streq	r1, [r4, #0]
 8003090:	e7ed      	b.n	800306e <_free_r+0x1e>
 8003092:	461a      	mov	r2, r3
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b10b      	cbz	r3, 800309c <_free_r+0x4c>
 8003098:	42a3      	cmp	r3, r4
 800309a:	d9fa      	bls.n	8003092 <_free_r+0x42>
 800309c:	6811      	ldr	r1, [r2, #0]
 800309e:	1850      	adds	r0, r2, r1
 80030a0:	42a0      	cmp	r0, r4
 80030a2:	d10b      	bne.n	80030bc <_free_r+0x6c>
 80030a4:	6820      	ldr	r0, [r4, #0]
 80030a6:	4401      	add	r1, r0
 80030a8:	1850      	adds	r0, r2, r1
 80030aa:	4283      	cmp	r3, r0
 80030ac:	6011      	str	r1, [r2, #0]
 80030ae:	d1e0      	bne.n	8003072 <_free_r+0x22>
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4408      	add	r0, r1
 80030b6:	6010      	str	r0, [r2, #0]
 80030b8:	6053      	str	r3, [r2, #4]
 80030ba:	e7da      	b.n	8003072 <_free_r+0x22>
 80030bc:	d902      	bls.n	80030c4 <_free_r+0x74>
 80030be:	230c      	movs	r3, #12
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	e7d6      	b.n	8003072 <_free_r+0x22>
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	1821      	adds	r1, r4, r0
 80030c8:	428b      	cmp	r3, r1
 80030ca:	bf01      	itttt	eq
 80030cc:	6819      	ldreq	r1, [r3, #0]
 80030ce:	685b      	ldreq	r3, [r3, #4]
 80030d0:	1809      	addeq	r1, r1, r0
 80030d2:	6021      	streq	r1, [r4, #0]
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	6054      	str	r4, [r2, #4]
 80030d8:	e7cb      	b.n	8003072 <_free_r+0x22>
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	20000268 	.word	0x20000268

080030e0 <sbrk_aligned>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	4e0f      	ldr	r6, [pc, #60]	@ (8003120 <sbrk_aligned+0x40>)
 80030e4:	460c      	mov	r4, r1
 80030e6:	6831      	ldr	r1, [r6, #0]
 80030e8:	4605      	mov	r5, r0
 80030ea:	b911      	cbnz	r1, 80030f2 <sbrk_aligned+0x12>
 80030ec:	f000 fce8 	bl	8003ac0 <_sbrk_r>
 80030f0:	6030      	str	r0, [r6, #0]
 80030f2:	4621      	mov	r1, r4
 80030f4:	4628      	mov	r0, r5
 80030f6:	f000 fce3 	bl	8003ac0 <_sbrk_r>
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	d103      	bne.n	8003106 <sbrk_aligned+0x26>
 80030fe:	f04f 34ff 	mov.w	r4, #4294967295
 8003102:	4620      	mov	r0, r4
 8003104:	bd70      	pop	{r4, r5, r6, pc}
 8003106:	1cc4      	adds	r4, r0, #3
 8003108:	f024 0403 	bic.w	r4, r4, #3
 800310c:	42a0      	cmp	r0, r4
 800310e:	d0f8      	beq.n	8003102 <sbrk_aligned+0x22>
 8003110:	1a21      	subs	r1, r4, r0
 8003112:	4628      	mov	r0, r5
 8003114:	f000 fcd4 	bl	8003ac0 <_sbrk_r>
 8003118:	3001      	adds	r0, #1
 800311a:	d1f2      	bne.n	8003102 <sbrk_aligned+0x22>
 800311c:	e7ef      	b.n	80030fe <sbrk_aligned+0x1e>
 800311e:	bf00      	nop
 8003120:	20000264 	.word	0x20000264

08003124 <_malloc_r>:
 8003124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003128:	1ccd      	adds	r5, r1, #3
 800312a:	f025 0503 	bic.w	r5, r5, #3
 800312e:	3508      	adds	r5, #8
 8003130:	2d0c      	cmp	r5, #12
 8003132:	bf38      	it	cc
 8003134:	250c      	movcc	r5, #12
 8003136:	2d00      	cmp	r5, #0
 8003138:	4606      	mov	r6, r0
 800313a:	db01      	blt.n	8003140 <_malloc_r+0x1c>
 800313c:	42a9      	cmp	r1, r5
 800313e:	d904      	bls.n	800314a <_malloc_r+0x26>
 8003140:	230c      	movs	r3, #12
 8003142:	6033      	str	r3, [r6, #0]
 8003144:	2000      	movs	r0, #0
 8003146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800314a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003220 <_malloc_r+0xfc>
 800314e:	f000 f869 	bl	8003224 <__malloc_lock>
 8003152:	f8d8 3000 	ldr.w	r3, [r8]
 8003156:	461c      	mov	r4, r3
 8003158:	bb44      	cbnz	r4, 80031ac <_malloc_r+0x88>
 800315a:	4629      	mov	r1, r5
 800315c:	4630      	mov	r0, r6
 800315e:	f7ff ffbf 	bl	80030e0 <sbrk_aligned>
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	4604      	mov	r4, r0
 8003166:	d158      	bne.n	800321a <_malloc_r+0xf6>
 8003168:	f8d8 4000 	ldr.w	r4, [r8]
 800316c:	4627      	mov	r7, r4
 800316e:	2f00      	cmp	r7, #0
 8003170:	d143      	bne.n	80031fa <_malloc_r+0xd6>
 8003172:	2c00      	cmp	r4, #0
 8003174:	d04b      	beq.n	800320e <_malloc_r+0xea>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	4639      	mov	r1, r7
 800317a:	4630      	mov	r0, r6
 800317c:	eb04 0903 	add.w	r9, r4, r3
 8003180:	f000 fc9e 	bl	8003ac0 <_sbrk_r>
 8003184:	4581      	cmp	r9, r0
 8003186:	d142      	bne.n	800320e <_malloc_r+0xea>
 8003188:	6821      	ldr	r1, [r4, #0]
 800318a:	4630      	mov	r0, r6
 800318c:	1a6d      	subs	r5, r5, r1
 800318e:	4629      	mov	r1, r5
 8003190:	f7ff ffa6 	bl	80030e0 <sbrk_aligned>
 8003194:	3001      	adds	r0, #1
 8003196:	d03a      	beq.n	800320e <_malloc_r+0xea>
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	442b      	add	r3, r5
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	f8d8 3000 	ldr.w	r3, [r8]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	bb62      	cbnz	r2, 8003200 <_malloc_r+0xdc>
 80031a6:	f8c8 7000 	str.w	r7, [r8]
 80031aa:	e00f      	b.n	80031cc <_malloc_r+0xa8>
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	1b52      	subs	r2, r2, r5
 80031b0:	d420      	bmi.n	80031f4 <_malloc_r+0xd0>
 80031b2:	2a0b      	cmp	r2, #11
 80031b4:	d917      	bls.n	80031e6 <_malloc_r+0xc2>
 80031b6:	1961      	adds	r1, r4, r5
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	6025      	str	r5, [r4, #0]
 80031bc:	bf18      	it	ne
 80031be:	6059      	strne	r1, [r3, #4]
 80031c0:	6863      	ldr	r3, [r4, #4]
 80031c2:	bf08      	it	eq
 80031c4:	f8c8 1000 	streq.w	r1, [r8]
 80031c8:	5162      	str	r2, [r4, r5]
 80031ca:	604b      	str	r3, [r1, #4]
 80031cc:	4630      	mov	r0, r6
 80031ce:	f000 f82f 	bl	8003230 <__malloc_unlock>
 80031d2:	f104 000b 	add.w	r0, r4, #11
 80031d6:	1d23      	adds	r3, r4, #4
 80031d8:	f020 0007 	bic.w	r0, r0, #7
 80031dc:	1ac2      	subs	r2, r0, r3
 80031de:	bf1c      	itt	ne
 80031e0:	1a1b      	subne	r3, r3, r0
 80031e2:	50a3      	strne	r3, [r4, r2]
 80031e4:	e7af      	b.n	8003146 <_malloc_r+0x22>
 80031e6:	6862      	ldr	r2, [r4, #4]
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	bf0c      	ite	eq
 80031ec:	f8c8 2000 	streq.w	r2, [r8]
 80031f0:	605a      	strne	r2, [r3, #4]
 80031f2:	e7eb      	b.n	80031cc <_malloc_r+0xa8>
 80031f4:	4623      	mov	r3, r4
 80031f6:	6864      	ldr	r4, [r4, #4]
 80031f8:	e7ae      	b.n	8003158 <_malloc_r+0x34>
 80031fa:	463c      	mov	r4, r7
 80031fc:	687f      	ldr	r7, [r7, #4]
 80031fe:	e7b6      	b.n	800316e <_malloc_r+0x4a>
 8003200:	461a      	mov	r2, r3
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	42a3      	cmp	r3, r4
 8003206:	d1fb      	bne.n	8003200 <_malloc_r+0xdc>
 8003208:	2300      	movs	r3, #0
 800320a:	6053      	str	r3, [r2, #4]
 800320c:	e7de      	b.n	80031cc <_malloc_r+0xa8>
 800320e:	230c      	movs	r3, #12
 8003210:	4630      	mov	r0, r6
 8003212:	6033      	str	r3, [r6, #0]
 8003214:	f000 f80c 	bl	8003230 <__malloc_unlock>
 8003218:	e794      	b.n	8003144 <_malloc_r+0x20>
 800321a:	6005      	str	r5, [r0, #0]
 800321c:	e7d6      	b.n	80031cc <_malloc_r+0xa8>
 800321e:	bf00      	nop
 8003220:	20000268 	.word	0x20000268

08003224 <__malloc_lock>:
 8003224:	4801      	ldr	r0, [pc, #4]	@ (800322c <__malloc_lock+0x8>)
 8003226:	f7ff bf10 	b.w	800304a <__retarget_lock_acquire_recursive>
 800322a:	bf00      	nop
 800322c:	20000260 	.word	0x20000260

08003230 <__malloc_unlock>:
 8003230:	4801      	ldr	r0, [pc, #4]	@ (8003238 <__malloc_unlock+0x8>)
 8003232:	f7ff bf0b 	b.w	800304c <__retarget_lock_release_recursive>
 8003236:	bf00      	nop
 8003238:	20000260 	.word	0x20000260

0800323c <__sfputc_r>:
 800323c:	6893      	ldr	r3, [r2, #8]
 800323e:	b410      	push	{r4}
 8003240:	3b01      	subs	r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	6093      	str	r3, [r2, #8]
 8003246:	da07      	bge.n	8003258 <__sfputc_r+0x1c>
 8003248:	6994      	ldr	r4, [r2, #24]
 800324a:	42a3      	cmp	r3, r4
 800324c:	db01      	blt.n	8003252 <__sfputc_r+0x16>
 800324e:	290a      	cmp	r1, #10
 8003250:	d102      	bne.n	8003258 <__sfputc_r+0x1c>
 8003252:	bc10      	pop	{r4}
 8003254:	f000 bba0 	b.w	8003998 <__swbuf_r>
 8003258:	6813      	ldr	r3, [r2, #0]
 800325a:	1c58      	adds	r0, r3, #1
 800325c:	6010      	str	r0, [r2, #0]
 800325e:	7019      	strb	r1, [r3, #0]
 8003260:	4608      	mov	r0, r1
 8003262:	bc10      	pop	{r4}
 8003264:	4770      	bx	lr

08003266 <__sfputs_r>:
 8003266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003268:	4606      	mov	r6, r0
 800326a:	460f      	mov	r7, r1
 800326c:	4614      	mov	r4, r2
 800326e:	18d5      	adds	r5, r2, r3
 8003270:	42ac      	cmp	r4, r5
 8003272:	d101      	bne.n	8003278 <__sfputs_r+0x12>
 8003274:	2000      	movs	r0, #0
 8003276:	e007      	b.n	8003288 <__sfputs_r+0x22>
 8003278:	463a      	mov	r2, r7
 800327a:	4630      	mov	r0, r6
 800327c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003280:	f7ff ffdc 	bl	800323c <__sfputc_r>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d1f3      	bne.n	8003270 <__sfputs_r+0xa>
 8003288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800328c <_vfiprintf_r>:
 800328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	460d      	mov	r5, r1
 8003292:	4614      	mov	r4, r2
 8003294:	4698      	mov	r8, r3
 8003296:	4606      	mov	r6, r0
 8003298:	b09d      	sub	sp, #116	@ 0x74
 800329a:	b118      	cbz	r0, 80032a4 <_vfiprintf_r+0x18>
 800329c:	6a03      	ldr	r3, [r0, #32]
 800329e:	b90b      	cbnz	r3, 80032a4 <_vfiprintf_r+0x18>
 80032a0:	f7ff fdc6 	bl	8002e30 <__sinit>
 80032a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032a6:	07d9      	lsls	r1, r3, #31
 80032a8:	d405      	bmi.n	80032b6 <_vfiprintf_r+0x2a>
 80032aa:	89ab      	ldrh	r3, [r5, #12]
 80032ac:	059a      	lsls	r2, r3, #22
 80032ae:	d402      	bmi.n	80032b6 <_vfiprintf_r+0x2a>
 80032b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032b2:	f7ff feca 	bl	800304a <__retarget_lock_acquire_recursive>
 80032b6:	89ab      	ldrh	r3, [r5, #12]
 80032b8:	071b      	lsls	r3, r3, #28
 80032ba:	d501      	bpl.n	80032c0 <_vfiprintf_r+0x34>
 80032bc:	692b      	ldr	r3, [r5, #16]
 80032be:	b99b      	cbnz	r3, 80032e8 <_vfiprintf_r+0x5c>
 80032c0:	4629      	mov	r1, r5
 80032c2:	4630      	mov	r0, r6
 80032c4:	f000 fba6 	bl	8003a14 <__swsetup_r>
 80032c8:	b170      	cbz	r0, 80032e8 <_vfiprintf_r+0x5c>
 80032ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032cc:	07dc      	lsls	r4, r3, #31
 80032ce:	d504      	bpl.n	80032da <_vfiprintf_r+0x4e>
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	b01d      	add	sp, #116	@ 0x74
 80032d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032da:	89ab      	ldrh	r3, [r5, #12]
 80032dc:	0598      	lsls	r0, r3, #22
 80032de:	d4f7      	bmi.n	80032d0 <_vfiprintf_r+0x44>
 80032e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032e2:	f7ff feb3 	bl	800304c <__retarget_lock_release_recursive>
 80032e6:	e7f3      	b.n	80032d0 <_vfiprintf_r+0x44>
 80032e8:	2300      	movs	r3, #0
 80032ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80032ec:	2320      	movs	r3, #32
 80032ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032f2:	2330      	movs	r3, #48	@ 0x30
 80032f4:	f04f 0901 	mov.w	r9, #1
 80032f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80032fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80034a8 <_vfiprintf_r+0x21c>
 8003300:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003304:	4623      	mov	r3, r4
 8003306:	469a      	mov	sl, r3
 8003308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800330c:	b10a      	cbz	r2, 8003312 <_vfiprintf_r+0x86>
 800330e:	2a25      	cmp	r2, #37	@ 0x25
 8003310:	d1f9      	bne.n	8003306 <_vfiprintf_r+0x7a>
 8003312:	ebba 0b04 	subs.w	fp, sl, r4
 8003316:	d00b      	beq.n	8003330 <_vfiprintf_r+0xa4>
 8003318:	465b      	mov	r3, fp
 800331a:	4622      	mov	r2, r4
 800331c:	4629      	mov	r1, r5
 800331e:	4630      	mov	r0, r6
 8003320:	f7ff ffa1 	bl	8003266 <__sfputs_r>
 8003324:	3001      	adds	r0, #1
 8003326:	f000 80a7 	beq.w	8003478 <_vfiprintf_r+0x1ec>
 800332a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800332c:	445a      	add	r2, fp
 800332e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003330:	f89a 3000 	ldrb.w	r3, [sl]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 809f 	beq.w	8003478 <_vfiprintf_r+0x1ec>
 800333a:	2300      	movs	r3, #0
 800333c:	f04f 32ff 	mov.w	r2, #4294967295
 8003340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003344:	f10a 0a01 	add.w	sl, sl, #1
 8003348:	9304      	str	r3, [sp, #16]
 800334a:	9307      	str	r3, [sp, #28]
 800334c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003350:	931a      	str	r3, [sp, #104]	@ 0x68
 8003352:	4654      	mov	r4, sl
 8003354:	2205      	movs	r2, #5
 8003356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800335a:	4853      	ldr	r0, [pc, #332]	@ (80034a8 <_vfiprintf_r+0x21c>)
 800335c:	f000 fbc0 	bl	8003ae0 <memchr>
 8003360:	9a04      	ldr	r2, [sp, #16]
 8003362:	b9d8      	cbnz	r0, 800339c <_vfiprintf_r+0x110>
 8003364:	06d1      	lsls	r1, r2, #27
 8003366:	bf44      	itt	mi
 8003368:	2320      	movmi	r3, #32
 800336a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800336e:	0713      	lsls	r3, r2, #28
 8003370:	bf44      	itt	mi
 8003372:	232b      	movmi	r3, #43	@ 0x2b
 8003374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003378:	f89a 3000 	ldrb.w	r3, [sl]
 800337c:	2b2a      	cmp	r3, #42	@ 0x2a
 800337e:	d015      	beq.n	80033ac <_vfiprintf_r+0x120>
 8003380:	4654      	mov	r4, sl
 8003382:	2000      	movs	r0, #0
 8003384:	f04f 0c0a 	mov.w	ip, #10
 8003388:	9a07      	ldr	r2, [sp, #28]
 800338a:	4621      	mov	r1, r4
 800338c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003390:	3b30      	subs	r3, #48	@ 0x30
 8003392:	2b09      	cmp	r3, #9
 8003394:	d94b      	bls.n	800342e <_vfiprintf_r+0x1a2>
 8003396:	b1b0      	cbz	r0, 80033c6 <_vfiprintf_r+0x13a>
 8003398:	9207      	str	r2, [sp, #28]
 800339a:	e014      	b.n	80033c6 <_vfiprintf_r+0x13a>
 800339c:	eba0 0308 	sub.w	r3, r0, r8
 80033a0:	fa09 f303 	lsl.w	r3, r9, r3
 80033a4:	4313      	orrs	r3, r2
 80033a6:	46a2      	mov	sl, r4
 80033a8:	9304      	str	r3, [sp, #16]
 80033aa:	e7d2      	b.n	8003352 <_vfiprintf_r+0xc6>
 80033ac:	9b03      	ldr	r3, [sp, #12]
 80033ae:	1d19      	adds	r1, r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	9103      	str	r1, [sp, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bfbb      	ittet	lt
 80033b8:	425b      	neglt	r3, r3
 80033ba:	f042 0202 	orrlt.w	r2, r2, #2
 80033be:	9307      	strge	r3, [sp, #28]
 80033c0:	9307      	strlt	r3, [sp, #28]
 80033c2:	bfb8      	it	lt
 80033c4:	9204      	strlt	r2, [sp, #16]
 80033c6:	7823      	ldrb	r3, [r4, #0]
 80033c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80033ca:	d10a      	bne.n	80033e2 <_vfiprintf_r+0x156>
 80033cc:	7863      	ldrb	r3, [r4, #1]
 80033ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80033d0:	d132      	bne.n	8003438 <_vfiprintf_r+0x1ac>
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	3402      	adds	r4, #2
 80033d6:	1d1a      	adds	r2, r3, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	9203      	str	r2, [sp, #12]
 80033dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033e0:	9305      	str	r3, [sp, #20]
 80033e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80034ac <_vfiprintf_r+0x220>
 80033e6:	2203      	movs	r2, #3
 80033e8:	4650      	mov	r0, sl
 80033ea:	7821      	ldrb	r1, [r4, #0]
 80033ec:	f000 fb78 	bl	8003ae0 <memchr>
 80033f0:	b138      	cbz	r0, 8003402 <_vfiprintf_r+0x176>
 80033f2:	2240      	movs	r2, #64	@ 0x40
 80033f4:	9b04      	ldr	r3, [sp, #16]
 80033f6:	eba0 000a 	sub.w	r0, r0, sl
 80033fa:	4082      	lsls	r2, r0
 80033fc:	4313      	orrs	r3, r2
 80033fe:	3401      	adds	r4, #1
 8003400:	9304      	str	r3, [sp, #16]
 8003402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003406:	2206      	movs	r2, #6
 8003408:	4829      	ldr	r0, [pc, #164]	@ (80034b0 <_vfiprintf_r+0x224>)
 800340a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800340e:	f000 fb67 	bl	8003ae0 <memchr>
 8003412:	2800      	cmp	r0, #0
 8003414:	d03f      	beq.n	8003496 <_vfiprintf_r+0x20a>
 8003416:	4b27      	ldr	r3, [pc, #156]	@ (80034b4 <_vfiprintf_r+0x228>)
 8003418:	bb1b      	cbnz	r3, 8003462 <_vfiprintf_r+0x1d6>
 800341a:	9b03      	ldr	r3, [sp, #12]
 800341c:	3307      	adds	r3, #7
 800341e:	f023 0307 	bic.w	r3, r3, #7
 8003422:	3308      	adds	r3, #8
 8003424:	9303      	str	r3, [sp, #12]
 8003426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003428:	443b      	add	r3, r7
 800342a:	9309      	str	r3, [sp, #36]	@ 0x24
 800342c:	e76a      	b.n	8003304 <_vfiprintf_r+0x78>
 800342e:	460c      	mov	r4, r1
 8003430:	2001      	movs	r0, #1
 8003432:	fb0c 3202 	mla	r2, ip, r2, r3
 8003436:	e7a8      	b.n	800338a <_vfiprintf_r+0xfe>
 8003438:	2300      	movs	r3, #0
 800343a:	f04f 0c0a 	mov.w	ip, #10
 800343e:	4619      	mov	r1, r3
 8003440:	3401      	adds	r4, #1
 8003442:	9305      	str	r3, [sp, #20]
 8003444:	4620      	mov	r0, r4
 8003446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800344a:	3a30      	subs	r2, #48	@ 0x30
 800344c:	2a09      	cmp	r2, #9
 800344e:	d903      	bls.n	8003458 <_vfiprintf_r+0x1cc>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0c6      	beq.n	80033e2 <_vfiprintf_r+0x156>
 8003454:	9105      	str	r1, [sp, #20]
 8003456:	e7c4      	b.n	80033e2 <_vfiprintf_r+0x156>
 8003458:	4604      	mov	r4, r0
 800345a:	2301      	movs	r3, #1
 800345c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003460:	e7f0      	b.n	8003444 <_vfiprintf_r+0x1b8>
 8003462:	ab03      	add	r3, sp, #12
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	462a      	mov	r2, r5
 8003468:	4630      	mov	r0, r6
 800346a:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <_vfiprintf_r+0x22c>)
 800346c:	a904      	add	r1, sp, #16
 800346e:	f3af 8000 	nop.w
 8003472:	4607      	mov	r7, r0
 8003474:	1c78      	adds	r0, r7, #1
 8003476:	d1d6      	bne.n	8003426 <_vfiprintf_r+0x19a>
 8003478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800347a:	07d9      	lsls	r1, r3, #31
 800347c:	d405      	bmi.n	800348a <_vfiprintf_r+0x1fe>
 800347e:	89ab      	ldrh	r3, [r5, #12]
 8003480:	059a      	lsls	r2, r3, #22
 8003482:	d402      	bmi.n	800348a <_vfiprintf_r+0x1fe>
 8003484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003486:	f7ff fde1 	bl	800304c <__retarget_lock_release_recursive>
 800348a:	89ab      	ldrh	r3, [r5, #12]
 800348c:	065b      	lsls	r3, r3, #25
 800348e:	f53f af1f 	bmi.w	80032d0 <_vfiprintf_r+0x44>
 8003492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003494:	e71e      	b.n	80032d4 <_vfiprintf_r+0x48>
 8003496:	ab03      	add	r3, sp, #12
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	462a      	mov	r2, r5
 800349c:	4630      	mov	r0, r6
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <_vfiprintf_r+0x22c>)
 80034a0:	a904      	add	r1, sp, #16
 80034a2:	f000 f87d 	bl	80035a0 <_printf_i>
 80034a6:	e7e4      	b.n	8003472 <_vfiprintf_r+0x1e6>
 80034a8:	08003c4e 	.word	0x08003c4e
 80034ac:	08003c54 	.word	0x08003c54
 80034b0:	08003c58 	.word	0x08003c58
 80034b4:	00000000 	.word	0x00000000
 80034b8:	08003267 	.word	0x08003267

080034bc <_printf_common>:
 80034bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c0:	4616      	mov	r6, r2
 80034c2:	4698      	mov	r8, r3
 80034c4:	688a      	ldr	r2, [r1, #8]
 80034c6:	690b      	ldr	r3, [r1, #16]
 80034c8:	4607      	mov	r7, r0
 80034ca:	4293      	cmp	r3, r2
 80034cc:	bfb8      	it	lt
 80034ce:	4613      	movlt	r3, r2
 80034d0:	6033      	str	r3, [r6, #0]
 80034d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034d6:	460c      	mov	r4, r1
 80034d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034dc:	b10a      	cbz	r2, 80034e2 <_printf_common+0x26>
 80034de:	3301      	adds	r3, #1
 80034e0:	6033      	str	r3, [r6, #0]
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	0699      	lsls	r1, r3, #26
 80034e6:	bf42      	ittt	mi
 80034e8:	6833      	ldrmi	r3, [r6, #0]
 80034ea:	3302      	addmi	r3, #2
 80034ec:	6033      	strmi	r3, [r6, #0]
 80034ee:	6825      	ldr	r5, [r4, #0]
 80034f0:	f015 0506 	ands.w	r5, r5, #6
 80034f4:	d106      	bne.n	8003504 <_printf_common+0x48>
 80034f6:	f104 0a19 	add.w	sl, r4, #25
 80034fa:	68e3      	ldr	r3, [r4, #12]
 80034fc:	6832      	ldr	r2, [r6, #0]
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	42ab      	cmp	r3, r5
 8003502:	dc2b      	bgt.n	800355c <_printf_common+0xa0>
 8003504:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	3b00      	subs	r3, #0
 800350c:	bf18      	it	ne
 800350e:	2301      	movne	r3, #1
 8003510:	0692      	lsls	r2, r2, #26
 8003512:	d430      	bmi.n	8003576 <_printf_common+0xba>
 8003514:	4641      	mov	r1, r8
 8003516:	4638      	mov	r0, r7
 8003518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800351c:	47c8      	blx	r9
 800351e:	3001      	adds	r0, #1
 8003520:	d023      	beq.n	800356a <_printf_common+0xae>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	6922      	ldr	r2, [r4, #16]
 8003526:	f003 0306 	and.w	r3, r3, #6
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf14      	ite	ne
 800352e:	2500      	movne	r5, #0
 8003530:	6833      	ldreq	r3, [r6, #0]
 8003532:	f04f 0600 	mov.w	r6, #0
 8003536:	bf08      	it	eq
 8003538:	68e5      	ldreq	r5, [r4, #12]
 800353a:	f104 041a 	add.w	r4, r4, #26
 800353e:	bf08      	it	eq
 8003540:	1aed      	subeq	r5, r5, r3
 8003542:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003546:	bf08      	it	eq
 8003548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800354c:	4293      	cmp	r3, r2
 800354e:	bfc4      	itt	gt
 8003550:	1a9b      	subgt	r3, r3, r2
 8003552:	18ed      	addgt	r5, r5, r3
 8003554:	42b5      	cmp	r5, r6
 8003556:	d11a      	bne.n	800358e <_printf_common+0xd2>
 8003558:	2000      	movs	r0, #0
 800355a:	e008      	b.n	800356e <_printf_common+0xb2>
 800355c:	2301      	movs	r3, #1
 800355e:	4652      	mov	r2, sl
 8003560:	4641      	mov	r1, r8
 8003562:	4638      	mov	r0, r7
 8003564:	47c8      	blx	r9
 8003566:	3001      	adds	r0, #1
 8003568:	d103      	bne.n	8003572 <_printf_common+0xb6>
 800356a:	f04f 30ff 	mov.w	r0, #4294967295
 800356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003572:	3501      	adds	r5, #1
 8003574:	e7c1      	b.n	80034fa <_printf_common+0x3e>
 8003576:	2030      	movs	r0, #48	@ 0x30
 8003578:	18e1      	adds	r1, r4, r3
 800357a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003584:	4422      	add	r2, r4
 8003586:	3302      	adds	r3, #2
 8003588:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800358c:	e7c2      	b.n	8003514 <_printf_common+0x58>
 800358e:	2301      	movs	r3, #1
 8003590:	4622      	mov	r2, r4
 8003592:	4641      	mov	r1, r8
 8003594:	4638      	mov	r0, r7
 8003596:	47c8      	blx	r9
 8003598:	3001      	adds	r0, #1
 800359a:	d0e6      	beq.n	800356a <_printf_common+0xae>
 800359c:	3601      	adds	r6, #1
 800359e:	e7d9      	b.n	8003554 <_printf_common+0x98>

080035a0 <_printf_i>:
 80035a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035a4:	7e0f      	ldrb	r7, [r1, #24]
 80035a6:	4691      	mov	r9, r2
 80035a8:	2f78      	cmp	r7, #120	@ 0x78
 80035aa:	4680      	mov	r8, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	469a      	mov	sl, r3
 80035b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035b6:	d807      	bhi.n	80035c8 <_printf_i+0x28>
 80035b8:	2f62      	cmp	r7, #98	@ 0x62
 80035ba:	d80a      	bhi.n	80035d2 <_printf_i+0x32>
 80035bc:	2f00      	cmp	r7, #0
 80035be:	f000 80d3 	beq.w	8003768 <_printf_i+0x1c8>
 80035c2:	2f58      	cmp	r7, #88	@ 0x58
 80035c4:	f000 80ba 	beq.w	800373c <_printf_i+0x19c>
 80035c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035d0:	e03a      	b.n	8003648 <_printf_i+0xa8>
 80035d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035d6:	2b15      	cmp	r3, #21
 80035d8:	d8f6      	bhi.n	80035c8 <_printf_i+0x28>
 80035da:	a101      	add	r1, pc, #4	@ (adr r1, 80035e0 <_printf_i+0x40>)
 80035dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035e0:	08003639 	.word	0x08003639
 80035e4:	0800364d 	.word	0x0800364d
 80035e8:	080035c9 	.word	0x080035c9
 80035ec:	080035c9 	.word	0x080035c9
 80035f0:	080035c9 	.word	0x080035c9
 80035f4:	080035c9 	.word	0x080035c9
 80035f8:	0800364d 	.word	0x0800364d
 80035fc:	080035c9 	.word	0x080035c9
 8003600:	080035c9 	.word	0x080035c9
 8003604:	080035c9 	.word	0x080035c9
 8003608:	080035c9 	.word	0x080035c9
 800360c:	0800374f 	.word	0x0800374f
 8003610:	08003677 	.word	0x08003677
 8003614:	08003709 	.word	0x08003709
 8003618:	080035c9 	.word	0x080035c9
 800361c:	080035c9 	.word	0x080035c9
 8003620:	08003771 	.word	0x08003771
 8003624:	080035c9 	.word	0x080035c9
 8003628:	08003677 	.word	0x08003677
 800362c:	080035c9 	.word	0x080035c9
 8003630:	080035c9 	.word	0x080035c9
 8003634:	08003711 	.word	0x08003711
 8003638:	6833      	ldr	r3, [r6, #0]
 800363a:	1d1a      	adds	r2, r3, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6032      	str	r2, [r6, #0]
 8003640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003644:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003648:	2301      	movs	r3, #1
 800364a:	e09e      	b.n	800378a <_printf_i+0x1ea>
 800364c:	6833      	ldr	r3, [r6, #0]
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	1d19      	adds	r1, r3, #4
 8003652:	6031      	str	r1, [r6, #0]
 8003654:	0606      	lsls	r6, r0, #24
 8003656:	d501      	bpl.n	800365c <_printf_i+0xbc>
 8003658:	681d      	ldr	r5, [r3, #0]
 800365a:	e003      	b.n	8003664 <_printf_i+0xc4>
 800365c:	0645      	lsls	r5, r0, #25
 800365e:	d5fb      	bpl.n	8003658 <_printf_i+0xb8>
 8003660:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003664:	2d00      	cmp	r5, #0
 8003666:	da03      	bge.n	8003670 <_printf_i+0xd0>
 8003668:	232d      	movs	r3, #45	@ 0x2d
 800366a:	426d      	negs	r5, r5
 800366c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003670:	230a      	movs	r3, #10
 8003672:	4859      	ldr	r0, [pc, #356]	@ (80037d8 <_printf_i+0x238>)
 8003674:	e011      	b.n	800369a <_printf_i+0xfa>
 8003676:	6821      	ldr	r1, [r4, #0]
 8003678:	6833      	ldr	r3, [r6, #0]
 800367a:	0608      	lsls	r0, r1, #24
 800367c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003680:	d402      	bmi.n	8003688 <_printf_i+0xe8>
 8003682:	0649      	lsls	r1, r1, #25
 8003684:	bf48      	it	mi
 8003686:	b2ad      	uxthmi	r5, r5
 8003688:	2f6f      	cmp	r7, #111	@ 0x6f
 800368a:	6033      	str	r3, [r6, #0]
 800368c:	bf14      	ite	ne
 800368e:	230a      	movne	r3, #10
 8003690:	2308      	moveq	r3, #8
 8003692:	4851      	ldr	r0, [pc, #324]	@ (80037d8 <_printf_i+0x238>)
 8003694:	2100      	movs	r1, #0
 8003696:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800369a:	6866      	ldr	r6, [r4, #4]
 800369c:	2e00      	cmp	r6, #0
 800369e:	bfa8      	it	ge
 80036a0:	6821      	ldrge	r1, [r4, #0]
 80036a2:	60a6      	str	r6, [r4, #8]
 80036a4:	bfa4      	itt	ge
 80036a6:	f021 0104 	bicge.w	r1, r1, #4
 80036aa:	6021      	strge	r1, [r4, #0]
 80036ac:	b90d      	cbnz	r5, 80036b2 <_printf_i+0x112>
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	d04b      	beq.n	800374a <_printf_i+0x1aa>
 80036b2:	4616      	mov	r6, r2
 80036b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80036b8:	fb03 5711 	mls	r7, r3, r1, r5
 80036bc:	5dc7      	ldrb	r7, [r0, r7]
 80036be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036c2:	462f      	mov	r7, r5
 80036c4:	42bb      	cmp	r3, r7
 80036c6:	460d      	mov	r5, r1
 80036c8:	d9f4      	bls.n	80036b4 <_printf_i+0x114>
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d10b      	bne.n	80036e6 <_printf_i+0x146>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	07df      	lsls	r7, r3, #31
 80036d2:	d508      	bpl.n	80036e6 <_printf_i+0x146>
 80036d4:	6923      	ldr	r3, [r4, #16]
 80036d6:	6861      	ldr	r1, [r4, #4]
 80036d8:	4299      	cmp	r1, r3
 80036da:	bfde      	ittt	le
 80036dc:	2330      	movle	r3, #48	@ 0x30
 80036de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036e6:	1b92      	subs	r2, r2, r6
 80036e8:	6122      	str	r2, [r4, #16]
 80036ea:	464b      	mov	r3, r9
 80036ec:	4621      	mov	r1, r4
 80036ee:	4640      	mov	r0, r8
 80036f0:	f8cd a000 	str.w	sl, [sp]
 80036f4:	aa03      	add	r2, sp, #12
 80036f6:	f7ff fee1 	bl	80034bc <_printf_common>
 80036fa:	3001      	adds	r0, #1
 80036fc:	d14a      	bne.n	8003794 <_printf_i+0x1f4>
 80036fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003702:	b004      	add	sp, #16
 8003704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	f043 0320 	orr.w	r3, r3, #32
 800370e:	6023      	str	r3, [r4, #0]
 8003710:	2778      	movs	r7, #120	@ 0x78
 8003712:	4832      	ldr	r0, [pc, #200]	@ (80037dc <_printf_i+0x23c>)
 8003714:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	6831      	ldr	r1, [r6, #0]
 800371c:	061f      	lsls	r7, r3, #24
 800371e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003722:	d402      	bmi.n	800372a <_printf_i+0x18a>
 8003724:	065f      	lsls	r7, r3, #25
 8003726:	bf48      	it	mi
 8003728:	b2ad      	uxthmi	r5, r5
 800372a:	6031      	str	r1, [r6, #0]
 800372c:	07d9      	lsls	r1, r3, #31
 800372e:	bf44      	itt	mi
 8003730:	f043 0320 	orrmi.w	r3, r3, #32
 8003734:	6023      	strmi	r3, [r4, #0]
 8003736:	b11d      	cbz	r5, 8003740 <_printf_i+0x1a0>
 8003738:	2310      	movs	r3, #16
 800373a:	e7ab      	b.n	8003694 <_printf_i+0xf4>
 800373c:	4826      	ldr	r0, [pc, #152]	@ (80037d8 <_printf_i+0x238>)
 800373e:	e7e9      	b.n	8003714 <_printf_i+0x174>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	f023 0320 	bic.w	r3, r3, #32
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	e7f6      	b.n	8003738 <_printf_i+0x198>
 800374a:	4616      	mov	r6, r2
 800374c:	e7bd      	b.n	80036ca <_printf_i+0x12a>
 800374e:	6833      	ldr	r3, [r6, #0]
 8003750:	6825      	ldr	r5, [r4, #0]
 8003752:	1d18      	adds	r0, r3, #4
 8003754:	6961      	ldr	r1, [r4, #20]
 8003756:	6030      	str	r0, [r6, #0]
 8003758:	062e      	lsls	r6, r5, #24
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	d501      	bpl.n	8003762 <_printf_i+0x1c2>
 800375e:	6019      	str	r1, [r3, #0]
 8003760:	e002      	b.n	8003768 <_printf_i+0x1c8>
 8003762:	0668      	lsls	r0, r5, #25
 8003764:	d5fb      	bpl.n	800375e <_printf_i+0x1be>
 8003766:	8019      	strh	r1, [r3, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	4616      	mov	r6, r2
 800376c:	6123      	str	r3, [r4, #16]
 800376e:	e7bc      	b.n	80036ea <_printf_i+0x14a>
 8003770:	6833      	ldr	r3, [r6, #0]
 8003772:	2100      	movs	r1, #0
 8003774:	1d1a      	adds	r2, r3, #4
 8003776:	6032      	str	r2, [r6, #0]
 8003778:	681e      	ldr	r6, [r3, #0]
 800377a:	6862      	ldr	r2, [r4, #4]
 800377c:	4630      	mov	r0, r6
 800377e:	f000 f9af 	bl	8003ae0 <memchr>
 8003782:	b108      	cbz	r0, 8003788 <_printf_i+0x1e8>
 8003784:	1b80      	subs	r0, r0, r6
 8003786:	6060      	str	r0, [r4, #4]
 8003788:	6863      	ldr	r3, [r4, #4]
 800378a:	6123      	str	r3, [r4, #16]
 800378c:	2300      	movs	r3, #0
 800378e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003792:	e7aa      	b.n	80036ea <_printf_i+0x14a>
 8003794:	4632      	mov	r2, r6
 8003796:	4649      	mov	r1, r9
 8003798:	4640      	mov	r0, r8
 800379a:	6923      	ldr	r3, [r4, #16]
 800379c:	47d0      	blx	sl
 800379e:	3001      	adds	r0, #1
 80037a0:	d0ad      	beq.n	80036fe <_printf_i+0x15e>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	079b      	lsls	r3, r3, #30
 80037a6:	d413      	bmi.n	80037d0 <_printf_i+0x230>
 80037a8:	68e0      	ldr	r0, [r4, #12]
 80037aa:	9b03      	ldr	r3, [sp, #12]
 80037ac:	4298      	cmp	r0, r3
 80037ae:	bfb8      	it	lt
 80037b0:	4618      	movlt	r0, r3
 80037b2:	e7a6      	b.n	8003702 <_printf_i+0x162>
 80037b4:	2301      	movs	r3, #1
 80037b6:	4632      	mov	r2, r6
 80037b8:	4649      	mov	r1, r9
 80037ba:	4640      	mov	r0, r8
 80037bc:	47d0      	blx	sl
 80037be:	3001      	adds	r0, #1
 80037c0:	d09d      	beq.n	80036fe <_printf_i+0x15e>
 80037c2:	3501      	adds	r5, #1
 80037c4:	68e3      	ldr	r3, [r4, #12]
 80037c6:	9903      	ldr	r1, [sp, #12]
 80037c8:	1a5b      	subs	r3, r3, r1
 80037ca:	42ab      	cmp	r3, r5
 80037cc:	dcf2      	bgt.n	80037b4 <_printf_i+0x214>
 80037ce:	e7eb      	b.n	80037a8 <_printf_i+0x208>
 80037d0:	2500      	movs	r5, #0
 80037d2:	f104 0619 	add.w	r6, r4, #25
 80037d6:	e7f5      	b.n	80037c4 <_printf_i+0x224>
 80037d8:	08003c5f 	.word	0x08003c5f
 80037dc:	08003c70 	.word	0x08003c70

080037e0 <__sflush_r>:
 80037e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	0716      	lsls	r6, r2, #28
 80037e8:	4605      	mov	r5, r0
 80037ea:	460c      	mov	r4, r1
 80037ec:	d454      	bmi.n	8003898 <__sflush_r+0xb8>
 80037ee:	684b      	ldr	r3, [r1, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dc02      	bgt.n	80037fa <__sflush_r+0x1a>
 80037f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	dd48      	ble.n	800388c <__sflush_r+0xac>
 80037fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037fc:	2e00      	cmp	r6, #0
 80037fe:	d045      	beq.n	800388c <__sflush_r+0xac>
 8003800:	2300      	movs	r3, #0
 8003802:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003806:	682f      	ldr	r7, [r5, #0]
 8003808:	6a21      	ldr	r1, [r4, #32]
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	d030      	beq.n	8003870 <__sflush_r+0x90>
 800380e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	0759      	lsls	r1, r3, #29
 8003814:	d505      	bpl.n	8003822 <__sflush_r+0x42>
 8003816:	6863      	ldr	r3, [r4, #4]
 8003818:	1ad2      	subs	r2, r2, r3
 800381a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800381c:	b10b      	cbz	r3, 8003822 <__sflush_r+0x42>
 800381e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	2300      	movs	r3, #0
 8003824:	4628      	mov	r0, r5
 8003826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003828:	6a21      	ldr	r1, [r4, #32]
 800382a:	47b0      	blx	r6
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	d106      	bne.n	8003840 <__sflush_r+0x60>
 8003832:	6829      	ldr	r1, [r5, #0]
 8003834:	291d      	cmp	r1, #29
 8003836:	d82b      	bhi.n	8003890 <__sflush_r+0xb0>
 8003838:	4a28      	ldr	r2, [pc, #160]	@ (80038dc <__sflush_r+0xfc>)
 800383a:	410a      	asrs	r2, r1
 800383c:	07d6      	lsls	r6, r2, #31
 800383e:	d427      	bmi.n	8003890 <__sflush_r+0xb0>
 8003840:	2200      	movs	r2, #0
 8003842:	6062      	str	r2, [r4, #4]
 8003844:	6922      	ldr	r2, [r4, #16]
 8003846:	04d9      	lsls	r1, r3, #19
 8003848:	6022      	str	r2, [r4, #0]
 800384a:	d504      	bpl.n	8003856 <__sflush_r+0x76>
 800384c:	1c42      	adds	r2, r0, #1
 800384e:	d101      	bne.n	8003854 <__sflush_r+0x74>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	b903      	cbnz	r3, 8003856 <__sflush_r+0x76>
 8003854:	6560      	str	r0, [r4, #84]	@ 0x54
 8003856:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003858:	602f      	str	r7, [r5, #0]
 800385a:	b1b9      	cbz	r1, 800388c <__sflush_r+0xac>
 800385c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003860:	4299      	cmp	r1, r3
 8003862:	d002      	beq.n	800386a <__sflush_r+0x8a>
 8003864:	4628      	mov	r0, r5
 8003866:	f7ff fbf3 	bl	8003050 <_free_r>
 800386a:	2300      	movs	r3, #0
 800386c:	6363      	str	r3, [r4, #52]	@ 0x34
 800386e:	e00d      	b.n	800388c <__sflush_r+0xac>
 8003870:	2301      	movs	r3, #1
 8003872:	4628      	mov	r0, r5
 8003874:	47b0      	blx	r6
 8003876:	4602      	mov	r2, r0
 8003878:	1c50      	adds	r0, r2, #1
 800387a:	d1c9      	bne.n	8003810 <__sflush_r+0x30>
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0c6      	beq.n	8003810 <__sflush_r+0x30>
 8003882:	2b1d      	cmp	r3, #29
 8003884:	d001      	beq.n	800388a <__sflush_r+0xaa>
 8003886:	2b16      	cmp	r3, #22
 8003888:	d11d      	bne.n	80038c6 <__sflush_r+0xe6>
 800388a:	602f      	str	r7, [r5, #0]
 800388c:	2000      	movs	r0, #0
 800388e:	e021      	b.n	80038d4 <__sflush_r+0xf4>
 8003890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003894:	b21b      	sxth	r3, r3
 8003896:	e01a      	b.n	80038ce <__sflush_r+0xee>
 8003898:	690f      	ldr	r7, [r1, #16]
 800389a:	2f00      	cmp	r7, #0
 800389c:	d0f6      	beq.n	800388c <__sflush_r+0xac>
 800389e:	0793      	lsls	r3, r2, #30
 80038a0:	bf18      	it	ne
 80038a2:	2300      	movne	r3, #0
 80038a4:	680e      	ldr	r6, [r1, #0]
 80038a6:	bf08      	it	eq
 80038a8:	694b      	ldreq	r3, [r1, #20]
 80038aa:	1bf6      	subs	r6, r6, r7
 80038ac:	600f      	str	r7, [r1, #0]
 80038ae:	608b      	str	r3, [r1, #8]
 80038b0:	2e00      	cmp	r6, #0
 80038b2:	ddeb      	ble.n	800388c <__sflush_r+0xac>
 80038b4:	4633      	mov	r3, r6
 80038b6:	463a      	mov	r2, r7
 80038b8:	4628      	mov	r0, r5
 80038ba:	6a21      	ldr	r1, [r4, #32]
 80038bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80038c0:	47e0      	blx	ip
 80038c2:	2800      	cmp	r0, #0
 80038c4:	dc07      	bgt.n	80038d6 <__sflush_r+0xf6>
 80038c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ce:	f04f 30ff 	mov.w	r0, #4294967295
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d6:	4407      	add	r7, r0
 80038d8:	1a36      	subs	r6, r6, r0
 80038da:	e7e9      	b.n	80038b0 <__sflush_r+0xd0>
 80038dc:	dfbffffe 	.word	0xdfbffffe

080038e0 <_fflush_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	690b      	ldr	r3, [r1, #16]
 80038e4:	4605      	mov	r5, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	b913      	cbnz	r3, 80038f0 <_fflush_r+0x10>
 80038ea:	2500      	movs	r5, #0
 80038ec:	4628      	mov	r0, r5
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	b118      	cbz	r0, 80038fa <_fflush_r+0x1a>
 80038f2:	6a03      	ldr	r3, [r0, #32]
 80038f4:	b90b      	cbnz	r3, 80038fa <_fflush_r+0x1a>
 80038f6:	f7ff fa9b 	bl	8002e30 <__sinit>
 80038fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f3      	beq.n	80038ea <_fflush_r+0xa>
 8003902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003904:	07d0      	lsls	r0, r2, #31
 8003906:	d404      	bmi.n	8003912 <_fflush_r+0x32>
 8003908:	0599      	lsls	r1, r3, #22
 800390a:	d402      	bmi.n	8003912 <_fflush_r+0x32>
 800390c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800390e:	f7ff fb9c 	bl	800304a <__retarget_lock_acquire_recursive>
 8003912:	4628      	mov	r0, r5
 8003914:	4621      	mov	r1, r4
 8003916:	f7ff ff63 	bl	80037e0 <__sflush_r>
 800391a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800391c:	4605      	mov	r5, r0
 800391e:	07da      	lsls	r2, r3, #31
 8003920:	d4e4      	bmi.n	80038ec <_fflush_r+0xc>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	059b      	lsls	r3, r3, #22
 8003926:	d4e1      	bmi.n	80038ec <_fflush_r+0xc>
 8003928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800392a:	f7ff fb8f 	bl	800304c <__retarget_lock_release_recursive>
 800392e:	e7dd      	b.n	80038ec <_fflush_r+0xc>

08003930 <_putc_r>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	460d      	mov	r5, r1
 8003934:	4614      	mov	r4, r2
 8003936:	4606      	mov	r6, r0
 8003938:	b118      	cbz	r0, 8003942 <_putc_r+0x12>
 800393a:	6a03      	ldr	r3, [r0, #32]
 800393c:	b90b      	cbnz	r3, 8003942 <_putc_r+0x12>
 800393e:	f7ff fa77 	bl	8002e30 <__sinit>
 8003942:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003944:	07d8      	lsls	r0, r3, #31
 8003946:	d405      	bmi.n	8003954 <_putc_r+0x24>
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	0599      	lsls	r1, r3, #22
 800394c:	d402      	bmi.n	8003954 <_putc_r+0x24>
 800394e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003950:	f7ff fb7b 	bl	800304a <__retarget_lock_acquire_recursive>
 8003954:	68a3      	ldr	r3, [r4, #8]
 8003956:	3b01      	subs	r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	60a3      	str	r3, [r4, #8]
 800395c:	da05      	bge.n	800396a <_putc_r+0x3a>
 800395e:	69a2      	ldr	r2, [r4, #24]
 8003960:	4293      	cmp	r3, r2
 8003962:	db12      	blt.n	800398a <_putc_r+0x5a>
 8003964:	b2eb      	uxtb	r3, r5
 8003966:	2b0a      	cmp	r3, #10
 8003968:	d00f      	beq.n	800398a <_putc_r+0x5a>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	6022      	str	r2, [r4, #0]
 8003970:	701d      	strb	r5, [r3, #0]
 8003972:	b2ed      	uxtb	r5, r5
 8003974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003976:	07da      	lsls	r2, r3, #31
 8003978:	d405      	bmi.n	8003986 <_putc_r+0x56>
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	059b      	lsls	r3, r3, #22
 800397e:	d402      	bmi.n	8003986 <_putc_r+0x56>
 8003980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003982:	f7ff fb63 	bl	800304c <__retarget_lock_release_recursive>
 8003986:	4628      	mov	r0, r5
 8003988:	bd70      	pop	{r4, r5, r6, pc}
 800398a:	4629      	mov	r1, r5
 800398c:	4622      	mov	r2, r4
 800398e:	4630      	mov	r0, r6
 8003990:	f000 f802 	bl	8003998 <__swbuf_r>
 8003994:	4605      	mov	r5, r0
 8003996:	e7ed      	b.n	8003974 <_putc_r+0x44>

08003998 <__swbuf_r>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	460e      	mov	r6, r1
 800399c:	4614      	mov	r4, r2
 800399e:	4605      	mov	r5, r0
 80039a0:	b118      	cbz	r0, 80039aa <__swbuf_r+0x12>
 80039a2:	6a03      	ldr	r3, [r0, #32]
 80039a4:	b90b      	cbnz	r3, 80039aa <__swbuf_r+0x12>
 80039a6:	f7ff fa43 	bl	8002e30 <__sinit>
 80039aa:	69a3      	ldr	r3, [r4, #24]
 80039ac:	60a3      	str	r3, [r4, #8]
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	071a      	lsls	r2, r3, #28
 80039b2:	d501      	bpl.n	80039b8 <__swbuf_r+0x20>
 80039b4:	6923      	ldr	r3, [r4, #16]
 80039b6:	b943      	cbnz	r3, 80039ca <__swbuf_r+0x32>
 80039b8:	4621      	mov	r1, r4
 80039ba:	4628      	mov	r0, r5
 80039bc:	f000 f82a 	bl	8003a14 <__swsetup_r>
 80039c0:	b118      	cbz	r0, 80039ca <__swbuf_r+0x32>
 80039c2:	f04f 37ff 	mov.w	r7, #4294967295
 80039c6:	4638      	mov	r0, r7
 80039c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	6922      	ldr	r2, [r4, #16]
 80039ce:	b2f6      	uxtb	r6, r6
 80039d0:	1a98      	subs	r0, r3, r2
 80039d2:	6963      	ldr	r3, [r4, #20]
 80039d4:	4637      	mov	r7, r6
 80039d6:	4283      	cmp	r3, r0
 80039d8:	dc05      	bgt.n	80039e6 <__swbuf_r+0x4e>
 80039da:	4621      	mov	r1, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	f7ff ff7f 	bl	80038e0 <_fflush_r>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d1ed      	bne.n	80039c2 <__swbuf_r+0x2a>
 80039e6:	68a3      	ldr	r3, [r4, #8]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	60a3      	str	r3, [r4, #8]
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	6022      	str	r2, [r4, #0]
 80039f2:	701e      	strb	r6, [r3, #0]
 80039f4:	6962      	ldr	r2, [r4, #20]
 80039f6:	1c43      	adds	r3, r0, #1
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d004      	beq.n	8003a06 <__swbuf_r+0x6e>
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	07db      	lsls	r3, r3, #31
 8003a00:	d5e1      	bpl.n	80039c6 <__swbuf_r+0x2e>
 8003a02:	2e0a      	cmp	r6, #10
 8003a04:	d1df      	bne.n	80039c6 <__swbuf_r+0x2e>
 8003a06:	4621      	mov	r1, r4
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f7ff ff69 	bl	80038e0 <_fflush_r>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d0d9      	beq.n	80039c6 <__swbuf_r+0x2e>
 8003a12:	e7d6      	b.n	80039c2 <__swbuf_r+0x2a>

08003a14 <__swsetup_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <__swsetup_r+0xa8>)
 8003a18:	4605      	mov	r5, r0
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	b118      	cbz	r0, 8003a28 <__swsetup_r+0x14>
 8003a20:	6a03      	ldr	r3, [r0, #32]
 8003a22:	b90b      	cbnz	r3, 8003a28 <__swsetup_r+0x14>
 8003a24:	f7ff fa04 	bl	8002e30 <__sinit>
 8003a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2c:	0719      	lsls	r1, r3, #28
 8003a2e:	d422      	bmi.n	8003a76 <__swsetup_r+0x62>
 8003a30:	06da      	lsls	r2, r3, #27
 8003a32:	d407      	bmi.n	8003a44 <__swsetup_r+0x30>
 8003a34:	2209      	movs	r2, #9
 8003a36:	602a      	str	r2, [r5, #0]
 8003a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e033      	b.n	8003aac <__swsetup_r+0x98>
 8003a44:	0758      	lsls	r0, r3, #29
 8003a46:	d512      	bpl.n	8003a6e <__swsetup_r+0x5a>
 8003a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a4a:	b141      	cbz	r1, 8003a5e <__swsetup_r+0x4a>
 8003a4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a50:	4299      	cmp	r1, r3
 8003a52:	d002      	beq.n	8003a5a <__swsetup_r+0x46>
 8003a54:	4628      	mov	r0, r5
 8003a56:	f7ff fafb 	bl	8003050 <_free_r>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a64:	81a3      	strh	r3, [r4, #12]
 8003a66:	2300      	movs	r3, #0
 8003a68:	6063      	str	r3, [r4, #4]
 8003a6a:	6923      	ldr	r3, [r4, #16]
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	89a3      	ldrh	r3, [r4, #12]
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	81a3      	strh	r3, [r4, #12]
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	b94b      	cbnz	r3, 8003a8e <__swsetup_r+0x7a>
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a84:	d003      	beq.n	8003a8e <__swsetup_r+0x7a>
 8003a86:	4621      	mov	r1, r4
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f000 f85c 	bl	8003b46 <__smakebuf_r>
 8003a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a92:	f013 0201 	ands.w	r2, r3, #1
 8003a96:	d00a      	beq.n	8003aae <__swsetup_r+0x9a>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	60a2      	str	r2, [r4, #8]
 8003a9c:	6962      	ldr	r2, [r4, #20]
 8003a9e:	4252      	negs	r2, r2
 8003aa0:	61a2      	str	r2, [r4, #24]
 8003aa2:	6922      	ldr	r2, [r4, #16]
 8003aa4:	b942      	cbnz	r2, 8003ab8 <__swsetup_r+0xa4>
 8003aa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003aaa:	d1c5      	bne.n	8003a38 <__swsetup_r+0x24>
 8003aac:	bd38      	pop	{r3, r4, r5, pc}
 8003aae:	0799      	lsls	r1, r3, #30
 8003ab0:	bf58      	it	pl
 8003ab2:	6962      	ldrpl	r2, [r4, #20]
 8003ab4:	60a2      	str	r2, [r4, #8]
 8003ab6:	e7f4      	b.n	8003aa2 <__swsetup_r+0x8e>
 8003ab8:	2000      	movs	r0, #0
 8003aba:	e7f7      	b.n	8003aac <__swsetup_r+0x98>
 8003abc:	20000018 	.word	0x20000018

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	4d05      	ldr	r5, [pc, #20]	@ (8003adc <_sbrk_r+0x1c>)
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fc fe58 	bl	8000780 <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	2000025c 	.word	0x2000025c

08003ae0 <memchr>:
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	b2c9      	uxtb	r1, r1
 8003ae6:	4402      	add	r2, r0
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	d101      	bne.n	8003af2 <memchr+0x12>
 8003aee:	2000      	movs	r0, #0
 8003af0:	e003      	b.n	8003afa <memchr+0x1a>
 8003af2:	7804      	ldrb	r4, [r0, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	428c      	cmp	r4, r1
 8003af8:	d1f6      	bne.n	8003ae8 <memchr+0x8>
 8003afa:	bd10      	pop	{r4, pc}

08003afc <__swhatbuf_r>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	460c      	mov	r4, r1
 8003b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b04:	4615      	mov	r5, r2
 8003b06:	2900      	cmp	r1, #0
 8003b08:	461e      	mov	r6, r3
 8003b0a:	b096      	sub	sp, #88	@ 0x58
 8003b0c:	da0c      	bge.n	8003b28 <__swhatbuf_r+0x2c>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	2100      	movs	r1, #0
 8003b12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b16:	bf14      	ite	ne
 8003b18:	2340      	movne	r3, #64	@ 0x40
 8003b1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b1e:	2000      	movs	r0, #0
 8003b20:	6031      	str	r1, [r6, #0]
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	b016      	add	sp, #88	@ 0x58
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	466a      	mov	r2, sp
 8003b2a:	f000 f849 	bl	8003bc0 <_fstat_r>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	dbed      	blt.n	8003b0e <__swhatbuf_r+0x12>
 8003b32:	9901      	ldr	r1, [sp, #4]
 8003b34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b3c:	4259      	negs	r1, r3
 8003b3e:	4159      	adcs	r1, r3
 8003b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b44:	e7eb      	b.n	8003b1e <__swhatbuf_r+0x22>

08003b46 <__smakebuf_r>:
 8003b46:	898b      	ldrh	r3, [r1, #12]
 8003b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4a:	079d      	lsls	r5, r3, #30
 8003b4c:	4606      	mov	r6, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	d507      	bpl.n	8003b62 <__smakebuf_r+0x1c>
 8003b52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b56:	6023      	str	r3, [r4, #0]
 8003b58:	6123      	str	r3, [r4, #16]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	6163      	str	r3, [r4, #20]
 8003b5e:	b003      	add	sp, #12
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b62:	466a      	mov	r2, sp
 8003b64:	ab01      	add	r3, sp, #4
 8003b66:	f7ff ffc9 	bl	8003afc <__swhatbuf_r>
 8003b6a:	9f00      	ldr	r7, [sp, #0]
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	4639      	mov	r1, r7
 8003b70:	4630      	mov	r0, r6
 8003b72:	f7ff fad7 	bl	8003124 <_malloc_r>
 8003b76:	b948      	cbnz	r0, 8003b8c <__smakebuf_r+0x46>
 8003b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b7c:	059a      	lsls	r2, r3, #22
 8003b7e:	d4ee      	bmi.n	8003b5e <__smakebuf_r+0x18>
 8003b80:	f023 0303 	bic.w	r3, r3, #3
 8003b84:	f043 0302 	orr.w	r3, r3, #2
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	e7e2      	b.n	8003b52 <__smakebuf_r+0xc>
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	6020      	str	r0, [r4, #0]
 8003b9c:	b15b      	cbz	r3, 8003bb6 <__smakebuf_r+0x70>
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ba4:	f000 f81e 	bl	8003be4 <_isatty_r>
 8003ba8:	b128      	cbz	r0, 8003bb6 <__smakebuf_r+0x70>
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	f023 0303 	bic.w	r3, r3, #3
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	89a3      	ldrh	r3, [r4, #12]
 8003bb8:	431d      	orrs	r5, r3
 8003bba:	81a5      	strh	r5, [r4, #12]
 8003bbc:	e7cf      	b.n	8003b5e <__smakebuf_r+0x18>
	...

08003bc0 <_fstat_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	4d06      	ldr	r5, [pc, #24]	@ (8003be0 <_fstat_r+0x20>)
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	f7fc fdb1 	bl	8000734 <_fstat>
 8003bd2:	1c43      	adds	r3, r0, #1
 8003bd4:	d102      	bne.n	8003bdc <_fstat_r+0x1c>
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	b103      	cbz	r3, 8003bdc <_fstat_r+0x1c>
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
 8003bde:	bf00      	nop
 8003be0:	2000025c 	.word	0x2000025c

08003be4 <_isatty_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	2300      	movs	r3, #0
 8003be8:	4d05      	ldr	r5, [pc, #20]	@ (8003c00 <_isatty_r+0x1c>)
 8003bea:	4604      	mov	r4, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	f7fc fdaf 	bl	8000752 <_isatty>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_isatty_r+0x1a>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_isatty_r+0x1a>
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	2000025c 	.word	0x2000025c

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
