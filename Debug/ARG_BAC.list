
ARG_BAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004d3c  08004d3c  00005d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e94  08004e94  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e94  08004e94  00005e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e9c  08004e9c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004ea4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000006c  08004f10  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08004f10  00006330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b03e  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbe  00000000  00000000  000110da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00012e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000788  00000000  00000000  00013878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ce8  00000000  00000000  00014000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c47b  00000000  00000000  0002ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088be4  00000000  00000000  00037163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfd47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fec  00000000  00000000  000bfd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c2d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d24 	.word	0x08004d24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004d24 	.word	0x08004d24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <W25QXX_WriteEnable>:

#define FLASH_CS_LOW()  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET)
#define FLASH_CS_HIGH() HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET)


void W25QXX_WriteEnable(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x06; // Write Enable
 8000576:	2306      	movs	r3, #6
 8000578:	71fb      	strb	r3, [r7, #7]
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 800057a:	2200      	movs	r2, #0
 800057c:	2110      	movs	r1, #16
 800057e:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <W25QXX_WriteEnable+0x34>)
 8000580:	f001 f97c 	bl	800187c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000584:	1df9      	adds	r1, r7, #7
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	2201      	movs	r2, #1
 800058c:	4806      	ldr	r0, [pc, #24]	@ (80005a8 <W25QXX_WriteEnable+0x38>)
 800058e:	f001 fea2 	bl	80022d6 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <W25QXX_WriteEnable+0x34>)
 8000598:	f001 f970 	bl	800187c <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020000 	.word	0x40020000
 80005a8:	20000088 	.word	0x20000088

080005ac <W25QXX_ReadStatus>:

uint8_t W25QXX_ReadStatus(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x05;  // Read Status Register
 80005b2:	2305      	movs	r3, #5
 80005b4:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71bb      	strb	r3, [r7, #6]
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 80005ba:	2200      	movs	r2, #0
 80005bc:	2110      	movs	r1, #16
 80005be:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <W25QXX_ReadStatus+0x48>)
 80005c0:	f001 f95c 	bl	800187c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80005c4:	1df9      	adds	r1, r7, #7
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	2201      	movs	r2, #1
 80005cc:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <W25QXX_ReadStatus+0x4c>)
 80005ce:	f001 fe82 	bl	80022d6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &status, 1, HAL_MAX_DELAY);
 80005d2:	1db9      	adds	r1, r7, #6
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	2201      	movs	r2, #1
 80005da:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <W25QXX_ReadStatus+0x4c>)
 80005dc:	f001 ffbf 	bl	800255e <HAL_SPI_Receive>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
    FLASH_CS_HIGH();
 80005e0:	2201      	movs	r2, #1
 80005e2:	2110      	movs	r1, #16
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <W25QXX_ReadStatus+0x48>)
 80005e6:	f001 f949 	bl	800187c <HAL_GPIO_WritePin>
    return status;
 80005ea:	79bb      	ldrb	r3, [r7, #6]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020000 	.word	0x40020000
 80005f8:	20000088 	.word	0x20000088

080005fc <W25QXX_WriteData>:

void W25QXX_WriteData(uint32_t address, uint8_t* data, uint16_t size) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	4613      	mov	r3, r2
 8000608:	80fb      	strh	r3, [r7, #6]
    W25QXX_WriteEnable();  // Enable writing
 800060a:	f7ff ffb1 	bl	8000570 <W25QXX_WriteEnable>
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 800060e:	2302      	movs	r3, #2
 8000610:	753b      	strb	r3, [r7, #20]
                       (address >> 16) & 0xFF,  // Address bytes
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 8000616:	b2db      	uxtb	r3, r3
 8000618:	757b      	strb	r3, [r7, #21]
                       (address >> 8) & 0xFF,
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 800061e:	b2db      	uxtb	r3, r3
 8000620:	75bb      	strb	r3, [r7, #22]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	75fb      	strb	r3, [r7, #23]
                       address & 0xFF };
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 8000628:	2200      	movs	r2, #0
 800062a:	2110      	movs	r1, #16
 800062c:	4811      	ldr	r0, [pc, #68]	@ (8000674 <W25QXX_WriteData+0x78>)
 800062e:	f001 f925 	bl	800187c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);      // Send command & address
 8000632:	f107 0114 	add.w	r1, r7, #20
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2204      	movs	r2, #4
 800063c:	480e      	ldr	r0, [pc, #56]	@ (8000678 <W25QXX_WriteData+0x7c>)
 800063e:	f001 fe4a 	bl	80022d6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);  // Send data
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <W25QXX_WriteData+0x7c>)
 800064c:	f001 fe43 	bl	80022d6 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4807      	ldr	r0, [pc, #28]	@ (8000674 <W25QXX_WriteData+0x78>)
 8000656:	f001 f911 	bl	800187c <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
    while (W25QXX_ReadStatus() & 0x01);                   // Wait for write to finish
 800065a:	bf00      	nop
 800065c:	f7ff ffa6 	bl	80005ac <W25QXX_ReadStatus>
 8000660:	4603      	mov	r3, r0
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f8      	bne.n	800065c <W25QXX_WriteData+0x60>
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020000 	.word	0x40020000
 8000678:	20000088 	.word	0x20000088

0800067c <W25QXX_ReadData>:

void W25QXX_ReadData(uint32_t address, uint8_t* buffer, uint16_t size) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	4613      	mov	r3, r2
 8000688:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 800068a:	2303      	movs	r3, #3
 800068c:	753b      	strb	r3, [r7, #20]
                       (address >> 16) & 0xFF,
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 8000692:	b2db      	uxtb	r3, r3
 8000694:	757b      	strb	r3, [r7, #21]
                       (address >> 8) & 0xFF,
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 800069a:	b2db      	uxtb	r3, r3
 800069c:	75bb      	strb	r3, [r7, #22]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	75fb      	strb	r3, [r7, #23]
                       address & 0xFF };
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 80006a4:	2200      	movs	r2, #0
 80006a6:	2110      	movs	r1, #16
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <W25QXX_ReadData+0x64>)
 80006aa:	f001 f8e7 	bl	800187c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);      // Send command & address
 80006ae:	f107 0114 	add.w	r1, r7, #20
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2204      	movs	r2, #4
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <W25QXX_ReadData+0x68>)
 80006ba:	f001 fe0c 	bl	80022d6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY); // Receive data
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <W25QXX_ReadData+0x68>)
 80006c8:	f001 ff49 	bl	800255e <HAL_SPI_Receive>
    FLASH_CS_HIGH();
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <W25QXX_ReadData+0x64>)
 80006d2:	f001 f8d3 	bl	800187c <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000
 80006e4:	20000088 	.word	0x20000088

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b08b      	sub	sp, #44	@ 0x2c
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fcef 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f8d9 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f9cb 	bl	8000a90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006fa:	f000 f975 	bl	80009e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 f99d 	bl	8000a3c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000702:	f000 f93b 	bl	800097c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	4956      	ldr	r1, [pc, #344]	@ (8000864 <main+0x17c>)
 800070a:	4857      	ldr	r0, [pc, #348]	@ (8000868 <main+0x180>)
 800070c:	f002 fc07 	bl	8002f1e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	4954      	ldr	r1, [pc, #336]	@ (8000864 <main+0x17c>)
 8000714:	4855      	ldr	r0, [pc, #340]	@ (800086c <main+0x184>)
 8000716:	f002 fc02 	bl	8002f1e <HAL_UART_Receive_IT>

  // Test data to write to flash
      uint8_t write_data[16] = "Hello, W25QXX!";
 800071a:	4b55      	ldr	r3, [pc, #340]	@ (8000870 <main+0x188>)
 800071c:	f107 0414 	add.w	r4, r7, #20
 8000720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000722:	c407      	stmia	r4!, {r0, r1, r2}
 8000724:	8023      	strh	r3, [r4, #0]
 8000726:	3402      	adds	r4, #2
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	7023      	strb	r3, [r4, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      uint8_t read_data[16] = {0};
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
      ONBOARD_LED_OFF();
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000748:	484a      	ldr	r0, [pc, #296]	@ (8000874 <main+0x18c>)
 800074a:	f001 f897 	bl	800187c <HAL_GPIO_WritePin>

      // Write data to address 0x000000
      printf("\n SPI FLASH DATA WRITE STARTED");
 800074e:	484a      	ldr	r0, [pc, #296]	@ (8000878 <main+0x190>)
 8000750:	f003 fc18 	bl	8003f84 <iprintf>
      W25QXX_WriteData(0x000000, write_data, sizeof(write_data));
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2210      	movs	r2, #16
 800075a:	4619      	mov	r1, r3
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff4d 	bl	80005fc <W25QXX_WriteData>
      printf("\n SPI FLASH DATA WRITE COMPLETED");
 8000762:	4846      	ldr	r0, [pc, #280]	@ (800087c <main+0x194>)
 8000764:	f003 fc0e 	bl	8003f84 <iprintf>

      // Read data back from address 0x000000
      printf("\n SPI FLASH DATA READ STARTED");
 8000768:	4845      	ldr	r0, [pc, #276]	@ (8000880 <main+0x198>)
 800076a:	f003 fc0b 	bl	8003f84 <iprintf>
      W25QXX_ReadData(0x000000, read_data, sizeof(read_data));
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2210      	movs	r2, #16
 8000772:	4619      	mov	r1, r3
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ff81 	bl	800067c <W25QXX_ReadData>
      printf("\n SPI FLASH DATA READ COMPLETED");
 800077a:	4842      	ldr	r0, [pc, #264]	@ (8000884 <main+0x19c>)
 800077c:	f003 fc02 	bl	8003f84 <iprintf>

      // Compare read data with write data
      if (memcmp(write_data, read_data, sizeof(write_data)) == 0) {
 8000780:	1d39      	adds	r1, r7, #4
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2210      	movs	r2, #16
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fc58 	bl	800403e <memcmp>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d11f      	bne.n	80007d4 <main+0xec>
          // Success! Data matches
          ONBOARD_LED_ON();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079a:	4836      	ldr	r0, [pc, #216]	@ (8000874 <main+0x18c>)
 800079c:	f001 f86e 	bl	800187c <HAL_GPIO_WritePin>
          printf("\n SPI FLASH READ DATA SUCCESS: \t");
 80007a0:	4839      	ldr	r0, [pc, #228]	@ (8000888 <main+0x1a0>)
 80007a2:	f003 fbef 	bl	8003f84 <iprintf>
          for(uint8_t i = 0; i < 16;i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007ac:	e00d      	b.n	80007ca <main+0xe2>
          {
              printf("%c", read_data[i]);
 80007ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007b2:	3328      	adds	r3, #40	@ 0x28
 80007b4:	443b      	add	r3, r7
 80007b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fbf4 	bl	8003fa8 <putchar>
          for(uint8_t i = 0; i < 16;i++)
 80007c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007c4:	3301      	adds	r3, #1
 80007c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d9ed      	bls.n	80007ae <main+0xc6>
 80007d2:	e008      	b.n	80007e6 <main+0xfe>
          }
//          HAL_GPIO_WritePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin, GPIO_PIN_SET); // Turn on an LED or indicate success
      } else {
          // Failure! Data mismatch
          printf("\n SPI FLASH READ DATA FAILED");
 80007d4:	482d      	ldr	r0, [pc, #180]	@ (800088c <main+0x1a4>)
 80007d6:	f003 fbd5 	bl	8003f84 <iprintf>
          ONBOARD_LED_OFF();
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e0:	4824      	ldr	r0, [pc, #144]	@ (8000874 <main+0x18c>)
 80007e2:	f001 f84b 	bl	800187c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      printf("\n SPI FLASH READ DATA SUCCESS: \t");
 80007e6:	4828      	ldr	r0, [pc, #160]	@ (8000888 <main+0x1a0>)
 80007e8:	f003 fbcc 	bl	8003f84 <iprintf>
      for(uint8_t i = 0; i < 16;i++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80007f2:	e00d      	b.n	8000810 <main+0x128>
      {
          printf("%c", read_data[i]);
 80007f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80007f8:	3328      	adds	r3, #40	@ 0x28
 80007fa:	443b      	add	r3, r7
 80007fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fbd1 	bl	8003fa8 <putchar>
      for(uint8_t i = 0; i < 16;i++)
 8000806:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800080a:	3301      	adds	r3, #1
 800080c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000810:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d9ed      	bls.n	80007f4 <main+0x10c>
//	      HAL_Delay(1000); // Wait before sending the next command
////	  if(HAL_GPIO_ReadPin(OnBoardKey_GPIO_Port,OnBoardKey_Pin) == GPIO_PIN_SET)
////	  {
////	  if(ModemTxReady == SET)
//	  {
		  memset(g_buff,'\0',sizeof(g_buff));
 8000818:	2264      	movs	r2, #100	@ 0x64
 800081a:	2100      	movs	r1, #0
 800081c:	481c      	ldr	r0, [pc, #112]	@ (8000890 <main+0x1a8>)
 800081e:	f003 fc1e 	bl	800405e <memset>
		  wr_ptr = 0;
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <main+0x1ac>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
//
		  if (HAL_UART_Transmit(&huart2, (uint8_t *) "AT+CGMM\r\n",strlen("AT+CGMM\r\n"),HAL_MAX_DELAY) != HAL_OK)
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2209      	movs	r2, #9
 800082e:	491a      	ldr	r1, [pc, #104]	@ (8000898 <main+0x1b0>)
 8000830:	480e      	ldr	r0, [pc, #56]	@ (800086c <main+0x184>)
 8000832:	f002 fae9 	bl	8002e08 <HAL_UART_Transmit>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <main+0x15a>
		  {
			  printf("\n Txn Failed");
 800083c:	4817      	ldr	r0, [pc, #92]	@ (800089c <main+0x1b4>)
 800083e:	f003 fba1 	bl	8003f84 <iprintf>
		  }
		  HAL_Delay(5000);
 8000842:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000846:	f000 fcb5 	bl	80011b4 <HAL_Delay>
//
		  if (strstr((char *) g_buff, "OK"))
 800084a:	4915      	ldr	r1, [pc, #84]	@ (80008a0 <main+0x1b8>)
 800084c:	4810      	ldr	r0, [pc, #64]	@ (8000890 <main+0x1a8>)
 800084e:	f003 fc0e 	bl	800406e <strstr>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0c6      	beq.n	80007e6 <main+0xfe>
		  {
			  printf("\n Response OK: %s",(char *)g_buff);
 8000858:	490d      	ldr	r1, [pc, #52]	@ (8000890 <main+0x1a8>)
 800085a:	4812      	ldr	r0, [pc, #72]	@ (80008a4 <main+0x1bc>)
 800085c:	f003 fb92 	bl	8003f84 <iprintf>
      printf("\n SPI FLASH READ DATA SUCCESS: \t");
 8000860:	e7c1      	b.n	80007e6 <main+0xfe>
 8000862:	bf00      	nop
 8000864:	20000170 	.word	0x20000170
 8000868:	200000e0 	.word	0x200000e0
 800086c:	20000128 	.word	0x20000128
 8000870:	08004e38 	.word	0x08004e38
 8000874:	40020800 	.word	0x40020800
 8000878:	08004d3c 	.word	0x08004d3c
 800087c:	08004d5c 	.word	0x08004d5c
 8000880:	08004d80 	.word	0x08004d80
 8000884:	08004da0 	.word	0x08004da0
 8000888:	08004dc0 	.word	0x08004dc0
 800088c:	08004de4 	.word	0x08004de4
 8000890:	20000174 	.word	0x20000174
 8000894:	200001d8 	.word	0x200001d8
 8000898:	08004e04 	.word	0x08004e04
 800089c:	08004e10 	.word	0x08004e10
 80008a0:	08004e20 	.word	0x08004e20
 80008a4:	08004e24 	.word	0x08004e24

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	@ 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2230      	movs	r2, #48	@ 0x30
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fbd1 	bl	800405e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <SystemClock_Config+0xcc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a27      	ldr	r2, [pc, #156]	@ (8000974 <SystemClock_Config+0xcc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <SystemClock_Config+0xcc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <SystemClock_Config+0xd0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f4:	4a20      	ldr	r2, [pc, #128]	@ (8000978 <SystemClock_Config+0xd0>)
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <SystemClock_Config+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800091c:	2319      	movs	r3, #25
 800091e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000920:	23a8      	movs	r3, #168	@ 0xa8
 8000922:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f000 ffef 	bl	8001914 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800093c:	f000 f99c 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2302      	movs	r3, #2
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2102      	movs	r1, #2
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fa51 	bl	8001e04 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000968:	f000 f986 	bl	8000c78 <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3750      	adds	r7, #80	@ 0x50
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_SPI1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <MX_SPI1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_SPI1_Init+0x64>)
 8000988:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_SPI1_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009b0:	2220      	movs	r2, #32
 80009b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009ce:	f001 fbf9 	bl	80021c4 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 f94e 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000088 	.word	0x20000088
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_USART1_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a20:	f002 f9a2 	bl	8002d68 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f925 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000e0 	.word	0x200000e0
 8000a38:	40011000 	.word	0x40011000

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <MX_USART2_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f002 f978 	bl	8002d68 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 f8fb 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000128 	.word	0x20000128
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b34      	ldr	r3, [pc, #208]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a33      	ldr	r2, [pc, #204]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a2c      	ldr	r2, [pc, #176]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a25      	ldr	r2, [pc, #148]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <MX_GPIO_Init+0xec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b00:	481f      	ldr	r0, [pc, #124]	@ (8000b80 <MX_GPIO_Init+0xf0>)
 8000b02:	f000 febb 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2110      	movs	r1, #16
 8000b0a:	481e      	ldr	r0, [pc, #120]	@ (8000b84 <MX_GPIO_Init+0xf4>)
 8000b0c:	f000 feb6 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OnBoardLED_Pin */
  GPIO_InitStruct.Pin = OnBoardLED_Pin;
 8000b10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OnBoardLED_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4815      	ldr	r0, [pc, #84]	@ (8000b80 <MX_GPIO_Init+0xf0>)
 8000b2a:	f000 fd0b 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : RainGuagePulseInput_Pin */
  GPIO_InitStruct.Pin = RainGuagePulseInput_Pin;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RainGuagePulseInput_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4810      	ldr	r0, [pc, #64]	@ (8000b84 <MX_GPIO_Init+0xf4>)
 8000b44:	f000 fcfe 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <MX_GPIO_Init+0xf4>)
 8000b60:	f000 fcf0 	bl	8001544 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2007      	movs	r0, #7
 8000b6a:	f000 fc22 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f000 fc3b 	bl	80013ea <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_UART_RxCpltCallback>:
   @param  UartHandle: UART handle.
   @note   This callback executes once defined bytes of reception completed
   @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
//	  if (UartHandle->Instance == USART1)
//	  {
////		    HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
//	  }
	  if (UartHandle->Instance == USART2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x3c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10f      	bne.n	8000bba <HAL_UART_RxCpltCallback+0x32>
	  {
		    HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	490a      	ldr	r1, [pc, #40]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x40>)
 8000b9e:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <HAL_UART_RxCpltCallback+0x44>)
 8000ba0:	f002 f9bd 	bl	8002f1e <HAL_UART_Receive_IT>
		    g_buff[wr_ptr++] = aRxBuffer;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x48>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	1c5a      	adds	r2, r3, #1
 8000baa:	b2d1      	uxtb	r1, r2
 8000bac:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x48>)
 8000bae:	7011      	strb	r1, [r2, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x40>)
 8000bb4:	7819      	ldrb	r1, [r3, #0]
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x4c>)
 8000bb8:	5499      	strb	r1, [r3, r2]
//		    printf("%c", aRxBuffer);
	  }
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	20000170 	.word	0x20000170
 8000bcc:	20000128 	.word	0x20000128
 8000bd0:	200001d8 	.word	0x200001d8
 8000bd4:	20000174 	.word	0x20000174

08000bd8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	  if (UartHandle->Instance == USART1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a09      	ldr	r2, [pc, #36]	@ (8000c0c <HAL_UART_TxCpltCallback+0x34>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d102      	bne.n	8000bf0 <HAL_UART_TxCpltCallback+0x18>
	  {
	    /* Set transmission flag: transfer complete */
		  SerialTxReady = SET;
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_UART_TxCpltCallback+0x38>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
	  }
	  if (UartHandle->Instance == USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <HAL_UART_TxCpltCallback+0x3c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d102      	bne.n	8000c00 <HAL_UART_TxCpltCallback+0x28>
	  {
	    /* Set transmission flag: transfer complete */
		  ModemTxReady = SET;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_UART_TxCpltCallback+0x40>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
	  }
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	20000171 	.word	0x20000171
 8000c14:	40004400 	.word	0x40004400
 8000c18:	20000000 	.word	0x20000000

08000c1c <HAL_GPIO_EXTI_Callback>:
   @brief EXTI line detection callbacks
   @param GPIO_Pin: Specifies the pins connected EXTI line
   @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == RainGuagePulseInput_Pin)
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d10b      	bne.n	8000c44 <HAL_GPIO_EXTI_Callback+0x28>
  {
    if (HAL_GPIO_ReadPin(RainGuagePulseInput_GPIO_Port, RainGuagePulseInput_Pin)
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <HAL_GPIO_EXTI_Callback+0x30>)
 8000c30:	f000 fe0c 	bl	800184c <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d104      	bne.n	8000c44 <HAL_GPIO_EXTI_Callback+0x28>
         == GPIO_PIN_SET)
    {
    	HAL_GPIO_TogglePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin);
 8000c3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c3e:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c40:	f000 fe35 	bl	80018ae <HAL_GPIO_TogglePin>
    }
  }
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020800 	.word	0x40020800

08000c54 <__io_putchar>:
   @brief  Retargets the C library APP_DEBUG_STR function to the USART.
   @param  None
   @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0XFFFF);
 8000c5c:	1d39      	adds	r1, r7, #4
 8000c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c62:	2201      	movs	r2, #1
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <__io_putchar+0x20>)
 8000c66:	f002 f8cf 	bl	8002e08 <HAL_UART_Transmit>
  return ch;
 8000c6a:	687b      	ldr	r3, [r7, #4]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000e0 	.word	0x200000e0

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <HAL_SPI_MspInit+0x84>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12b      	bne.n	8000d4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23e0      	movs	r3, #224	@ 0xe0
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_SPI_MspInit+0x8c>)
 8000d4a:	f000 fbfb 	bl	8001544 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40013000 	.word	0x40013000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	@ 0x30
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a3a      	ldr	r2, [pc, #232]	@ (8000e6c <HAL_UART_MspInit+0x108>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d135      	bne.n	8000df2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	4b39      	ldr	r3, [pc, #228]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	4a38      	ldr	r2, [pc, #224]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d96:	4b36      	ldr	r3, [pc, #216]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	4b32      	ldr	r3, [pc, #200]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a31      	ldr	r2, [pc, #196]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_Tx_Pin|MODEM_Rx_Pin;
 8000dbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4826      	ldr	r0, [pc, #152]	@ (8000e74 <HAL_UART_MspInit+0x110>)
 8000ddc:	f000 fbb2 	bl	8001544 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2025      	movs	r0, #37	@ 0x25
 8000de6:	f000 fae4 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dea:	2025      	movs	r0, #37	@ 0x25
 8000dec:	f000 fafd 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df0:	e038      	b.n	8000e64 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <HAL_UART_MspInit+0x114>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d133      	bne.n	8000e64 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	4a1a      	ldr	r2, [pc, #104]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0c:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	4a13      	ldr	r2, [pc, #76]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <HAL_UART_MspInit+0x10c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERIAL_Tx_Pin|SERIAL_Rx_Pin;
 8000e34:	230c      	movs	r3, #12
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e44:	2307      	movs	r3, #7
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <HAL_UART_MspInit+0x110>)
 8000e50:	f000 fb78 	bl	8001544 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2026      	movs	r0, #38	@ 0x26
 8000e5a:	f000 faaa 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e5e:	2026      	movs	r0, #38	@ 0x26
 8000e60:	f000 fac3 	bl	80013ea <HAL_NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	@ 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40004400 	.word	0x40004400

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f94f 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <USART1_IRQHandler+0x10>)
 8000ee2:	f002 f841 	bl	8002f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000e0 	.word	0x200000e0

08000ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <USART2_IRQHandler+0x10>)
 8000ef6:	f002 f837 	bl	8002f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000128 	.word	0x20000128

08000f04 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f000 fceb 	bl	80018e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e00a      	b.n	8000f3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f24:	f3af 8000 	nop.w
 8000f28:	4601      	mov	r1, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	60ba      	str	r2, [r7, #8]
 8000f30:	b2ca      	uxtb	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	dbf0      	blt.n	8000f24 <_read+0x12>
  }

  return len;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e009      	b.n	8000f72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	60ba      	str	r2, [r7, #8]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fe74 	bl	8000c54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbf1      	blt.n	8000f5e <_write+0x12>
  }
  return len;
 8000f7a:	687b      	ldr	r3, [r7, #4]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_close>:

int _close(int file)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fac:	605a      	str	r2, [r3, #4]
  return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_isatty>:

int _isatty(int file)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc4:	2301      	movs	r3, #1
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	@ (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f003 f884 	bl	8004128 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20010000 	.word	0x20010000
 800104c:	00000400 	.word	0x00000400
 8001050:	200001dc 	.word	0x200001dc
 8001054:	20000330 	.word	0x20000330

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	@ (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f003 f843 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fb1b 	bl	80006e8 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010c0:	08004ea4 	.word	0x08004ea4
  ldr r2, =_sbss
 80010c4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010c8:	20000330 	.word	0x20000330

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	@ (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f94f 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fdbe 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f967 	bl	8001406 <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f92f 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000004 	.word	0x20000004
 800116c:	2000000c 	.word	0x2000000c
 8001170:	20000008 	.word	0x20000008

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000000c 	.word	0x2000000c
 8001198:	200001e0 	.word	0x200001e0

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200001e0 	.word	0x200001e0

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000000c 	.word	0x2000000c

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	@ (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff feb6 	bl	800119c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d008      	beq.n	8001450 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e052      	b.n	80014f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0216 	bic.w	r2, r2, #22
 800145e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800146e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	d103      	bne.n	8001480 <HAL_DMA_Abort+0x62>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0208 	bic.w	r2, r2, #8
 800148e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a0:	e013      	b.n	80014ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a2:	f7ff fe7b 	bl	800119c <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d90c      	bls.n	80014ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2220      	movs	r2, #32
 80014b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2203      	movs	r2, #3
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e015      	b.n	80014f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e4      	bne.n	80014a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014dc:	223f      	movs	r2, #63	@ 0x3f
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d004      	beq.n	800151c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2280      	movs	r2, #128	@ 0x80
 8001516:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e00c      	b.n	8001536 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2205      	movs	r2, #5
 8001520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e159      	b.n	8001814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 8148 	bne.w	800180e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d005      	beq.n	8001596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	2b02      	cmp	r3, #2
 8001594:	d130      	bne.n	80015f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015cc:	2201      	movs	r2, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 0201 	and.w	r2, r3, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b03      	cmp	r3, #3
 8001602:	d017      	beq.n	8001634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d123      	bne.n	8001688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0203 	and.w	r2, r3, #3
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a2 	beq.w	800180e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b57      	ldr	r3, [pc, #348]	@ (800182c <HAL_GPIO_Init+0x2e8>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	4a56      	ldr	r2, [pc, #344]	@ (800182c <HAL_GPIO_Init+0x2e8>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016da:	4b54      	ldr	r3, [pc, #336]	@ (800182c <HAL_GPIO_Init+0x2e8>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e6:	4a52      	ldr	r2, [pc, #328]	@ (8001830 <HAL_GPIO_Init+0x2ec>)
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a49      	ldr	r2, [pc, #292]	@ (8001834 <HAL_GPIO_Init+0x2f0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x202>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a48      	ldr	r2, [pc, #288]	@ (8001838 <HAL_GPIO_Init+0x2f4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x1fe>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a47      	ldr	r2, [pc, #284]	@ (800183c <HAL_GPIO_Init+0x2f8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x1fa>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a46      	ldr	r2, [pc, #280]	@ (8001840 <HAL_GPIO_Init+0x2fc>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x1f6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a45      	ldr	r2, [pc, #276]	@ (8001844 <HAL_GPIO_Init+0x300>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x1f2>
 8001732:	2304      	movs	r3, #4
 8001734:	e008      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001736:	2307      	movs	r3, #7
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x204>
 800173a:	2303      	movs	r3, #3
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x204>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001746:	2300      	movs	r3, #0
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f002 0203 	and.w	r2, r2, #3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4093      	lsls	r3, r2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001758:	4935      	ldr	r1, [pc, #212]	@ (8001830 <HAL_GPIO_Init+0x2ec>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b38      	ldr	r3, [pc, #224]	@ (8001848 <HAL_GPIO_Init+0x304>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a2f      	ldr	r2, [pc, #188]	@ (8001848 <HAL_GPIO_Init+0x304>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <HAL_GPIO_Init+0x304>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a24      	ldr	r2, [pc, #144]	@ (8001848 <HAL_GPIO_Init+0x304>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ba:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <HAL_GPIO_Init+0x304>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017de:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <HAL_GPIO_Init+0x304>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_GPIO_Init+0x304>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001808:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <HAL_GPIO_Init+0x304>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	f67f aea2 	bls.w	8001560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40013800 	.word	0x40013800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40013c00 	.word	0x40013c00

0800184c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e001      	b.n	800186e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001898:	e003      	b.n	80018a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	041a      	lsls	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018c0:	887a      	ldrh	r2, [r7, #2]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	041a      	lsls	r2, r3, #16
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	400b      	ands	r3, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	619a      	str	r2, [r3, #24]
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018ee:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f98a 	bl	8000c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40013c00 	.word	0x40013c00

08001914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e267      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d075      	beq.n	8001a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001932:	4b88      	ldr	r3, [pc, #544]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b04      	cmp	r3, #4
 800193c:	d00c      	beq.n	8001958 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4b85      	ldr	r3, [pc, #532]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001946:	2b08      	cmp	r3, #8
 8001948:	d112      	bne.n	8001970 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800194a:	4b82      	ldr	r3, [pc, #520]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001956:	d10b      	bne.n	8001970 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4b7e      	ldr	r3, [pc, #504]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d05b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x108>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d157      	bne.n	8001a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e242      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001978:	d106      	bne.n	8001988 <HAL_RCC_OscConfig+0x74>
 800197a:	4b76      	ldr	r3, [pc, #472]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a75      	ldr	r2, [pc, #468]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e01d      	b.n	80019c4 <HAL_RCC_OscConfig+0xb0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b70      	ldr	r3, [pc, #448]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6f      	ldr	r2, [pc, #444]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0xb0>
 80019ac:	4b69      	ldr	r3, [pc, #420]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a68      	ldr	r2, [pc, #416]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b66      	ldr	r3, [pc, #408]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a65      	ldr	r2, [pc, #404]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fbe6 	bl	800119c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fbe2 	bl	800119c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	@ 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e207      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0xc0>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fbd2 	bl	800119c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fbce 	bl	800119c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	@ 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1f3      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	4b51      	ldr	r3, [pc, #324]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0xe8>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d11c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a42:	4b44      	ldr	r3, [pc, #272]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x152>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e1c7      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4937      	ldr	r1, [pc, #220]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	e03a      	b.n	8001af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a84:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <HAL_RCC_OscConfig+0x244>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fb87 	bl	800119c <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fb83 	bl	800119c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e1a8      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4925      	ldr	r1, [pc, #148]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_RCC_OscConfig+0x244>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff fb66 	bl	800119c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fb62 	bl	800119c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e187      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d036      	beq.n	8001b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d016      	beq.n	8001b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x248>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fb46 	bl	800119c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff fb42 	bl	800119c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e167      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x200>
 8001b32:	e01b      	b.n	8001b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x248>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff fb2f 	bl	800119c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b40:	e00e      	b.n	8001b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b42:	f7ff fb2b 	bl	800119c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d907      	bls.n	8001b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e150      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	42470000 	.word	0x42470000
 8001b5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ea      	bne.n	8001b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 8097 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7e:	4b81      	ldr	r3, [pc, #516]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10f      	bne.n	8001baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a7c      	ldr	r2, [pc, #496]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b77      	ldr	r3, [pc, #476]	@ (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4b74      	ldr	r3, [pc, #464]	@ (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a73      	ldr	r2, [pc, #460]	@ (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff faeb 	bl	800119c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff fae7 	bl	800119c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e10c      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2ea>
 8001bf0:	4b64      	ldr	r3, [pc, #400]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf4:	4a63      	ldr	r2, [pc, #396]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bfc:	e01c      	b.n	8001c38 <HAL_RCC_OscConfig+0x324>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x30c>
 8001c06:	4b5f      	ldr	r3, [pc, #380]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c12:	4b5c      	ldr	r3, [pc, #368]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c16:	4a5b      	ldr	r2, [pc, #364]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0x324>
 8001c20:	4b58      	ldr	r3, [pc, #352]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c24:	4a57      	ldr	r2, [pc, #348]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c2c:	4b55      	ldr	r3, [pc, #340]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c30:	4a54      	ldr	r2, [pc, #336]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c32:	f023 0304 	bic.w	r3, r3, #4
 8001c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d015      	beq.n	8001c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7ff faac 	bl	800119c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7ff faa8 	bl	800119c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0cb      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5e:	4b49      	ldr	r3, [pc, #292]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0ee      	beq.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c6a:	e014      	b.n	8001c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fa96 	bl	800119c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7ff fa92 	bl	800119c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e0b5      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ee      	bne.n	8001c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9c:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	4a38      	ldr	r2, [pc, #224]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a1 	beq.w	8001df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb2:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d05c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d141      	bne.n	8001d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fa66 	bl	800119c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff fa62 	bl	800119c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e087      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce6:	4b27      	ldr	r3, [pc, #156]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	019b      	lsls	r3, r3, #6
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	491b      	ldr	r1, [pc, #108]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff fa3b 	bl	800119c <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff fa37 	bl	800119c <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e05c      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x416>
 8001d48:	e054      	b.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fa24 	bl	800119c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff fa20 	bl	800119c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e045      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
 8001d76:	e03d      	b.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e038      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_RCC_OscConfig+0x4ec>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d028      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d121      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d11a      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0cc      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b68      	ldr	r3, [pc, #416]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d90c      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b65      	ldr	r3, [pc, #404]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b63      	ldr	r3, [pc, #396]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e58:	4b59      	ldr	r3, [pc, #356]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a58      	ldr	r2, [pc, #352]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e70:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a52      	ldr	r2, [pc, #328]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b50      	ldr	r3, [pc, #320]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	494d      	ldr	r1, [pc, #308]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d044      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e067      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4934      	ldr	r1, [pc, #208]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f952 	bl	800119c <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f94e 	bl	800119c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e04f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d20c      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e032      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4916      	ldr	r1, [pc, #88]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490e      	ldr	r1, [pc, #56]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8a:	f000 f821 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	490a      	ldr	r1, [pc, #40]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	4a09      	ldr	r2, [pc, #36]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f8b2 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08004e48 	.word	0x08004e48
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd4:	b090      	sub	sp, #64	@ 0x40
 8001fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe8:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d00d      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x40>
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	f200 80a1 	bhi.w	800213c <HAL_RCC_GetSysClockFreq+0x16c>
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x34>
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d003      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x3a>
 8002002:	e09b      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b53      	ldr	r3, [pc, #332]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x184>)
 8002006:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002008:	e09b      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800200a:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800200c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800200e:	e098      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002010:	4b4f      	ldr	r3, [pc, #316]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002018:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201a:	4b4d      	ldr	r3, [pc, #308]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d028      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002026:	4b4a      	ldr	r3, [pc, #296]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	2200      	movs	r2, #0
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	627a      	str	r2, [r7, #36]	@ 0x24
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002038:	2100      	movs	r1, #0
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800203c:	fb03 f201 	mul.w	r2, r3, r1
 8002040:	2300      	movs	r3, #0
 8002042:	fb00 f303 	mul.w	r3, r0, r3
 8002046:	4413      	add	r3, r2
 8002048:	4a43      	ldr	r2, [pc, #268]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800204a:	fba0 1202 	umull	r1, r2, r0, r2
 800204e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002050:	460a      	mov	r2, r1
 8002052:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002056:	4413      	add	r3, r2
 8002058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800205a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205c:	2200      	movs	r2, #0
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	61fa      	str	r2, [r7, #28]
 8002062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800206a:	f7fe f909 	bl	8000280 <__aeabi_uldivmod>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4613      	mov	r3, r2
 8002074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002076:	e053      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002078:	4b35      	ldr	r3, [pc, #212]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	2200      	movs	r2, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	617a      	str	r2, [r7, #20]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800208a:	f04f 0b00 	mov.w	fp, #0
 800208e:	4652      	mov	r2, sl
 8002090:	465b      	mov	r3, fp
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0159      	lsls	r1, r3, #5
 800209c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a0:	0150      	lsls	r0, r2, #5
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	ebb2 080a 	subs.w	r8, r2, sl
 80020aa:	eb63 090b 	sbc.w	r9, r3, fp
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020c2:	ebb2 0408 	subs.w	r4, r2, r8
 80020c6:	eb63 0509 	sbc.w	r5, r3, r9
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	00eb      	lsls	r3, r5, #3
 80020d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d8:	00e2      	lsls	r2, r4, #3
 80020da:	4614      	mov	r4, r2
 80020dc:	461d      	mov	r5, r3
 80020de:	eb14 030a 	adds.w	r3, r4, sl
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	eb45 030b 	adc.w	r3, r5, fp
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f6:	4629      	mov	r1, r5
 80020f8:	028b      	lsls	r3, r1, #10
 80020fa:	4621      	mov	r1, r4
 80020fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002100:	4621      	mov	r1, r4
 8002102:	028a      	lsls	r2, r1, #10
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800210a:	2200      	movs	r2, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	60fa      	str	r2, [r7, #12]
 8002110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002114:	f7fe f8b4 	bl	8000280 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4613      	mov	r3, r2
 800211e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002130:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x184>)
 800213e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002144:	4618      	mov	r0, r3
 8002146:	3740      	adds	r7, #64	@ 0x40
 8002148:	46bd      	mov	sp, r7
 800214a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	00f42400 	.word	0x00f42400
 8002158:	017d7840 	.word	0x017d7840

0800215c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_RCC_GetHCLKFreq+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002178:	f7ff fff0 	bl	800215c <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	@ (8002198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	08004e58 	.word	0x08004e58

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a0:	f7ff ffdc 	bl	800215c <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0b5b      	lsrs	r3, r3, #13
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	@ (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	08004e58 	.word	0x08004e58

080021c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07b      	b.n	80022ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d108      	bne.n	80021f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021e6:	d009      	beq.n	80021fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
 80021ee:	e005      	b.n	80021fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fd5c 	bl	8000cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002232:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002280:	ea42 0103 	orr.w	r1, r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0104 	and.w	r1, r3, #4
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	f003 0210 	and.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b088      	sub	sp, #32
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022e6:	f7fe ff59 	bl	800119c <HAL_GetTick>
 80022ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d001      	beq.n	8002300 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	e12a      	b.n	8002556 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_SPI_Transmit+0x36>
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e122      	b.n	8002556 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_SPI_Transmit+0x48>
 800231a:	2302      	movs	r3, #2
 800231c:	e11b      	b.n	8002556 <HAL_SPI_Transmit+0x280>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2203      	movs	r2, #3
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800236c:	d10f      	bne.n	800238e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800237c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800238c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002398:	2b40      	cmp	r3, #64	@ 0x40
 800239a:	d007      	beq.n	80023ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023b4:	d152      	bne.n	800245c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_SPI_Transmit+0xee>
 80023be:	8b7b      	ldrh	r3, [r7, #26]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d145      	bne.n	8002450 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	1c9a      	adds	r2, r3, #2
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023e8:	e032      	b.n	8002450 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d112      	bne.n	800241e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	1c9a      	adds	r2, r3, #2
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800241c:	e018      	b.n	8002450 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800241e:	f7fe febd 	bl	800119c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d803      	bhi.n	8002436 <HAL_SPI_Transmit+0x160>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d102      	bne.n	800243c <HAL_SPI_Transmit+0x166>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e082      	b.n	8002556 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1c7      	bne.n	80023ea <HAL_SPI_Transmit+0x114>
 800245a:	e053      	b.n	8002504 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_SPI_Transmit+0x194>
 8002464:	8b7b      	ldrh	r3, [r7, #26]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d147      	bne.n	80024fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	330c      	adds	r3, #12
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002490:	e033      	b.n	80024fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b02      	cmp	r3, #2
 800249e:	d113      	bne.n	80024c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	330c      	adds	r3, #12
 80024aa:	7812      	ldrb	r2, [r2, #0]
 80024ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024c6:	e018      	b.n	80024fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024c8:	f7fe fe68 	bl	800119c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d803      	bhi.n	80024e0 <HAL_SPI_Transmit+0x20a>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d102      	bne.n	80024e6 <HAL_SPI_Transmit+0x210>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e02d      	b.n	8002556 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1c6      	bne.n	8002492 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fbd9 	bl	8002cc0 <SPI_EndRxTxTransaction>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002554:	2300      	movs	r3, #0
  }
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b088      	sub	sp, #32
 8002562:	af02      	add	r7, sp, #8
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d001      	beq.n	800257e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	e104      	b.n	8002788 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002586:	d112      	bne.n	80025ae <HAL_SPI_Receive+0x50>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10e      	bne.n	80025ae <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2204      	movs	r2, #4
 8002594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002598:	88fa      	ldrh	r2, [r7, #6]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f8f3 	bl	8002790 <HAL_SPI_TransmitReceive>
 80025aa:	4603      	mov	r3, r0
 80025ac:	e0ec      	b.n	8002788 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ae:	f7fe fdf5 	bl	800119c <HAL_GetTick>
 80025b2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_SPI_Receive+0x62>
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0e1      	b.n	8002788 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_SPI_Receive+0x74>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0da      	b.n	8002788 <HAL_SPI_Receive+0x22a>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2204      	movs	r2, #4
 80025de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	88fa      	ldrh	r2, [r7, #6]
 80025f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002620:	d10f      	bne.n	8002642 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d007      	beq.n	8002660 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d170      	bne.n	800274a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002668:	e035      	b.n	80026d6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d115      	bne.n	80026a4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f103 020c 	add.w	r2, r3, #12
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002684:	7812      	ldrb	r2, [r2, #0]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026a2:	e018      	b.n	80026d6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026a4:	f7fe fd7a 	bl	800119c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d803      	bhi.n	80026bc <HAL_SPI_Receive+0x15e>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d102      	bne.n	80026c2 <HAL_SPI_Receive+0x164>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e058      	b.n	8002788 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1c4      	bne.n	800266a <HAL_SPI_Receive+0x10c>
 80026e0:	e038      	b.n	8002754 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d113      	bne.n	8002718 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fa:	b292      	uxth	r2, r2
 80026fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002702:	1c9a      	adds	r2, r3, #2
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002716:	e018      	b.n	800274a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002718:	f7fe fd40 	bl	800119c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d803      	bhi.n	8002730 <HAL_SPI_Receive+0x1d2>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d102      	bne.n	8002736 <HAL_SPI_Receive+0x1d8>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e01e      	b.n	8002788 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1c6      	bne.n	80026e2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa4b 	bl	8002bf4 <SPI_EndRxTransaction>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002786:	2300      	movs	r3, #0
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	@ 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800279e:	2301      	movs	r3, #1
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a2:	f7fe fcfb 	bl	800119c <HAL_GetTick>
 80027a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027b6:	887b      	ldrh	r3, [r7, #2]
 80027b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027ba:	7ffb      	ldrb	r3, [r7, #31]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d00c      	beq.n	80027da <HAL_SPI_TransmitReceive+0x4a>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027c6:	d106      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x46>
 80027d0:	7ffb      	ldrb	r3, [r7, #31]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d001      	beq.n	80027da <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	e17f      	b.n	8002ada <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x5c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x5c>
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e174      	b.n	8002ada <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_SPI_TransmitReceive+0x6e>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e16d      	b.n	8002ada <HAL_SPI_TransmitReceive+0x34a>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b04      	cmp	r3, #4
 8002810:	d003      	beq.n	800281a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2205      	movs	r2, #5
 8002816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	887a      	ldrh	r2, [r7, #2]
 800282a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	887a      	ldrh	r2, [r7, #2]
 8002842:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d007      	beq.n	800286e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800286c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002876:	d17e      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_SPI_TransmitReceive+0xf6>
 8002880:	8afb      	ldrh	r3, [r7, #22]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d16c      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	1c9a      	adds	r2, r3, #2
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028aa:	e059      	b.n	8002960 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d11b      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x162>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d016      	beq.n	80028f2 <HAL_SPI_TransmitReceive+0x162>
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d113      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	1c9a      	adds	r2, r3, #2
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d119      	bne.n	8002934 <HAL_SPI_TransmitReceive+0x1a4>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d014      	beq.n	8002934 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	b292      	uxth	r2, r2
 8002916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	1c9a      	adds	r2, r3, #2
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002930:	2301      	movs	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002934:	f7fe fc32 	bl	800119c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002940:	429a      	cmp	r2, r3
 8002942:	d80d      	bhi.n	8002960 <HAL_SPI_TransmitReceive+0x1d0>
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d009      	beq.n	8002960 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0bc      	b.n	8002ada <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1a0      	bne.n	80028ac <HAL_SPI_TransmitReceive+0x11c>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d19b      	bne.n	80028ac <HAL_SPI_TransmitReceive+0x11c>
 8002974:	e082      	b.n	8002a7c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x1f4>
 800297e:	8afb      	ldrh	r3, [r7, #22]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d171      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029aa:	e05d      	b.n	8002a68 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d11c      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x264>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d017      	beq.n	80029f4 <HAL_SPI_TransmitReceive+0x264>
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d114      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d119      	bne.n	8002a36 <HAL_SPI_TransmitReceive+0x2a6>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d014      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a32:	2301      	movs	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a36:	f7fe fbb1 	bl	800119c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d803      	bhi.n	8002a4e <HAL_SPI_TransmitReceive+0x2be>
 8002a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d102      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x2c4>
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e038      	b.n	8002ada <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d19c      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x21c>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d197      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f91d 	bl	8002cc0 <SPI_EndRxTxTransaction>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e01d      	b.n	8002ada <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3728      	adds	r7, #40	@ 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002af4:	f7fe fb52 	bl	800119c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b04:	f7fe fb4a 	bl	800119c <HAL_GetTick>
 8002b08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b0a:	4b39      	ldr	r3, [pc, #228]	@ (8002bf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	015b      	lsls	r3, r3, #5
 8002b10:	0d1b      	lsrs	r3, r3, #20
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b1a:	e054      	b.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d050      	beq.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b24:	f7fe fb3a 	bl	800119c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d902      	bls.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d13d      	bne.n	8002bb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b52:	d111      	bne.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b5c:	d004      	beq.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b66:	d107      	bne.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b80:	d10f      	bne.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ba0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e017      	b.n	8002be6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d19b      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c08:	d111      	bne.n	8002c2e <SPI_EndRxTransaction+0x3a>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c12:	d004      	beq.n	8002c1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1c:	d107      	bne.n	8002c2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c36:	d12a      	bne.n	8002c8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c40:	d012      	beq.n	8002c68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2180      	movs	r1, #128	@ 0x80
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f7ff ff49 	bl	8002ae4 <SPI_WaitFlagStateUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02d      	beq.n	8002cb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e026      	b.n	8002cb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2101      	movs	r1, #1
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f7ff ff36 	bl	8002ae4 <SPI_WaitFlagStateUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01a      	beq.n	8002cb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e013      	b.n	8002cb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2101      	movs	r1, #1
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff ff23 	bl	8002ae4 <SPI_WaitFlagStateUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff ff04 	bl	8002ae4 <SPI_WaitFlagStateUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e032      	b.n	8002d58 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <SPI_EndRxTxTransaction+0xa0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <SPI_EndRxTxTransaction+0xa4>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	0d5b      	lsrs	r3, r3, #21
 8002cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d10:	d112      	bne.n	8002d38 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7ff fee1 	bl	8002ae4 <SPI_WaitFlagStateUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e00f      	b.n	8002d58 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4e:	2b80      	cmp	r3, #128	@ 0x80
 8002d50:	d0f2      	beq.n	8002d38 <SPI_EndRxTxTransaction+0x78>
 8002d52:	e000      	b.n	8002d56 <SPI_EndRxTxTransaction+0x96>
        break;
 8002d54:	bf00      	nop
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000004 	.word	0x20000004
 8002d64:	165e9f81 	.word	0x165e9f81

08002d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e042      	b.n	8002e00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd ffe8 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	@ 0x24
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fdb3 	bl	8003918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	@ 0x28
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d175      	bne.n	8002f14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_UART_Transmit+0x2c>
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e06e      	b.n	8002f16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2221      	movs	r2, #33	@ 0x21
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e46:	f7fe f9a9 	bl	800119c <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	88fa      	ldrh	r2, [r7, #6]
 8002e50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e60:	d108      	bne.n	8002e74 <HAL_UART_Transmit+0x6c>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	e003      	b.n	8002e7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e7c:	e02e      	b.n	8002edc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2180      	movs	r1, #128	@ 0x80
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fb15 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e03a      	b.n	8002f16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10b      	bne.n	8002ebe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	e007      	b.n	8002ece <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1cb      	bne.n	8002e7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2140      	movs	r1, #64	@ 0x40
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fae1 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e006      	b.n	8002f16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d112      	bne.n	8002f5e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_UART_Receive_IT+0x26>
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e00b      	b.n	8002f60 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	461a      	mov	r2, r3
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fb08 	bl	800356a <UART_Start_Receive_IT>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	e000      	b.n	8002f60 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b0ba      	sub	sp, #232	@ 0xe8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <HAL_UART_IRQHandler+0x66>
 8002fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fbe8 	bl	800379c <UART_Receive_IT>
      return;
 8002fcc:	e25b      	b.n	8003486 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80de 	beq.w	8003194 <HAL_UART_IRQHandler+0x22c>
 8002fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80d1 	beq.w	8003194 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_UART_IRQHandler+0xae>
 8002ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_UART_IRQHandler+0xd2>
 8003022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800303a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_UART_IRQHandler+0xf6>
 8003046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	f043 0204 	orr.w	r2, r3, #4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800305e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d011      	beq.n	800308e <HAL_UART_IRQHandler+0x126>
 800306a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d105      	bne.n	8003082 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	f043 0208 	orr.w	r2, r3, #8
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 81f2 	beq.w	800347c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_UART_IRQHandler+0x14e>
 80030a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fb73 	bl	800379c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c0:	2b40      	cmp	r3, #64	@ 0x40
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <HAL_UART_IRQHandler+0x17a>
 80030da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d04f      	beq.n	8003182 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa7b 	bl	80035de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f2:	2b40      	cmp	r3, #64	@ 0x40
 80030f4:	d141      	bne.n	800317a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3314      	adds	r3, #20
 80030fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003100:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800310c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003122:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800312e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800313a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1d9      	bne.n	80030f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d013      	beq.n	8003172 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314e:	4a7e      	ldr	r2, [pc, #504]	@ (8003348 <HAL_UART_IRQHandler+0x3e0>)
 8003150:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe f9d1 	bl	80014fe <HAL_DMA_Abort_IT>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800316c:	4610      	mov	r0, r2
 800316e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e00e      	b.n	8003190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f98a 	bl	800348c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e00a      	b.n	8003190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f986 	bl	800348c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	e006      	b.n	8003190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f982 	bl	800348c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800318e:	e175      	b.n	800347c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003190:	bf00      	nop
    return;
 8003192:	e173      	b.n	800347c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 814f 	bne.w	800343c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800319e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8148 	beq.w	800343c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8141 	beq.w	800343c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031da:	2b40      	cmp	r3, #64	@ 0x40
 80031dc:	f040 80b6 	bne.w	800334c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8145 	beq.w	8003480 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031fe:	429a      	cmp	r2, r3
 8003200:	f080 813e 	bcs.w	8003480 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800320a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003216:	f000 8088 	beq.w	800332a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	330c      	adds	r3, #12
 8003242:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003246:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800324a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003252:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800325e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1d9      	bne.n	800321a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3314      	adds	r3, #20
 8003286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800328a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800328e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003292:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800329c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e1      	bne.n	8003266 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3314      	adds	r3, #20
 80032c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032ce:	e841 2300 	strex	r3, r2, [r1]
 80032d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e3      	bne.n	80032a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80032f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032fa:	f023 0310 	bic.w	r3, r3, #16
 80032fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800330c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800330e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003312:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800331a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e3      	bne.n	80032e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe f87a 	bl	800141e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003338:	b29b      	uxth	r3, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	b29b      	uxth	r3, r3
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f8ad 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003346:	e09b      	b.n	8003480 <HAL_UART_IRQHandler+0x518>
 8003348:	080036a5 	.word	0x080036a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003354:	b29b      	uxth	r3, r3
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 808e 	beq.w	8003484 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8089 	beq.w	8003484 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003388:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003396:	647a      	str	r2, [r7, #68]	@ 0x44
 8003398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800339c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e3      	bne.n	8003372 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3314      	adds	r3, #20
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	623b      	str	r3, [r7, #32]
   return(result);
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80033d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e3      	bne.n	80033aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0310 	bic.w	r3, r3, #16
 8003406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003414:	61fa      	str	r2, [r7, #28]
 8003416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	69b9      	ldr	r1, [r7, #24]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	617b      	str	r3, [r7, #20]
   return(result);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e3      	bne.n	80033f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800342e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f833 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800343a:	e023      	b.n	8003484 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800343c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <HAL_UART_IRQHandler+0x4f4>
 8003448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f939 	bl	80036cc <UART_Transmit_IT>
    return;
 800345a:	e014      	b.n	8003486 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800345c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00e      	beq.n	8003486 <HAL_UART_IRQHandler+0x51e>
 8003468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f979 	bl	800376c <UART_EndTransmit_IT>
    return;
 800347a:	e004      	b.n	8003486 <HAL_UART_IRQHandler+0x51e>
    return;
 800347c:	bf00      	nop
 800347e:	e002      	b.n	8003486 <HAL_UART_IRQHandler+0x51e>
      return;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <HAL_UART_IRQHandler+0x51e>
      return;
 8003484:	bf00      	nop
  }
}
 8003486:	37e8      	adds	r7, #232	@ 0xe8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c8:	e03b      	b.n	8003542 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d037      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7fd fe63 	bl	800119c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e03a      	b.n	8003562 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d023      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b80      	cmp	r3, #128	@ 0x80
 80034fe:	d020      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b40      	cmp	r3, #64	@ 0x40
 8003504:	d01d      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d116      	bne.n	8003542 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f857 	bl	80035de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2208      	movs	r2, #8
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e00f      	b.n	8003562 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	429a      	cmp	r2, r3
 800355e:	d0b4      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	4613      	mov	r3, r2
 8003576:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2222      	movs	r2, #34	@ 0x22
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0220 	orr.w	r2, r2, #32
 80035ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035de:	b480      	push	{r7}
 80035e0:	b095      	sub	sp, #84	@ 0x54
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003606:	643a      	str	r2, [r7, #64]	@ 0x40
 8003608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800360c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e5      	bne.n	80035e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3314      	adds	r3, #20
 8003620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	61fb      	str	r3, [r7, #28]
   return(result);
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3314      	adds	r3, #20
 8003638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800363a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800363c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e5      	bne.n	800361a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	2b01      	cmp	r3, #1
 8003654:	d119      	bne.n	800368a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	60bb      	str	r3, [r7, #8]
   return(result);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f023 0310 	bic.w	r3, r3, #16
 800366c:	647b      	str	r3, [r7, #68]	@ 0x44
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003676:	61ba      	str	r2, [r7, #24]
 8003678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6979      	ldr	r1, [r7, #20]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	613b      	str	r3, [r7, #16]
   return(result);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e5      	bne.n	8003656 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003698:	bf00      	nop
 800369a:	3754      	adds	r7, #84	@ 0x54
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff fee4 	bl	800348c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b21      	cmp	r3, #33	@ 0x21
 80036de:	d13e      	bne.n	800375e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e8:	d114      	bne.n	8003714 <UART_Transmit_IT+0x48>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d110      	bne.n	8003714 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003706:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]
 8003712:	e008      	b.n	8003726 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	1c59      	adds	r1, r3, #1
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6211      	str	r1, [r2, #32]
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29b      	uxth	r3, r3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4619      	mov	r1, r3
 8003734:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003748:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003758:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003782:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fd fa23 	bl	8000bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	@ 0x30
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b22      	cmp	r3, #34	@ 0x22
 80037ae:	f040 80ae 	bne.w	800390e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ba:	d117      	bne.n	80037ec <UART_Receive_IT+0x50>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	b29a      	uxth	r2, r3
 80037dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	1c9a      	adds	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80037ea:	e026      	b.n	800383a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fe:	d007      	beq.n	8003810 <UART_Receive_IT+0x74>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <UART_Receive_IT+0x82>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e008      	b.n	8003830 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800382a:	b2da      	uxtb	r2, r3
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29b      	uxth	r3, r3
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4619      	mov	r1, r3
 8003848:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800384a:	2b00      	cmp	r3, #0
 800384c:	d15d      	bne.n	800390a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0220 	bic.w	r2, r2, #32
 800385c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800386c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	2b01      	cmp	r3, #1
 8003892:	d135      	bne.n	8003900 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	613b      	str	r3, [r7, #16]
   return(result);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f023 0310 	bic.w	r3, r3, #16
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ba:	623a      	str	r2, [r7, #32]
 80038bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	69f9      	ldr	r1, [r7, #28]
 80038c0:	6a3a      	ldr	r2, [r7, #32]
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e5      	bne.n	800389a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d10a      	bne.n	80038f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fdd1 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
 80038fe:	e002      	b.n	8003906 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fd f941 	bl	8000b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e002      	b.n	8003910 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3730      	adds	r7, #48	@ 0x30
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b0c0      	sub	sp, #256	@ 0x100
 800391e:	af00      	add	r7, sp, #0
 8003920:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	68d9      	ldr	r1, [r3, #12]
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	ea40 0301 	orr.w	r3, r0, r1
 8003940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	431a      	orrs	r2, r3
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	431a      	orrs	r2, r3
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003970:	f021 010c 	bic.w	r1, r1, #12
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800397e:	430b      	orrs	r3, r1
 8003980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003992:	6999      	ldr	r1, [r3, #24]
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	ea40 0301 	orr.w	r3, r0, r1
 800399e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b8f      	ldr	r3, [pc, #572]	@ (8003be4 <UART_SetConfig+0x2cc>)
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d005      	beq.n	80039b8 <UART_SetConfig+0xa0>
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b8d      	ldr	r3, [pc, #564]	@ (8003be8 <UART_SetConfig+0x2d0>)
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d104      	bne.n	80039c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7fe fbf0 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 80039bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039c0:	e003      	b.n	80039ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039c2:	f7fe fbd7 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 80039c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d4:	f040 810c 	bne.w	8003bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	1891      	adds	r1, r2, r2
 80039f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039f2:	415b      	adcs	r3, r3
 80039f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039fa:	4621      	mov	r1, r4
 80039fc:	eb12 0801 	adds.w	r8, r2, r1
 8003a00:	4629      	mov	r1, r5
 8003a02:	eb43 0901 	adc.w	r9, r3, r1
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1a:	4690      	mov	r8, r2
 8003a1c:	4699      	mov	r9, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	eb18 0303 	adds.w	r3, r8, r3
 8003a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a28:	462b      	mov	r3, r5
 8003a2a:	eb49 0303 	adc.w	r3, r9, r3
 8003a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a46:	460b      	mov	r3, r1
 8003a48:	18db      	adds	r3, r3, r3
 8003a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	eb42 0303 	adc.w	r3, r2, r3
 8003a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a5c:	f7fc fc10 	bl	8000280 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4b61      	ldr	r3, [pc, #388]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003a66:	fba3 2302 	umull	r2, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	011c      	lsls	r4, r3, #4
 8003a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a90:	4641      	mov	r1, r8
 8003a92:	eb12 0a01 	adds.w	sl, r2, r1
 8003a96:	4649      	mov	r1, r9
 8003a98:	eb43 0b01 	adc.w	fp, r3, r1
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab0:	4692      	mov	sl, r2
 8003ab2:	469b      	mov	fp, r3
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003adc:	460b      	mov	r3, r1
 8003ade:	18db      	adds	r3, r3, r3
 8003ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003af2:	f7fc fbc5 	bl	8000280 <__aeabi_uldivmod>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003afe:	fba3 2301 	umull	r2, r3, r3, r1
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2264      	movs	r2, #100	@ 0x64
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	1acb      	subs	r3, r1, r3
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b12:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003b14:	fba3 2302 	umull	r2, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b20:	441c      	add	r4, r3
 8003b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b34:	4642      	mov	r2, r8
 8003b36:	464b      	mov	r3, r9
 8003b38:	1891      	adds	r1, r2, r2
 8003b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b3c:	415b      	adcs	r3, r3
 8003b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b44:	4641      	mov	r1, r8
 8003b46:	1851      	adds	r1, r2, r1
 8003b48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	414b      	adcs	r3, r1
 8003b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	00cb      	lsls	r3, r1, #3
 8003b60:	4651      	mov	r1, sl
 8003b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b66:	4651      	mov	r1, sl
 8003b68:	00ca      	lsls	r2, r1, #3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4642      	mov	r2, r8
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b78:	464b      	mov	r3, r9
 8003b7a:	460a      	mov	r2, r1
 8003b7c:	eb42 0303 	adc.w	r3, r2, r3
 8003b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b98:	460b      	mov	r3, r1
 8003b9a:	18db      	adds	r3, r3, r3
 8003b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	eb42 0303 	adc.w	r3, r2, r3
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bae:	f7fc fb67 	bl	8000280 <__aeabi_uldivmod>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	2164      	movs	r1, #100	@ 0x64
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	3332      	adds	r3, #50	@ 0x32
 8003bca:	4a08      	ldr	r2, [pc, #32]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 0207 	and.w	r2, r3, #7
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4422      	add	r2, r4
 8003bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be0:	e106      	b.n	8003df0 <UART_SetConfig+0x4d8>
 8003be2:	bf00      	nop
 8003be4:	40011000 	.word	0x40011000
 8003be8:	40011400 	.word	0x40011400
 8003bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c02:	4642      	mov	r2, r8
 8003c04:	464b      	mov	r3, r9
 8003c06:	1891      	adds	r1, r2, r2
 8003c08:	6239      	str	r1, [r7, #32]
 8003c0a:	415b      	adcs	r3, r3
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c12:	4641      	mov	r1, r8
 8003c14:	1854      	adds	r4, r2, r1
 8003c16:	4649      	mov	r1, r9
 8003c18:	eb43 0501 	adc.w	r5, r3, r1
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	00eb      	lsls	r3, r5, #3
 8003c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2a:	00e2      	lsls	r2, r4, #3
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	461d      	mov	r5, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	18e3      	adds	r3, r4, r3
 8003c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c38:	464b      	mov	r3, r9
 8003c3a:	eb45 0303 	adc.w	r3, r5, r3
 8003c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c5e:	4629      	mov	r1, r5
 8003c60:	008b      	lsls	r3, r1, #2
 8003c62:	4621      	mov	r1, r4
 8003c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c68:	4621      	mov	r1, r4
 8003c6a:	008a      	lsls	r2, r1, #2
 8003c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c70:	f7fc fb06 	bl	8000280 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4b60      	ldr	r3, [pc, #384]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	011c      	lsls	r4, r3, #4
 8003c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	1891      	adds	r1, r2, r2
 8003c9a:	61b9      	str	r1, [r7, #24]
 8003c9c:	415b      	adcs	r3, r3
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	1851      	adds	r1, r2, r1
 8003ca8:	6139      	str	r1, [r7, #16]
 8003caa:	4649      	mov	r1, r9
 8003cac:	414b      	adcs	r3, r1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	00cb      	lsls	r3, r1, #3
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	00ca      	lsls	r2, r1, #3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cd8:	464b      	mov	r3, r9
 8003cda:	460a      	mov	r2, r1
 8003cdc:	eb42 0303 	adc.w	r3, r2, r3
 8003ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	008b      	lsls	r3, r1, #2
 8003d00:	4641      	mov	r1, r8
 8003d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d06:	4641      	mov	r1, r8
 8003d08:	008a      	lsls	r2, r1, #2
 8003d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d0e:	f7fc fab7 	bl	8000280 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	4b38      	ldr	r3, [pc, #224]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2264      	movs	r2, #100	@ 0x64
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	1acb      	subs	r3, r1, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	3332      	adds	r3, #50	@ 0x32
 8003d2c:	4a33      	ldr	r2, [pc, #204]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d38:	441c      	add	r4, r3
 8003d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d3e:	2200      	movs	r2, #0
 8003d40:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d42:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	1891      	adds	r1, r2, r2
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	415b      	adcs	r3, r3
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d58:	4641      	mov	r1, r8
 8003d5a:	1851      	adds	r1, r2, r1
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	4649      	mov	r1, r9
 8003d60:	414b      	adcs	r3, r1
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d70:	4659      	mov	r1, fp
 8003d72:	00cb      	lsls	r3, r1, #3
 8003d74:	4651      	mov	r1, sl
 8003d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	00ca      	lsls	r2, r1, #3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	4642      	mov	r2, r8
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	eb42 0303 	adc.w	r3, r2, r3
 8003d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dac:	4649      	mov	r1, r9
 8003dae:	008b      	lsls	r3, r1, #2
 8003db0:	4641      	mov	r1, r8
 8003db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db6:	4641      	mov	r1, r8
 8003db8:	008a      	lsls	r2, r1, #2
 8003dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dbe:	f7fc fa5f 	bl	8000280 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	2164      	movs	r1, #100	@ 0x64
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	3332      	adds	r3, #50	@ 0x32
 8003dda:	4a08      	ldr	r2, [pc, #32]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4422      	add	r2, r4
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003df6:	46bd      	mov	sp, r7
 8003df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfc:	51eb851f 	.word	0x51eb851f

08003e00 <std>:
 8003e00:	2300      	movs	r3, #0
 8003e02:	b510      	push	{r4, lr}
 8003e04:	4604      	mov	r4, r0
 8003e06:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e0e:	6083      	str	r3, [r0, #8]
 8003e10:	8181      	strh	r1, [r0, #12]
 8003e12:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e14:	81c2      	strh	r2, [r0, #14]
 8003e16:	6183      	str	r3, [r0, #24]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	305c      	adds	r0, #92	@ 0x5c
 8003e1e:	f000 f91e 	bl	800405e <memset>
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <std+0x58>)
 8003e24:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <std+0x5c>)
 8003e28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <std+0x60>)
 8003e2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <std+0x64>)
 8003e30:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <std+0x68>)
 8003e34:	6224      	str	r4, [r4, #32]
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d006      	beq.n	8003e48 <std+0x48>
 8003e3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e3e:	4294      	cmp	r4, r2
 8003e40:	d002      	beq.n	8003e48 <std+0x48>
 8003e42:	33d0      	adds	r3, #208	@ 0xd0
 8003e44:	429c      	cmp	r4, r3
 8003e46:	d105      	bne.n	8003e54 <std+0x54>
 8003e48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e50:	f000 b994 	b.w	800417c <__retarget_lock_init_recursive>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	bf00      	nop
 8003e58:	08003fb9 	.word	0x08003fb9
 8003e5c:	08003fdb 	.word	0x08003fdb
 8003e60:	08004013 	.word	0x08004013
 8003e64:	08004037 	.word	0x08004037
 8003e68:	200001e4 	.word	0x200001e4

08003e6c <stdio_exit_handler>:
 8003e6c:	4a02      	ldr	r2, [pc, #8]	@ (8003e78 <stdio_exit_handler+0xc>)
 8003e6e:	4903      	ldr	r1, [pc, #12]	@ (8003e7c <stdio_exit_handler+0x10>)
 8003e70:	4803      	ldr	r0, [pc, #12]	@ (8003e80 <stdio_exit_handler+0x14>)
 8003e72:	f000 b869 	b.w	8003f48 <_fwalk_sglue>
 8003e76:	bf00      	nop
 8003e78:	20000010 	.word	0x20000010
 8003e7c:	08004a1d 	.word	0x08004a1d
 8003e80:	20000020 	.word	0x20000020

08003e84 <cleanup_stdio>:
 8003e84:	6841      	ldr	r1, [r0, #4]
 8003e86:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <cleanup_stdio+0x34>)
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	d001      	beq.n	8003e94 <cleanup_stdio+0x10>
 8003e90:	f000 fdc4 	bl	8004a1c <_fflush_r>
 8003e94:	68a1      	ldr	r1, [r4, #8]
 8003e96:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <cleanup_stdio+0x38>)
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d002      	beq.n	8003ea2 <cleanup_stdio+0x1e>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f000 fdbd 	bl	8004a1c <_fflush_r>
 8003ea2:	68e1      	ldr	r1, [r4, #12]
 8003ea4:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <cleanup_stdio+0x3c>)
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d004      	beq.n	8003eb4 <cleanup_stdio+0x30>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f000 bdb4 	b.w	8004a1c <_fflush_r>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200001e4 	.word	0x200001e4
 8003ebc:	2000024c 	.word	0x2000024c
 8003ec0:	200002b4 	.word	0x200002b4

08003ec4 <global_stdio_init.part.0>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <global_stdio_init.part.0+0x30>)
 8003ec8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ef8 <global_stdio_init.part.0+0x34>)
 8003eca:	4a0c      	ldr	r2, [pc, #48]	@ (8003efc <global_stdio_init.part.0+0x38>)
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4620      	mov	r0, r4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	f7ff ff94 	bl	8003e00 <std>
 8003ed8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003edc:	2201      	movs	r2, #1
 8003ede:	2109      	movs	r1, #9
 8003ee0:	f7ff ff8e 	bl	8003e00 <std>
 8003ee4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ee8:	2202      	movs	r2, #2
 8003eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eee:	2112      	movs	r1, #18
 8003ef0:	f7ff bf86 	b.w	8003e00 <std>
 8003ef4:	2000031c 	.word	0x2000031c
 8003ef8:	200001e4 	.word	0x200001e4
 8003efc:	08003e6d 	.word	0x08003e6d

08003f00 <__sfp_lock_acquire>:
 8003f00:	4801      	ldr	r0, [pc, #4]	@ (8003f08 <__sfp_lock_acquire+0x8>)
 8003f02:	f000 b93c 	b.w	800417e <__retarget_lock_acquire_recursive>
 8003f06:	bf00      	nop
 8003f08:	20000325 	.word	0x20000325

08003f0c <__sfp_lock_release>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	@ (8003f14 <__sfp_lock_release+0x8>)
 8003f0e:	f000 b937 	b.w	8004180 <__retarget_lock_release_recursive>
 8003f12:	bf00      	nop
 8003f14:	20000325 	.word	0x20000325

08003f18 <__sinit>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	f7ff fff0 	bl	8003f00 <__sfp_lock_acquire>
 8003f20:	6a23      	ldr	r3, [r4, #32]
 8003f22:	b11b      	cbz	r3, 8003f2c <__sinit+0x14>
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f7ff bff0 	b.w	8003f0c <__sfp_lock_release>
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <__sinit+0x28>)
 8003f2e:	6223      	str	r3, [r4, #32]
 8003f30:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <__sinit+0x2c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f5      	bne.n	8003f24 <__sinit+0xc>
 8003f38:	f7ff ffc4 	bl	8003ec4 <global_stdio_init.part.0>
 8003f3c:	e7f2      	b.n	8003f24 <__sinit+0xc>
 8003f3e:	bf00      	nop
 8003f40:	08003e85 	.word	0x08003e85
 8003f44:	2000031c 	.word	0x2000031c

08003f48 <_fwalk_sglue>:
 8003f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	4688      	mov	r8, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	2600      	movs	r6, #0
 8003f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f58:	f1b9 0901 	subs.w	r9, r9, #1
 8003f5c:	d505      	bpl.n	8003f6a <_fwalk_sglue+0x22>
 8003f5e:	6824      	ldr	r4, [r4, #0]
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d1f7      	bne.n	8003f54 <_fwalk_sglue+0xc>
 8003f64:	4630      	mov	r0, r6
 8003f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d907      	bls.n	8003f80 <_fwalk_sglue+0x38>
 8003f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f74:	3301      	adds	r3, #1
 8003f76:	d003      	beq.n	8003f80 <_fwalk_sglue+0x38>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	4306      	orrs	r6, r0
 8003f80:	3568      	adds	r5, #104	@ 0x68
 8003f82:	e7e9      	b.n	8003f58 <_fwalk_sglue+0x10>

08003f84 <iprintf>:
 8003f84:	b40f      	push	{r0, r1, r2, r3}
 8003f86:	b507      	push	{r0, r1, r2, lr}
 8003f88:	4906      	ldr	r1, [pc, #24]	@ (8003fa4 <iprintf+0x20>)
 8003f8a:	ab04      	add	r3, sp, #16
 8003f8c:	6808      	ldr	r0, [r1, #0]
 8003f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f92:	6881      	ldr	r1, [r0, #8]
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	f000 fa17 	bl	80043c8 <_vfiprintf_r>
 8003f9a:	b003      	add	sp, #12
 8003f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa0:	b004      	add	sp, #16
 8003fa2:	4770      	bx	lr
 8003fa4:	2000001c 	.word	0x2000001c

08003fa8 <putchar>:
 8003fa8:	4b02      	ldr	r3, [pc, #8]	@ (8003fb4 <putchar+0xc>)
 8003faa:	4601      	mov	r1, r0
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	6882      	ldr	r2, [r0, #8]
 8003fb0:	f000 bd5c 	b.w	8004a6c <_putc_r>
 8003fb4:	2000001c 	.word	0x2000001c

08003fb8 <__sread>:
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	460c      	mov	r4, r1
 8003fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc0:	f000 f88e 	bl	80040e0 <_read_r>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	bfab      	itete	ge
 8003fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fca:	89a3      	ldrhlt	r3, [r4, #12]
 8003fcc:	181b      	addge	r3, r3, r0
 8003fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fd2:	bfac      	ite	ge
 8003fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fd6:	81a3      	strhlt	r3, [r4, #12]
 8003fd8:	bd10      	pop	{r4, pc}

08003fda <__swrite>:
 8003fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fde:	461f      	mov	r7, r3
 8003fe0:	898b      	ldrh	r3, [r1, #12]
 8003fe2:	05db      	lsls	r3, r3, #23
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	4616      	mov	r6, r2
 8003fea:	d505      	bpl.n	8003ff8 <__swrite+0x1e>
 8003fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f000 f862 	bl	80040bc <_lseek_r>
 8003ff8:	89a3      	ldrh	r3, [r4, #12]
 8003ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004002:	81a3      	strh	r3, [r4, #12]
 8004004:	4632      	mov	r2, r6
 8004006:	463b      	mov	r3, r7
 8004008:	4628      	mov	r0, r5
 800400a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800400e:	f000 b879 	b.w	8004104 <_write_r>

08004012 <__sseek>:
 8004012:	b510      	push	{r4, lr}
 8004014:	460c      	mov	r4, r1
 8004016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401a:	f000 f84f 	bl	80040bc <_lseek_r>
 800401e:	1c43      	adds	r3, r0, #1
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	bf15      	itete	ne
 8004024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800402a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800402e:	81a3      	strheq	r3, [r4, #12]
 8004030:	bf18      	it	ne
 8004032:	81a3      	strhne	r3, [r4, #12]
 8004034:	bd10      	pop	{r4, pc}

08004036 <__sclose>:
 8004036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403a:	f000 b82f 	b.w	800409c <_close_r>

0800403e <memcmp>:
 800403e:	b510      	push	{r4, lr}
 8004040:	3901      	subs	r1, #1
 8004042:	4402      	add	r2, r0
 8004044:	4290      	cmp	r0, r2
 8004046:	d101      	bne.n	800404c <memcmp+0xe>
 8004048:	2000      	movs	r0, #0
 800404a:	e005      	b.n	8004058 <memcmp+0x1a>
 800404c:	7803      	ldrb	r3, [r0, #0]
 800404e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004052:	42a3      	cmp	r3, r4
 8004054:	d001      	beq.n	800405a <memcmp+0x1c>
 8004056:	1b18      	subs	r0, r3, r4
 8004058:	bd10      	pop	{r4, pc}
 800405a:	3001      	adds	r0, #1
 800405c:	e7f2      	b.n	8004044 <memcmp+0x6>

0800405e <memset>:
 800405e:	4402      	add	r2, r0
 8004060:	4603      	mov	r3, r0
 8004062:	4293      	cmp	r3, r2
 8004064:	d100      	bne.n	8004068 <memset+0xa>
 8004066:	4770      	bx	lr
 8004068:	f803 1b01 	strb.w	r1, [r3], #1
 800406c:	e7f9      	b.n	8004062 <memset+0x4>

0800406e <strstr>:
 800406e:	780a      	ldrb	r2, [r1, #0]
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	b96a      	cbnz	r2, 8004090 <strstr+0x22>
 8004074:	bd70      	pop	{r4, r5, r6, pc}
 8004076:	429a      	cmp	r2, r3
 8004078:	d109      	bne.n	800408e <strstr+0x20>
 800407a:	460c      	mov	r4, r1
 800407c:	4605      	mov	r5, r0
 800407e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f6      	beq.n	8004074 <strstr+0x6>
 8004086:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800408a:	429e      	cmp	r6, r3
 800408c:	d0f7      	beq.n	800407e <strstr+0x10>
 800408e:	3001      	adds	r0, #1
 8004090:	7803      	ldrb	r3, [r0, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ef      	bne.n	8004076 <strstr+0x8>
 8004096:	4618      	mov	r0, r3
 8004098:	e7ec      	b.n	8004074 <strstr+0x6>
	...

0800409c <_close_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4d06      	ldr	r5, [pc, #24]	@ (80040b8 <_close_r+0x1c>)
 80040a0:	2300      	movs	r3, #0
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	602b      	str	r3, [r5, #0]
 80040a8:	f7fc ff6c 	bl	8000f84 <_close>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_close_r+0x1a>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_close_r+0x1a>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	20000320 	.word	0x20000320

080040bc <_lseek_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d07      	ldr	r5, [pc, #28]	@ (80040dc <_lseek_r+0x20>)
 80040c0:	4604      	mov	r4, r0
 80040c2:	4608      	mov	r0, r1
 80040c4:	4611      	mov	r1, r2
 80040c6:	2200      	movs	r2, #0
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7fc ff81 	bl	8000fd2 <_lseek>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_lseek_r+0x1e>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_lseek_r+0x1e>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	20000320 	.word	0x20000320

080040e0 <_read_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d07      	ldr	r5, [pc, #28]	@ (8004100 <_read_r+0x20>)
 80040e4:	4604      	mov	r4, r0
 80040e6:	4608      	mov	r0, r1
 80040e8:	4611      	mov	r1, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	602a      	str	r2, [r5, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7fc ff0f 	bl	8000f12 <_read>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_read_r+0x1e>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_read_r+0x1e>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	20000320 	.word	0x20000320

08004104 <_write_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4d07      	ldr	r5, [pc, #28]	@ (8004124 <_write_r+0x20>)
 8004108:	4604      	mov	r4, r0
 800410a:	4608      	mov	r0, r1
 800410c:	4611      	mov	r1, r2
 800410e:	2200      	movs	r2, #0
 8004110:	602a      	str	r2, [r5, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f7fc ff1a 	bl	8000f4c <_write>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_write_r+0x1e>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_write_r+0x1e>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	20000320 	.word	0x20000320

08004128 <__errno>:
 8004128:	4b01      	ldr	r3, [pc, #4]	@ (8004130 <__errno+0x8>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2000001c 	.word	0x2000001c

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	@ (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	@ (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	@ (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	@ (8004178 <__libc_init_array+0x44>)
 8004148:	f000 fdec 	bl	8004d24 <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	08004e9c 	.word	0x08004e9c
 8004170:	08004e9c 	.word	0x08004e9c
 8004174:	08004e9c 	.word	0x08004e9c
 8004178:	08004ea0 	.word	0x08004ea0

0800417c <__retarget_lock_init_recursive>:
 800417c:	4770      	bx	lr

0800417e <__retarget_lock_acquire_recursive>:
 800417e:	4770      	bx	lr

08004180 <__retarget_lock_release_recursive>:
 8004180:	4770      	bx	lr
	...

08004184 <_free_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4605      	mov	r5, r0
 8004188:	2900      	cmp	r1, #0
 800418a:	d041      	beq.n	8004210 <_free_r+0x8c>
 800418c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004190:	1f0c      	subs	r4, r1, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfb8      	it	lt
 8004196:	18e4      	addlt	r4, r4, r3
 8004198:	f000 f8e0 	bl	800435c <__malloc_lock>
 800419c:	4a1d      	ldr	r2, [pc, #116]	@ (8004214 <_free_r+0x90>)
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	b933      	cbnz	r3, 80041b0 <_free_r+0x2c>
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	6014      	str	r4, [r2, #0]
 80041a6:	4628      	mov	r0, r5
 80041a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ac:	f000 b8dc 	b.w	8004368 <__malloc_unlock>
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	d908      	bls.n	80041c6 <_free_r+0x42>
 80041b4:	6820      	ldr	r0, [r4, #0]
 80041b6:	1821      	adds	r1, r4, r0
 80041b8:	428b      	cmp	r3, r1
 80041ba:	bf01      	itttt	eq
 80041bc:	6819      	ldreq	r1, [r3, #0]
 80041be:	685b      	ldreq	r3, [r3, #4]
 80041c0:	1809      	addeq	r1, r1, r0
 80041c2:	6021      	streq	r1, [r4, #0]
 80041c4:	e7ed      	b.n	80041a2 <_free_r+0x1e>
 80041c6:	461a      	mov	r2, r3
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b10b      	cbz	r3, 80041d0 <_free_r+0x4c>
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	d9fa      	bls.n	80041c6 <_free_r+0x42>
 80041d0:	6811      	ldr	r1, [r2, #0]
 80041d2:	1850      	adds	r0, r2, r1
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d10b      	bne.n	80041f0 <_free_r+0x6c>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	4401      	add	r1, r0
 80041dc:	1850      	adds	r0, r2, r1
 80041de:	4283      	cmp	r3, r0
 80041e0:	6011      	str	r1, [r2, #0]
 80041e2:	d1e0      	bne.n	80041a6 <_free_r+0x22>
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	6053      	str	r3, [r2, #4]
 80041ea:	4408      	add	r0, r1
 80041ec:	6010      	str	r0, [r2, #0]
 80041ee:	e7da      	b.n	80041a6 <_free_r+0x22>
 80041f0:	d902      	bls.n	80041f8 <_free_r+0x74>
 80041f2:	230c      	movs	r3, #12
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	e7d6      	b.n	80041a6 <_free_r+0x22>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	1821      	adds	r1, r4, r0
 80041fc:	428b      	cmp	r3, r1
 80041fe:	bf04      	itt	eq
 8004200:	6819      	ldreq	r1, [r3, #0]
 8004202:	685b      	ldreq	r3, [r3, #4]
 8004204:	6063      	str	r3, [r4, #4]
 8004206:	bf04      	itt	eq
 8004208:	1809      	addeq	r1, r1, r0
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	6054      	str	r4, [r2, #4]
 800420e:	e7ca      	b.n	80041a6 <_free_r+0x22>
 8004210:	bd38      	pop	{r3, r4, r5, pc}
 8004212:	bf00      	nop
 8004214:	2000032c 	.word	0x2000032c

08004218 <sbrk_aligned>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4e0f      	ldr	r6, [pc, #60]	@ (8004258 <sbrk_aligned+0x40>)
 800421c:	460c      	mov	r4, r1
 800421e:	6831      	ldr	r1, [r6, #0]
 8004220:	4605      	mov	r5, r0
 8004222:	b911      	cbnz	r1, 800422a <sbrk_aligned+0x12>
 8004224:	f000 fcea 	bl	8004bfc <_sbrk_r>
 8004228:	6030      	str	r0, [r6, #0]
 800422a:	4621      	mov	r1, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fce5 	bl	8004bfc <_sbrk_r>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	d103      	bne.n	800423e <sbrk_aligned+0x26>
 8004236:	f04f 34ff 	mov.w	r4, #4294967295
 800423a:	4620      	mov	r0, r4
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	1cc4      	adds	r4, r0, #3
 8004240:	f024 0403 	bic.w	r4, r4, #3
 8004244:	42a0      	cmp	r0, r4
 8004246:	d0f8      	beq.n	800423a <sbrk_aligned+0x22>
 8004248:	1a21      	subs	r1, r4, r0
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fcd6 	bl	8004bfc <_sbrk_r>
 8004250:	3001      	adds	r0, #1
 8004252:	d1f2      	bne.n	800423a <sbrk_aligned+0x22>
 8004254:	e7ef      	b.n	8004236 <sbrk_aligned+0x1e>
 8004256:	bf00      	nop
 8004258:	20000328 	.word	0x20000328

0800425c <_malloc_r>:
 800425c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004260:	1ccd      	adds	r5, r1, #3
 8004262:	f025 0503 	bic.w	r5, r5, #3
 8004266:	3508      	adds	r5, #8
 8004268:	2d0c      	cmp	r5, #12
 800426a:	bf38      	it	cc
 800426c:	250c      	movcc	r5, #12
 800426e:	2d00      	cmp	r5, #0
 8004270:	4606      	mov	r6, r0
 8004272:	db01      	blt.n	8004278 <_malloc_r+0x1c>
 8004274:	42a9      	cmp	r1, r5
 8004276:	d904      	bls.n	8004282 <_malloc_r+0x26>
 8004278:	230c      	movs	r3, #12
 800427a:	6033      	str	r3, [r6, #0]
 800427c:	2000      	movs	r0, #0
 800427e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004358 <_malloc_r+0xfc>
 8004286:	f000 f869 	bl	800435c <__malloc_lock>
 800428a:	f8d8 3000 	ldr.w	r3, [r8]
 800428e:	461c      	mov	r4, r3
 8004290:	bb44      	cbnz	r4, 80042e4 <_malloc_r+0x88>
 8004292:	4629      	mov	r1, r5
 8004294:	4630      	mov	r0, r6
 8004296:	f7ff ffbf 	bl	8004218 <sbrk_aligned>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	4604      	mov	r4, r0
 800429e:	d158      	bne.n	8004352 <_malloc_r+0xf6>
 80042a0:	f8d8 4000 	ldr.w	r4, [r8]
 80042a4:	4627      	mov	r7, r4
 80042a6:	2f00      	cmp	r7, #0
 80042a8:	d143      	bne.n	8004332 <_malloc_r+0xd6>
 80042aa:	2c00      	cmp	r4, #0
 80042ac:	d04b      	beq.n	8004346 <_malloc_r+0xea>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	eb04 0903 	add.w	r9, r4, r3
 80042b8:	f000 fca0 	bl	8004bfc <_sbrk_r>
 80042bc:	4581      	cmp	r9, r0
 80042be:	d142      	bne.n	8004346 <_malloc_r+0xea>
 80042c0:	6821      	ldr	r1, [r4, #0]
 80042c2:	1a6d      	subs	r5, r5, r1
 80042c4:	4629      	mov	r1, r5
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7ff ffa6 	bl	8004218 <sbrk_aligned>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d03a      	beq.n	8004346 <_malloc_r+0xea>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	442b      	add	r3, r5
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	f8d8 3000 	ldr.w	r3, [r8]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	bb62      	cbnz	r2, 8004338 <_malloc_r+0xdc>
 80042de:	f8c8 7000 	str.w	r7, [r8]
 80042e2:	e00f      	b.n	8004304 <_malloc_r+0xa8>
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	1b52      	subs	r2, r2, r5
 80042e8:	d420      	bmi.n	800432c <_malloc_r+0xd0>
 80042ea:	2a0b      	cmp	r2, #11
 80042ec:	d917      	bls.n	800431e <_malloc_r+0xc2>
 80042ee:	1961      	adds	r1, r4, r5
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	6025      	str	r5, [r4, #0]
 80042f4:	bf18      	it	ne
 80042f6:	6059      	strne	r1, [r3, #4]
 80042f8:	6863      	ldr	r3, [r4, #4]
 80042fa:	bf08      	it	eq
 80042fc:	f8c8 1000 	streq.w	r1, [r8]
 8004300:	5162      	str	r2, [r4, r5]
 8004302:	604b      	str	r3, [r1, #4]
 8004304:	4630      	mov	r0, r6
 8004306:	f000 f82f 	bl	8004368 <__malloc_unlock>
 800430a:	f104 000b 	add.w	r0, r4, #11
 800430e:	1d23      	adds	r3, r4, #4
 8004310:	f020 0007 	bic.w	r0, r0, #7
 8004314:	1ac2      	subs	r2, r0, r3
 8004316:	bf1c      	itt	ne
 8004318:	1a1b      	subne	r3, r3, r0
 800431a:	50a3      	strne	r3, [r4, r2]
 800431c:	e7af      	b.n	800427e <_malloc_r+0x22>
 800431e:	6862      	ldr	r2, [r4, #4]
 8004320:	42a3      	cmp	r3, r4
 8004322:	bf0c      	ite	eq
 8004324:	f8c8 2000 	streq.w	r2, [r8]
 8004328:	605a      	strne	r2, [r3, #4]
 800432a:	e7eb      	b.n	8004304 <_malloc_r+0xa8>
 800432c:	4623      	mov	r3, r4
 800432e:	6864      	ldr	r4, [r4, #4]
 8004330:	e7ae      	b.n	8004290 <_malloc_r+0x34>
 8004332:	463c      	mov	r4, r7
 8004334:	687f      	ldr	r7, [r7, #4]
 8004336:	e7b6      	b.n	80042a6 <_malloc_r+0x4a>
 8004338:	461a      	mov	r2, r3
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	42a3      	cmp	r3, r4
 800433e:	d1fb      	bne.n	8004338 <_malloc_r+0xdc>
 8004340:	2300      	movs	r3, #0
 8004342:	6053      	str	r3, [r2, #4]
 8004344:	e7de      	b.n	8004304 <_malloc_r+0xa8>
 8004346:	230c      	movs	r3, #12
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	4630      	mov	r0, r6
 800434c:	f000 f80c 	bl	8004368 <__malloc_unlock>
 8004350:	e794      	b.n	800427c <_malloc_r+0x20>
 8004352:	6005      	str	r5, [r0, #0]
 8004354:	e7d6      	b.n	8004304 <_malloc_r+0xa8>
 8004356:	bf00      	nop
 8004358:	2000032c 	.word	0x2000032c

0800435c <__malloc_lock>:
 800435c:	4801      	ldr	r0, [pc, #4]	@ (8004364 <__malloc_lock+0x8>)
 800435e:	f7ff bf0e 	b.w	800417e <__retarget_lock_acquire_recursive>
 8004362:	bf00      	nop
 8004364:	20000324 	.word	0x20000324

08004368 <__malloc_unlock>:
 8004368:	4801      	ldr	r0, [pc, #4]	@ (8004370 <__malloc_unlock+0x8>)
 800436a:	f7ff bf09 	b.w	8004180 <__retarget_lock_release_recursive>
 800436e:	bf00      	nop
 8004370:	20000324 	.word	0x20000324

08004374 <__sfputc_r>:
 8004374:	6893      	ldr	r3, [r2, #8]
 8004376:	3b01      	subs	r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	b410      	push	{r4}
 800437c:	6093      	str	r3, [r2, #8]
 800437e:	da08      	bge.n	8004392 <__sfputc_r+0x1e>
 8004380:	6994      	ldr	r4, [r2, #24]
 8004382:	42a3      	cmp	r3, r4
 8004384:	db01      	blt.n	800438a <__sfputc_r+0x16>
 8004386:	290a      	cmp	r1, #10
 8004388:	d103      	bne.n	8004392 <__sfputc_r+0x1e>
 800438a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800438e:	f000 bba1 	b.w	8004ad4 <__swbuf_r>
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	1c58      	adds	r0, r3, #1
 8004396:	6010      	str	r0, [r2, #0]
 8004398:	7019      	strb	r1, [r3, #0]
 800439a:	4608      	mov	r0, r1
 800439c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <__sfputs_r>:
 80043a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	18d5      	adds	r5, r2, r3
 80043ac:	42ac      	cmp	r4, r5
 80043ae:	d101      	bne.n	80043b4 <__sfputs_r+0x12>
 80043b0:	2000      	movs	r0, #0
 80043b2:	e007      	b.n	80043c4 <__sfputs_r+0x22>
 80043b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b8:	463a      	mov	r2, r7
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7ff ffda 	bl	8004374 <__sfputc_r>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d1f3      	bne.n	80043ac <__sfputs_r+0xa>
 80043c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043c8 <_vfiprintf_r>:
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	460d      	mov	r5, r1
 80043ce:	b09d      	sub	sp, #116	@ 0x74
 80043d0:	4614      	mov	r4, r2
 80043d2:	4698      	mov	r8, r3
 80043d4:	4606      	mov	r6, r0
 80043d6:	b118      	cbz	r0, 80043e0 <_vfiprintf_r+0x18>
 80043d8:	6a03      	ldr	r3, [r0, #32]
 80043da:	b90b      	cbnz	r3, 80043e0 <_vfiprintf_r+0x18>
 80043dc:	f7ff fd9c 	bl	8003f18 <__sinit>
 80043e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043e2:	07d9      	lsls	r1, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_vfiprintf_r+0x2a>
 80043e6:	89ab      	ldrh	r3, [r5, #12]
 80043e8:	059a      	lsls	r2, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_vfiprintf_r+0x2a>
 80043ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ee:	f7ff fec6 	bl	800417e <__retarget_lock_acquire_recursive>
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	d501      	bpl.n	80043fc <_vfiprintf_r+0x34>
 80043f8:	692b      	ldr	r3, [r5, #16]
 80043fa:	b99b      	cbnz	r3, 8004424 <_vfiprintf_r+0x5c>
 80043fc:	4629      	mov	r1, r5
 80043fe:	4630      	mov	r0, r6
 8004400:	f000 fba6 	bl	8004b50 <__swsetup_r>
 8004404:	b170      	cbz	r0, 8004424 <_vfiprintf_r+0x5c>
 8004406:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004408:	07dc      	lsls	r4, r3, #31
 800440a:	d504      	bpl.n	8004416 <_vfiprintf_r+0x4e>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	b01d      	add	sp, #116	@ 0x74
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	0598      	lsls	r0, r3, #22
 800441a:	d4f7      	bmi.n	800440c <_vfiprintf_r+0x44>
 800441c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800441e:	f7ff feaf 	bl	8004180 <__retarget_lock_release_recursive>
 8004422:	e7f3      	b.n	800440c <_vfiprintf_r+0x44>
 8004424:	2300      	movs	r3, #0
 8004426:	9309      	str	r3, [sp, #36]	@ 0x24
 8004428:	2320      	movs	r3, #32
 800442a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800442e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004432:	2330      	movs	r3, #48	@ 0x30
 8004434:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045e4 <_vfiprintf_r+0x21c>
 8004438:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800443c:	f04f 0901 	mov.w	r9, #1
 8004440:	4623      	mov	r3, r4
 8004442:	469a      	mov	sl, r3
 8004444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004448:	b10a      	cbz	r2, 800444e <_vfiprintf_r+0x86>
 800444a:	2a25      	cmp	r2, #37	@ 0x25
 800444c:	d1f9      	bne.n	8004442 <_vfiprintf_r+0x7a>
 800444e:	ebba 0b04 	subs.w	fp, sl, r4
 8004452:	d00b      	beq.n	800446c <_vfiprintf_r+0xa4>
 8004454:	465b      	mov	r3, fp
 8004456:	4622      	mov	r2, r4
 8004458:	4629      	mov	r1, r5
 800445a:	4630      	mov	r0, r6
 800445c:	f7ff ffa1 	bl	80043a2 <__sfputs_r>
 8004460:	3001      	adds	r0, #1
 8004462:	f000 80a7 	beq.w	80045b4 <_vfiprintf_r+0x1ec>
 8004466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004468:	445a      	add	r2, fp
 800446a:	9209      	str	r2, [sp, #36]	@ 0x24
 800446c:	f89a 3000 	ldrb.w	r3, [sl]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 809f 	beq.w	80045b4 <_vfiprintf_r+0x1ec>
 8004476:	2300      	movs	r3, #0
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004480:	f10a 0a01 	add.w	sl, sl, #1
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	9307      	str	r3, [sp, #28]
 8004488:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800448c:	931a      	str	r3, [sp, #104]	@ 0x68
 800448e:	4654      	mov	r4, sl
 8004490:	2205      	movs	r2, #5
 8004492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004496:	4853      	ldr	r0, [pc, #332]	@ (80045e4 <_vfiprintf_r+0x21c>)
 8004498:	f7fb fea2 	bl	80001e0 <memchr>
 800449c:	9a04      	ldr	r2, [sp, #16]
 800449e:	b9d8      	cbnz	r0, 80044d8 <_vfiprintf_r+0x110>
 80044a0:	06d1      	lsls	r1, r2, #27
 80044a2:	bf44      	itt	mi
 80044a4:	2320      	movmi	r3, #32
 80044a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044aa:	0713      	lsls	r3, r2, #28
 80044ac:	bf44      	itt	mi
 80044ae:	232b      	movmi	r3, #43	@ 0x2b
 80044b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044b4:	f89a 3000 	ldrb.w	r3, [sl]
 80044b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ba:	d015      	beq.n	80044e8 <_vfiprintf_r+0x120>
 80044bc:	9a07      	ldr	r2, [sp, #28]
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	4621      	mov	r1, r4
 80044c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044cc:	3b30      	subs	r3, #48	@ 0x30
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	d94b      	bls.n	800456a <_vfiprintf_r+0x1a2>
 80044d2:	b1b0      	cbz	r0, 8004502 <_vfiprintf_r+0x13a>
 80044d4:	9207      	str	r2, [sp, #28]
 80044d6:	e014      	b.n	8004502 <_vfiprintf_r+0x13a>
 80044d8:	eba0 0308 	sub.w	r3, r0, r8
 80044dc:	fa09 f303 	lsl.w	r3, r9, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	46a2      	mov	sl, r4
 80044e6:	e7d2      	b.n	800448e <_vfiprintf_r+0xc6>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	1d19      	adds	r1, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	9103      	str	r1, [sp, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bfbb      	ittet	lt
 80044f4:	425b      	neglt	r3, r3
 80044f6:	f042 0202 	orrlt.w	r2, r2, #2
 80044fa:	9307      	strge	r3, [sp, #28]
 80044fc:	9307      	strlt	r3, [sp, #28]
 80044fe:	bfb8      	it	lt
 8004500:	9204      	strlt	r2, [sp, #16]
 8004502:	7823      	ldrb	r3, [r4, #0]
 8004504:	2b2e      	cmp	r3, #46	@ 0x2e
 8004506:	d10a      	bne.n	800451e <_vfiprintf_r+0x156>
 8004508:	7863      	ldrb	r3, [r4, #1]
 800450a:	2b2a      	cmp	r3, #42	@ 0x2a
 800450c:	d132      	bne.n	8004574 <_vfiprintf_r+0x1ac>
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9203      	str	r2, [sp, #12]
 8004516:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800451a:	3402      	adds	r4, #2
 800451c:	9305      	str	r3, [sp, #20]
 800451e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045f4 <_vfiprintf_r+0x22c>
 8004522:	7821      	ldrb	r1, [r4, #0]
 8004524:	2203      	movs	r2, #3
 8004526:	4650      	mov	r0, sl
 8004528:	f7fb fe5a 	bl	80001e0 <memchr>
 800452c:	b138      	cbz	r0, 800453e <_vfiprintf_r+0x176>
 800452e:	9b04      	ldr	r3, [sp, #16]
 8004530:	eba0 000a 	sub.w	r0, r0, sl
 8004534:	2240      	movs	r2, #64	@ 0x40
 8004536:	4082      	lsls	r2, r0
 8004538:	4313      	orrs	r3, r2
 800453a:	3401      	adds	r4, #1
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004542:	4829      	ldr	r0, [pc, #164]	@ (80045e8 <_vfiprintf_r+0x220>)
 8004544:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004548:	2206      	movs	r2, #6
 800454a:	f7fb fe49 	bl	80001e0 <memchr>
 800454e:	2800      	cmp	r0, #0
 8004550:	d03f      	beq.n	80045d2 <_vfiprintf_r+0x20a>
 8004552:	4b26      	ldr	r3, [pc, #152]	@ (80045ec <_vfiprintf_r+0x224>)
 8004554:	bb1b      	cbnz	r3, 800459e <_vfiprintf_r+0x1d6>
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	3307      	adds	r3, #7
 800455a:	f023 0307 	bic.w	r3, r3, #7
 800455e:	3308      	adds	r3, #8
 8004560:	9303      	str	r3, [sp, #12]
 8004562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004564:	443b      	add	r3, r7
 8004566:	9309      	str	r3, [sp, #36]	@ 0x24
 8004568:	e76a      	b.n	8004440 <_vfiprintf_r+0x78>
 800456a:	fb0c 3202 	mla	r2, ip, r2, r3
 800456e:	460c      	mov	r4, r1
 8004570:	2001      	movs	r0, #1
 8004572:	e7a8      	b.n	80044c6 <_vfiprintf_r+0xfe>
 8004574:	2300      	movs	r3, #0
 8004576:	3401      	adds	r4, #1
 8004578:	9305      	str	r3, [sp, #20]
 800457a:	4619      	mov	r1, r3
 800457c:	f04f 0c0a 	mov.w	ip, #10
 8004580:	4620      	mov	r0, r4
 8004582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004586:	3a30      	subs	r2, #48	@ 0x30
 8004588:	2a09      	cmp	r2, #9
 800458a:	d903      	bls.n	8004594 <_vfiprintf_r+0x1cc>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0c6      	beq.n	800451e <_vfiprintf_r+0x156>
 8004590:	9105      	str	r1, [sp, #20]
 8004592:	e7c4      	b.n	800451e <_vfiprintf_r+0x156>
 8004594:	fb0c 2101 	mla	r1, ip, r1, r2
 8004598:	4604      	mov	r4, r0
 800459a:	2301      	movs	r3, #1
 800459c:	e7f0      	b.n	8004580 <_vfiprintf_r+0x1b8>
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	462a      	mov	r2, r5
 80045a4:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <_vfiprintf_r+0x228>)
 80045a6:	a904      	add	r1, sp, #16
 80045a8:	4630      	mov	r0, r6
 80045aa:	f3af 8000 	nop.w
 80045ae:	4607      	mov	r7, r0
 80045b0:	1c78      	adds	r0, r7, #1
 80045b2:	d1d6      	bne.n	8004562 <_vfiprintf_r+0x19a>
 80045b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045b6:	07d9      	lsls	r1, r3, #31
 80045b8:	d405      	bmi.n	80045c6 <_vfiprintf_r+0x1fe>
 80045ba:	89ab      	ldrh	r3, [r5, #12]
 80045bc:	059a      	lsls	r2, r3, #22
 80045be:	d402      	bmi.n	80045c6 <_vfiprintf_r+0x1fe>
 80045c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045c2:	f7ff fddd 	bl	8004180 <__retarget_lock_release_recursive>
 80045c6:	89ab      	ldrh	r3, [r5, #12]
 80045c8:	065b      	lsls	r3, r3, #25
 80045ca:	f53f af1f 	bmi.w	800440c <_vfiprintf_r+0x44>
 80045ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045d0:	e71e      	b.n	8004410 <_vfiprintf_r+0x48>
 80045d2:	ab03      	add	r3, sp, #12
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	462a      	mov	r2, r5
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <_vfiprintf_r+0x228>)
 80045da:	a904      	add	r1, sp, #16
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 f879 	bl	80046d4 <_printf_i>
 80045e2:	e7e4      	b.n	80045ae <_vfiprintf_r+0x1e6>
 80045e4:	08004e60 	.word	0x08004e60
 80045e8:	08004e6a 	.word	0x08004e6a
 80045ec:	00000000 	.word	0x00000000
 80045f0:	080043a3 	.word	0x080043a3
 80045f4:	08004e66 	.word	0x08004e66

080045f8 <_printf_common>:
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	4616      	mov	r6, r2
 80045fe:	4698      	mov	r8, r3
 8004600:	688a      	ldr	r2, [r1, #8]
 8004602:	690b      	ldr	r3, [r1, #16]
 8004604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004608:	4293      	cmp	r3, r2
 800460a:	bfb8      	it	lt
 800460c:	4613      	movlt	r3, r2
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004614:	4607      	mov	r7, r0
 8004616:	460c      	mov	r4, r1
 8004618:	b10a      	cbz	r2, 800461e <_printf_common+0x26>
 800461a:	3301      	adds	r3, #1
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	0699      	lsls	r1, r3, #26
 8004622:	bf42      	ittt	mi
 8004624:	6833      	ldrmi	r3, [r6, #0]
 8004626:	3302      	addmi	r3, #2
 8004628:	6033      	strmi	r3, [r6, #0]
 800462a:	6825      	ldr	r5, [r4, #0]
 800462c:	f015 0506 	ands.w	r5, r5, #6
 8004630:	d106      	bne.n	8004640 <_printf_common+0x48>
 8004632:	f104 0a19 	add.w	sl, r4, #25
 8004636:	68e3      	ldr	r3, [r4, #12]
 8004638:	6832      	ldr	r2, [r6, #0]
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	42ab      	cmp	r3, r5
 800463e:	dc26      	bgt.n	800468e <_printf_common+0x96>
 8004640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	3b00      	subs	r3, #0
 8004648:	bf18      	it	ne
 800464a:	2301      	movne	r3, #1
 800464c:	0692      	lsls	r2, r2, #26
 800464e:	d42b      	bmi.n	80046a8 <_printf_common+0xb0>
 8004650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004654:	4641      	mov	r1, r8
 8004656:	4638      	mov	r0, r7
 8004658:	47c8      	blx	r9
 800465a:	3001      	adds	r0, #1
 800465c:	d01e      	beq.n	800469c <_printf_common+0xa4>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	6922      	ldr	r2, [r4, #16]
 8004662:	f003 0306 	and.w	r3, r3, #6
 8004666:	2b04      	cmp	r3, #4
 8004668:	bf02      	ittt	eq
 800466a:	68e5      	ldreq	r5, [r4, #12]
 800466c:	6833      	ldreq	r3, [r6, #0]
 800466e:	1aed      	subeq	r5, r5, r3
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	bf0c      	ite	eq
 8004674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004678:	2500      	movne	r5, #0
 800467a:	4293      	cmp	r3, r2
 800467c:	bfc4      	itt	gt
 800467e:	1a9b      	subgt	r3, r3, r2
 8004680:	18ed      	addgt	r5, r5, r3
 8004682:	2600      	movs	r6, #0
 8004684:	341a      	adds	r4, #26
 8004686:	42b5      	cmp	r5, r6
 8004688:	d11a      	bne.n	80046c0 <_printf_common+0xc8>
 800468a:	2000      	movs	r0, #0
 800468c:	e008      	b.n	80046a0 <_printf_common+0xa8>
 800468e:	2301      	movs	r3, #1
 8004690:	4652      	mov	r2, sl
 8004692:	4641      	mov	r1, r8
 8004694:	4638      	mov	r0, r7
 8004696:	47c8      	blx	r9
 8004698:	3001      	adds	r0, #1
 800469a:	d103      	bne.n	80046a4 <_printf_common+0xac>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7c6      	b.n	8004636 <_printf_common+0x3e>
 80046a8:	18e1      	adds	r1, r4, r3
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	2030      	movs	r0, #48	@ 0x30
 80046ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046b2:	4422      	add	r2, r4
 80046b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046bc:	3302      	adds	r3, #2
 80046be:	e7c7      	b.n	8004650 <_printf_common+0x58>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4622      	mov	r2, r4
 80046c4:	4641      	mov	r1, r8
 80046c6:	4638      	mov	r0, r7
 80046c8:	47c8      	blx	r9
 80046ca:	3001      	adds	r0, #1
 80046cc:	d0e6      	beq.n	800469c <_printf_common+0xa4>
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7d9      	b.n	8004686 <_printf_common+0x8e>
	...

080046d4 <_printf_i>:
 80046d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	7e0f      	ldrb	r7, [r1, #24]
 80046da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046dc:	2f78      	cmp	r7, #120	@ 0x78
 80046de:	4691      	mov	r9, r2
 80046e0:	4680      	mov	r8, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	469a      	mov	sl, r3
 80046e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ea:	d807      	bhi.n	80046fc <_printf_i+0x28>
 80046ec:	2f62      	cmp	r7, #98	@ 0x62
 80046ee:	d80a      	bhi.n	8004706 <_printf_i+0x32>
 80046f0:	2f00      	cmp	r7, #0
 80046f2:	f000 80d2 	beq.w	800489a <_printf_i+0x1c6>
 80046f6:	2f58      	cmp	r7, #88	@ 0x58
 80046f8:	f000 80b9 	beq.w	800486e <_printf_i+0x19a>
 80046fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004704:	e03a      	b.n	800477c <_printf_i+0xa8>
 8004706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800470a:	2b15      	cmp	r3, #21
 800470c:	d8f6      	bhi.n	80046fc <_printf_i+0x28>
 800470e:	a101      	add	r1, pc, #4	@ (adr r1, 8004714 <_printf_i+0x40>)
 8004710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004714:	0800476d 	.word	0x0800476d
 8004718:	08004781 	.word	0x08004781
 800471c:	080046fd 	.word	0x080046fd
 8004720:	080046fd 	.word	0x080046fd
 8004724:	080046fd 	.word	0x080046fd
 8004728:	080046fd 	.word	0x080046fd
 800472c:	08004781 	.word	0x08004781
 8004730:	080046fd 	.word	0x080046fd
 8004734:	080046fd 	.word	0x080046fd
 8004738:	080046fd 	.word	0x080046fd
 800473c:	080046fd 	.word	0x080046fd
 8004740:	08004881 	.word	0x08004881
 8004744:	080047ab 	.word	0x080047ab
 8004748:	0800483b 	.word	0x0800483b
 800474c:	080046fd 	.word	0x080046fd
 8004750:	080046fd 	.word	0x080046fd
 8004754:	080048a3 	.word	0x080048a3
 8004758:	080046fd 	.word	0x080046fd
 800475c:	080047ab 	.word	0x080047ab
 8004760:	080046fd 	.word	0x080046fd
 8004764:	080046fd 	.word	0x080046fd
 8004768:	08004843 	.word	0x08004843
 800476c:	6833      	ldr	r3, [r6, #0]
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6032      	str	r2, [r6, #0]
 8004774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800477c:	2301      	movs	r3, #1
 800477e:	e09d      	b.n	80048bc <_printf_i+0x1e8>
 8004780:	6833      	ldr	r3, [r6, #0]
 8004782:	6820      	ldr	r0, [r4, #0]
 8004784:	1d19      	adds	r1, r3, #4
 8004786:	6031      	str	r1, [r6, #0]
 8004788:	0606      	lsls	r6, r0, #24
 800478a:	d501      	bpl.n	8004790 <_printf_i+0xbc>
 800478c:	681d      	ldr	r5, [r3, #0]
 800478e:	e003      	b.n	8004798 <_printf_i+0xc4>
 8004790:	0645      	lsls	r5, r0, #25
 8004792:	d5fb      	bpl.n	800478c <_printf_i+0xb8>
 8004794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004798:	2d00      	cmp	r5, #0
 800479a:	da03      	bge.n	80047a4 <_printf_i+0xd0>
 800479c:	232d      	movs	r3, #45	@ 0x2d
 800479e:	426d      	negs	r5, r5
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047a4:	4859      	ldr	r0, [pc, #356]	@ (800490c <_printf_i+0x238>)
 80047a6:	230a      	movs	r3, #10
 80047a8:	e011      	b.n	80047ce <_printf_i+0xfa>
 80047aa:	6821      	ldr	r1, [r4, #0]
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	0608      	lsls	r0, r1, #24
 80047b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047b4:	d402      	bmi.n	80047bc <_printf_i+0xe8>
 80047b6:	0649      	lsls	r1, r1, #25
 80047b8:	bf48      	it	mi
 80047ba:	b2ad      	uxthmi	r5, r5
 80047bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047be:	4853      	ldr	r0, [pc, #332]	@ (800490c <_printf_i+0x238>)
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	bf14      	ite	ne
 80047c4:	230a      	movne	r3, #10
 80047c6:	2308      	moveq	r3, #8
 80047c8:	2100      	movs	r1, #0
 80047ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ce:	6866      	ldr	r6, [r4, #4]
 80047d0:	60a6      	str	r6, [r4, #8]
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	bfa2      	ittt	ge
 80047d6:	6821      	ldrge	r1, [r4, #0]
 80047d8:	f021 0104 	bicge.w	r1, r1, #4
 80047dc:	6021      	strge	r1, [r4, #0]
 80047de:	b90d      	cbnz	r5, 80047e4 <_printf_i+0x110>
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	d04b      	beq.n	800487c <_printf_i+0x1a8>
 80047e4:	4616      	mov	r6, r2
 80047e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ea:	fb03 5711 	mls	r7, r3, r1, r5
 80047ee:	5dc7      	ldrb	r7, [r0, r7]
 80047f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047f4:	462f      	mov	r7, r5
 80047f6:	42bb      	cmp	r3, r7
 80047f8:	460d      	mov	r5, r1
 80047fa:	d9f4      	bls.n	80047e6 <_printf_i+0x112>
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10b      	bne.n	8004818 <_printf_i+0x144>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	07df      	lsls	r7, r3, #31
 8004804:	d508      	bpl.n	8004818 <_printf_i+0x144>
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	6861      	ldr	r1, [r4, #4]
 800480a:	4299      	cmp	r1, r3
 800480c:	bfde      	ittt	le
 800480e:	2330      	movle	r3, #48	@ 0x30
 8004810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004818:	1b92      	subs	r2, r2, r6
 800481a:	6122      	str	r2, [r4, #16]
 800481c:	f8cd a000 	str.w	sl, [sp]
 8004820:	464b      	mov	r3, r9
 8004822:	aa03      	add	r2, sp, #12
 8004824:	4621      	mov	r1, r4
 8004826:	4640      	mov	r0, r8
 8004828:	f7ff fee6 	bl	80045f8 <_printf_common>
 800482c:	3001      	adds	r0, #1
 800482e:	d14a      	bne.n	80048c6 <_printf_i+0x1f2>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	b004      	add	sp, #16
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f043 0320 	orr.w	r3, r3, #32
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	4833      	ldr	r0, [pc, #204]	@ (8004910 <_printf_i+0x23c>)
 8004844:	2778      	movs	r7, #120	@ 0x78
 8004846:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	6831      	ldr	r1, [r6, #0]
 800484e:	061f      	lsls	r7, r3, #24
 8004850:	f851 5b04 	ldr.w	r5, [r1], #4
 8004854:	d402      	bmi.n	800485c <_printf_i+0x188>
 8004856:	065f      	lsls	r7, r3, #25
 8004858:	bf48      	it	mi
 800485a:	b2ad      	uxthmi	r5, r5
 800485c:	6031      	str	r1, [r6, #0]
 800485e:	07d9      	lsls	r1, r3, #31
 8004860:	bf44      	itt	mi
 8004862:	f043 0320 	orrmi.w	r3, r3, #32
 8004866:	6023      	strmi	r3, [r4, #0]
 8004868:	b11d      	cbz	r5, 8004872 <_printf_i+0x19e>
 800486a:	2310      	movs	r3, #16
 800486c:	e7ac      	b.n	80047c8 <_printf_i+0xf4>
 800486e:	4827      	ldr	r0, [pc, #156]	@ (800490c <_printf_i+0x238>)
 8004870:	e7e9      	b.n	8004846 <_printf_i+0x172>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f023 0320 	bic.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	e7f6      	b.n	800486a <_printf_i+0x196>
 800487c:	4616      	mov	r6, r2
 800487e:	e7bd      	b.n	80047fc <_printf_i+0x128>
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	6961      	ldr	r1, [r4, #20]
 8004886:	1d18      	adds	r0, r3, #4
 8004888:	6030      	str	r0, [r6, #0]
 800488a:	062e      	lsls	r6, r5, #24
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	d501      	bpl.n	8004894 <_printf_i+0x1c0>
 8004890:	6019      	str	r1, [r3, #0]
 8004892:	e002      	b.n	800489a <_printf_i+0x1c6>
 8004894:	0668      	lsls	r0, r5, #25
 8004896:	d5fb      	bpl.n	8004890 <_printf_i+0x1bc>
 8004898:	8019      	strh	r1, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	4616      	mov	r6, r2
 80048a0:	e7bc      	b.n	800481c <_printf_i+0x148>
 80048a2:	6833      	ldr	r3, [r6, #0]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	6032      	str	r2, [r6, #0]
 80048a8:	681e      	ldr	r6, [r3, #0]
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7fb fc96 	bl	80001e0 <memchr>
 80048b4:	b108      	cbz	r0, 80048ba <_printf_i+0x1e6>
 80048b6:	1b80      	subs	r0, r0, r6
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048c4:	e7aa      	b.n	800481c <_printf_i+0x148>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	4632      	mov	r2, r6
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	47d0      	blx	sl
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0ad      	beq.n	8004830 <_printf_i+0x15c>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	d413      	bmi.n	8004902 <_printf_i+0x22e>
 80048da:	68e0      	ldr	r0, [r4, #12]
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	4298      	cmp	r0, r3
 80048e0:	bfb8      	it	lt
 80048e2:	4618      	movlt	r0, r3
 80048e4:	e7a6      	b.n	8004834 <_printf_i+0x160>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4632      	mov	r2, r6
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d09d      	beq.n	8004830 <_printf_i+0x15c>
 80048f4:	3501      	adds	r5, #1
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	9903      	ldr	r1, [sp, #12]
 80048fa:	1a5b      	subs	r3, r3, r1
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dcf2      	bgt.n	80048e6 <_printf_i+0x212>
 8004900:	e7eb      	b.n	80048da <_printf_i+0x206>
 8004902:	2500      	movs	r5, #0
 8004904:	f104 0619 	add.w	r6, r4, #25
 8004908:	e7f5      	b.n	80048f6 <_printf_i+0x222>
 800490a:	bf00      	nop
 800490c:	08004e71 	.word	0x08004e71
 8004910:	08004e82 	.word	0x08004e82

08004914 <__sflush_r>:
 8004914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800491c:	0716      	lsls	r6, r2, #28
 800491e:	4605      	mov	r5, r0
 8004920:	460c      	mov	r4, r1
 8004922:	d454      	bmi.n	80049ce <__sflush_r+0xba>
 8004924:	684b      	ldr	r3, [r1, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	dc02      	bgt.n	8004930 <__sflush_r+0x1c>
 800492a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	dd48      	ble.n	80049c2 <__sflush_r+0xae>
 8004930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004932:	2e00      	cmp	r6, #0
 8004934:	d045      	beq.n	80049c2 <__sflush_r+0xae>
 8004936:	2300      	movs	r3, #0
 8004938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800493c:	682f      	ldr	r7, [r5, #0]
 800493e:	6a21      	ldr	r1, [r4, #32]
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	d030      	beq.n	80049a6 <__sflush_r+0x92>
 8004944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	0759      	lsls	r1, r3, #29
 800494a:	d505      	bpl.n	8004958 <__sflush_r+0x44>
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	1ad2      	subs	r2, r2, r3
 8004950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004952:	b10b      	cbz	r3, 8004958 <__sflush_r+0x44>
 8004954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	2300      	movs	r3, #0
 800495a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800495c:	6a21      	ldr	r1, [r4, #32]
 800495e:	4628      	mov	r0, r5
 8004960:	47b0      	blx	r6
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	d106      	bne.n	8004976 <__sflush_r+0x62>
 8004968:	6829      	ldr	r1, [r5, #0]
 800496a:	291d      	cmp	r1, #29
 800496c:	d82b      	bhi.n	80049c6 <__sflush_r+0xb2>
 800496e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a18 <__sflush_r+0x104>)
 8004970:	410a      	asrs	r2, r1
 8004972:	07d6      	lsls	r6, r2, #31
 8004974:	d427      	bmi.n	80049c6 <__sflush_r+0xb2>
 8004976:	2200      	movs	r2, #0
 8004978:	6062      	str	r2, [r4, #4]
 800497a:	04d9      	lsls	r1, r3, #19
 800497c:	6922      	ldr	r2, [r4, #16]
 800497e:	6022      	str	r2, [r4, #0]
 8004980:	d504      	bpl.n	800498c <__sflush_r+0x78>
 8004982:	1c42      	adds	r2, r0, #1
 8004984:	d101      	bne.n	800498a <__sflush_r+0x76>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	b903      	cbnz	r3, 800498c <__sflush_r+0x78>
 800498a:	6560      	str	r0, [r4, #84]	@ 0x54
 800498c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800498e:	602f      	str	r7, [r5, #0]
 8004990:	b1b9      	cbz	r1, 80049c2 <__sflush_r+0xae>
 8004992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004996:	4299      	cmp	r1, r3
 8004998:	d002      	beq.n	80049a0 <__sflush_r+0x8c>
 800499a:	4628      	mov	r0, r5
 800499c:	f7ff fbf2 	bl	8004184 <_free_r>
 80049a0:	2300      	movs	r3, #0
 80049a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049a4:	e00d      	b.n	80049c2 <__sflush_r+0xae>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b0      	blx	r6
 80049ac:	4602      	mov	r2, r0
 80049ae:	1c50      	adds	r0, r2, #1
 80049b0:	d1c9      	bne.n	8004946 <__sflush_r+0x32>
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0c6      	beq.n	8004946 <__sflush_r+0x32>
 80049b8:	2b1d      	cmp	r3, #29
 80049ba:	d001      	beq.n	80049c0 <__sflush_r+0xac>
 80049bc:	2b16      	cmp	r3, #22
 80049be:	d11e      	bne.n	80049fe <__sflush_r+0xea>
 80049c0:	602f      	str	r7, [r5, #0]
 80049c2:	2000      	movs	r0, #0
 80049c4:	e022      	b.n	8004a0c <__sflush_r+0xf8>
 80049c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	e01b      	b.n	8004a06 <__sflush_r+0xf2>
 80049ce:	690f      	ldr	r7, [r1, #16]
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	d0f6      	beq.n	80049c2 <__sflush_r+0xae>
 80049d4:	0793      	lsls	r3, r2, #30
 80049d6:	680e      	ldr	r6, [r1, #0]
 80049d8:	bf08      	it	eq
 80049da:	694b      	ldreq	r3, [r1, #20]
 80049dc:	600f      	str	r7, [r1, #0]
 80049de:	bf18      	it	ne
 80049e0:	2300      	movne	r3, #0
 80049e2:	eba6 0807 	sub.w	r8, r6, r7
 80049e6:	608b      	str	r3, [r1, #8]
 80049e8:	f1b8 0f00 	cmp.w	r8, #0
 80049ec:	dde9      	ble.n	80049c2 <__sflush_r+0xae>
 80049ee:	6a21      	ldr	r1, [r4, #32]
 80049f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049f2:	4643      	mov	r3, r8
 80049f4:	463a      	mov	r2, r7
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b0      	blx	r6
 80049fa:	2800      	cmp	r0, #0
 80049fc:	dc08      	bgt.n	8004a10 <__sflush_r+0xfc>
 80049fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a10:	4407      	add	r7, r0
 8004a12:	eba8 0800 	sub.w	r8, r8, r0
 8004a16:	e7e7      	b.n	80049e8 <__sflush_r+0xd4>
 8004a18:	dfbffffe 	.word	0xdfbffffe

08004a1c <_fflush_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	690b      	ldr	r3, [r1, #16]
 8004a20:	4605      	mov	r5, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b913      	cbnz	r3, 8004a2c <_fflush_r+0x10>
 8004a26:	2500      	movs	r5, #0
 8004a28:	4628      	mov	r0, r5
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	b118      	cbz	r0, 8004a36 <_fflush_r+0x1a>
 8004a2e:	6a03      	ldr	r3, [r0, #32]
 8004a30:	b90b      	cbnz	r3, 8004a36 <_fflush_r+0x1a>
 8004a32:	f7ff fa71 	bl	8003f18 <__sinit>
 8004a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f3      	beq.n	8004a26 <_fflush_r+0xa>
 8004a3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a40:	07d0      	lsls	r0, r2, #31
 8004a42:	d404      	bmi.n	8004a4e <_fflush_r+0x32>
 8004a44:	0599      	lsls	r1, r3, #22
 8004a46:	d402      	bmi.n	8004a4e <_fflush_r+0x32>
 8004a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4a:	f7ff fb98 	bl	800417e <__retarget_lock_acquire_recursive>
 8004a4e:	4628      	mov	r0, r5
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7ff ff5f 	bl	8004914 <__sflush_r>
 8004a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a58:	07da      	lsls	r2, r3, #31
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	d4e4      	bmi.n	8004a28 <_fflush_r+0xc>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	059b      	lsls	r3, r3, #22
 8004a62:	d4e1      	bmi.n	8004a28 <_fflush_r+0xc>
 8004a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a66:	f7ff fb8b 	bl	8004180 <__retarget_lock_release_recursive>
 8004a6a:	e7dd      	b.n	8004a28 <_fflush_r+0xc>

08004a6c <_putc_r>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	460d      	mov	r5, r1
 8004a70:	4614      	mov	r4, r2
 8004a72:	4606      	mov	r6, r0
 8004a74:	b118      	cbz	r0, 8004a7e <_putc_r+0x12>
 8004a76:	6a03      	ldr	r3, [r0, #32]
 8004a78:	b90b      	cbnz	r3, 8004a7e <_putc_r+0x12>
 8004a7a:	f7ff fa4d 	bl	8003f18 <__sinit>
 8004a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a80:	07d8      	lsls	r0, r3, #31
 8004a82:	d405      	bmi.n	8004a90 <_putc_r+0x24>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	0599      	lsls	r1, r3, #22
 8004a88:	d402      	bmi.n	8004a90 <_putc_r+0x24>
 8004a8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a8c:	f7ff fb77 	bl	800417e <__retarget_lock_acquire_recursive>
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	60a3      	str	r3, [r4, #8]
 8004a98:	da05      	bge.n	8004aa6 <_putc_r+0x3a>
 8004a9a:	69a2      	ldr	r2, [r4, #24]
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	db12      	blt.n	8004ac6 <_putc_r+0x5a>
 8004aa0:	b2eb      	uxtb	r3, r5
 8004aa2:	2b0a      	cmp	r3, #10
 8004aa4:	d00f      	beq.n	8004ac6 <_putc_r+0x5a>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	6022      	str	r2, [r4, #0]
 8004aac:	701d      	strb	r5, [r3, #0]
 8004aae:	b2ed      	uxtb	r5, r5
 8004ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ab2:	07da      	lsls	r2, r3, #31
 8004ab4:	d405      	bmi.n	8004ac2 <_putc_r+0x56>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	059b      	lsls	r3, r3, #22
 8004aba:	d402      	bmi.n	8004ac2 <_putc_r+0x56>
 8004abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004abe:	f7ff fb5f 	bl	8004180 <__retarget_lock_release_recursive>
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4630      	mov	r0, r6
 8004acc:	f000 f802 	bl	8004ad4 <__swbuf_r>
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	e7ed      	b.n	8004ab0 <_putc_r+0x44>

08004ad4 <__swbuf_r>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	460e      	mov	r6, r1
 8004ad8:	4614      	mov	r4, r2
 8004ada:	4605      	mov	r5, r0
 8004adc:	b118      	cbz	r0, 8004ae6 <__swbuf_r+0x12>
 8004ade:	6a03      	ldr	r3, [r0, #32]
 8004ae0:	b90b      	cbnz	r3, 8004ae6 <__swbuf_r+0x12>
 8004ae2:	f7ff fa19 	bl	8003f18 <__sinit>
 8004ae6:	69a3      	ldr	r3, [r4, #24]
 8004ae8:	60a3      	str	r3, [r4, #8]
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	071a      	lsls	r2, r3, #28
 8004aee:	d501      	bpl.n	8004af4 <__swbuf_r+0x20>
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	b943      	cbnz	r3, 8004b06 <__swbuf_r+0x32>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f82a 	bl	8004b50 <__swsetup_r>
 8004afc:	b118      	cbz	r0, 8004b06 <__swbuf_r+0x32>
 8004afe:	f04f 37ff 	mov.w	r7, #4294967295
 8004b02:	4638      	mov	r0, r7
 8004b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	6922      	ldr	r2, [r4, #16]
 8004b0a:	1a98      	subs	r0, r3, r2
 8004b0c:	6963      	ldr	r3, [r4, #20]
 8004b0e:	b2f6      	uxtb	r6, r6
 8004b10:	4283      	cmp	r3, r0
 8004b12:	4637      	mov	r7, r6
 8004b14:	dc05      	bgt.n	8004b22 <__swbuf_r+0x4e>
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7ff ff7f 	bl	8004a1c <_fflush_r>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d1ed      	bne.n	8004afe <__swbuf_r+0x2a>
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	60a3      	str	r3, [r4, #8]
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	6022      	str	r2, [r4, #0]
 8004b2e:	701e      	strb	r6, [r3, #0]
 8004b30:	6962      	ldr	r2, [r4, #20]
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d004      	beq.n	8004b42 <__swbuf_r+0x6e>
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	07db      	lsls	r3, r3, #31
 8004b3c:	d5e1      	bpl.n	8004b02 <__swbuf_r+0x2e>
 8004b3e:	2e0a      	cmp	r6, #10
 8004b40:	d1df      	bne.n	8004b02 <__swbuf_r+0x2e>
 8004b42:	4621      	mov	r1, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f7ff ff69 	bl	8004a1c <_fflush_r>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d0d9      	beq.n	8004b02 <__swbuf_r+0x2e>
 8004b4e:	e7d6      	b.n	8004afe <__swbuf_r+0x2a>

08004b50 <__swsetup_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4b29      	ldr	r3, [pc, #164]	@ (8004bf8 <__swsetup_r+0xa8>)
 8004b54:	4605      	mov	r5, r0
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	460c      	mov	r4, r1
 8004b5a:	b118      	cbz	r0, 8004b64 <__swsetup_r+0x14>
 8004b5c:	6a03      	ldr	r3, [r0, #32]
 8004b5e:	b90b      	cbnz	r3, 8004b64 <__swsetup_r+0x14>
 8004b60:	f7ff f9da 	bl	8003f18 <__sinit>
 8004b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b68:	0719      	lsls	r1, r3, #28
 8004b6a:	d422      	bmi.n	8004bb2 <__swsetup_r+0x62>
 8004b6c:	06da      	lsls	r2, r3, #27
 8004b6e:	d407      	bmi.n	8004b80 <__swsetup_r+0x30>
 8004b70:	2209      	movs	r2, #9
 8004b72:	602a      	str	r2, [r5, #0]
 8004b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7e:	e033      	b.n	8004be8 <__swsetup_r+0x98>
 8004b80:	0758      	lsls	r0, r3, #29
 8004b82:	d512      	bpl.n	8004baa <__swsetup_r+0x5a>
 8004b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b86:	b141      	cbz	r1, 8004b9a <__swsetup_r+0x4a>
 8004b88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b8c:	4299      	cmp	r1, r3
 8004b8e:	d002      	beq.n	8004b96 <__swsetup_r+0x46>
 8004b90:	4628      	mov	r0, r5
 8004b92:	f7ff faf7 	bl	8004184 <_free_r>
 8004b96:	2300      	movs	r3, #0
 8004b98:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f043 0308 	orr.w	r3, r3, #8
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	6923      	ldr	r3, [r4, #16]
 8004bb4:	b94b      	cbnz	r3, 8004bca <__swsetup_r+0x7a>
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc0:	d003      	beq.n	8004bca <__swsetup_r+0x7a>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 f84f 	bl	8004c68 <__smakebuf_r>
 8004bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bce:	f013 0201 	ands.w	r2, r3, #1
 8004bd2:	d00a      	beq.n	8004bea <__swsetup_r+0x9a>
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	60a2      	str	r2, [r4, #8]
 8004bd8:	6962      	ldr	r2, [r4, #20]
 8004bda:	4252      	negs	r2, r2
 8004bdc:	61a2      	str	r2, [r4, #24]
 8004bde:	6922      	ldr	r2, [r4, #16]
 8004be0:	b942      	cbnz	r2, 8004bf4 <__swsetup_r+0xa4>
 8004be2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004be6:	d1c5      	bne.n	8004b74 <__swsetup_r+0x24>
 8004be8:	bd38      	pop	{r3, r4, r5, pc}
 8004bea:	0799      	lsls	r1, r3, #30
 8004bec:	bf58      	it	pl
 8004bee:	6962      	ldrpl	r2, [r4, #20]
 8004bf0:	60a2      	str	r2, [r4, #8]
 8004bf2:	e7f4      	b.n	8004bde <__swsetup_r+0x8e>
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	e7f7      	b.n	8004be8 <__swsetup_r+0x98>
 8004bf8:	2000001c 	.word	0x2000001c

08004bfc <_sbrk_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d06      	ldr	r5, [pc, #24]	@ (8004c18 <_sbrk_r+0x1c>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	f7fc f9f0 	bl	8000fec <_sbrk>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_sbrk_r+0x1a>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_sbrk_r+0x1a>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	20000320 	.word	0x20000320

08004c1c <__swhatbuf_r>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	460c      	mov	r4, r1
 8004c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c24:	2900      	cmp	r1, #0
 8004c26:	b096      	sub	sp, #88	@ 0x58
 8004c28:	4615      	mov	r5, r2
 8004c2a:	461e      	mov	r6, r3
 8004c2c:	da0d      	bge.n	8004c4a <__swhatbuf_r+0x2e>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c34:	f04f 0100 	mov.w	r1, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2340      	movne	r3, #64	@ 0x40
 8004c3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c40:	2000      	movs	r0, #0
 8004c42:	6031      	str	r1, [r6, #0]
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	b016      	add	sp, #88	@ 0x58
 8004c48:	bd70      	pop	{r4, r5, r6, pc}
 8004c4a:	466a      	mov	r2, sp
 8004c4c:	f000 f848 	bl	8004ce0 <_fstat_r>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	dbec      	blt.n	8004c2e <__swhatbuf_r+0x12>
 8004c54:	9901      	ldr	r1, [sp, #4]
 8004c56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c5e:	4259      	negs	r1, r3
 8004c60:	4159      	adcs	r1, r3
 8004c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c66:	e7eb      	b.n	8004c40 <__swhatbuf_r+0x24>

08004c68 <__smakebuf_r>:
 8004c68:	898b      	ldrh	r3, [r1, #12]
 8004c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c6c:	079d      	lsls	r5, r3, #30
 8004c6e:	4606      	mov	r6, r0
 8004c70:	460c      	mov	r4, r1
 8004c72:	d507      	bpl.n	8004c84 <__smakebuf_r+0x1c>
 8004c74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	6123      	str	r3, [r4, #16]
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	6163      	str	r3, [r4, #20]
 8004c80:	b003      	add	sp, #12
 8004c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c84:	ab01      	add	r3, sp, #4
 8004c86:	466a      	mov	r2, sp
 8004c88:	f7ff ffc8 	bl	8004c1c <__swhatbuf_r>
 8004c8c:	9f00      	ldr	r7, [sp, #0]
 8004c8e:	4605      	mov	r5, r0
 8004c90:	4639      	mov	r1, r7
 8004c92:	4630      	mov	r0, r6
 8004c94:	f7ff fae2 	bl	800425c <_malloc_r>
 8004c98:	b948      	cbnz	r0, 8004cae <__smakebuf_r+0x46>
 8004c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c9e:	059a      	lsls	r2, r3, #22
 8004ca0:	d4ee      	bmi.n	8004c80 <__smakebuf_r+0x18>
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	f043 0302 	orr.w	r3, r3, #2
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	e7e2      	b.n	8004c74 <__smakebuf_r+0xc>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	6020      	str	r0, [r4, #0]
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	9b01      	ldr	r3, [sp, #4]
 8004cba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004cbe:	b15b      	cbz	r3, 8004cd8 <__smakebuf_r+0x70>
 8004cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f000 f81d 	bl	8004d04 <_isatty_r>
 8004cca:	b128      	cbz	r0, 8004cd8 <__smakebuf_r+0x70>
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	81a3      	strh	r3, [r4, #12]
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	431d      	orrs	r5, r3
 8004cdc:	81a5      	strh	r5, [r4, #12]
 8004cde:	e7cf      	b.n	8004c80 <__smakebuf_r+0x18>

08004ce0 <_fstat_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d07      	ldr	r5, [pc, #28]	@ (8004d00 <_fstat_r+0x20>)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	f7fc f955 	bl	8000f9c <_fstat>
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	d102      	bne.n	8004cfc <_fstat_r+0x1c>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	b103      	cbz	r3, 8004cfc <_fstat_r+0x1c>
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000320 	.word	0x20000320

08004d04 <_isatty_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d06      	ldr	r5, [pc, #24]	@ (8004d20 <_isatty_r+0x1c>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	f7fc f954 	bl	8000fbc <_isatty>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_isatty_r+0x1a>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_isatty_r+0x1a>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	20000320 	.word	0x20000320

08004d24 <_init>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr

08004d30 <_fini>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr
