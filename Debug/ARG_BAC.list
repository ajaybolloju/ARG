
ARG_BAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c32c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800c4cc  0800c4cc  0000d4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c638  0800c638  0000e08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c638  0800c638  0000d638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c640  0800c640  0000e08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c640  0800c640  0000d640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c644  0800c644  0000d644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800c648  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  2000008c  0800c6d4  0000e08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  0800c6d4  0000eb80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b57c  00000000  00000000  0000e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b9  00000000  00000000  00029638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0002ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef7  00000000  00000000  0002f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7f3  00000000  00000000  000300a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dccb  00000000  00000000  0004b89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5d2  00000000  00000000  00069565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8b37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000582c  00000000  00000000  000f8b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000fe3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c4b4 	.word	0x0800c4b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800c4b4 	.word	0x0800c4b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <W25QXX_WriteEnable>:

#define FLASH_CS_LOW()  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET)
#define FLASH_CS_HIGH() HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET)


void W25QXX_WriteEnable(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x06; // Write Enable
 8000576:	2306      	movs	r3, #6
 8000578:	71fb      	strb	r3, [r7, #7]
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 800057a:	2200      	movs	r2, #0
 800057c:	2110      	movs	r1, #16
 800057e:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <W25QXX_WriteEnable+0x34>)
 8000580:	f001 f92e 	bl	80017e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000584:	1df9      	adds	r1, r7, #7
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	2201      	movs	r2, #1
 800058c:	4806      	ldr	r0, [pc, #24]	@ (80005a8 <W25QXX_WriteEnable+0x38>)
 800058e:	f003 ff88 	bl	80044a2 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <W25QXX_WriteEnable+0x34>)
 8000598:	f001 f922 	bl	80017e0 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020000 	.word	0x40020000
 80005a8:	200000a8 	.word	0x200000a8

080005ac <W25QXX_ReadStatus>:

uint8_t W25QXX_ReadStatus(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x05;  // Read Status Register
 80005b2:	2305      	movs	r3, #5
 80005b4:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71bb      	strb	r3, [r7, #6]
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 80005ba:	2200      	movs	r2, #0
 80005bc:	2110      	movs	r1, #16
 80005be:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <W25QXX_ReadStatus+0x48>)
 80005c0:	f001 f90e 	bl	80017e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80005c4:	1df9      	adds	r1, r7, #7
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	2201      	movs	r2, #1
 80005cc:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <W25QXX_ReadStatus+0x4c>)
 80005ce:	f003 ff68 	bl	80044a2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &status, 1, HAL_MAX_DELAY);
 80005d2:	1db9      	adds	r1, r7, #6
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	2201      	movs	r2, #1
 80005da:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <W25QXX_ReadStatus+0x4c>)
 80005dc:	f004 f8a5 	bl	800472a <HAL_SPI_Receive>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
    FLASH_CS_HIGH();
 80005e0:	2201      	movs	r2, #1
 80005e2:	2110      	movs	r1, #16
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <W25QXX_ReadStatus+0x48>)
 80005e6:	f001 f8fb 	bl	80017e0 <HAL_GPIO_WritePin>
    return status;
 80005ea:	79bb      	ldrb	r3, [r7, #6]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020000 	.word	0x40020000
 80005f8:	200000a8 	.word	0x200000a8

080005fc <W25QXX_WriteData>:

void W25QXX_WriteData(uint32_t address, uint8_t* data, uint16_t size) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	4613      	mov	r3, r2
 8000608:	80fb      	strh	r3, [r7, #6]
    W25QXX_WriteEnable();  // Enable writing
 800060a:	f7ff ffb1 	bl	8000570 <W25QXX_WriteEnable>
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 800060e:	2302      	movs	r3, #2
 8000610:	753b      	strb	r3, [r7, #20]
                       (address >> 16) & 0xFF,  // Address bytes
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 8000616:	b2db      	uxtb	r3, r3
 8000618:	757b      	strb	r3, [r7, #21]
                       (address >> 8) & 0xFF,
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 800061e:	b2db      	uxtb	r3, r3
 8000620:	75bb      	strb	r3, [r7, #22]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	75fb      	strb	r3, [r7, #23]
                       address & 0xFF };
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 8000628:	2200      	movs	r2, #0
 800062a:	2110      	movs	r1, #16
 800062c:	4811      	ldr	r0, [pc, #68]	@ (8000674 <W25QXX_WriteData+0x78>)
 800062e:	f001 f8d7 	bl	80017e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);      // Send command & address
 8000632:	f107 0114 	add.w	r1, r7, #20
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2204      	movs	r2, #4
 800063c:	480e      	ldr	r0, [pc, #56]	@ (8000678 <W25QXX_WriteData+0x7c>)
 800063e:	f003 ff30 	bl	80044a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);  // Send data
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <W25QXX_WriteData+0x7c>)
 800064c:	f003 ff29 	bl	80044a2 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4807      	ldr	r0, [pc, #28]	@ (8000674 <W25QXX_WriteData+0x78>)
 8000656:	f001 f8c3 	bl	80017e0 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
    while (W25QXX_ReadStatus() & 0x01);                   // Wait for write to finish
 800065a:	bf00      	nop
 800065c:	f7ff ffa6 	bl	80005ac <W25QXX_ReadStatus>
 8000660:	4603      	mov	r3, r0
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f8      	bne.n	800065c <W25QXX_WriteData+0x60>
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020000 	.word	0x40020000
 8000678:	200000a8 	.word	0x200000a8

0800067c <W25QXX_ReadData>:

void W25QXX_ReadData(uint32_t address, uint8_t* buffer, uint16_t size) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	4613      	mov	r3, r2
 8000688:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 800068a:	2303      	movs	r3, #3
 800068c:	753b      	strb	r3, [r7, #20]
                       (address >> 16) & 0xFF,
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 8000692:	b2db      	uxtb	r3, r3
 8000694:	757b      	strb	r3, [r7, #21]
                       (address >> 8) & 0xFF,
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 800069a:	b2db      	uxtb	r3, r3
 800069c:	75bb      	strb	r3, [r7, #22]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	75fb      	strb	r3, [r7, #23]
                       address & 0xFF };
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 80006a4:	2200      	movs	r2, #0
 80006a6:	2110      	movs	r1, #16
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <W25QXX_ReadData+0x64>)
 80006aa:	f001 f899 	bl	80017e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);      // Send command & address
 80006ae:	f107 0114 	add.w	r1, r7, #20
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2204      	movs	r2, #4
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <W25QXX_ReadData+0x68>)
 80006ba:	f003 fef2 	bl	80044a2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY); // Receive data
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <W25QXX_ReadData+0x68>)
 80006c8:	f004 f82f 	bl	800472a <HAL_SPI_Receive>
    FLASH_CS_HIGH();
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <W25QXX_ReadData+0x64>)
 80006d2:	f001 f885 	bl	80017e0 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000
 80006e4:	200000a8 	.word	0x200000a8

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b089      	sub	sp, #36	@ 0x24
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fca1 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f881 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f973 	bl	80009e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006fa:	f000 f91d 	bl	8000938 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 f945 	bl	800098c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000702:	f000 f8e3 	bl	80008cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000706:	f00a fc65 	bl	800afd4 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800070a:	f006 fd2f 	bl	800716c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  if (f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 0) != FR_OK)
 800070e:	2200      	movs	r2, #0
 8000710:	492b      	ldr	r1, [pc, #172]	@ (80007c0 <main+0xd8>)
 8000712:	482c      	ldr	r0, [pc, #176]	@ (80007c4 <main+0xdc>)
 8000714:	f00a fbb0 	bl	800ae78 <f_mount>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <main+0x3c>
  {
    printf("\n\n ERROR : USBHFatFS Initialization");
 800071e:	482a      	ldr	r0, [pc, #168]	@ (80007c8 <main+0xe0>)
 8000720:	f00b f8fa 	bl	800b918 <iprintf>
  }

  HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	4929      	ldr	r1, [pc, #164]	@ (80007cc <main+0xe4>)
 8000728:	4829      	ldr	r0, [pc, #164]	@ (80007d0 <main+0xe8>)
 800072a:	f004 fcde 	bl	80050ea <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	4926      	ldr	r1, [pc, #152]	@ (80007cc <main+0xe4>)
 8000732:	4828      	ldr	r0, [pc, #160]	@ (80007d4 <main+0xec>)
 8000734:	f004 fcd9 	bl	80050ea <HAL_UART_Receive_IT>

  // Test data to write to flash
      uint8_t write_data[16] = "Hello, W25QXX!";
 8000738:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <main+0xf0>)
 800073a:	f107 0410 	add.w	r4, r7, #16
 800073e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000740:	c407      	stmia	r4!, {r0, r1, r2}
 8000742:	8023      	strh	r3, [r4, #0]
 8000744:	3402      	adds	r4, #2
 8000746:	0c1b      	lsrs	r3, r3, #16
 8000748:	7023      	strb	r3, [r4, #0]
 800074a:	2300      	movs	r3, #0
 800074c:	77fb      	strb	r3, [r7, #31]
      uint8_t read_data[16] = {0};
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
      ONBOARD_LED_OFF();
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000762:	481e      	ldr	r0, [pc, #120]	@ (80007dc <main+0xf4>)
 8000764:	f001 f83c 	bl	80017e0 <HAL_GPIO_WritePin>

      // Write data to address 0x000000
      printf("\n SPI FLASH DATA WRITE STARTED");
 8000768:	481d      	ldr	r0, [pc, #116]	@ (80007e0 <main+0xf8>)
 800076a:	f00b f8d5 	bl	800b918 <iprintf>
      W25QXX_WriteData(0x000000, write_data, sizeof(write_data));
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	2210      	movs	r2, #16
 8000774:	4619      	mov	r1, r3
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ff40 	bl	80005fc <W25QXX_WriteData>
      printf("\n SPI FLASH DATA WRITE COMPLETED");
 800077c:	4819      	ldr	r0, [pc, #100]	@ (80007e4 <main+0xfc>)
 800077e:	f00b f8cb 	bl	800b918 <iprintf>

      // Read data back from address 0x000000
      printf("\n SPI FLASH DATA READ STARTED");
 8000782:	4819      	ldr	r0, [pc, #100]	@ (80007e8 <main+0x100>)
 8000784:	f00b f8c8 	bl	800b918 <iprintf>
      W25QXX_ReadData(0x000000, read_data, sizeof(read_data));
 8000788:	463b      	mov	r3, r7
 800078a:	2210      	movs	r2, #16
 800078c:	4619      	mov	r1, r3
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ff74 	bl	800067c <W25QXX_ReadData>
      printf("\n SPI FLASH DATA READ COMPLETED");
 8000794:	4815      	ldr	r0, [pc, #84]	@ (80007ec <main+0x104>)
 8000796:	f00b f8bf 	bl	800b918 <iprintf>
//      for(uint8_t i = 0; i < 16;i++)
//      {
//          printf("%c", read_data[i]);
//      }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800079a:	f00a fc41 	bl	800b020 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if ((MX_USB_HOST_App_state() == APPLICATION_READY) && usb_exp_disk)
 800079e:	f00a fc0d 	bl	800afbc <MX_USB_HOST_App_state>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d1f8      	bne.n	800079a <main+0xb2>
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <main+0x108>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0f4      	beq.n	800079a <main+0xb2>
    {
      usb_exp_disk = 0;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <main+0x108>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
      printf("\n USB DETECTED");
 80007b6:	480f      	ldr	r0, [pc, #60]	@ (80007f4 <main+0x10c>)
 80007b8:	f00b f8ae 	bl	800b918 <iprintf>
    MX_USB_HOST_Process();
 80007bc:	e7ed      	b.n	800079a <main+0xb2>
 80007be:	bf00      	nop
 80007c0:	20000208 	.word	0x20000208
 80007c4:	2000020c 	.word	0x2000020c
 80007c8:	0800c4cc 	.word	0x0800c4cc
 80007cc:	20000190 	.word	0x20000190
 80007d0:	20000100 	.word	0x20000100
 80007d4:	20000148 	.word	0x20000148
 80007d8:	0800c584 	.word	0x0800c584
 80007dc:	40020800 	.word	0x40020800
 80007e0:	0800c4f0 	.word	0x0800c4f0
 80007e4:	0800c510 	.word	0x0800c510
 80007e8:	0800c534 	.word	0x0800c534
 80007ec:	0800c554 	.word	0x0800c554
 80007f0:	20000001 	.word	0x20000001
 80007f4:	0800c574 	.word	0x0800c574

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	@ 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2230      	movs	r2, #48	@ 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00b f8db 	bl	800b9c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a27      	ldr	r2, [pc, #156]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <SystemClock_Config+0xcc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <SystemClock_Config+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000844:	4a20      	ldr	r2, [pc, #128]	@ (80008c8 <SystemClock_Config+0xd0>)
 8000846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800086c:	230f      	movs	r3, #15
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000870:	2390      	movs	r3, #144	@ 0x90
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000874:	2304      	movs	r3, #4
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000878:	2305      	movs	r3, #5
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4618      	mov	r0, r3
 8000882:	f003 f92d 	bl	8003ae0 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800088c:	f000 f99c 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 fb8f 	bl	8003fd0 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008b8:	f000 f986 	bl	8000bc8 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3750      	adds	r7, #80	@ 0x50
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	@ (8000934 <MX_SPI1_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000900:	2220      	movs	r2, #32
 8000902:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000918:	220a      	movs	r2, #10
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_SPI1_Init+0x64>)
 800091e:	f003 fd37 	bl	8004390 <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 f94e 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000a8 	.word	0x200000a8
 8000934:	40013000 	.word	0x40013000

08000938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <MX_USART1_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_USART1_UART_Init+0x4c>)
 8000970:	f004 fae0 	bl	8004f34 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f925 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000100 	.word	0x20000100
 8000988:	40011000 	.word	0x40011000

0800098c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_USART2_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009c4:	f004 fab6 	bl	8004f34 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f8fb 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000148 	.word	0x20000148
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b34      	ldr	r3, [pc, #208]	@ (8000acc <MX_GPIO_Init+0xec>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a33      	ldr	r2, [pc, #204]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a25      	ldr	r2, [pc, #148]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a50:	481f      	ldr	r0, [pc, #124]	@ (8000ad0 <MX_GPIO_Init+0xf0>)
 8000a52:	f000 fec5 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2110      	movs	r1, #16
 8000a5a:	481e      	ldr	r0, [pc, #120]	@ (8000ad4 <MX_GPIO_Init+0xf4>)
 8000a5c:	f000 fec0 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OnBoardLED_Pin */
  GPIO_InitStruct.Pin = OnBoardLED_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OnBoardLED_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4815      	ldr	r0, [pc, #84]	@ (8000ad0 <MX_GPIO_Init+0xf0>)
 8000a7a:	f000 fd15 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RainGuagePulseInput_Pin */
  GPIO_InitStruct.Pin = RainGuagePulseInput_Pin;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RainGuagePulseInput_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	4810      	ldr	r0, [pc, #64]	@ (8000ad4 <MX_GPIO_Init+0xf4>)
 8000a94:	f000 fd08 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <MX_GPIO_Init+0xf4>)
 8000ab0:	f000 fcfa 	bl	80014a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2007      	movs	r0, #7
 8000aba:	f000 fc2c 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f000 fc45 	bl	800134e <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <HAL_UART_RxCpltCallback>:
   @param  UartHandle: UART handle.
   @note   This callback executes once defined bytes of reception completed
   @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
//	  if (UartHandle->Instance == USART1)
//	  {
////		    HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
//	  }
	  if (UartHandle->Instance == USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b14 <HAL_UART_RxCpltCallback+0x3c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d10f      	bne.n	8000b0a <HAL_UART_RxCpltCallback+0x32>
	  {
		    HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	490a      	ldr	r1, [pc, #40]	@ (8000b18 <HAL_UART_RxCpltCallback+0x40>)
 8000aee:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <HAL_UART_RxCpltCallback+0x44>)
 8000af0:	f004 fafb 	bl	80050ea <HAL_UART_Receive_IT>
		    g_buff[wr_ptr++] = aRxBuffer;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_UART_RxCpltCallback+0x48>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	b2d1      	uxtb	r1, r2
 8000afc:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_UART_RxCpltCallback+0x48>)
 8000afe:	7011      	strb	r1, [r2, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_UART_RxCpltCallback+0x40>)
 8000b04:	7819      	ldrb	r1, [r3, #0]
 8000b06:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <HAL_UART_RxCpltCallback+0x4c>)
 8000b08:	5499      	strb	r1, [r3, r2]
//		    printf("%c", aRxBuffer);
	  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400
 8000b18:	20000190 	.word	0x20000190
 8000b1c:	20000148 	.word	0x20000148
 8000b20:	200001f8 	.word	0x200001f8
 8000b24:	20000194 	.word	0x20000194

08000b28 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	  if (UartHandle->Instance == USART1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a09      	ldr	r2, [pc, #36]	@ (8000b5c <HAL_UART_TxCpltCallback+0x34>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d102      	bne.n	8000b40 <HAL_UART_TxCpltCallback+0x18>
	  {
	    /* Set transmission flag: transfer complete */
		  SerialTxReady = SET;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_UART_TxCpltCallback+0x38>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
	  }
	  if (UartHandle->Instance == USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_UART_TxCpltCallback+0x3c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d102      	bne.n	8000b50 <HAL_UART_TxCpltCallback+0x28>
	  {
	    /* Set transmission flag: transfer complete */
		  ModemTxReady = SET;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_UART_TxCpltCallback+0x40>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
	  }
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	20000191 	.word	0x20000191
 8000b64:	40004400 	.word	0x40004400
 8000b68:	20000000 	.word	0x20000000

08000b6c <HAL_GPIO_EXTI_Callback>:
   @brief EXTI line detection callbacks
   @param GPIO_Pin: Specifies the pins connected EXTI line
   @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == RainGuagePulseInput_Pin)
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d10b      	bne.n	8000b94 <HAL_GPIO_EXTI_Callback+0x28>
  {
    if (HAL_GPIO_ReadPin(RainGuagePulseInput_GPIO_Port, RainGuagePulseInput_Pin)
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x30>)
 8000b80:	f000 fe16 	bl	80017b0 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d104      	bne.n	8000b94 <HAL_GPIO_EXTI_Callback+0x28>
         == GPIO_PIN_SET)
    {
    	HAL_GPIO_TogglePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin);
 8000b8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b90:	f000 fe3f 	bl	8001812 <HAL_GPIO_TogglePin>
    }
  }
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <__io_putchar>:
   @brief  Retargets the C library APP_DEBUG_STR function to the USART.
   @param  None
   @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0XFFFF);
 8000bac:	1d39      	adds	r1, r7, #4
 8000bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <__io_putchar+0x20>)
 8000bb6:	f004 fa0d 	bl	8004fd4 <HAL_UART_Transmit>
  return ch;
 8000bba:	687b      	ldr	r3, [r7, #4]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000100 	.word	0x20000100

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	@ (8000ca8 <HAL_SPI_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	23e0      	movs	r3, #224	@ 0xe0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <HAL_SPI_MspInit+0x8c>)
 8000c9a:	f000 fc05 	bl	80014a8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40013000 	.word	0x40013000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8000dbc <HAL_UART_MspInit+0x108>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d135      	bne.n	8000d42 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	4b39      	ldr	r3, [pc, #228]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a38      	ldr	r2, [pc, #224]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000ce0:	f043 0310 	orr.w	r3, r3, #16
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b36      	ldr	r3, [pc, #216]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	4b32      	ldr	r3, [pc, #200]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a31      	ldr	r2, [pc, #196]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_Tx_Pin|MODEM_Rx_Pin;
 8000d0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d20:	2307      	movs	r3, #7
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4826      	ldr	r0, [pc, #152]	@ (8000dc4 <HAL_UART_MspInit+0x110>)
 8000d2c:	f000 fbbc 	bl	80014a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2025      	movs	r0, #37	@ 0x25
 8000d36:	f000 faee 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d3a:	2025      	movs	r0, #37	@ 0x25
 8000d3c:	f000 fb07 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d40:	e038      	b.n	8000db4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a20      	ldr	r2, [pc, #128]	@ (8000dc8 <HAL_UART_MspInit+0x114>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d133      	bne.n	8000db4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d54:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5c:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a13      	ldr	r2, [pc, #76]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_UART_MspInit+0x10c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERIAL_Tx_Pin|SERIAL_Rx_Pin;
 8000d84:	230c      	movs	r3, #12
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d94:	2307      	movs	r3, #7
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4809      	ldr	r0, [pc, #36]	@ (8000dc4 <HAL_UART_MspInit+0x110>)
 8000da0:	f000 fb82 	bl	80014a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2026      	movs	r0, #38	@ 0x26
 8000daa:	f000 fab4 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dae:	2026      	movs	r0, #38	@ 0x26
 8000db0:	f000 facd 	bl	800134e <HAL_NVIC_EnableIRQ>
}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	@ 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40004400 	.word	0x40004400

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 f959 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <USART1_IRQHandler+0x10>)
 8000e32:	f004 f97f 	bl	8005134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000100 	.word	0x20000100

08000e40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <USART2_IRQHandler+0x10>)
 8000e46:	f004 f975 	bl	8005134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000148 	.word	0x20000148

08000e54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <OTG_FS_IRQHandler+0x10>)
 8000e5a:	f000 ffed 	bl	8001e38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20001654 	.word	0x20001654

08000e68 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f000 fceb 	bl	8001848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	e00a      	b.n	8000e9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e88:	f3af 8000 	nop.w
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	60ba      	str	r2, [r7, #8]
 8000e94:	b2ca      	uxtb	r2, r1
 8000e96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	dbf0      	blt.n	8000e88 <_read+0x12>
  }

  return len;
 8000ea6:	687b      	ldr	r3, [r7, #4]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e009      	b.n	8000ed6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	60ba      	str	r2, [r7, #8]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe6a 	bl	8000ba4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbf1      	blt.n	8000ec2 <_write+0x12>
  }
  return len;
 8000ede:	687b      	ldr	r3, [r7, #4]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_close>:

int _close(int file)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f10:	605a      	str	r2, [r3, #4]
  return 0;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_isatty>:

int _isatty(int file)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f00a fd7e 	bl	800ba80 <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20010000 	.word	0x20010000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	200001fc 	.word	0x200001fc
 8000fb8:	20001b80 	.word	0x20001b80

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fe4:	f7ff ffea 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f00a fd3d 	bl	800ba8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fb69 	bl	80006e8 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001024:	0800c648 	.word	0x0800c648
  ldr r2, =_sbss
 8001028:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800102c:	20001b80 	.word	0x20001b80

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f94f 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fdb4 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f967 	bl	800136a <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f92f 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000004 	.word	0x20000004
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	20000008 	.word	0x20000008

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	20000200 	.word	0x20000200

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000200 	.word	0x20000200

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000000c 	.word	0x2000000c

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	@ (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	@ (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff3e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff feb6 	bl	8001100 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d008      	beq.n	80013b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e052      	b.n	800145a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0216 	bic.w	r2, r2, #22
 80013c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <HAL_DMA_Abort+0x62>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0208 	bic.w	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001404:	e013      	b.n	800142e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001406:	f7ff fe7b 	bl	8001100 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b05      	cmp	r3, #5
 8001412:	d90c      	bls.n	800142e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2220      	movs	r2, #32
 8001418:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e015      	b.n	800145a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e4      	bne.n	8001406 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001440:	223f      	movs	r2, #63	@ 0x3f
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d004      	beq.n	8001480 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e00c      	b.n	800149a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2205      	movs	r2, #5
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	@ 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e159      	b.n	8001778 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c4:	2201      	movs	r2, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	f040 8148 	bne.w	8001772 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d005      	beq.n	80014fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d130      	bne.n	800155c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 0201 	and.w	r2, r3, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b03      	cmp	r3, #3
 8001566:	d017      	beq.n	8001598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d123      	bne.n	80015ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	69b9      	ldr	r1, [r7, #24]
 80015e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0203 	and.w	r2, r3, #3
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80a2 	beq.w	8001772 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b57      	ldr	r3, [pc, #348]	@ (8001790 <HAL_GPIO_Init+0x2e8>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4a56      	ldr	r2, [pc, #344]	@ (8001790 <HAL_GPIO_Init+0x2e8>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163c:	6453      	str	r3, [r2, #68]	@ 0x44
 800163e:	4b54      	ldr	r3, [pc, #336]	@ (8001790 <HAL_GPIO_Init+0x2e8>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800164a:	4a52      	ldr	r2, [pc, #328]	@ (8001794 <HAL_GPIO_Init+0x2ec>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a49      	ldr	r2, [pc, #292]	@ (8001798 <HAL_GPIO_Init+0x2f0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x202>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a48      	ldr	r2, [pc, #288]	@ (800179c <HAL_GPIO_Init+0x2f4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x1fe>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a47      	ldr	r2, [pc, #284]	@ (80017a0 <HAL_GPIO_Init+0x2f8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x1fa>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a46      	ldr	r2, [pc, #280]	@ (80017a4 <HAL_GPIO_Init+0x2fc>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x1f6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a45      	ldr	r2, [pc, #276]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x1f2>
 8001696:	2304      	movs	r3, #4
 8001698:	e008      	b.n	80016ac <HAL_GPIO_Init+0x204>
 800169a:	2307      	movs	r3, #7
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x204>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x204>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x204>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x204>
 80016aa:	2300      	movs	r3, #0
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f002 0203 	and.w	r2, r2, #3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	@ (8001794 <HAL_GPIO_Init+0x2ec>)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b38      	ldr	r3, [pc, #224]	@ (80017ac <HAL_GPIO_Init+0x304>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a2f      	ldr	r2, [pc, #188]	@ (80017ac <HAL_GPIO_Init+0x304>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <HAL_GPIO_Init+0x304>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a24      	ldr	r2, [pc, #144]	@ (80017ac <HAL_GPIO_Init+0x304>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <HAL_GPIO_Init+0x304>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001742:	4a1a      	ldr	r2, [pc, #104]	@ (80017ac <HAL_GPIO_Init+0x304>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <HAL_GPIO_Init+0x304>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <HAL_GPIO_Init+0x304>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2b0f      	cmp	r3, #15
 800177c:	f67f aea2 	bls.w	80014c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40013800 	.word	0x40013800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40013c00 	.word	0x40013c00

080017b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017fc:	e003      	b.n	8001806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001824:	887a      	ldrh	r2, [r7, #2]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	041a      	lsls	r2, r3, #16
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43d9      	mvns	r1, r3
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	400b      	ands	r3, r1
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	619a      	str	r2, [r3, #24]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f980 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40013c00 	.word	0x40013c00

08001878 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af02      	add	r7, sp, #8
 800187e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e059      	b.n	800193e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d106      	bne.n	80018aa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f009 fc0b 	bl	800b0c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018b8:	d102      	bne.n	80018c0 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fbf6 	bl	80060b6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7c1a      	ldrb	r2, [r3, #16]
 80018d2:	f88d 2000 	strb.w	r2, [sp]
 80018d6:	3304      	adds	r3, #4
 80018d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018da:	f004 fb77 	bl	8005fcc <USB_CoreInit>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e026      	b.n	800193e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 fbee 	bl	80060d8 <USB_SetCurrentMode>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2202      	movs	r2, #2
 8001906:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e017      	b.n	800193e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7c1a      	ldrb	r2, [r3, #16]
 8001916:	f88d 2000 	strb.w	r2, [sp]
 800191a:	3304      	adds	r3, #4
 800191c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191e:	f004 fd91 	bl	8006444 <USB_HostInit>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e004      	b.n	800193e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001946:	b590      	push	{r4, r7, lr}
 8001948:	b08b      	sub	sp, #44	@ 0x2c
 800194a:	af04      	add	r7, sp, #16
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	4608      	mov	r0, r1
 8001950:	4611      	mov	r1, r2
 8001952:	461a      	mov	r2, r3
 8001954:	4603      	mov	r3, r0
 8001956:	70fb      	strb	r3, [r7, #3]
 8001958:	460b      	mov	r3, r1
 800195a:	70bb      	strb	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001960:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001962:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_HCD_HC_Init+0x2c>
 800196e:	2302      	movs	r3, #2
 8001970:	e09d      	b.n	8001aae <HAL_HCD_HC_Init+0x168>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	3319      	adds	r3, #25
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3314      	adds	r3, #20
 800199e:	787a      	ldrb	r2, [r7, #1]
 80019a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	3315      	adds	r3, #21
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3326      	adds	r3, #38	@ 0x26
 80019c6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	78bb      	ldrb	r3, [r7, #2]
 80019d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019d4:	b2d8      	uxtb	r0, r3
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	3316      	adds	r3, #22
 80019e4:	4602      	mov	r2, r0
 80019e6:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fbc7 	bl	8002180 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80019f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da0a      	bge.n	8001a10 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3317      	adds	r3, #23
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e009      	b.n	8001a24 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3317      	adds	r3, #23
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 fe59 	bl	80066e0 <USB_GetHostSpeed>
 8001a2e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001a30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d10b      	bne.n	8001a50 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001a38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_HCD_HC_Init+0x10a>
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d104      	bne.n	8001a50 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2bbc      	cmp	r3, #188	@ 0xbc
 8001a4a:	d901      	bls.n	8001a50 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001a4c:	23bc      	movs	r3, #188	@ 0xbc
 8001a4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3318      	adds	r3, #24
 8001a60:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	b298      	uxth	r0, r3
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3328      	adds	r3, #40	@ 0x28
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	787c      	ldrb	r4, [r7, #1]
 8001a88:	78ba      	ldrb	r2, [r7, #2]
 8001a8a:	78f9      	ldrb	r1, [r7, #3]
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	4623      	mov	r3, r4
 8001a9c:	f004 fe48 	bl	8006730 <USB_HC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd90      	pop	{r4, r7, pc}

08001ab6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_HCD_HC_Halt+0x1e>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e00f      	b.n	8001af4 <HAL_HCD_HC_Halt+0x3e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f005 f98e 	bl	8006e06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	70fb      	strb	r3, [r7, #3]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70bb      	strb	r3, [r7, #2]
 8001b12:	4613      	mov	r3, r2
 8001b14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	3317      	adds	r3, #23
 8001b26:	78ba      	ldrb	r2, [r7, #2]
 8001b28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	3326      	adds	r3, #38	@ 0x26
 8001b3a:	787a      	ldrb	r2, [r7, #1]
 8001b3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b3e:	7c3b      	ldrb	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d114      	bne.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	332a      	adds	r3, #42	@ 0x2a
 8001b54:	2203      	movs	r2, #3
 8001b56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	3319      	adds	r3, #25
 8001b68:	7f3a      	ldrb	r2, [r7, #28]
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	e009      	b.n	8001b82 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	332a      	adds	r3, #42	@ 0x2a
 8001b7e:	2202      	movs	r2, #2
 8001b80:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b82:	787b      	ldrb	r3, [r7, #1]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	f200 8102 	bhi.w	8001d8e <HAL_HCD_HC_SubmitRequest+0x292>
 8001b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b90 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b90:	08001ba1 	.word	0x08001ba1
 8001b94:	08001d79 	.word	0x08001d79
 8001b98:	08001c65 	.word	0x08001c65
 8001b9c:	08001cef 	.word	0x08001cef
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001ba0:	7c3b      	ldrb	r3, [r7, #16]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	f040 80f5 	bne.w	8001d92 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001ba8:	78bb      	ldrb	r3, [r7, #2]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d12d      	bne.n	8001c0a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001bae:	8b3b      	ldrh	r3, [r7, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	333d      	adds	r3, #61	@ 0x3d
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	333d      	adds	r3, #61	@ 0x3d
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	332a      	adds	r3, #42	@ 0x2a
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001bf2:	e0ce      	b.n	8001d92 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	332a      	adds	r3, #42	@ 0x2a
 8001c04:	2202      	movs	r2, #2
 8001c06:	701a      	strb	r2, [r3, #0]
      break;
 8001c08:	e0c3      	b.n	8001d92 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	331a      	adds	r3, #26
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	f040 80b8 	bne.w	8001d92 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	333c      	adds	r3, #60	@ 0x3c
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	332a      	adds	r3, #42	@ 0x2a
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
      break;
 8001c4c:	e0a1      	b.n	8001d92 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	332a      	adds	r3, #42	@ 0x2a
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
      break;
 8001c62:	e096      	b.n	8001d92 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c64:	78bb      	ldrb	r3, [r7, #2]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d120      	bne.n	8001cac <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	333d      	adds	r3, #61	@ 0x3d
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10a      	bne.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	332a      	adds	r3, #42	@ 0x2a
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c94:	e07e      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	332a      	adds	r3, #42	@ 0x2a
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	701a      	strb	r2, [r3, #0]
      break;
 8001caa:	e073      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	333c      	adds	r3, #60	@ 0x3c
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	332a      	adds	r3, #42	@ 0x2a
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
      break;
 8001cd6:	e05d      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	332a      	adds	r3, #42	@ 0x2a
 8001ce8:	2202      	movs	r2, #2
 8001cea:	701a      	strb	r2, [r3, #0]
      break;
 8001cec:	e052      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cee:	78bb      	ldrb	r3, [r7, #2]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d120      	bne.n	8001d36 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	333d      	adds	r3, #61	@ 0x3d
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	332a      	adds	r3, #42	@ 0x2a
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d1e:	e039      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	332a      	adds	r3, #42	@ 0x2a
 8001d30:	2202      	movs	r2, #2
 8001d32:	701a      	strb	r2, [r3, #0]
      break;
 8001d34:	e02e      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d36:	78fa      	ldrb	r2, [r7, #3]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	333c      	adds	r3, #60	@ 0x3c
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	332a      	adds	r3, #42	@ 0x2a
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
      break;
 8001d60:	e018      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	332a      	adds	r3, #42	@ 0x2a
 8001d72:	2202      	movs	r2, #2
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	e00d      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	332a      	adds	r3, #42	@ 0x2a
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
      break;
 8001d8c:	e002      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001d8e:	bf00      	nop
 8001d90:	e000      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001d92:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	332c      	adds	r3, #44	@ 0x2c
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	8b39      	ldrh	r1, [r7, #24]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4403      	add	r3, r0
 8001db8:	3334      	adds	r3, #52	@ 0x34
 8001dba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	334c      	adds	r3, #76	@ 0x4c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3338      	adds	r3, #56	@ 0x38
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3315      	adds	r3, #21
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	334d      	adds	r3, #77	@ 0x4d
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	4613      	mov	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3310      	adds	r3, #16
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	1d19      	adds	r1, r3, #4
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	799b      	ldrb	r3, [r3, #6]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f004 fd98 	bl	800695c <USB_HC_StartXfer>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop

08001e38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 fab8 	bl	80063c4 <USB_GetMode>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 80fb 	bne.w	8002052 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 fa7b 	bl	800635c <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80f1 	beq.w	8002050 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 fa72 	bl	800635c <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e82:	d104      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fa62 	bl	800635c <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ea2:	d104      	bne.n	8001eae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001eac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fa52 	bl	800635c <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ebe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ec2:	d104      	bne.n	8001ece <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ecc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 fa42 	bl	800635c <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d103      	bne.n	8001eea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 fa34 	bl	800635c <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001efe:	d120      	bne.n	8001f42 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d113      	bne.n	8001f42 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	6938      	ldr	r0, [r7, #16]
 8001f1e:	f004 f927 	bl	8006170 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f22:	6938      	ldr	r0, [r7, #16]
 8001f24:	f004 f956 	bl	80061d4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7a5b      	ldrb	r3, [r3, #9]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d105      	bne.n	8001f3c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fb32 	bl	80065a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f009 f92f 	bl	800b1a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 fa08 	bl	800635c <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f56:	d102      	bne.n	8001f5e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f001 fd4d 	bl	80039f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f9fa 	bl	800635c <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d106      	bne.n	8001f80 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f009 f8f8 	bl	800b168 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 f9e9 	bl	800635c <USB_ReadInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f94:	d139      	bne.n	800200a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 ff22 	bl	8006de4 <USB_HC_ReadInterrupt>
 8001fa0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e025      	b.n	8001ff4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d018      	beq.n	8001fee <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f905 	bl	80021ea <HCD_HC_IN_IRQHandler>
 8001fe0:	e005      	b.n	8001fee <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 ff67 	bl	8002ebc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	795b      	ldrb	r3, [r3, #5]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d3d3      	bcc.n	8001fa8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 f9a4 	bl	800635c <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b10      	cmp	r3, #16
 800201c:	d101      	bne.n	8002022 <HAL_HCD_IRQHandler+0x1ea>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_HCD_IRQHandler+0x1ec>
 8002022:	2300      	movs	r3, #0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d014      	beq.n	8002052 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0210 	bic.w	r2, r2, #16
 8002036:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f001 fbfe 	bl	800383a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0210 	orr.w	r2, r2, #16
 800204c:	619a      	str	r2, [r3, #24]
 800204e:	e000      	b.n	8002052 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002050:	bf00      	nop
    }
  }
}
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_HCD_Start+0x16>
 800206a:	2302      	movs	r3, #2
 800206c:	e013      	b.n	8002096 <HAL_HCD_Start+0x3e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f004 faf6 	bl	800666e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f004 f804 	bl	8006094 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_HCD_Stop+0x16>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e00d      	b.n	80020d0 <HAL_HCD_Stop+0x32>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 ffc0 	bl	8007046 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 fa98 	bl	800661a <USB_ResetPort>
 80020ea:	4603      	mov	r3, r0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	334c      	adds	r3, #76	@ 0x4c
 8002110:	781b      	ldrb	r3, [r3, #0]
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3338      	adds	r3, #56	@ 0x38
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f004 fada 	bl	800670e <USB_GetCurrentFrame>
 800215a:	4603      	mov	r3, r0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fab5 	bl	80066e0 <USB_GetHostSpeed>
 8002176:	4603      	mov	r3, r0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	331a      	adds	r3, #26
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	331b      	adds	r3, #27
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3325      	adds	r3, #37	@ 0x25
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	3324      	adds	r3, #36	@ 0x24
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f004 f8ba 	bl	8006382 <USB_ReadChInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11a      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	2304      	movs	r3, #4
 8002228:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	334d      	adds	r3, #77	@ 0x4d
 800223a:	2207      	movs	r2, #7
 800223c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f004 fddd 	bl	8006e06 <USB_HC_Halt>
 800224c:	e09e      	b.n	800238c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f893 	bl	8006382 <USB_ReadChInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002266:	d11b      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800227a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334d      	adds	r3, #77	@ 0x4d
 800228c:	2208      	movs	r2, #8
 800228e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fdb4 	bl	8006e06 <USB_HC_Halt>
 800229e:	e075      	b.n	800238c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f004 f86a 	bl	8006382 <USB_ReadChInterrupts>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d11a      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	2308      	movs	r3, #8
 80022c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	334d      	adds	r3, #77	@ 0x4d
 80022da:	2206      	movs	r2, #6
 80022dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 fd8d 	bl	8006e06 <USB_HC_Halt>
 80022ec:	e04e      	b.n	800238c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f004 f843 	bl	8006382 <USB_ReadChInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002306:	d11b      	bne.n	8002340 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002314:	461a      	mov	r2, r3
 8002316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800231a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	334d      	adds	r3, #77	@ 0x4d
 800232c:	2209      	movs	r2, #9
 800232e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f004 fd64 	bl	8006e06 <USB_HC_Halt>
 800233e:	e025      	b.n	800238c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f004 f81a 	bl	8006382 <USB_ReadChInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002354:	2b80      	cmp	r3, #128	@ 0x80
 8002356:	d119      	bne.n	800238c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002364:	461a      	mov	r2, r3
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	334d      	adds	r3, #77	@ 0x4d
 800237a:	2207      	movs	r2, #7
 800237c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f004 fd3d 	bl	8006e06 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f003 fff4 	bl	8006382 <USB_ReadChInterrupts>
 800239a:	4603      	mov	r3, r0
 800239c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a4:	d112      	bne.n	80023cc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f004 fd29 	bl	8006e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023c0:	461a      	mov	r2, r3
 80023c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023c6:	6093      	str	r3, [r2, #8]
 80023c8:	f000 bd75 	b.w	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 ffd4 	bl	8006382 <USB_ReadChInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	f040 8128 	bne.w	8002636 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	2320      	movs	r3, #32
 80023f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	331b      	adds	r3, #27
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d119      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	331b      	adds	r3, #27
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	0151      	lsls	r1, r2, #5
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	440a      	add	r2, r1
 8002438:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800243c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002440:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	799b      	ldrb	r3, [r3, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01b      	beq.n	8002482 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3330      	adds	r3, #48	@ 0x30
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	1ac9      	subs	r1, r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4403      	add	r3, r0
 800247e:	3338      	adds	r3, #56	@ 0x38
 8002480:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	334d      	adds	r3, #77	@ 0x4d
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3344      	adds	r3, #68	@ 0x44
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	2301      	movs	r3, #1
 80024ba:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3326      	adds	r3, #38	@ 0x26
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3326      	adds	r3, #38	@ 0x26
 80024e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d110      	bne.n	800250a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f004 fc88 	bl	8006e06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	2310      	movs	r3, #16
 8002506:	6093      	str	r3, [r2, #8]
 8002508:	e03d      	b.n	8002586 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3326      	adds	r3, #38	@ 0x26
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d00a      	beq.n	8002536 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3326      	adds	r3, #38	@ 0x26
 8002530:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002532:	2b01      	cmp	r3, #1
 8002534:	d127      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	0151      	lsls	r1, r2, #5
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	440a      	add	r2, r1
 800254c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002550:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002554:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	334c      	adds	r3, #76	@ 0x4c
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	334c      	adds	r3, #76	@ 0x4c
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f008 fe1b 	bl	800b1bc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	799b      	ldrb	r3, [r3, #6]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d13b      	bne.n	8002606 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	3338      	adds	r3, #56	@ 0x38
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4403      	add	r3, r0
 80025ae:	3328      	adds	r3, #40	@ 0x28
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	440b      	add	r3, r1
 80025b4:	1e59      	subs	r1, r3, #1
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4403      	add	r3, r0
 80025c4:	3328      	adds	r3, #40	@ 0x28
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8470 	beq.w	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	333c      	adds	r3, #60	@ 0x3c
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2d8      	uxtb	r0, r3
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	333c      	adds	r3, #60	@ 0x3c
 80025fe:	4602      	mov	r2, r0
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	f000 bc58 	b.w	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	333c      	adds	r3, #60	@ 0x3c
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	f083 0301 	eor.w	r3, r3, #1
 800261e:	b2d8      	uxtb	r0, r3
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	333c      	adds	r3, #60	@ 0x3c
 800262e:	4602      	mov	r2, r0
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	f000 bc40 	b.w	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f003 fe9f 	bl	8006382 <USB_ReadChInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b20      	cmp	r3, #32
 800264c:	d131      	bne.n	80026b2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2320      	movs	r3, #32
 800265e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	331a      	adds	r3, #26
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	f040 841f 	bne.w	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	331b      	adds	r3, #27
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	334d      	adds	r3, #77	@ 0x4d
 800269c:	2203      	movs	r2, #3
 800269e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 fbac 	bl	8006e06 <USB_HC_Halt>
 80026ae:	f000 bc02 	b.w	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 fe61 	bl	8006382 <USB_ReadChInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	f040 8305 	bne.w	8002cd6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	2302      	movs	r3, #2
 80026dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	334d      	adds	r3, #77	@ 0x4d
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d114      	bne.n	800271e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	334d      	adds	r3, #77	@ 0x4d
 8002704:	2202      	movs	r2, #2
 8002706:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	334c      	adds	r3, #76	@ 0x4c
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e2cc      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	334d      	adds	r3, #77	@ 0x4d
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b06      	cmp	r3, #6
 8002732:	d114      	bne.n	800275e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	334d      	adds	r3, #77	@ 0x4d
 8002744:	2202      	movs	r2, #2
 8002746:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334c      	adds	r3, #76	@ 0x4c
 8002758:	2205      	movs	r2, #5
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e2ac      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	334d      	adds	r3, #77	@ 0x4d
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b07      	cmp	r3, #7
 8002772:	d00b      	beq.n	800278c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	334d      	adds	r3, #77	@ 0x4d
 8002784:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002786:	2b09      	cmp	r3, #9
 8002788:	f040 80a6 	bne.w	80028d8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334d      	adds	r3, #77	@ 0x4d
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	3344      	adds	r3, #68	@ 0x44
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1c59      	adds	r1, r3, #1
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4403      	add	r3, r0
 80027c0:	3344      	adds	r3, #68	@ 0x44
 80027c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3344      	adds	r3, #68	@ 0x44
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d943      	bls.n	8002862 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3344      	adds	r3, #68	@ 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	331a      	adds	r3, #26
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d123      	bne.n	800284c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	331b      	adds	r3, #27
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	331c      	adds	r3, #28
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	0151      	lsls	r1, r2, #5
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	440a      	add	r2, r1
 8002842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	334c      	adds	r3, #76	@ 0x4c
 800285c:	2204      	movs	r2, #4
 800285e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002860:	e229      	b.n	8002cb6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	334c      	adds	r3, #76	@ 0x4c
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3326      	adds	r3, #38	@ 0x26
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3326      	adds	r3, #38	@ 0x26
 800289c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800289e:	2b02      	cmp	r3, #2
 80028a0:	f040 8209 	bne.w	8002cb6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028d6:	e1ee      	b.n	8002cb6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	334d      	adds	r3, #77	@ 0x4d
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	f040 80c8 	bne.w	8002a80 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	334d      	adds	r3, #77	@ 0x4d
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	331b      	adds	r3, #27
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	f040 81ce 	bne.w	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3326      	adds	r3, #38	@ 0x26
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d16b      	bne.n	8002a0a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3348      	adds	r3, #72	@ 0x48
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	1c59      	adds	r1, r3, #1
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4403      	add	r3, r0
 8002952:	3348      	adds	r3, #72	@ 0x48
 8002954:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3348      	adds	r3, #72	@ 0x48
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d943      	bls.n	80029f4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3348      	adds	r3, #72	@ 0x48
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	331b      	adds	r3, #27
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3344      	adds	r3, #68	@ 0x44
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d809      	bhi.n	80029be <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	331c      	adds	r3, #28
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	0151      	lsls	r1, r2, #5
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	440a      	add	r2, r1
 80029d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029dc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	334c      	adds	r3, #76	@ 0x4c
 80029ee:	2204      	movs	r2, #4
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e014      	b.n	8002a1e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	334c      	adds	r3, #76	@ 0x4c
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e009      	b.n	8002a1e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	334c      	adds	r3, #76	@ 0x4c
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3326      	adds	r3, #38	@ 0x26
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3326      	adds	r3, #38	@ 0x26
 8002a44:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	f040 8136 	bne.w	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a62:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a6a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e11b      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334d      	adds	r3, #77	@ 0x4d
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	f040 8081 	bne.w	8002b9a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	334d      	adds	r3, #77	@ 0x4d
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	331b      	adds	r3, #27
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	f040 80fa 	bne.w	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334c      	adds	r3, #76	@ 0x4c
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	0151      	lsls	r1, r2, #5
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	440a      	add	r2, r1
 8002aee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b16:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	0151      	lsls	r1, r2, #5
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b32:	f023 0320 	bic.w	r3, r3, #32
 8002b36:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3326      	adds	r3, #38	@ 0x26
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3326      	adds	r3, #38	@ 0x26
 8002b5e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f040 80a9 	bne.w	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b7c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b84:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e08e      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	334d      	adds	r3, #77	@ 0x4d
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d143      	bne.n	8002c38 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	334d      	adds	r3, #77	@ 0x4d
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334c      	adds	r3, #76	@ 0x4c
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3326      	adds	r3, #38	@ 0x26
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3326      	adds	r3, #38	@ 0x26
 8002bfe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d159      	bne.n	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c1a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c22:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c30:	461a      	mov	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e03f      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334d      	adds	r3, #77	@ 0x4d
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d126      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	334d      	adds	r3, #77	@ 0x4d
 8002c5e:	2202      	movs	r2, #2
 8002c60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3344      	adds	r3, #68	@ 0x44
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	1c59      	adds	r1, r3, #1
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4403      	add	r3, r0
 8002c82:	3344      	adds	r3, #68	@ 0x44
 8002c84:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	334c      	adds	r3, #76	@ 0x4c
 8002c96:	2204      	movs	r2, #4
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e00d      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	334d      	adds	r3, #77	@ 0x4d
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	f000 8100 	beq.w	8002eb4 <HCD_HC_IN_IRQHandler+0xcca>
 8002cb4:	e000      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cb6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	334c      	adds	r3, #76	@ 0x4c
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f008 fa74 	bl	800b1bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cd4:	e0ef      	b.n	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 fb4f 	bl	8006382 <USB_ReadChInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cea:	2b40      	cmp	r3, #64	@ 0x40
 8002cec:	d12f      	bne.n	8002d4e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2340      	movs	r3, #64	@ 0x40
 8002cfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334d      	adds	r3, #77	@ 0x4d
 8002d10:	2205      	movs	r2, #5
 8002d12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	331a      	adds	r3, #26
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3344      	adds	r3, #68	@ 0x44
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 f85d 	bl	8006e06 <USB_HC_Halt>
 8002d4c:	e0b3      	b.n	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fb13 	bl	8006382 <USB_ReadChInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	f040 80a7 	bne.w	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3326      	adds	r3, #38	@ 0x26
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d11b      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3344      	adds	r3, #68	@ 0x44
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	334d      	adds	r3, #77	@ 0x4d
 8002da2:	2204      	movs	r2, #4
 8002da4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 f829 	bl	8006e06 <USB_HC_Halt>
 8002db4:	e03f      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3326      	adds	r3, #38	@ 0x26
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3326      	adds	r3, #38	@ 0x26
 8002ddc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d129      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3344      	adds	r3, #68	@ 0x44
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	799b      	ldrb	r3, [r3, #6]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HCD_HC_IN_IRQHandler+0xc2a>
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	331b      	adds	r3, #27
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d110      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334d      	adds	r3, #77	@ 0x4d
 8002e24:	2204      	movs	r2, #4
 8002e26:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 ffe8 	bl	8006e06 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	331b      	adds	r3, #27
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d129      	bne.n	8002ea0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	331b      	adds	r3, #27
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	0151      	lsls	r1, r2, #5
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	440a      	add	r2, r1
 8002e76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	0151      	lsls	r1, r2, #5
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	440a      	add	r2, r1
 8002e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e9a:	f043 0320 	orr.w	r3, r3, #32
 8002e9e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2310      	movs	r3, #16
 8002eb0:	6093      	str	r3, [r2, #8]
 8002eb2:	e000      	b.n	8002eb6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002eb4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fa51 	bl	8006382 <USB_ReadChInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d11b      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2304      	movs	r3, #4
 8002efa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	334d      	adds	r3, #77	@ 0x4d
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 ff74 	bl	8006e06 <USB_HC_Halt>
 8002f1e:	f000 bc89 	b.w	8003834 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fa29 	bl	8006382 <USB_ReadChInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	f040 8082 	bne.w	8003040 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3319      	adds	r3, #25
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d124      	bne.n	8002fae <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3319      	adds	r3, #25
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334c      	adds	r3, #76	@ 0x4c
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	334d      	adds	r3, #77	@ 0x4d
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 ff2c 	bl	8006e06 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	331a      	adds	r3, #26
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f040 8437 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x978>
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	331b      	adds	r3, #27
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 842b 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3326      	adds	r3, #38	@ 0x26
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d009      	beq.n	8003008 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	331b      	adds	r3, #27
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	334d      	adds	r3, #77	@ 0x4d
 8003018:	2203      	movs	r2, #3
 800301a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f003 feee 	bl	8006e06 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3344      	adds	r3, #68	@ 0x44
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e3f9      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f003 f99a 	bl	8006382 <USB_ReadChInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003058:	d111      	bne.n	800307e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800306c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fec5 	bl	8006e06 <USB_HC_Halt>
 800307c:	e3da      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f003 f97b 	bl	8006382 <USB_ReadChInterrupts>
 800308c:	4603      	mov	r3, r0
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d168      	bne.n	8003168 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3344      	adds	r3, #68	@ 0x44
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 f965 	bl	8006382 <USB_ReadChInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030be:	2b40      	cmp	r3, #64	@ 0x40
 80030c0:	d112      	bne.n	80030e8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3319      	adds	r3, #25
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e2:	461a      	mov	r2, r3
 80030e4:	2340      	movs	r3, #64	@ 0x40
 80030e6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	331b      	adds	r3, #27
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d019      	beq.n	8003132 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	331b      	adds	r3, #27
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	0151      	lsls	r1, r2, #5
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	440a      	add	r2, r1
 8003128:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800312c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003130:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313e:	461a      	mov	r2, r3
 8003140:	2301      	movs	r3, #1
 8003142:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	334d      	adds	r3, #77	@ 0x4d
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f003 fe50 	bl	8006e06 <USB_HC_Halt>
 8003166:	e365      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f003 f906 	bl	8006382 <USB_ReadChInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317c:	2b40      	cmp	r3, #64	@ 0x40
 800317e:	d139      	bne.n	80031f4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334d      	adds	r3, #77	@ 0x4d
 8003190:	2205      	movs	r2, #5
 8003192:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	331a      	adds	r3, #26
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3319      	adds	r3, #25
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3344      	adds	r3, #68	@ 0x44
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 fe13 	bl	8006e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ec:	461a      	mov	r2, r3
 80031ee:	2340      	movs	r3, #64	@ 0x40
 80031f0:	6093      	str	r3, [r2, #8]
 80031f2:	e31f      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 f8c0 	bl	8006382 <USB_ReadChInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b08      	cmp	r3, #8
 800320a:	d11a      	bne.n	8003242 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	2308      	movs	r3, #8
 800321c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	334d      	adds	r3, #77	@ 0x4d
 800322e:	2206      	movs	r2, #6
 8003230:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fde3 	bl	8006e06 <USB_HC_Halt>
 8003240:	e2f8      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f003 f899 	bl	8006382 <USB_ReadChInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b10      	cmp	r3, #16
 8003258:	d144      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3344      	adds	r3, #68	@ 0x44
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334d      	adds	r3, #77	@ 0x4d
 800327e:	2204      	movs	r2, #4
 8003280:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3319      	adds	r3, #25
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d114      	bne.n	80032c2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3318      	adds	r3, #24
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3319      	adds	r3, #25
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fd9b 	bl	8006e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032dc:	461a      	mov	r2, r3
 80032de:	2310      	movs	r3, #16
 80032e0:	6093      	str	r3, [r2, #8]
 80032e2:	e2a7      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 f848 	bl	8006382 <USB_ReadChInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f8:	2b80      	cmp	r3, #128	@ 0x80
 80032fa:	f040 8083 	bne.w	8003404 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	799b      	ldrb	r3, [r3, #6]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d111      	bne.n	800332a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	334d      	adds	r3, #77	@ 0x4d
 8003316:	2207      	movs	r2, #7
 8003318:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f003 fd6f 	bl	8006e06 <USB_HC_Halt>
 8003328:	e062      	b.n	80033f0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3344      	adds	r3, #68	@ 0x44
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4403      	add	r3, r0
 800334a:	3344      	adds	r3, #68	@ 0x44
 800334c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3344      	adds	r3, #68	@ 0x44
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d922      	bls.n	80033aa <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3344      	adds	r3, #68	@ 0x44
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334c      	adds	r3, #76	@ 0x4c
 8003388:	2204      	movs	r2, #4
 800338a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	334c      	adds	r3, #76	@ 0x4c
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f007 ff0a 	bl	800b1bc <HAL_HCD_HC_NotifyURBChange_Callback>
 80033a8:	e022      	b.n	80033f0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334c      	adds	r3, #76	@ 0x4c
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033d4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033dc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	2380      	movs	r3, #128	@ 0x80
 8003400:	6093      	str	r3, [r2, #8]
 8003402:	e217      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f002 ffb8 	bl	8006382 <USB_ReadChInterrupts>
 8003412:	4603      	mov	r3, r0
 8003414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341c:	d11b      	bne.n	8003456 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334d      	adds	r3, #77	@ 0x4d
 800342e:	2209      	movs	r2, #9
 8003430:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f003 fce3 	bl	8006e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800344c:	461a      	mov	r2, r3
 800344e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003452:	6093      	str	r3, [r2, #8]
 8003454:	e1ee      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f002 ff8f 	bl	8006382 <USB_ReadChInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	f040 81df 	bne.w	800382e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	461a      	mov	r2, r3
 800347e:	2302      	movs	r3, #2
 8003480:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334d      	adds	r3, #77	@ 0x4d
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	f040 8093 	bne.w	80035c0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334d      	adds	r3, #77	@ 0x4d
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334c      	adds	r3, #76	@ 0x4c
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3326      	adds	r3, #38	@ 0x26
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d00b      	beq.n	80034f0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	3326      	adds	r3, #38	@ 0x26
 80034e8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	f040 8190 	bne.w	8003810 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	799b      	ldrb	r3, [r3, #6]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d115      	bne.n	8003524 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	333d      	adds	r3, #61	@ 0x3d
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	f083 0301 	eor.w	r3, r3, #1
 8003510:	b2d8      	uxtb	r0, r3
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	333d      	adds	r3, #61	@ 0x3d
 8003520:	4602      	mov	r2, r0
 8003522:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	799b      	ldrb	r3, [r3, #6]
 8003528:	2b01      	cmp	r3, #1
 800352a:	f040 8171 	bne.w	8003810 <HCD_HC_OUT_IRQHandler+0x954>
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3334      	adds	r3, #52	@ 0x34
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8165 	beq.w	8003810 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3334      	adds	r3, #52	@ 0x34
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4403      	add	r3, r0
 8003566:	3328      	adds	r3, #40	@ 0x28
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	440b      	add	r3, r1
 800356c:	1e59      	subs	r1, r3, #1
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4403      	add	r3, r0
 800357c:	3328      	adds	r3, #40	@ 0x28
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	fbb1 f3f3 	udiv	r3, r1, r3
 8003584:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 813f 	beq.w	8003810 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	333d      	adds	r3, #61	@ 0x3d
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	f083 0301 	eor.w	r3, r3, #1
 80035aa:	b2d8      	uxtb	r0, r3
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	333d      	adds	r3, #61	@ 0x3d
 80035ba:	4602      	mov	r2, r0
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e127      	b.n	8003810 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	334d      	adds	r3, #77	@ 0x4d
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d120      	bne.n	8003618 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334d      	adds	r3, #77	@ 0x4d
 80035e6:	2202      	movs	r2, #2
 80035e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	331b      	adds	r3, #27
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	f040 8107 	bne.w	8003810 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	334c      	adds	r3, #76	@ 0x4c
 8003612:	2202      	movs	r2, #2
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e0fb      	b.n	8003810 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334d      	adds	r3, #77	@ 0x4d
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b04      	cmp	r3, #4
 800362c:	d13a      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334d      	adds	r3, #77	@ 0x4d
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	334c      	adds	r3, #76	@ 0x4c
 8003652:	2202      	movs	r2, #2
 8003654:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	331b      	adds	r3, #27
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	f040 80d1 	bne.w	8003810 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	331b      	adds	r3, #27
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4413      	add	r3, r2
 800368a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	0151      	lsls	r1, r2, #5
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	440a      	add	r2, r1
 8003698:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800369c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a0:	6053      	str	r3, [r2, #4]
 80036a2:	e0b5      	b.n	8003810 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334d      	adds	r3, #77	@ 0x4d
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	d114      	bne.n	80036e4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	334d      	adds	r3, #77	@ 0x4d
 80036ca:	2202      	movs	r2, #2
 80036cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	334c      	adds	r3, #76	@ 0x4c
 80036de:	2202      	movs	r2, #2
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e095      	b.n	8003810 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	334d      	adds	r3, #77	@ 0x4d
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d114      	bne.n	8003724 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	334d      	adds	r3, #77	@ 0x4d
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	334c      	adds	r3, #76	@ 0x4c
 800371e:	2205      	movs	r2, #5
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e075      	b.n	8003810 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	334d      	adds	r3, #77	@ 0x4d
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b07      	cmp	r3, #7
 8003738:	d00a      	beq.n	8003750 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	334d      	adds	r3, #77	@ 0x4d
 800374a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800374c:	2b09      	cmp	r3, #9
 800374e:	d170      	bne.n	8003832 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334d      	adds	r3, #77	@ 0x4d
 8003760:	2202      	movs	r2, #2
 8003762:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	3344      	adds	r3, #68	@ 0x44
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	1c59      	adds	r1, r3, #1
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4403      	add	r3, r0
 8003784:	3344      	adds	r3, #68	@ 0x44
 8003786:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3344      	adds	r3, #68	@ 0x44
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d914      	bls.n	80037c8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3344      	adds	r3, #68	@ 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	334c      	adds	r3, #76	@ 0x4c
 80037c2:	2204      	movs	r2, #4
 80037c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037c6:	e022      	b.n	800380e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	334c      	adds	r3, #76	@ 0x4c
 80037d8:	2202      	movs	r2, #2
 80037da:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003808:	461a      	mov	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800380e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	334c      	adds	r3, #76	@ 0x4c
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f007 fcc8 	bl	800b1bc <HAL_HCD_HC_NotifyURBChange_Callback>
 800382c:	e002      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003832:	bf00      	nop
  }
}
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b08a      	sub	sp, #40	@ 0x28
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	0c5b      	lsrs	r3, r3, #17
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800386e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d004      	beq.n	8003880 <HCD_RXQLVL_IRQHandler+0x46>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b05      	cmp	r3, #5
 800387a:	f000 80b6 	beq.w	80039ea <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800387e:	e0b7      	b.n	80039f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80b3 	beq.w	80039ee <HCD_RXQLVL_IRQHandler+0x1b4>
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	332c      	adds	r3, #44	@ 0x2c
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a7 	beq.w	80039ee <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3338      	adds	r3, #56	@ 0x38
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	18d1      	adds	r1, r2, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4403      	add	r3, r0
 80038c4:	3334      	adds	r3, #52	@ 0x34
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4299      	cmp	r1, r3
 80038ca:	f200 8083 	bhi.w	80039d4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	332c      	adds	r3, #44	@ 0x2c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	b292      	uxth	r2, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	f002 fcdf 	bl	80062ac <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	332c      	adds	r3, #44	@ 0x2c
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	18d1      	adds	r1, r2, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4403      	add	r3, r0
 8003912:	332c      	adds	r3, #44	@ 0x2c
 8003914:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	3338      	adds	r3, #56	@ 0x38
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	18d1      	adds	r1, r2, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4613      	mov	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4403      	add	r3, r0
 800393a:	3338      	adds	r3, #56	@ 0x38
 800393c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	0cdb      	lsrs	r3, r3, #19
 800394e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003952:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	3328      	adds	r3, #40	@ 0x28
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4293      	cmp	r3, r2
 800396c:	d13f      	bne.n	80039ee <HCD_RXQLVL_IRQHandler+0x1b4>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03c      	beq.n	80039ee <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800398a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003992:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	333c      	adds	r3, #60	@ 0x3c
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	f083 0301 	eor.w	r3, r3, #1
 80039bc:	b2d8      	uxtb	r0, r3
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	333c      	adds	r3, #60	@ 0x3c
 80039ce:	4602      	mov	r2, r0
 80039d0:	701a      	strb	r2, [r3, #0]
      break;
 80039d2:	e00c      	b.n	80039ee <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	334c      	adds	r3, #76	@ 0x4c
 80039e4:	2204      	movs	r2, #4
 80039e6:	701a      	strb	r2, [r3, #0]
      break;
 80039e8:	e001      	b.n	80039ee <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80039ee:	bf00      	nop
  }
}
 80039f0:	bf00      	nop
 80039f2:	3728      	adds	r7, #40	@ 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003a24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d10b      	bne.n	8003a48 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f007 fba2 	bl	800b184 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f043 0302 	orr.w	r3, r3, #2
 8003a46:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d132      	bne.n	8003ab8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d126      	bne.n	8003ab2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7a5b      	ldrb	r3, [r3, #9]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d113      	bne.n	8003a94 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a76:	d106      	bne.n	8003a86 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fd8e 	bl	80065a0 <USB_InitFSLSPClkSel>
 8003a84:	e011      	b.n	8003aaa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f002 fd87 	bl	80065a0 <USB_InitFSLSPClkSel>
 8003a92:	e00a      	b.n	8003aaa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	79db      	ldrb	r3, [r3, #7]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d106      	bne.n	8003aaa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003aa8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f007 fb94 	bl	800b1d8 <HAL_HCD_PortEnabled_Callback>
 8003ab0:	e002      	b.n	8003ab8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f007 fb9e 	bl	800b1f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d103      	bne.n	8003aca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6013      	str	r3, [r2, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e267      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d075      	beq.n	8003bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003afe:	4b88      	ldr	r3, [pc, #544]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d00c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0a:	4b85      	ldr	r3, [pc, #532]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d112      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b16:	4b82      	ldr	r3, [pc, #520]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b22:	d10b      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	4b7e      	ldr	r3, [pc, #504]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d05b      	beq.n	8003be8 <HAL_RCC_OscConfig+0x108>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d157      	bne.n	8003be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e242      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b44:	d106      	bne.n	8003b54 <HAL_RCC_OscConfig+0x74>
 8003b46:	4b76      	ldr	r3, [pc, #472]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a75      	ldr	r2, [pc, #468]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e01d      	b.n	8003b90 <HAL_RCC_OscConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x98>
 8003b5e:	4b70      	ldr	r3, [pc, #448]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6f      	ldr	r2, [pc, #444]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e00b      	b.n	8003b90 <HAL_RCC_OscConfig+0xb0>
 8003b78:	4b69      	ldr	r3, [pc, #420]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a68      	ldr	r2, [pc, #416]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b66      	ldr	r3, [pc, #408]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a65      	ldr	r2, [pc, #404]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fd fab2 	bl	8001100 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fd faae 	bl	8001100 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	@ 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e207      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0xc0>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fa9e 	bl	8001100 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fd fa9a 	bl	8001100 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	@ 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1f3      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	4b51      	ldr	r3, [pc, #324]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xe8>
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c02:	4b47      	ldr	r3, [pc, #284]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0e:	4b44      	ldr	r3, [pc, #272]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	4b41      	ldr	r3, [pc, #260]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x152>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e1c7      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b3b      	ldr	r3, [pc, #236]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4937      	ldr	r1, [pc, #220]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	e03a      	b.n	8003cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c50:	4b34      	ldr	r3, [pc, #208]	@ (8003d24 <HAL_RCC_OscConfig+0x244>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fd fa53 	bl	8001100 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5e:	f7fd fa4f 	bl	8001100 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e1a8      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	4b2b      	ldr	r3, [pc, #172]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7c:	4b28      	ldr	r3, [pc, #160]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4925      	ldr	r1, [pc, #148]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c92:	4b24      	ldr	r3, [pc, #144]	@ (8003d24 <HAL_RCC_OscConfig+0x244>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd fa32 	bl	8001100 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fa2e 	bl	8001100 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e187      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d036      	beq.n	8003d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd2:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <HAL_RCC_OscConfig+0x248>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fa12 	bl	8001100 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fa0e 	bl	8001100 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e167      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x200>
 8003cfe:	e01b      	b.n	8003d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d00:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <HAL_RCC_OscConfig+0x248>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fd f9fb 	bl	8001100 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	e00e      	b.n	8003d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0e:	f7fd f9f7 	bl	8001100 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d907      	bls.n	8003d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e150      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
 8003d20:	40023800 	.word	0x40023800
 8003d24:	42470000 	.word	0x42470000
 8003d28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	4b88      	ldr	r3, [pc, #544]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ea      	bne.n	8003d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8097 	beq.w	8003e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b81      	ldr	r3, [pc, #516]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d66:	4b7a      	ldr	r3, [pc, #488]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d76:	4b77      	ldr	r3, [pc, #476]	@ (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d118      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d82:	4b74      	ldr	r3, [pc, #464]	@ (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7fd f9b7 	bl	8001100 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fd f9b3 	bl	8001100 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e10c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x2ea>
 8003dbc:	4b64      	ldr	r3, [pc, #400]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc0:	4a63      	ldr	r2, [pc, #396]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc8:	e01c      	b.n	8003e04 <HAL_RCC_OscConfig+0x324>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b05      	cmp	r3, #5
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x30c>
 8003dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dde:	4b5c      	ldr	r3, [pc, #368]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	4a5b      	ldr	r2, [pc, #364]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0x324>
 8003dec:	4b58      	ldr	r3, [pc, #352]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df0:	4a57      	ldr	r2, [pc, #348]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df8:	4b55      	ldr	r3, [pc, #340]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfc:	4a54      	ldr	r2, [pc, #336]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f023 0304 	bic.w	r3, r3, #4
 8003e02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd f978 	bl	8001100 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fd f974 	bl	8001100 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0cb      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	4b49      	ldr	r3, [pc, #292]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0ee      	beq.n	8003e14 <HAL_RCC_OscConfig+0x334>
 8003e36:	e014      	b.n	8003e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e38:	f7fd f962 	bl	8001100 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e40:	f7fd f95e 	bl	8001100 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e0b5      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e56:	4b3e      	ldr	r3, [pc, #248]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ee      	bne.n	8003e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d105      	bne.n	8003e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e68:	4b39      	ldr	r3, [pc, #228]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	4a38      	ldr	r2, [pc, #224]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80a1 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e7e:	4b34      	ldr	r3, [pc, #208]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d05c      	beq.n	8003f44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d141      	bne.n	8003f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd f932 	bl	8001100 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fd f92e 	bl	8001100 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e087      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	4b27      	ldr	r3, [pc, #156]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	491b      	ldr	r1, [pc, #108]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd f907 	bl	8001100 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd f903 	bl	8001100 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e05c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f08:	4b11      	ldr	r3, [pc, #68]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x416>
 8003f14:	e054      	b.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd f8f0 	bl	8001100 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd f8ec 	bl	8001100 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e045      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x444>
 8003f42:	e03d      	b.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e038      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40007000 	.word	0x40007000
 8003f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fcc <HAL_RCC_OscConfig+0x4ec>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d028      	beq.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d121      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d11a      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d111      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800

08003fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0cc      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b68      	ldr	r3, [pc, #416]	@ (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d90c      	bls.n	800400c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b65      	ldr	r3, [pc, #404]	@ (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b63      	ldr	r3, [pc, #396]	@ (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0b8      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d020      	beq.n	800405a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004024:	4b59      	ldr	r3, [pc, #356]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a58      	ldr	r2, [pc, #352]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800402e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800403c:	4b53      	ldr	r3, [pc, #332]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a52      	ldr	r2, [pc, #328]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b50      	ldr	r3, [pc, #320]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	494d      	ldr	r1, [pc, #308]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d044      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	4b47      	ldr	r3, [pc, #284]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d119      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e07f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d003      	beq.n	800408e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408a:	2b03      	cmp	r3, #3
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	4b3f      	ldr	r3, [pc, #252]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409e:	4b3b      	ldr	r3, [pc, #236]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e067      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b37      	ldr	r3, [pc, #220]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4934      	ldr	r1, [pc, #208]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c0:	f7fd f81e 	bl	8001100 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fd f81a 	bl	8001100 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e04f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	4b2b      	ldr	r3, [pc, #172]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 020c 	and.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1eb      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f0:	4b25      	ldr	r3, [pc, #148]	@ (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d20c      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b22      	ldr	r3, [pc, #136]	@ (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b20      	ldr	r3, [pc, #128]	@ (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e032      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b19      	ldr	r3, [pc, #100]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4916      	ldr	r1, [pc, #88]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004142:	4b12      	ldr	r3, [pc, #72]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	490e      	ldr	r1, [pc, #56]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004156:	f000 f821 	bl	800419c <HAL_RCC_GetSysClockFreq>
 800415a:	4602      	mov	r2, r0
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	490a      	ldr	r1, [pc, #40]	@ (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	5ccb      	ldrb	r3, [r1, r3]
 800416a:	fa22 f303 	lsr.w	r3, r2, r3
 800416e:	4a09      	ldr	r2, [pc, #36]	@ (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004172:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc ff7e 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023c00 	.word	0x40023c00
 800418c:	40023800 	.word	0x40023800
 8004190:	0800c5d8 	.word	0x0800c5d8
 8004194:	20000004 	.word	0x20000004
 8004198:	20000008 	.word	0x20000008

0800419c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800419c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a0:	b090      	sub	sp, #64	@ 0x40
 80041a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b4:	4b59      	ldr	r3, [pc, #356]	@ (800431c <HAL_RCC_GetSysClockFreq+0x180>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d00d      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x40>
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	f200 80a1 	bhi.w	8004308 <HAL_RCC_GetSysClockFreq+0x16c>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0x34>
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d003      	beq.n	80041d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ce:	e09b      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d0:	4b53      	ldr	r3, [pc, #332]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x184>)
 80041d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041d4:	e09b      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041d6:	4b53      	ldr	r3, [pc, #332]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x188>)
 80041d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041da:	e098      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041dc:	4b4f      	ldr	r3, [pc, #316]	@ (800431c <HAL_RCC_GetSysClockFreq+0x180>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041e6:	4b4d      	ldr	r3, [pc, #308]	@ (800431c <HAL_RCC_GetSysClockFreq+0x180>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d028      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f2:	4b4a      	ldr	r3, [pc, #296]	@ (800431c <HAL_RCC_GetSysClockFreq+0x180>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	2200      	movs	r2, #0
 80041fa:	623b      	str	r3, [r7, #32]
 80041fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004204:	2100      	movs	r1, #0
 8004206:	4b47      	ldr	r3, [pc, #284]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x188>)
 8004208:	fb03 f201 	mul.w	r2, r3, r1
 800420c:	2300      	movs	r3, #0
 800420e:	fb00 f303 	mul.w	r3, r0, r3
 8004212:	4413      	add	r3, r2
 8004214:	4a43      	ldr	r2, [pc, #268]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x188>)
 8004216:	fba0 1202 	umull	r1, r2, r0, r2
 800421a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800421c:	460a      	mov	r2, r1
 800421e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004222:	4413      	add	r3, r2
 8004224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004228:	2200      	movs	r2, #0
 800422a:	61bb      	str	r3, [r7, #24]
 800422c:	61fa      	str	r2, [r7, #28]
 800422e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004232:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004236:	f7fc f823 	bl	8000280 <__aeabi_uldivmod>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4613      	mov	r3, r2
 8004240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004242:	e053      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004244:	4b35      	ldr	r3, [pc, #212]	@ (800431c <HAL_RCC_GetSysClockFreq+0x180>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	099b      	lsrs	r3, r3, #6
 800424a:	2200      	movs	r2, #0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	617a      	str	r2, [r7, #20]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004256:	f04f 0b00 	mov.w	fp, #0
 800425a:	4652      	mov	r2, sl
 800425c:	465b      	mov	r3, fp
 800425e:	f04f 0000 	mov.w	r0, #0
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	0159      	lsls	r1, r3, #5
 8004268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800426c:	0150      	lsls	r0, r2, #5
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	ebb2 080a 	subs.w	r8, r2, sl
 8004276:	eb63 090b 	sbc.w	r9, r3, fp
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004286:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800428a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800428e:	ebb2 0408 	subs.w	r4, r2, r8
 8004292:	eb63 0509 	sbc.w	r5, r3, r9
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	00eb      	lsls	r3, r5, #3
 80042a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a4:	00e2      	lsls	r2, r4, #3
 80042a6:	4614      	mov	r4, r2
 80042a8:	461d      	mov	r5, r3
 80042aa:	eb14 030a 	adds.w	r3, r4, sl
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	eb45 030b 	adc.w	r3, r5, fp
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042c2:	4629      	mov	r1, r5
 80042c4:	028b      	lsls	r3, r1, #10
 80042c6:	4621      	mov	r1, r4
 80042c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042cc:	4621      	mov	r1, r4
 80042ce:	028a      	lsls	r2, r1, #10
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d6:	2200      	movs	r2, #0
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	60fa      	str	r2, [r7, #12]
 80042dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e0:	f7fb ffce 	bl	8000280 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4613      	mov	r3, r2
 80042ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_RCC_GetSysClockFreq+0x180>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004306:	e002      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x184>)
 800430a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800430c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004310:	4618      	mov	r0, r3
 8004312:	3740      	adds	r7, #64	@ 0x40
 8004314:	46bd      	mov	sp, r7
 8004316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400
 8004324:	017d7840 	.word	0x017d7840

08004328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	@ (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000004 	.word	0x20000004

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004344:	f7ff fff0 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	@ (8004360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0a9b      	lsrs	r3, r3, #10
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4903      	ldr	r1, [pc, #12]	@ (8004364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	0800c5e8 	.word	0x0800c5e8

08004368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800436c:	f7ff ffdc 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0b5b      	lsrs	r3, r3, #13
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	@ (800438c <HAL_RCC_GetPCLK2Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	0800c5e8 	.word	0x0800c5e8

08004390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e07b      	b.n	800449a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d108      	bne.n	80043bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043b2:	d009      	beq.n	80043c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	61da      	str	r2, [r3, #28]
 80043ba:	e005      	b.n	80043c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fc fc1e 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444c:	ea42 0103 	orr.w	r1, r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	f003 0104 	and.w	r1, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	f003 0210 	and.w	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b088      	sub	sp, #32
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b2:	f7fc fe25 	bl	8001100 <HAL_GetTick>
 80044b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d001      	beq.n	80044cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
 80044ca:	e12a      	b.n	8004722 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Transmit+0x36>
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e122      	b.n	8004722 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_SPI_Transmit+0x48>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e11b      	b.n	8004722 <HAL_SPI_Transmit+0x280>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2203      	movs	r2, #3
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004538:	d10f      	bne.n	800455a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004548:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004558:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d007      	beq.n	8004578 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004580:	d152      	bne.n	8004628 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Transmit+0xee>
 800458a:	8b7b      	ldrh	r3, [r7, #26]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d145      	bne.n	800461c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	881a      	ldrh	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045b4:	e032      	b.n	800461c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d112      	bne.n	80045ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045e8:	e018      	b.n	800461c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ea:	f7fc fd89 	bl	8001100 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d803      	bhi.n	8004602 <HAL_SPI_Transmit+0x160>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d102      	bne.n	8004608 <HAL_SPI_Transmit+0x166>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e082      	b.n	8004722 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1c7      	bne.n	80045b6 <HAL_SPI_Transmit+0x114>
 8004626:	e053      	b.n	80046d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_SPI_Transmit+0x194>
 8004630:	8b7b      	ldrh	r3, [r7, #26]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d147      	bne.n	80046c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800465c:	e033      	b.n	80046c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d113      	bne.n	8004694 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	7812      	ldrb	r2, [r2, #0]
 8004678:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004692:	e018      	b.n	80046c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004694:	f7fc fd34 	bl	8001100 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d803      	bhi.n	80046ac <HAL_SPI_Transmit+0x20a>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d102      	bne.n	80046b2 <HAL_SPI_Transmit+0x210>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e02d      	b.n	8004722 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1c6      	bne.n	800465e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fbd9 	bl	8004e8c <SPI_EndRxTxTransaction>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004720:	2300      	movs	r3, #0
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b088      	sub	sp, #32
 800472e:	af02      	add	r7, sp, #8
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
 8004748:	e104      	b.n	8004954 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004752:	d112      	bne.n	800477a <HAL_SPI_Receive+0x50>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10e      	bne.n	800477a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2204      	movs	r2, #4
 8004760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004764:	88fa      	ldrh	r2, [r7, #6]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f8f3 	bl	800495c <HAL_SPI_TransmitReceive>
 8004776:	4603      	mov	r3, r0
 8004778:	e0ec      	b.n	8004954 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800477a:	f7fc fcc1 	bl	8001100 <HAL_GetTick>
 800477e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SPI_Receive+0x62>
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0e1      	b.n	8004954 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_SPI_Receive+0x74>
 800479a:	2302      	movs	r3, #2
 800479c:	e0da      	b.n	8004954 <HAL_SPI_Receive+0x22a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2204      	movs	r2, #4
 80047aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ec:	d10f      	bne.n	800480e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b40      	cmp	r3, #64	@ 0x40
 800481a:	d007      	beq.n	800482c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800482a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d170      	bne.n	8004916 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004834:	e035      	b.n	80048a2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d115      	bne.n	8004870 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f103 020c 	add.w	r2, r3, #12
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800486e:	e018      	b.n	80048a2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004870:	f7fc fc46 	bl	8001100 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d803      	bhi.n	8004888 <HAL_SPI_Receive+0x15e>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d102      	bne.n	800488e <HAL_SPI_Receive+0x164>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e058      	b.n	8004954 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1c4      	bne.n	8004836 <HAL_SPI_Receive+0x10c>
 80048ac:	e038      	b.n	8004920 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d113      	bne.n	80048e4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	b292      	uxth	r2, r2
 80048c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048e2:	e018      	b.n	8004916 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e4:	f7fc fc0c 	bl	8001100 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d803      	bhi.n	80048fc <HAL_SPI_Receive+0x1d2>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d102      	bne.n	8004902 <HAL_SPI_Receive+0x1d8>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e01e      	b.n	8004954 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1c6      	bne.n	80048ae <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fa4b 	bl	8004dc0 <SPI_EndRxTransaction>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004952:	2300      	movs	r3, #0
  }
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800496a:	2301      	movs	r3, #1
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800496e:	f7fc fbc7 	bl	8001100 <HAL_GetTick>
 8004972:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800497a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004982:	887b      	ldrh	r3, [r7, #2]
 8004984:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d00c      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x4a>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004992:	d106      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x46>
 800499c:	7ffb      	ldrb	r3, [r7, #31]
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d001      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
 80049a4:	e17f      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x5c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x5c>
 80049b2:	887b      	ldrh	r3, [r7, #2]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e174      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x6e>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e16d      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x34a>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d003      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2205      	movs	r2, #5
 80049e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	887a      	ldrh	r2, [r7, #2]
 80049f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	887a      	ldrh	r2, [r7, #2]
 80049fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	887a      	ldrh	r2, [r7, #2]
 8004a0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d007      	beq.n	8004a3a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a42:	d17e      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0xf6>
 8004a4c:	8afb      	ldrh	r3, [r7, #22]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d16c      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	1c9a      	adds	r2, r3, #2
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a76:	e059      	b.n	8004b2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d11b      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x162>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d016      	beq.n	8004abe <HAL_SPI_TransmitReceive+0x162>
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d113      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d119      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x1a4>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d014      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae0:	b292      	uxth	r2, r2
 8004ae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	1c9a      	adds	r2, r3, #2
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004afc:	2301      	movs	r3, #1
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b00:	f7fc fafe 	bl	8001100 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d80d      	bhi.n	8004b2c <HAL_SPI_TransmitReceive+0x1d0>
 8004b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d009      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e0bc      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1a0      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x11c>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d19b      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x11c>
 8004b40:	e082      	b.n	8004c48 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x1f4>
 8004b4a:	8afb      	ldrh	r3, [r7, #22]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d171      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	7812      	ldrb	r2, [r2, #0]
 8004b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b76:	e05d      	b.n	8004c34 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d11c      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x264>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x264>
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d114      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d119      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x2a6>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d014      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c02:	f7fc fa7d 	bl	8001100 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d803      	bhi.n	8004c1a <HAL_SPI_TransmitReceive+0x2be>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d102      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x2c4>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e038      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d19c      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x21c>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d197      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c48:	6a3a      	ldr	r2, [r7, #32]
 8004c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f91d 	bl	8004e8c <SPI_EndRxTxTransaction>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e01d      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3728      	adds	r7, #40	@ 0x28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cc0:	f7fc fa1e 	bl	8001100 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cd0:	f7fc fa16 	bl	8001100 <HAL_GetTick>
 8004cd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cd6:	4b39      	ldr	r3, [pc, #228]	@ (8004dbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	015b      	lsls	r3, r3, #5
 8004cdc:	0d1b      	lsrs	r3, r3, #20
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	fb02 f303 	mul.w	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ce6:	e054      	b.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d050      	beq.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cf0:	f7fc fa06 	bl	8001100 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d902      	bls.n	8004d06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d13d      	bne.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d1e:	d111      	bne.n	8004d44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d28:	d004      	beq.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d32:	d107      	bne.n	8004d44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d4c:	d10f      	bne.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e017      	b.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d19b      	bne.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000004 	.word	0x20000004

08004dc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd4:	d111      	bne.n	8004dfa <SPI_EndRxTransaction+0x3a>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dde:	d004      	beq.n	8004dea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de8:	d107      	bne.n	8004dfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e02:	d12a      	bne.n	8004e5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0c:	d012      	beq.n	8004e34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	2180      	movs	r1, #128	@ 0x80
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff ff49 	bl	8004cb0 <SPI_WaitFlagStateUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d02d      	beq.n	8004e80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e026      	b.n	8004e82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff ff36 	bl	8004cb0 <SPI_WaitFlagStateUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01a      	beq.n	8004e80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e013      	b.n	8004e82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2101      	movs	r1, #1
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff ff23 	bl	8004cb0 <SPI_WaitFlagStateUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e000      	b.n	8004e82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	2102      	movs	r1, #2
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff ff04 	bl	8004cb0 <SPI_WaitFlagStateUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e032      	b.n	8004f24 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8004f2c <SPI_EndRxTxTransaction+0xa0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f30 <SPI_EndRxTxTransaction+0xa4>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	0d5b      	lsrs	r3, r3, #21
 8004eca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004edc:	d112      	bne.n	8004f04 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2180      	movs	r1, #128	@ 0x80
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff fee1 	bl	8004cb0 <SPI_WaitFlagStateUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d016      	beq.n	8004f22 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e00f      	b.n	8004f24 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1a:	2b80      	cmp	r3, #128	@ 0x80
 8004f1c:	d0f2      	beq.n	8004f04 <SPI_EndRxTxTransaction+0x78>
 8004f1e:	e000      	b.n	8004f22 <SPI_EndRxTxTransaction+0x96>
        break;
 8004f20:	bf00      	nop
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000004 	.word	0x20000004
 8004f30:	165e9f81 	.word	0x165e9f81

08004f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e042      	b.n	8004fcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fb feaa 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2224      	movs	r2, #36	@ 0x24
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fdb3 	bl	8005ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	@ 0x28
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d175      	bne.n	80050e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_UART_Transmit+0x2c>
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e06e      	b.n	80050e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2221      	movs	r2, #33	@ 0x21
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005012:	f7fc f875 	bl	8001100 <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502c:	d108      	bne.n	8005040 <HAL_UART_Transmit+0x6c>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	e003      	b.n	8005048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005048:	e02e      	b.n	80050a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2200      	movs	r2, #0
 8005052:	2180      	movs	r1, #128	@ 0x80
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fb15 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e03a      	b.n	80050e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	3302      	adds	r3, #2
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	e007      	b.n	800509a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	781a      	ldrb	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	3301      	adds	r3, #1
 8005098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1cb      	bne.n	800504a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2140      	movs	r1, #64	@ 0x40
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fae1 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e006      	b.n	80050e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b20      	cmp	r3, #32
 8005102:	d112      	bne.n	800512a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_UART_Receive_IT+0x26>
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e00b      	b.n	800512c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	461a      	mov	r2, r3
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fb08 	bl	8005736 <UART_Start_Receive_IT>
 8005126:	4603      	mov	r3, r0
 8005128:	e000      	b.n	800512c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800512a:	2302      	movs	r3, #2
  }
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b0ba      	sub	sp, #232	@ 0xe8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800515a:	2300      	movs	r3, #0
 800515c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_UART_IRQHandler+0x66>
 8005186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fbe8 	bl	8005968 <UART_Receive_IT>
      return;
 8005198:	e25b      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800519a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80de 	beq.w	8005360 <HAL_UART_IRQHandler+0x22c>
 80051a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80d1 	beq.w	8005360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_UART_IRQHandler+0xae>
 80051ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	f043 0201 	orr.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <HAL_UART_IRQHandler+0xd2>
 80051ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	f043 0202 	orr.w	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_UART_IRQHandler+0xf6>
 8005212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005222:	f043 0204 	orr.w	r2, r3, #4
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d011      	beq.n	800525a <HAL_UART_IRQHandler+0x126>
 8005236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	f043 0208 	orr.w	r2, r3, #8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 81f2 	beq.w	8005648 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_UART_IRQHandler+0x14e>
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fb73 	bl	8005968 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b40      	cmp	r3, #64	@ 0x40
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <HAL_UART_IRQHandler+0x17a>
 80052a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d04f      	beq.n	800534e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa7b 	bl	80057aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b40      	cmp	r3, #64	@ 0x40
 80052c0:	d141      	bne.n	8005346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3314      	adds	r3, #20
 80052c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1d9      	bne.n	80052c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d013      	beq.n	800533e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531a:	4a7e      	ldr	r2, [pc, #504]	@ (8005514 <HAL_UART_IRQHandler+0x3e0>)
 800531c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005322:	4618      	mov	r0, r3
 8005324:	f7fc f89d 	bl	8001462 <HAL_DMA_Abort_IT>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d016      	beq.n	800535c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005338:	4610      	mov	r0, r2
 800533a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533c:	e00e      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f98a 	bl	8005658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005344:	e00a      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f986 	bl	8005658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	e006      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f982 	bl	8005658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800535a:	e175      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	bf00      	nop
    return;
 800535e:	e173      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005364:	2b01      	cmp	r3, #1
 8005366:	f040 814f 	bne.w	8005608 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8148 	beq.w	8005608 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8141 	beq.w	8005608 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	f040 80b6 	bne.w	8005518 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8145 	beq.w	800564c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ca:	429a      	cmp	r2, r3
 80053cc:	f080 813e 	bcs.w	800564c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053e2:	f000 8088 	beq.w	80054f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005412:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800541e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800542a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1d9      	bne.n	80053e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3314      	adds	r3, #20
 8005438:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3314      	adds	r3, #20
 8005452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005456:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800545a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800545e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e1      	bne.n	8005432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3314      	adds	r3, #20
 8005474:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800547e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3314      	adds	r3, #20
 800548e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005492:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005498:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e3      	bne.n	800546e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054c6:	f023 0310 	bic.w	r3, r3, #16
 80054ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e3      	bne.n	80054b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fb ff46 	bl	8001382 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005504:	b29b      	uxth	r3, r3
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	b29b      	uxth	r3, r3
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8ad 	bl	800566c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005512:	e09b      	b.n	800564c <HAL_UART_IRQHandler+0x518>
 8005514:	08005871 	.word	0x08005871
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005520:	b29b      	uxth	r3, r3
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 808e 	beq.w	8005650 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8089 	beq.w	8005650 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800554e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005554:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005562:	647a      	str	r2, [r7, #68]	@ 0x44
 8005564:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e3      	bne.n	800553e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	623b      	str	r3, [r7, #32]
   return(result);
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800559a:	633a      	str	r2, [r7, #48]	@ 0x30
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e3      	bne.n	8005576 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0310 	bic.w	r3, r3, #16
 80055d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	617b      	str	r3, [r7, #20]
   return(result);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e3      	bne.n	80055bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f833 	bl	800566c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005606:	e023      	b.n	8005650 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_UART_IRQHandler+0x4f4>
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f939 	bl	8005898 <UART_Transmit_IT>
    return;
 8005626:	e014      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <HAL_UART_IRQHandler+0x51e>
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f979 	bl	8005938 <UART_EndTransmit_IT>
    return;
 8005646:	e004      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
    return;
 8005648:	bf00      	nop
 800564a:	e002      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
      return;
 800564c:	bf00      	nop
 800564e:	e000      	b.n	8005652 <HAL_UART_IRQHandler+0x51e>
      return;
 8005650:	bf00      	nop
  }
}
 8005652:	37e8      	adds	r7, #232	@ 0xe8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005694:	e03b      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d037      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fb fd2f 	bl	8001100 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e03a      	b.n	800572e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d023      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0x8a>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b80      	cmp	r3, #128	@ 0x80
 80056ca:	d020      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0x8a>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d01d      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d116      	bne.n	800570e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f857 	bl	80057aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2208      	movs	r2, #8
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e00f      	b.n	800572e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	429a      	cmp	r2, r3
 800572a:	d0b4      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	4613      	mov	r3, r2
 8005742:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2222      	movs	r2, #34	@ 0x22
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800577a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0220 	orr.w	r2, r2, #32
 800579a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b095      	sub	sp, #84	@ 0x54
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80057d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e5      	bne.n	80057b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3314      	adds	r3, #20
 80057ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3314      	adds	r3, #20
 8005804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005808:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e5      	bne.n	80057e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	2b01      	cmp	r3, #1
 8005820:	d119      	bne.n	8005856 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	60bb      	str	r3, [r7, #8]
   return(result);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f023 0310 	bic.w	r3, r3, #16
 8005838:	647b      	str	r3, [r7, #68]	@ 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005842:	61ba      	str	r2, [r7, #24]
 8005844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6979      	ldr	r1, [r7, #20]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	613b      	str	r3, [r7, #16]
   return(result);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005864:	bf00      	nop
 8005866:	3754      	adds	r7, #84	@ 0x54
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff fee4 	bl	8005658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b21      	cmp	r3, #33	@ 0x21
 80058aa:	d13e      	bne.n	800592a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b4:	d114      	bne.n	80058e0 <UART_Transmit_IT+0x48>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d110      	bne.n	80058e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	621a      	str	r2, [r3, #32]
 80058de:	e008      	b.n	80058f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	1c59      	adds	r1, r3, #1
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6211      	str	r1, [r2, #32]
 80058ea:	781a      	ldrb	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4619      	mov	r1, r3
 8005900:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10f      	bne.n	8005926 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005914:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005924:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	e000      	b.n	800592c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800592a:	2302      	movs	r3, #2
  }
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fb f8e5 	bl	8000b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	@ 0x30
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b22      	cmp	r3, #34	@ 0x22
 800597a:	f040 80ae 	bne.w	8005ada <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005986:	d117      	bne.n	80059b8 <UART_Receive_IT+0x50>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d113      	bne.n	80059b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005990:	2300      	movs	r3, #0
 8005992:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80059b6:	e026      	b.n	8005a06 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ca:	d007      	beq.n	80059dc <UART_Receive_IT+0x74>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <UART_Receive_IT+0x82>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e008      	b.n	80059fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4619      	mov	r1, r3
 8005a14:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d15d      	bne.n	8005ad6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0220 	bic.w	r2, r2, #32
 8005a28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0201 	bic.w	r2, r2, #1
 8005a48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d135      	bne.n	8005acc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	613b      	str	r3, [r7, #16]
   return(result);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f023 0310 	bic.w	r3, r3, #16
 8005a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a86:	623a      	str	r2, [r7, #32]
 8005a88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	69f9      	ldr	r1, [r7, #28]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e5      	bne.n	8005a66 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d10a      	bne.n	8005abe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff fdd1 	bl	800566c <HAL_UARTEx_RxEventCallback>
 8005aca:	e002      	b.n	8005ad2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fb f803 	bl	8000ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e002      	b.n	8005adc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ada:	2302      	movs	r3, #2
  }
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3730      	adds	r7, #48	@ 0x30
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae8:	b0c0      	sub	sp, #256	@ 0x100
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	ea40 0301 	orr.w	r3, r0, r1
 8005b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b3c:	f021 010c 	bic.w	r1, r1, #12
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5e:	6999      	ldr	r1, [r3, #24]
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	ea40 0301 	orr.w	r3, r0, r1
 8005b6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b8f      	ldr	r3, [pc, #572]	@ (8005db0 <UART_SetConfig+0x2cc>)
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d005      	beq.n	8005b84 <UART_SetConfig+0xa0>
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8005db4 <UART_SetConfig+0x2d0>)
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d104      	bne.n	8005b8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b84:	f7fe fbf0 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8005b88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b8c:	e003      	b.n	8005b96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b8e:	f7fe fbd7 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8005b92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba0:	f040 810c 	bne.w	8005dbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	462b      	mov	r3, r5
 8005bba:	1891      	adds	r1, r2, r2
 8005bbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bbe:	415b      	adcs	r3, r3
 8005bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	eb12 0801 	adds.w	r8, r2, r1
 8005bcc:	4629      	mov	r1, r5
 8005bce:	eb43 0901 	adc.w	r9, r3, r1
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be6:	4690      	mov	r8, r2
 8005be8:	4699      	mov	r9, r3
 8005bea:	4623      	mov	r3, r4
 8005bec:	eb18 0303 	adds.w	r3, r8, r3
 8005bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	eb49 0303 	adc.w	r3, r9, r3
 8005bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c12:	460b      	mov	r3, r1
 8005c14:	18db      	adds	r3, r3, r3
 8005c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c18:	4613      	mov	r3, r2
 8005c1a:	eb42 0303 	adc.w	r3, r2, r3
 8005c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c28:	f7fa fb2a 	bl	8000280 <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4b61      	ldr	r3, [pc, #388]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005c32:	fba3 2302 	umull	r2, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	011c      	lsls	r4, r3, #4
 8005c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	1891      	adds	r1, r2, r2
 8005c52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c54:	415b      	adcs	r3, r3
 8005c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c62:	4649      	mov	r1, r9
 8005c64:	eb43 0b01 	adc.w	fp, r3, r1
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c7c:	4692      	mov	sl, r2
 8005c7e:	469b      	mov	fp, r3
 8005c80:	4643      	mov	r3, r8
 8005c82:	eb1a 0303 	adds.w	r3, sl, r3
 8005c86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ca4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	18db      	adds	r3, r3, r3
 8005cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cae:	4613      	mov	r3, r2
 8005cb0:	eb42 0303 	adc.w	r3, r2, r3
 8005cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cbe:	f7fa fadf 	bl	8000280 <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005cca:	fba3 2301 	umull	r2, r3, r3, r1
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2264      	movs	r2, #100	@ 0x64
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	1acb      	subs	r3, r1, r3
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cde:	4b36      	ldr	r3, [pc, #216]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cec:	441c      	add	r4, r3
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d10:	4641      	mov	r1, r8
 8005d12:	1851      	adds	r1, r2, r1
 8005d14:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d16:	4649      	mov	r1, r9
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d28:	4659      	mov	r1, fp
 8005d2a:	00cb      	lsls	r3, r1, #3
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d32:	4651      	mov	r1, sl
 8005d34:	00ca      	lsls	r2, r1, #3
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d44:	464b      	mov	r3, r9
 8005d46:	460a      	mov	r2, r1
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d64:	460b      	mov	r3, r1
 8005d66:	18db      	adds	r3, r3, r3
 8005d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	eb42 0303 	adc.w	r3, r2, r3
 8005d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d7a:	f7fa fa81 	bl	8000280 <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	@ 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	3332      	adds	r3, #50	@ 0x32
 8005d96:	4a08      	ldr	r2, [pc, #32]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f003 0207 	and.w	r2, r3, #7
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4422      	add	r2, r4
 8005daa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dac:	e106      	b.n	8005fbc <UART_SetConfig+0x4d8>
 8005dae:	bf00      	nop
 8005db0:	40011000 	.word	0x40011000
 8005db4:	40011400 	.word	0x40011400
 8005db8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dce:	4642      	mov	r2, r8
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	1891      	adds	r1, r2, r2
 8005dd4:	6239      	str	r1, [r7, #32]
 8005dd6:	415b      	adcs	r3, r3
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dde:	4641      	mov	r1, r8
 8005de0:	1854      	adds	r4, r2, r1
 8005de2:	4649      	mov	r1, r9
 8005de4:	eb43 0501 	adc.w	r5, r3, r1
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	00eb      	lsls	r3, r5, #3
 8005df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005df6:	00e2      	lsls	r2, r4, #3
 8005df8:	4614      	mov	r4, r2
 8005dfa:	461d      	mov	r5, r3
 8005dfc:	4643      	mov	r3, r8
 8005dfe:	18e3      	adds	r3, r4, r3
 8005e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e04:	464b      	mov	r3, r9
 8005e06:	eb45 0303 	adc.w	r3, r5, r3
 8005e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	008b      	lsls	r3, r1, #2
 8005e2e:	4621      	mov	r1, r4
 8005e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e34:	4621      	mov	r1, r4
 8005e36:	008a      	lsls	r2, r1, #2
 8005e38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e3c:	f7fa fa20 	bl	8000280 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4b60      	ldr	r3, [pc, #384]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005e46:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	011c      	lsls	r4, r3, #4
 8005e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	1891      	adds	r1, r2, r2
 8005e66:	61b9      	str	r1, [r7, #24]
 8005e68:	415b      	adcs	r3, r3
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e70:	4641      	mov	r1, r8
 8005e72:	1851      	adds	r1, r2, r1
 8005e74:	6139      	str	r1, [r7, #16]
 8005e76:	4649      	mov	r1, r9
 8005e78:	414b      	adcs	r3, r1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e88:	4659      	mov	r1, fp
 8005e8a:	00cb      	lsls	r3, r1, #3
 8005e8c:	4651      	mov	r1, sl
 8005e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e92:	4651      	mov	r1, sl
 8005e94:	00ca      	lsls	r2, r1, #3
 8005e96:	4610      	mov	r0, r2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	eb42 0303 	adc.w	r3, r2, r3
 8005eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ec8:	4649      	mov	r1, r9
 8005eca:	008b      	lsls	r3, r1, #2
 8005ecc:	4641      	mov	r1, r8
 8005ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	008a      	lsls	r2, r1, #2
 8005ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005eda:	f7fa f9d1 	bl	8000280 <__aeabi_uldivmod>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4b38      	ldr	r3, [pc, #224]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2264      	movs	r2, #100	@ 0x64
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	1acb      	subs	r3, r1, r3
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	3332      	adds	r3, #50	@ 0x32
 8005ef8:	4a33      	ldr	r2, [pc, #204]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f04:	441c      	add	r4, r3
 8005f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	1891      	adds	r1, r2, r2
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f24:	4641      	mov	r1, r8
 8005f26:	1851      	adds	r1, r2, r1
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	414b      	adcs	r3, r1
 8005f2e:	607b      	str	r3, [r7, #4]
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	00cb      	lsls	r3, r1, #3
 8005f40:	4651      	mov	r1, sl
 8005f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f46:	4651      	mov	r1, sl
 8005f48:	00ca      	lsls	r2, r1, #3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4642      	mov	r2, r8
 8005f52:	189b      	adds	r3, r3, r2
 8005f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f56:	464b      	mov	r3, r9
 8005f58:	460a      	mov	r2, r1
 8005f5a:	eb42 0303 	adc.w	r3, r2, r3
 8005f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f78:	4649      	mov	r1, r9
 8005f7a:	008b      	lsls	r3, r1, #2
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f82:	4641      	mov	r1, r8
 8005f84:	008a      	lsls	r2, r1, #2
 8005f86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f8a:	f7fa f979 	bl	8000280 <__aeabi_uldivmod>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005f94:	fba3 1302 	umull	r1, r3, r3, r2
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	2164      	movs	r1, #100	@ 0x64
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	3332      	adds	r3, #50	@ 0x32
 8005fa6:	4a08      	ldr	r2, [pc, #32]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	f003 020f 	and.w	r2, r3, #15
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4422      	add	r2, r4
 8005fba:	609a      	str	r2, [r3, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc8:	51eb851f 	.word	0x51eb851f

08005fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 001c 	add.w	r0, r7, #28
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d123      	bne.n	800602e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800600e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006012:	2b01      	cmp	r3, #1
 8006014:	d105      	bne.n	8006022 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f9dc 	bl	80063e0 <USB_CoreReset>
 8006028:	4603      	mov	r3, r0
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	e01b      	b.n	8006066 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9d0 	bl	80063e0 <USB_CoreReset>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006044:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	@ 0x38
 8006058:	e005      	b.n	8006066 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006066:	7fbb      	ldrb	r3, [r7, #30]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10b      	bne.n	8006084 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f043 0206 	orr.w	r2, r3, #6
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f043 0220 	orr.w	r2, r3, #32
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006090:	b004      	add	sp, #16
 8006092:	4770      	bx	lr

08006094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f043 0201 	orr.w	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d115      	bne.n	8006126 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006106:	200a      	movs	r0, #10
 8006108:	f7fb f806 	bl	8001118 <HAL_Delay>
      ms += 10U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	330a      	adds	r3, #10
 8006110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f956 	bl	80063c4 <USB_GetMode>
 8006118:	4603      	mov	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d01e      	beq.n	800615c <USB_SetCurrentMode+0x84>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2bc7      	cmp	r3, #199	@ 0xc7
 8006122:	d9f0      	bls.n	8006106 <USB_SetCurrentMode+0x2e>
 8006124:	e01a      	b.n	800615c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d115      	bne.n	8006158 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006138:	200a      	movs	r0, #10
 800613a:	f7fa ffed 	bl	8001118 <HAL_Delay>
      ms += 10U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	330a      	adds	r3, #10
 8006142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f93d 	bl	80063c4 <USB_GetMode>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <USB_SetCurrentMode+0x84>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2bc7      	cmp	r3, #199	@ 0xc7
 8006154:	d9f0      	bls.n	8006138 <USB_SetCurrentMode+0x60>
 8006156:	e001      	b.n	800615c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e005      	b.n	8006168 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006160:	d101      	bne.n	8006166 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800618a:	d901      	bls.n	8006190 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e01b      	b.n	80061c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	daf2      	bge.n	800617e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	019b      	lsls	r3, r3, #6
 80061a0:	f043 0220 	orr.w	r2, r3, #32
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061b4:	d901      	bls.n	80061ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e006      	b.n	80061c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d0f0      	beq.n	80061a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ec:	d901      	bls.n	80061f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e018      	b.n	8006224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	daf2      	bge.n	80061e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2210      	movs	r2, #16
 8006202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006210:	d901      	bls.n	8006216 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e006      	b.n	8006224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b10      	cmp	r3, #16
 8006220:	d0f0      	beq.n	8006204 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006230:	b480      	push	{r7}
 8006232:	b089      	sub	sp, #36	@ 0x24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4611      	mov	r1, r2
 800623c:	461a      	mov	r2, r3
 800623e:	460b      	mov	r3, r1
 8006240:	71fb      	strb	r3, [r7, #7]
 8006242:	4613      	mov	r3, r2
 8006244:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800624e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	d123      	bne.n	800629e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006256:	88bb      	ldrh	r3, [r7, #4]
 8006258:	3303      	adds	r3, #3
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800625e:	2300      	movs	r3, #0
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	e018      	b.n	8006296 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	031a      	lsls	r2, r3, #12
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4413      	add	r3, r2
 800626c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006270:	461a      	mov	r2, r3
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	3301      	adds	r3, #1
 8006282:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3301      	adds	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3301      	adds	r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	3301      	adds	r3, #1
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3e2      	bcc.n	8006264 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3724      	adds	r7, #36	@ 0x24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b08b      	sub	sp, #44	@ 0x2c
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	089b      	lsrs	r3, r3, #2
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	623b      	str	r3, [r7, #32]
 80062d6:	e014      	b.n	8006302 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	3301      	adds	r3, #1
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	3301      	adds	r3, #1
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	3301      	adds	r3, #1
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	3301      	adds	r3, #1
 80062fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	3301      	adds	r3, #1
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	6a3a      	ldr	r2, [r7, #32]
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	429a      	cmp	r2, r3
 8006308:	d3e6      	bcc.n	80062d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800630a:	8bfb      	ldrh	r3, [r7, #30]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01e      	beq.n	800634e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800631a:	461a      	mov	r2, r3
 800631c:	f107 0310 	add.w	r3, r7, #16
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
 8006330:	b2da      	uxtb	r2, r3
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	701a      	strb	r2, [r3, #0]
      i++;
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	3301      	adds	r3, #1
 800633a:	623b      	str	r3, [r7, #32]
      pDest++;
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	3301      	adds	r3, #1
 8006340:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006342:	8bfb      	ldrh	r3, [r7, #30]
 8006344:	3b01      	subs	r3, #1
 8006346:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006348:	8bfb      	ldrh	r3, [r7, #30]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1ea      	bne.n	8006324 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006350:	4618      	mov	r0, r3
 8006352:	372c      	adds	r7, #44	@ 0x2c
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4013      	ands	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006374:	68fb      	ldr	r3, [r7, #12]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	4013      	ands	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b6:	68bb      	ldr	r3, [r7, #8]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0301 	and.w	r3, r3, #1
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f8:	d901      	bls.n	80063fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e01b      	b.n	8006436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	daf2      	bge.n	80063ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f043 0201 	orr.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006422:	d901      	bls.n	8006428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e006      	b.n	8006436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b01      	cmp	r3, #1
 8006432:	d0f0      	beq.n	8006416 <USB_CoreReset+0x36>

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006444:	b084      	sub	sp, #16
 8006446:	b580      	push	{r7, lr}
 8006448:	b086      	sub	sp, #24
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006486:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d119      	bne.n	80064ce <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800649a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10a      	bne.n	80064b8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064b0:	f043 0304 	orr.w	r3, r3, #4
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e014      	b.n	80064e2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064c6:	f023 0304 	bic.w	r3, r3, #4
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	e009      	b.n	80064e2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064dc:	f023 0304 	bic.w	r3, r3, #4
 80064e0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064e2:	2110      	movs	r1, #16
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff fe43 	bl	8006170 <USB_FlushTxFifo>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fe6d 	bl	80061d4 <USB_FlushRxFifo>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	e015      	b.n	8006536 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006516:	461a      	mov	r2, r3
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652a:	461a      	mov	r2, r3
 800652c:	2300      	movs	r3, #0
 800652e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	3301      	adds	r3, #1
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800653a:	461a      	mov	r2, r3
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4293      	cmp	r3, r2
 8006540:	d3e3      	bcc.n	800650a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f04f 32ff 	mov.w	r2, #4294967295
 800654e:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2280      	movs	r2, #128	@ 0x80
 8006554:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a0e      	ldr	r2, [pc, #56]	@ (8006594 <USB_HostInit+0x150>)
 800655a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a0e      	ldr	r2, [pc, #56]	@ (8006598 <USB_HostInit+0x154>)
 8006560:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006564:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f043 0210 	orr.w	r2, r3, #16
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	4b07      	ldr	r3, [pc, #28]	@ (800659c <USB_HostInit+0x158>)
 800657e:	4313      	orrs	r3, r2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006590:	b004      	add	sp, #16
 8006592:	4770      	bx	lr
 8006594:	00600080 	.word	0x00600080
 8006598:	004000e0 	.word	0x004000e0
 800659c:	a3200008 	.word	0xa3200008

080065a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065be:	f023 0303 	bic.w	r3, r3, #3
 80065c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065d8:	4313      	orrs	r3, r2
 80065da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d107      	bne.n	80065f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065e8:	461a      	mov	r2, r3
 80065ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065ee:	6053      	str	r3, [r2, #4]
 80065f0:	e00c      	b.n	800660c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d107      	bne.n	8006608 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065fe:	461a      	mov	r2, r3
 8006600:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006604:	6053      	str	r3, [r2, #4]
 8006606:	e001      	b.n	800660c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800663a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006648:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800664a:	2064      	movs	r0, #100	@ 0x64
 800664c:	f7fa fd64 	bl	8001118 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800665c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800665e:	200a      	movs	r0, #10
 8006660:	f7fa fd5a 	bl	8001118 <HAL_Delay>

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006692:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <USB_DriveVbus+0x44>
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d106      	bne.n	80066b2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066b0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066bc:	d109      	bne.n	80066d2 <USB_DriveVbus+0x64>
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066d0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	0c5b      	lsrs	r3, r3, #17
 80066fe:	f003 0303 	and.w	r3, r3, #3
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	b29b      	uxth	r3, r3
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	4608      	mov	r0, r1
 800673a:	4611      	mov	r1, r2
 800673c:	461a      	mov	r2, r3
 800673e:	4603      	mov	r3, r0
 8006740:	70fb      	strb	r3, [r7, #3]
 8006742:	460b      	mov	r3, r1
 8006744:	70bb      	strb	r3, [r7, #2]
 8006746:	4613      	mov	r3, r2
 8006748:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675e:	461a      	mov	r2, r3
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006766:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800676a:	2b03      	cmp	r3, #3
 800676c:	d867      	bhi.n	800683e <USB_HC_Init+0x10e>
 800676e:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <USB_HC_Init+0x44>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006785 	.word	0x08006785
 8006778:	08006801 	.word	0x08006801
 800677c:	08006785 	.word	0x08006785
 8006780:	080067c3 	.word	0x080067c3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4413      	add	r3, r2
 800678c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006790:	461a      	mov	r2, r3
 8006792:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006796:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006798:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	da51      	bge.n	8006844 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067be:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80067c0:	e040      	b.n	8006844 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ce:	461a      	mov	r2, r3
 80067d0:	f240 639d 	movw	r3, #1693	@ 0x69d
 80067d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da34      	bge.n	8006848 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	78fa      	ldrb	r2, [r7, #3]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067fc:	60d3      	str	r3, [r2, #12]
      }

      break;
 80067fe:	e023      	b.n	8006848 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800680c:	461a      	mov	r2, r3
 800680e:	f240 2325 	movw	r3, #549	@ 0x225
 8006812:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006814:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006818:	2b00      	cmp	r3, #0
 800681a:	da17      	bge.n	800684c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006836:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800683a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800683c:	e006      	b.n	800684c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	77fb      	strb	r3, [r7, #31]
      break;
 8006842:	e004      	b.n	800684e <USB_HC_Init+0x11e>
      break;
 8006844:	bf00      	nop
 8006846:	e002      	b.n	800684e <USB_HC_Init+0x11e>
      break;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <USB_HC_Init+0x11e>
      break;
 800684c:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4413      	add	r3, r2
 8006856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685a:	461a      	mov	r2, r3
 800685c:	2300      	movs	r3, #0
 800685e:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	440a      	add	r2, r1
 8006876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800687a:	f043 0302 	orr.w	r3, r3, #2
 800687e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	2101      	movs	r1, #1
 8006890:	fa01 f303 	lsl.w	r3, r1, r3
 8006894:	6939      	ldr	r1, [r7, #16]
 8006896:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800689a:	4313      	orrs	r3, r2
 800689c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da03      	bge.n	80068ba <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	e001      	b.n	80068be <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff ff0e 	bl	80066e0 <USB_GetHostSpeed>
 80068c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d106      	bne.n	80068dc <USB_HC_Init+0x1ac>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d003      	beq.n	80068dc <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e001      	b.n	80068e0 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068e0:	787b      	ldrb	r3, [r7, #1]
 80068e2:	059b      	lsls	r3, r3, #22
 80068e4:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068e8:	78bb      	ldrb	r3, [r7, #2]
 80068ea:	02db      	lsls	r3, r3, #11
 80068ec:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068f6:	049b      	lsls	r3, r3, #18
 80068f8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80068fe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006900:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006904:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	431a      	orrs	r2, r3
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800690e:	78fa      	ldrb	r2, [r7, #3]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	440a      	add	r2, r1
 8006916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800691a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800691e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006920:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006924:	2b03      	cmp	r3, #3
 8006926:	d003      	beq.n	8006930 <USB_HC_Init+0x200>
 8006928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10f      	bne.n	8006950 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4413      	add	r3, r2
 8006938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	440a      	add	r2, r1
 8006946:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800694a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800694e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006950:	7ffb      	ldrb	r3, [r7, #31]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop

0800695c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08c      	sub	sp, #48	@ 0x30
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006978:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	799b      	ldrb	r3, [r3, #6]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d158      	bne.n	8006a34 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006982:	2301      	movs	r3, #1
 8006984:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	78db      	ldrb	r3, [r3, #3]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800698e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	8a92      	ldrh	r2, [r2, #20]
 8006994:	fb03 f202 	mul.w	r2, r3, r2
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	61da      	str	r2, [r3, #28]
 800699c:	e079      	b.n	8006a92 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	7c9b      	ldrb	r3, [r3, #18]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d130      	bne.n	8006a08 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80069ac:	d918      	bls.n	80069e0 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	8a9b      	ldrh	r3, [r3, #20]
 80069b2:	461a      	mov	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d003      	beq.n	80069d0 <USB_HC_StartXfer+0x74>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d103      	bne.n	80069d8 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2202      	movs	r2, #2
 80069d4:	60da      	str	r2, [r3, #12]
 80069d6:	e05c      	b.n	8006a92 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2201      	movs	r2, #1
 80069dc:	60da      	str	r2, [r3, #12]
 80069de:	e058      	b.n	8006a92 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d007      	beq.n	8006a00 <USB_HC_StartXfer+0xa4>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d003      	beq.n	8006a00 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2204      	movs	r2, #4
 80069fc:	60da      	str	r2, [r3, #12]
 80069fe:	e048      	b.n	8006a92 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2203      	movs	r2, #3
 8006a04:	60da      	str	r2, [r3, #12]
 8006a06:	e044      	b.n	8006a92 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d10d      	bne.n	8006a2a <USB_HC_StartXfer+0xce>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	8a92      	ldrh	r2, [r2, #20]
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d907      	bls.n	8006a2a <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	8a92      	ldrh	r2, [r2, #20]
 8006a20:	fb03 f202 	mul.w	r2, r3, r2
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	61da      	str	r2, [r3, #28]
 8006a28:	e033      	b.n	8006a92 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6a1a      	ldr	r2, [r3, #32]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	61da      	str	r2, [r3, #28]
 8006a32:	e02e      	b.n	8006a92 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d018      	beq.n	8006a6e <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	8a92      	ldrh	r2, [r2, #20]
 8006a44:	4413      	add	r3, r2
 8006a46:	3b01      	subs	r3, #1
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	8a92      	ldrh	r2, [r2, #20]
 8006a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a50:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006a52:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a54:	8b7b      	ldrh	r3, [r7, #26]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d90b      	bls.n	8006a72 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8006a5a:	8b7b      	ldrh	r3, [r7, #26]
 8006a5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	8a92      	ldrh	r2, [r2, #20]
 8006a64:	fb03 f202 	mul.w	r2, r3, r2
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	e001      	b.n	8006a72 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	78db      	ldrb	r3, [r3, #3]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	8a92      	ldrh	r2, [r2, #20]
 8006a80:	fb03 f202 	mul.w	r2, r3, r2
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	61da      	str	r2, [r3, #28]
 8006a88:	e003      	b.n	8006a92 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6a1a      	ldr	r2, [r3, #32]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a9c:	04d9      	lsls	r1, r3, #19
 8006a9e:	4ba4      	ldr	r3, [pc, #656]	@ (8006d30 <USB_HC_StartXfer+0x3d4>)
 8006aa0:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aa2:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	7d9b      	ldrb	r3, [r3, #22]
 8006aa8:	075b      	lsls	r3, r3, #29
 8006aaa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aae:	69f9      	ldr	r1, [r7, #28]
 8006ab0:	0148      	lsls	r0, r1, #5
 8006ab2:	6a39      	ldr	r1, [r7, #32]
 8006ab4:	4401      	add	r1, r0
 8006ab6:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006aba:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006abc:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d009      	beq.n	8006ad8 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6999      	ldr	r1, [r3, #24]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	bf0c      	ite	eq
 8006ae8:	2301      	moveq	r3, #1
 8006aea:	2300      	movne	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	6a3a      	ldr	r2, [r7, #32]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b0a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b0e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	7e7b      	ldrb	r3, [r7, #25]
 8006b20:	075b      	lsls	r3, r3, #29
 8006b22:	69f9      	ldr	r1, [r7, #28]
 8006b24:	0148      	lsls	r0, r1, #5
 8006b26:	6a39      	ldr	r1, [r7, #32]
 8006b28:	4401      	add	r1, r0
 8006b2a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	799b      	ldrb	r3, [r3, #6]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	f040 80c4 	bne.w	8006cc4 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	7c5b      	ldrb	r3, [r3, #17]
 8006b40:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b46:	4313      	orrs	r3, r2
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006b54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b58:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	6a3a      	ldr	r2, [r7, #32]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	79db      	ldrb	r3, [r3, #7]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d123      	bne.n	8006bca <USB_HC_StartXfer+0x26e>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	78db      	ldrb	r3, [r3, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d11f      	bne.n	8006bca <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	0151      	lsls	r1, r2, #5
 8006b9c:	6a3a      	ldr	r2, [r7, #32]
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba8:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	6a3a      	ldr	r2, [r7, #32]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bc8:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	7c9b      	ldrb	r3, [r3, #18]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d003      	beq.n	8006bda <USB_HC_StartXfer+0x27e>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	7c9b      	ldrb	r3, [r3, #18]
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d117      	bne.n	8006c0a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d113      	bne.n	8006c0a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	78db      	ldrb	r3, [r3, #3]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d10f      	bne.n	8006c0a <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c08:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	7c9b      	ldrb	r3, [r3, #18]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d163      	bne.n	8006cda <USB_HC_StartXfer+0x37e>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	78db      	ldrb	r3, [r3, #3]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d15f      	bne.n	8006cda <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d859      	bhi.n	8006cd8 <USB_HC_StartXfer+0x37c>
 8006c24:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <USB_HC_StartXfer+0x2d0>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c5f 	.word	0x08006c5f
 8006c34:	08006c81 	.word	0x08006c81
 8006c38:	08006ca3 	.word	0x08006ca3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	6a3a      	ldr	r2, [r7, #32]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5a:	6053      	str	r3, [r2, #4]
          break;
 8006c5c:	e03d      	b.n	8006cda <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	0151      	lsls	r1, r2, #5
 8006c70:	6a3a      	ldr	r2, [r7, #32]
 8006c72:	440a      	add	r2, r1
 8006c74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c78:	f043 030e 	orr.w	r3, r3, #14
 8006c7c:	6053      	str	r3, [r2, #4]
          break;
 8006c7e:	e02c      	b.n	8006cda <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	6a3a      	ldr	r2, [r7, #32]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c9e:	6053      	str	r3, [r2, #4]
          break;
 8006ca0:	e01b      	b.n	8006cda <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	6a3a      	ldr	r2, [r7, #32]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cc0:	6053      	str	r3, [r2, #4]
          break;
 8006cc2:	e00a      	b.n	8006cda <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6053      	str	r3, [r2, #4]
 8006cd6:	e000      	b.n	8006cda <USB_HC_StartXfer+0x37e>
          break;
 8006cd8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cf0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	78db      	ldrb	r3, [r3, #3]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	e003      	b.n	8006d0c <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d0a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d12:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d20:	461a      	mov	r2, r3
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e055      	b.n	8006ddc <USB_HC_StartXfer+0x480>
 8006d30:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	78db      	ldrb	r3, [r3, #3]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d14e      	bne.n	8006dda <USB_HC_StartXfer+0x47e>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d04a      	beq.n	8006dda <USB_HC_StartXfer+0x47e>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	79db      	ldrb	r3, [r3, #7]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d146      	bne.n	8006dda <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	7c9b      	ldrb	r3, [r3, #18]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d831      	bhi.n	8006db8 <USB_HC_StartXfer+0x45c>
 8006d54:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <USB_HC_StartXfer+0x400>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d6d 	.word	0x08006d6d
 8006d60:	08006d91 	.word	0x08006d91
 8006d64:	08006d6d 	.word	0x08006d6d
 8006d68:	08006d91 	.word	0x08006d91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	3303      	adds	r3, #3
 8006d72:	089b      	lsrs	r3, r3, #2
 8006d74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d76:	8afa      	ldrh	r2, [r7, #22]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d91c      	bls.n	8006dbc <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f043 0220 	orr.w	r2, r3, #32
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d8e:	e015      	b.n	8006dbc <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	3303      	adds	r3, #3
 8006d96:	089b      	lsrs	r3, r3, #2
 8006d98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006d9a:	8afa      	ldrh	r2, [r7, #22]
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d90a      	bls.n	8006dc0 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006db6:	e003      	b.n	8006dc0 <USB_HC_StartXfer+0x464>

      default:
        break;
 8006db8:	bf00      	nop
 8006dba:	e002      	b.n	8006dc2 <USB_HC_StartXfer+0x466>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e000      	b.n	8006dc2 <USB_HC_StartXfer+0x466>
        break;
 8006dc0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6999      	ldr	r1, [r3, #24]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	785a      	ldrb	r2, [r3, #1]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	9000      	str	r0, [sp, #0]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff fa2b 	bl	8006230 <USB_WritePacket>
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3728      	adds	r7, #40	@ 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	b29b      	uxth	r3, r3
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b089      	sub	sp, #36	@ 0x24
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	0c9b      	lsrs	r3, r3, #18
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	0fdb      	lsrs	r3, r3, #31
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	0fdb      	lsrs	r3, r3, #31
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d10d      	bne.n	8006e88 <USB_HC_Halt+0x82>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <USB_HC_Halt+0x82>
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d002      	beq.n	8006e84 <USB_HC_Halt+0x7e>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d101      	bne.n	8006e88 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	e0d8      	b.n	800703a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <USB_HC_Halt+0x8e>
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d173      	bne.n	8006f7c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eb2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d14a      	bne.n	8006f56 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d133      	bne.n	8006f34 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ee6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006eea:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f0a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f18:	d82e      	bhi.n	8006f78 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f30:	d0ec      	beq.n	8006f0c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f32:	e081      	b.n	8007038 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f52:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f54:	e070      	b.n	8007038 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f74:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f76:	e05f      	b.n	8007038 <USB_HC_Halt+0x232>
            break;
 8006f78:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f7a:	e05d      	b.n	8007038 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f9a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d133      	bne.n	8007014 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fe6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ff8:	d81d      	bhi.n	8007036 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800700c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007010:	d0ec      	beq.n	8006fec <USB_HC_Halt+0x1e6>
 8007012:	e011      	b.n	8007038 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800702e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	e000      	b.n	8007038 <USB_HC_Halt+0x232>
          break;
 8007036:	bf00      	nop
    }
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3724      	adds	r7, #36	@ 0x24
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b088      	sub	sp, #32
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff f82b 	bl	80060b6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007060:	2110      	movs	r1, #16
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff f884 	bl	8006170 <USB_FlushTxFifo>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff f8ae 	bl	80061d4 <USB_FlushRxFifo>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007082:	2300      	movs	r3, #0
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	e01f      	b.n	80070c8 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800709e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070a6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070ae:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070bc:	461a      	mov	r2, r3
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	d9dc      	bls.n	8007088 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80070ce:	2300      	movs	r3, #0
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	e034      	b.n	800713e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070ea:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070f2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070fa:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007108:	461a      	mov	r2, r3
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800711a:	d80c      	bhi.n	8007136 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	4413      	add	r3, r2
 8007124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800712e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007132:	d0ec      	beq.n	800710e <USB_StopHost+0xc8>
 8007134:	e000      	b.n	8007138 <USB_StopHost+0xf2>
        break;
 8007136:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	3301      	adds	r3, #1
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b0f      	cmp	r3, #15
 8007142:	d9c7      	bls.n	80070d4 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800714a:	461a      	mov	r2, r3
 800714c:	f04f 33ff 	mov.w	r3, #4294967295
 8007150:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f04f 32ff 	mov.w	r2, #4294967295
 8007158:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fe ff9a 	bl	8006094 <USB_EnableGlobalInt>

  return ret;
 8007160:	7ffb      	ldrb	r3, [r7, #31]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007170:	4904      	ldr	r1, [pc, #16]	@ (8007184 <MX_FATFS_Init+0x18>)
 8007172:	4805      	ldr	r0, [pc, #20]	@ (8007188 <MX_FATFS_Init+0x1c>)
 8007174:	f003 ff12 	bl	800af9c <FATFS_LinkDriver>
 8007178:	4603      	mov	r3, r0
 800717a:	461a      	mov	r2, r3
 800717c:	4b03      	ldr	r3, [pc, #12]	@ (800718c <MX_FATFS_Init+0x20>)
 800717e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007180:	bf00      	nop
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000208 	.word	0x20000208
 8007188:	0800c5f0 	.word	0x0800c5f0
 800718c:	20000204 	.word	0x20000204

08007190 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	4619      	mov	r1, r3
 80071ba:	4808      	ldr	r0, [pc, #32]	@ (80071dc <USBH_status+0x34>)
 80071bc:	f000 fe79 	bl	8007eb2 <USBH_MSC_UnitIsReady>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <USBH_status+0x24>
  {
    res = RES_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]
 80071ca:	e001      	b.n	80071d0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20001278 	.word	0x20001278

080071e0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b094      	sub	sp, #80	@ 0x50
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80071f6:	7bf9      	ldrb	r1, [r7, #15]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	4813      	ldr	r0, [pc, #76]	@ (8007250 <USBH_read+0x70>)
 8007202:	f000 feaa 	bl	8007f5a <USBH_MSC_Read>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <USBH_read+0x34>
  {
    res = RES_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007212:	e017      	b.n	8007244 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007214:	f107 0210 	add.w	r2, r7, #16
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	4619      	mov	r1, r3
 800721c:	480c      	ldr	r0, [pc, #48]	@ (8007250 <USBH_read+0x70>)
 800721e:	f000 fe73 	bl	8007f08 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007222:	7f7b      	ldrb	r3, [r7, #29]
 8007224:	2b3a      	cmp	r3, #58	@ 0x3a
 8007226:	d005      	beq.n	8007234 <USBH_read+0x54>
 8007228:	2b3a      	cmp	r3, #58	@ 0x3a
 800722a:	dc07      	bgt.n	800723c <USBH_read+0x5c>
 800722c:	2b04      	cmp	r3, #4
 800722e:	d001      	beq.n	8007234 <USBH_read+0x54>
 8007230:	2b28      	cmp	r3, #40	@ 0x28
 8007232:	d103      	bne.n	800723c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007234:	2303      	movs	r3, #3
 8007236:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800723a:	e003      	b.n	8007244 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8007242:	bf00      	nop
    }
  }

  return res;
 8007244:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007248:	4618      	mov	r0, r3
 800724a:	3748      	adds	r7, #72	@ 0x48
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20001278 	.word	0x20001278

08007254 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b094      	sub	sp, #80	@ 0x50
 8007258:	af02      	add	r7, sp, #8
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800726a:	7bf9      	ldrb	r1, [r7, #15]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4817      	ldr	r0, [pc, #92]	@ (80072d4 <USBH_write+0x80>)
 8007276:	f000 fed0 	bl	800801a <USBH_MSC_Write>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d103      	bne.n	8007288 <USBH_write+0x34>
  {
    res = RES_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007286:	e01f      	b.n	80072c8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007288:	f107 0210 	add.w	r2, r7, #16
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	4619      	mov	r1, r3
 8007290:	4810      	ldr	r0, [pc, #64]	@ (80072d4 <USBH_write+0x80>)
 8007292:	f000 fe39 	bl	8007f08 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007296:	7f7b      	ldrb	r3, [r7, #29]
 8007298:	2b3a      	cmp	r3, #58	@ 0x3a
 800729a:	d00d      	beq.n	80072b8 <USBH_write+0x64>
 800729c:	2b3a      	cmp	r3, #58	@ 0x3a
 800729e:	dc0f      	bgt.n	80072c0 <USBH_write+0x6c>
 80072a0:	2b28      	cmp	r3, #40	@ 0x28
 80072a2:	d009      	beq.n	80072b8 <USBH_write+0x64>
 80072a4:	2b28      	cmp	r3, #40	@ 0x28
 80072a6:	dc0b      	bgt.n	80072c0 <USBH_write+0x6c>
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d005      	beq.n	80072b8 <USBH_write+0x64>
 80072ac:	2b27      	cmp	r3, #39	@ 0x27
 80072ae:	d107      	bne.n	80072c0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80072b0:	2302      	movs	r3, #2
 80072b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80072b6:	e007      	b.n	80072c8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80072b8:	2303      	movs	r3, #3
 80072ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80072be:	e003      	b.n	80072c8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80072c6:	bf00      	nop
    }
  }

  return res;
 80072c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3748      	adds	r7, #72	@ 0x48
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20001278 	.word	0x20001278

080072d8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b090      	sub	sp, #64	@ 0x40
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	603a      	str	r2, [r7, #0]
 80072e2:	71fb      	strb	r3, [r7, #7]
 80072e4:	460b      	mov	r3, r1
 80072e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80072ee:	79bb      	ldrb	r3, [r7, #6]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d852      	bhi.n	800739a <USBH_ioctl+0xc2>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <USBH_ioctl+0x24>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	0800730d 	.word	0x0800730d
 8007300:	08007315 	.word	0x08007315
 8007304:	0800733f 	.word	0x0800733f
 8007308:	0800736b 	.word	0x0800736b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8007312:	e045      	b.n	80073a0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007314:	f107 0208 	add.w	r2, r7, #8
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	4619      	mov	r1, r3
 800731c:	4823      	ldr	r0, [pc, #140]	@ (80073ac <USBH_ioctl+0xd4>)
 800731e:	f000 fdf3 	bl	8007f08 <USBH_MSC_GetLUNInfo>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007334:	e034      	b.n	80073a0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800733c:	e030      	b.n	80073a0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800733e:	f107 0208 	add.w	r2, r7, #8
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	4619      	mov	r1, r3
 8007346:	4819      	ldr	r0, [pc, #100]	@ (80073ac <USBH_ioctl+0xd4>)
 8007348:	f000 fdde 	bl	8007f08 <USBH_MSC_GetLUNInfo>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d107      	bne.n	8007362 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007352:	8a3b      	ldrh	r3, [r7, #16]
 8007354:	461a      	mov	r2, r3
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007360:	e01e      	b.n	80073a0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8007368:	e01a      	b.n	80073a0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800736a:	f107 0208 	add.w	r2, r7, #8
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	4619      	mov	r1, r3
 8007372:	480e      	ldr	r0, [pc, #56]	@ (80073ac <USBH_ioctl+0xd4>)
 8007374:	f000 fdc8 	bl	8007f08 <USBH_MSC_GetLUNInfo>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d109      	bne.n	8007392 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800737e:	8a3b      	ldrh	r3, [r7, #16]
 8007380:	0a5b      	lsrs	r3, r3, #9
 8007382:	b29b      	uxth	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007390:	e006      	b.n	80073a0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8007398:	e002      	b.n	80073a0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800739a:	2304      	movs	r3, #4
 800739c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 80073a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3740      	adds	r7, #64	@ 0x40
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20001278 	.word	0x20001278

080073b0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b089      	sub	sp, #36	@ 0x24
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073be:	7919      	ldrb	r1, [r3, #4]
 80073c0:	2350      	movs	r3, #80	@ 0x50
 80073c2:	2206      	movs	r2, #6
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fcd7 	bl	8008d78 <USBH_FindInterface>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2bff      	cmp	r3, #255	@ 0xff
 80073d2:	d002      	beq.n	80073da <USBH_MSC_InterfaceInit+0x2a>
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d901      	bls.n	80073de <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073da:	2302      	movs	r3, #2
 80073dc:	e106      	b.n	80075ec <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fcac 	bl	8008d40 <USBH_SelectInterface>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80073f2:	2302      	movs	r3, #2
 80073f4:	e0fa      	b.n	80075ec <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80073fc:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8007400:	f004 f90a 	bl	800b618 <malloc>
 8007404:	4603      	mov	r3, r0
 8007406:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007418:	2302      	movs	r3, #2
 800741a:	e0e7      	b.n	80075ec <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800741c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007420:	2100      	movs	r1, #0
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f004 facd 	bl	800b9c2 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	211a      	movs	r1, #26
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	4413      	add	r3, r2
 8007434:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	b25b      	sxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	da16      	bge.n	800746e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	211a      	movs	r1, #26
 8007446:	fb01 f303 	mul.w	r3, r1, r3
 800744a:	4413      	add	r3, r2
 800744c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	211a      	movs	r1, #26
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	4413      	add	r3, r2
 8007462:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007466:	881a      	ldrh	r2, [r3, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	815a      	strh	r2, [r3, #10]
 800746c:	e015      	b.n	800749a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	211a      	movs	r1, #26
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	4413      	add	r3, r2
 800747a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800747e:	781a      	ldrb	r2, [r3, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	211a      	movs	r1, #26
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007494:	881a      	ldrh	r2, [r3, #0]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	211a      	movs	r1, #26
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b25b      	sxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da16      	bge.n	80074e0 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	211a      	movs	r1, #26
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	4413      	add	r3, r2
 80074be:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	211a      	movs	r1, #26
 80074ce:	fb01 f303 	mul.w	r3, r1, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80074d8:	881a      	ldrh	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	815a      	strh	r2, [r3, #10]
 80074de:	e015      	b.n	800750c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	211a      	movs	r1, #26
 80074e6:	fb01 f303 	mul.w	r3, r1, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074f0:	781a      	ldrb	r2, [r3, #0]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	211a      	movs	r1, #26
 80074fc:	fb01 f303 	mul.w	r3, r1, r3
 8007500:	4413      	add	r3, r2
 8007502:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007506:	881a      	ldrh	r2, [r3, #0]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2200      	movs	r2, #0
 8007516:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	799b      	ldrb	r3, [r3, #6]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f002 ffb4 	bl	800a492 <USBH_AllocPipe>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	79db      	ldrb	r3, [r3, #7]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f002 ffaa 	bl	800a492 <USBH_AllocPipe>
 800753e:	4603      	mov	r3, r0
 8007540:	461a      	mov	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fe02 	bl	8008150 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	799b      	ldrb	r3, [r3, #6]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01e      	beq.n	8007592 <USBH_MSC_InterfaceInit+0x1e2>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	891b      	ldrh	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01a      	beq.n	8007592 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	7959      	ldrb	r1, [r3, #5]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	7998      	ldrb	r0, [r3, #6]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	8912      	ldrh	r2, [r2, #8]
 8007574:	9202      	str	r2, [sp, #8]
 8007576:	2202      	movs	r2, #2
 8007578:	9201      	str	r2, [sp, #4]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4623      	mov	r3, r4
 800757e:	4602      	mov	r2, r0
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f002 ff57 	bl	800a434 <USBH_OpenPipe>
 8007586:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	79db      	ldrb	r3, [r3, #7]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d02c      	beq.n	80075ea <USBH_MSC_InterfaceInit+0x23a>
 8007590:	e001      	b.n	8007596 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8007592:	2303      	movs	r3, #3
 8007594:	e02a      	b.n	80075ec <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	895b      	ldrh	r3, [r3, #10]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d025      	beq.n	80075ea <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	7919      	ldrb	r1, [r3, #4]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	79d8      	ldrb	r0, [r3, #7]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	8952      	ldrh	r2, [r2, #10]
 80075b6:	9202      	str	r2, [sp, #8]
 80075b8:	2202      	movs	r2, #2
 80075ba:	9201      	str	r2, [sp, #4]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4623      	mov	r3, r4
 80075c0:	4602      	mov	r2, r0
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f002 ff36 	bl	800a434 <USBH_OpenPipe>
 80075c8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f003 ff83 	bl	800b4de <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	795b      	ldrb	r3, [r3, #5]
 80075dc:	2200      	movs	r2, #0
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f003 ff7c 	bl	800b4de <USBH_LL_SetToggle>

  return USBH_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	e000      	b.n	80075ec <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80075ea:	2303      	movs	r3, #3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd90      	pop	{r4, r7, pc}

080075f4 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	795b      	ldrb	r3, [r3, #5]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00e      	beq.n	800762c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	795b      	ldrb	r3, [r3, #5]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f002 ff2c 	bl	800a472 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	795b      	ldrb	r3, [r3, #5]
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f002 ff57 	bl	800a4d4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	791b      	ldrb	r3, [r3, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00e      	beq.n	8007652 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	791b      	ldrb	r3, [r3, #4]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f002 ff19 	bl	800a472 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	791b      	ldrb	r3, [r3, #4]
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f002 ff44 	bl	800a4d4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00b      	beq.n	8007676 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	4618      	mov	r0, r3
 8007668:	f003 ffde 	bl	800b628 <free>
    phost->pActiveClass->pData = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007672:	2200      	movs	r2, #0
 8007674:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007692:	2301      	movs	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	7b9b      	ldrb	r3, [r3, #14]
 800769a:	2b03      	cmp	r3, #3
 800769c:	d041      	beq.n	8007722 <USBH_MSC_ClassRequest+0xa2>
 800769e:	2b03      	cmp	r3, #3
 80076a0:	dc4b      	bgt.n	800773a <USBH_MSC_ClassRequest+0xba>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <USBH_MSC_ClassRequest+0x2a>
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d147      	bne.n	800773a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fd30 	bl	8008114 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d104      	bne.n	80076c8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d137      	bne.n	800773e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d804      	bhi.n	80076e0 <USBH_MSC_ClassRequest+0x60>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	e000      	b.n	80076e2 <USBH_MSC_ClassRequest+0x62>
 80076e0:	2202      	movs	r2, #2
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 80076e6:	2300      	movs	r3, #0
 80076e8:	73bb      	strb	r3, [r7, #14]
 80076ea:	e014      	b.n	8007716 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	2134      	movs	r1, #52	@ 0x34
 80076f2:	fb01 f303 	mul.w	r3, r1, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	3392      	adds	r3, #146	@ 0x92
 80076fa:	2202      	movs	r2, #2
 80076fc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	2134      	movs	r1, #52	@ 0x34
 8007704:	fb01 f303 	mul.w	r3, r1, r3
 8007708:	4413      	add	r3, r2
 800770a:	33c1      	adds	r3, #193	@ 0xc1
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	3301      	adds	r3, #1
 8007714:	73bb      	strb	r3, [r7, #14]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	7bba      	ldrb	r2, [r7, #14]
 800771c:	429a      	cmp	r2, r3
 800771e:	d3e5      	bcc.n	80076ec <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007720:	e00d      	b.n	800773e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007722:	2100      	movs	r1, #0
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f002 f8ff 	bl	8009928 <USBH_ClrFeature>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d108      	bne.n	8007742 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	7bda      	ldrb	r2, [r3, #15]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007738:	e003      	b.n	8007742 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <USBH_MSC_ClassRequest+0xc4>
      break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007742:	bf00      	nop
  }

  return status;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007766:	2301      	movs	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800776a:	2301      	movs	r3, #1
 800776c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	7b1b      	ldrb	r3, [r3, #12]
 8007772:	2b0a      	cmp	r3, #10
 8007774:	f000 8280 	beq.w	8007c78 <USBH_MSC_Process+0x528>
 8007778:	2b0a      	cmp	r3, #10
 800777a:	f300 82b8 	bgt.w	8007cee <USBH_MSC_Process+0x59e>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <USBH_MSC_Process+0x3a>
 8007782:	2b01      	cmp	r3, #1
 8007784:	f000 82b0 	beq.w	8007ce8 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007788:	e2b1      	b.n	8007cee <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	4293      	cmp	r3, r2
 8007796:	f080 825d 	bcs.w	8007c54 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80077a0:	4619      	mov	r1, r3
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	2334      	movs	r3, #52	@ 0x34
 80077a6:	fb01 f303 	mul.w	r3, r1, r3
 80077aa:	4413      	add	r3, r2
 80077ac:	3391      	adds	r3, #145	@ 0x91
 80077ae:	2201      	movs	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80077b8:	4619      	mov	r1, r3
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	2334      	movs	r3, #52	@ 0x34
 80077be:	fb01 f303 	mul.w	r3, r1, r3
 80077c2:	4413      	add	r3, r2
 80077c4:	3390      	adds	r3, #144	@ 0x90
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	f200 824b 	bhi.w	8007c64 <USBH_MSC_Process+0x514>
 80077ce:	a201      	add	r2, pc, #4	@ (adr r2, 80077d4 <USBH_MSC_Process+0x84>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	08007c65 	.word	0x08007c65
 80077dc:	080078c3 	.word	0x080078c3
 80077e0:	08007a49 	.word	0x08007a49
 80077e4:	0800781f 	.word	0x0800781f
 80077e8:	08007b15 	.word	0x08007b15
 80077ec:	08007c65 	.word	0x08007c65
 80077f0:	08007c65 	.word	0x08007c65
 80077f4:	08007c43 	.word	0x08007c43
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80077fe:	4619      	mov	r1, r3
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	2334      	movs	r3, #52	@ 0x34
 8007804:	fb01 f303 	mul.w	r3, r1, r3
 8007808:	4413      	add	r3, r2
 800780a:	3390      	adds	r3, #144	@ 0x90
 800780c:	2204      	movs	r2, #4
 800780e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 800781c:	e22b      	b.n	8007c76 <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007824:	b2d9      	uxtb	r1, r3
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800782c:	461a      	mov	r2, r3
 800782e:	2334      	movs	r3, #52	@ 0x34
 8007830:	fb02 f303 	mul.w	r3, r2, r3
 8007834:	3398      	adds	r3, #152	@ 0x98
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4413      	add	r3, r2
 800783a:	3307      	adds	r3, #7
 800783c:	461a      	mov	r2, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 ffa3 	bl	800878a <USBH_MSC_SCSI_Inquiry>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10c      	bne.n	8007868 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007854:	4619      	mov	r1, r3
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	2334      	movs	r3, #52	@ 0x34
 800785a:	fb01 f303 	mul.w	r3, r1, r3
 800785e:	4413      	add	r3, r2
 8007860:	3390      	adds	r3, #144	@ 0x90
 8007862:	2202      	movs	r2, #2
 8007864:	701a      	strb	r2, [r3, #0]
            break;
 8007866:	e1ff      	b.n	8007c68 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d10c      	bne.n	8007888 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007874:	4619      	mov	r1, r3
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	2334      	movs	r3, #52	@ 0x34
 800787a:	fb01 f303 	mul.w	r3, r1, r3
 800787e:	4413      	add	r3, r2
 8007880:	3390      	adds	r3, #144	@ 0x90
 8007882:	2205      	movs	r2, #5
 8007884:	701a      	strb	r2, [r3, #0]
            break;
 8007886:	e1ef      	b.n	8007c68 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	2b04      	cmp	r3, #4
 800788c:	f040 81ec 	bne.w	8007c68 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007896:	4619      	mov	r1, r3
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	2334      	movs	r3, #52	@ 0x34
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	3390      	adds	r3, #144	@ 0x90
 80078a4:	2208      	movs	r2, #8
 80078a6:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80078ae:	4619      	mov	r1, r3
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	2334      	movs	r3, #52	@ 0x34
 80078b4:	fb01 f303 	mul.w	r3, r1, r3
 80078b8:	4413      	add	r3, r2
 80078ba:	3391      	adds	r3, #145	@ 0x91
 80078bc:	2202      	movs	r2, #2
 80078be:	701a      	strb	r2, [r3, #0]
            break;
 80078c0:	e1d2      	b.n	8007c68 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fe9f 	bl	8008610 <USBH_MSC_SCSI_TestUnitReady>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d14a      	bne.n	8007972 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80078e2:	4619      	mov	r1, r3
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	2334      	movs	r3, #52	@ 0x34
 80078e8:	fb01 f303 	mul.w	r3, r1, r3
 80078ec:	4413      	add	r3, r2
 80078ee:	3392      	adds	r3, #146	@ 0x92
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00c      	beq.n	8007910 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80078fc:	4619      	mov	r1, r3
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	2334      	movs	r3, #52	@ 0x34
 8007902:	fb01 f303 	mul.w	r3, r1, r3
 8007906:	4413      	add	r3, r2
 8007908:	33c1      	adds	r3, #193	@ 0xc1
 800790a:	2201      	movs	r2, #1
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	e00b      	b.n	8007928 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007916:	4619      	mov	r1, r3
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	2334      	movs	r3, #52	@ 0x34
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	4413      	add	r3, r2
 8007922:	33c1      	adds	r3, #193	@ 0xc1
 8007924:	2200      	movs	r2, #0
 8007926:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800792e:	4619      	mov	r1, r3
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	2334      	movs	r3, #52	@ 0x34
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	4413      	add	r3, r2
 800793a:	3390      	adds	r3, #144	@ 0x90
 800793c:	2203      	movs	r2, #3
 800793e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007946:	4619      	mov	r1, r3
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	2334      	movs	r3, #52	@ 0x34
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	4413      	add	r3, r2
 8007952:	3391      	adds	r3, #145	@ 0x91
 8007954:	2200      	movs	r2, #0
 8007956:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800795e:	4619      	mov	r1, r3
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	2334      	movs	r3, #52	@ 0x34
 8007964:	fb01 f303 	mul.w	r3, r1, r3
 8007968:	4413      	add	r3, r2
 800796a:	3392      	adds	r3, #146	@ 0x92
 800796c:	2200      	movs	r2, #0
 800796e:	701a      	strb	r2, [r3, #0]
            break;
 8007970:	e17c      	b.n	8007c6c <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d14a      	bne.n	8007a0e <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800797e:	4619      	mov	r1, r3
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	2334      	movs	r3, #52	@ 0x34
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	4413      	add	r3, r2
 800798a:	3392      	adds	r3, #146	@ 0x92
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d00c      	beq.n	80079ac <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007998:	4619      	mov	r1, r3
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	2334      	movs	r3, #52	@ 0x34
 800799e:	fb01 f303 	mul.w	r3, r1, r3
 80079a2:	4413      	add	r3, r2
 80079a4:	33c1      	adds	r3, #193	@ 0xc1
 80079a6:	2201      	movs	r2, #1
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	e00b      	b.n	80079c4 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80079b2:	4619      	mov	r1, r3
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	2334      	movs	r3, #52	@ 0x34
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	4413      	add	r3, r2
 80079be:	33c1      	adds	r3, #193	@ 0xc1
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80079ca:	4619      	mov	r1, r3
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	2334      	movs	r3, #52	@ 0x34
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	4413      	add	r3, r2
 80079d6:	3390      	adds	r3, #144	@ 0x90
 80079d8:	2205      	movs	r2, #5
 80079da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80079e2:	4619      	mov	r1, r3
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	2334      	movs	r3, #52	@ 0x34
 80079e8:	fb01 f303 	mul.w	r3, r1, r3
 80079ec:	4413      	add	r3, r2
 80079ee:	3391      	adds	r3, #145	@ 0x91
 80079f0:	2201      	movs	r2, #1
 80079f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80079fa:	4619      	mov	r1, r3
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	2334      	movs	r3, #52	@ 0x34
 8007a00:	fb01 f303 	mul.w	r3, r1, r3
 8007a04:	4413      	add	r3, r2
 8007a06:	3392      	adds	r3, #146	@ 0x92
 8007a08:	2202      	movs	r2, #2
 8007a0a:	701a      	strb	r2, [r3, #0]
            break;
 8007a0c:	e12e      	b.n	8007c6c <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	f040 812b 	bne.w	8007c6c <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	2334      	movs	r3, #52	@ 0x34
 8007a22:	fb01 f303 	mul.w	r3, r1, r3
 8007a26:	4413      	add	r3, r2
 8007a28:	3390      	adds	r3, #144	@ 0x90
 8007a2a:	2208      	movs	r2, #8
 8007a2c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a34:	4619      	mov	r1, r3
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	2334      	movs	r3, #52	@ 0x34
 8007a3a:	fb01 f303 	mul.w	r3, r1, r3
 8007a3e:	4413      	add	r3, r2
 8007a40:	3391      	adds	r3, #145	@ 0x91
 8007a42:	2202      	movs	r2, #2
 8007a44:	701a      	strb	r2, [r3, #0]
            break;
 8007a46:	e111      	b.n	8007c6c <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a4e:	b2d9      	uxtb	r1, r3
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a56:	461a      	mov	r2, r3
 8007a58:	2334      	movs	r3, #52	@ 0x34
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	3390      	adds	r3, #144	@ 0x90
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4413      	add	r3, r2
 8007a64:	3304      	adds	r3, #4
 8007a66:	461a      	mov	r2, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fe14 	bl	8008696 <USBH_MSC_SCSI_ReadCapacity>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d120      	bne.n	8007aba <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a7e:	4619      	mov	r1, r3
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	2334      	movs	r3, #52	@ 0x34
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	3390      	adds	r3, #144	@ 0x90
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a96:	4619      	mov	r1, r3
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	2334      	movs	r3, #52	@ 0x34
 8007a9c:	fb01 f303 	mul.w	r3, r1, r3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3391      	adds	r3, #145	@ 0x91
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007aae:	3301      	adds	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007ab8:	e0da      	b.n	8007c70 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d10c      	bne.n	8007ada <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	2334      	movs	r3, #52	@ 0x34
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3390      	adds	r3, #144	@ 0x90
 8007ad4:	2205      	movs	r2, #5
 8007ad6:	701a      	strb	r2, [r3, #0]
            break;
 8007ad8:	e0ca      	b.n	8007c70 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	f040 80c7 	bne.w	8007c70 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ae8:	4619      	mov	r1, r3
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	2334      	movs	r3, #52	@ 0x34
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	4413      	add	r3, r2
 8007af4:	3390      	adds	r3, #144	@ 0x90
 8007af6:	2208      	movs	r2, #8
 8007af8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b00:	4619      	mov	r1, r3
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	2334      	movs	r3, #52	@ 0x34
 8007b06:	fb01 f303 	mul.w	r3, r1, r3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3391      	adds	r3, #145	@ 0x91
 8007b0e:	2202      	movs	r2, #2
 8007b10:	701a      	strb	r2, [r3, #0]
            break;
 8007b12:	e0ad      	b.n	8007c70 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b1a:	b2d9      	uxtb	r1, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b22:	461a      	mov	r2, r3
 8007b24:	2334      	movs	r3, #52	@ 0x34
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	3398      	adds	r3, #152	@ 0x98
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	3304      	adds	r3, #4
 8007b32:	461a      	mov	r2, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fecd 	bl	80088d4 <USBH_MSC_SCSI_RequestSense>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d146      	bne.n	8007bd2 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	2334      	movs	r3, #52	@ 0x34
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	4413      	add	r3, r2
 8007b56:	339c      	adds	r3, #156	@ 0x9c
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b06      	cmp	r3, #6
 8007b5c:	d00c      	beq.n	8007b78 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b64:	4619      	mov	r1, r3
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	2334      	movs	r3, #52	@ 0x34
 8007b6a:	fb01 f303 	mul.w	r3, r1, r3
 8007b6e:	4413      	add	r3, r2
 8007b70:	339c      	adds	r3, #156	@ 0x9c
 8007b72:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d117      	bne.n	8007ba8 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d80c      	bhi.n	8007ba8 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b94:	4619      	mov	r1, r3
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	2334      	movs	r3, #52	@ 0x34
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3390      	adds	r3, #144	@ 0x90
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	701a      	strb	r2, [r3, #0]
                  break;
 8007ba6:	e066      	b.n	8007c76 <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007bae:	4619      	mov	r1, r3
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	2334      	movs	r3, #52	@ 0x34
 8007bb4:	fb01 f303 	mul.w	r3, r1, r3
 8007bb8:	4413      	add	r3, r2
 8007bba:	3390      	adds	r3, #144	@ 0x90
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007bd0:	e050      	b.n	8007c74 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d118      	bne.n	8007c0a <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007bde:	4619      	mov	r1, r3
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	2334      	movs	r3, #52	@ 0x34
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	3390      	adds	r3, #144	@ 0x90
 8007bec:	2208      	movs	r2, #8
 8007bee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	2334      	movs	r3, #52	@ 0x34
 8007bfc:	fb01 f303 	mul.w	r3, r1, r3
 8007c00:	4413      	add	r3, r2
 8007c02:	3391      	adds	r3, #145	@ 0x91
 8007c04:	2202      	movs	r2, #2
 8007c06:	701a      	strb	r2, [r3, #0]
            break;
 8007c08:	e034      	b.n	8007c74 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d131      	bne.n	8007c74 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c16:	4619      	mov	r1, r3
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	2334      	movs	r3, #52	@ 0x34
 8007c1c:	fb01 f303 	mul.w	r3, r1, r3
 8007c20:	4413      	add	r3, r2
 8007c22:	3390      	adds	r3, #144	@ 0x90
 8007c24:	2208      	movs	r2, #8
 8007c26:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c2e:	4619      	mov	r1, r3
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	2334      	movs	r3, #52	@ 0x34
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	3391      	adds	r3, #145	@ 0x91
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	701a      	strb	r2, [r3, #0]
            break;
 8007c40:	e018      	b.n	8007c74 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c48:	3301      	adds	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007c52:	e010      	b.n	8007c76 <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	220a      	movs	r2, #10
 8007c60:	731a      	strb	r2, [r3, #12]
      break;
 8007c62:	e045      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
            break;
 8007c64:	bf00      	nop
 8007c66:	e043      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
            break;
 8007c68:	bf00      	nop
 8007c6a:	e041      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
            break;
 8007c6c:	bf00      	nop
 8007c6e:	e03f      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
            break;
 8007c70:	bf00      	nop
 8007c72:	e03d      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
            break;
 8007c74:	bf00      	nop
      break;
 8007c76:	e03b      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	7812      	ldrb	r2, [r2, #0]
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d228      	bcs.n	8007cd8 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c98:	4619      	mov	r1, r3
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	2334      	movs	r3, #52	@ 0x34
 8007c9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3391      	adds	r3, #145	@ 0x91
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d106      	bne.n	8007cba <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	4798      	blx	r3
 8007cb8:	e005      	b.n	8007cc6 <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cc0:	2106      	movs	r1, #6
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
        MSC_Handle->lun++;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8007ccc:	3301      	adds	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8007cd6:	e00b      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	731a      	strb	r2, [r3, #12]
      break;
 8007ce6:	e003      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	e000      	b.n	8007cf0 <USBH_MSC_Process+0x5a0>
      break;
 8007cee:	bf00      	nop
  }
  return error;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop

08007cfc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b088      	sub	sp, #32
 8007d16:	af02      	add	r7, sp, #8
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	2134      	movs	r1, #52	@ 0x34
 8007d36:	fb01 f303 	mul.w	r3, r1, r3
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3390      	adds	r3, #144	@ 0x90
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b07      	cmp	r3, #7
 8007d42:	d03c      	beq.n	8007dbe <USBH_MSC_RdWrProcess+0xac>
 8007d44:	2b07      	cmp	r3, #7
 8007d46:	f300 80a8 	bgt.w	8007e9a <USBH_MSC_RdWrProcess+0x188>
 8007d4a:	2b05      	cmp	r3, #5
 8007d4c:	d06c      	beq.n	8007e28 <USBH_MSC_RdWrProcess+0x116>
 8007d4e:	2b06      	cmp	r3, #6
 8007d50:	f040 80a3 	bne.w	8007e9a <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007d54:	78f9      	ldrb	r1, [r7, #3]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fea7 	bl	8008ab2 <USBH_MSC_SCSI_Read>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10b      	bne.n	8007d86 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	2134      	movs	r1, #52	@ 0x34
 8007d74:	fb01 f303 	mul.w	r3, r1, r3
 8007d78:	4413      	add	r3, r2
 8007d7a:	3390      	adds	r3, #144	@ 0x90
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d84:	e08b      	b.n	8007e9e <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d109      	bne.n	8007da0 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	2134      	movs	r1, #52	@ 0x34
 8007d92:	fb01 f303 	mul.w	r3, r1, r3
 8007d96:	4413      	add	r3, r2
 8007d98:	3390      	adds	r3, #144	@ 0x90
 8007d9a:	2205      	movs	r2, #5
 8007d9c:	701a      	strb	r2, [r3, #0]
      break;
 8007d9e:	e07e      	b.n	8007e9e <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d17b      	bne.n	8007e9e <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	2134      	movs	r1, #52	@ 0x34
 8007dac:	fb01 f303 	mul.w	r3, r1, r3
 8007db0:	4413      	add	r3, r2
 8007db2:	3390      	adds	r3, #144	@ 0x90
 8007db4:	2208      	movs	r2, #8
 8007db6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007db8:	2302      	movs	r3, #2
 8007dba:	75fb      	strb	r3, [r7, #23]
      break;
 8007dbc:	e06f      	b.n	8007e9e <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007dbe:	78f9      	ldrb	r1, [r7, #3]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fe02 	bl	80089d2 <USBH_MSC_SCSI_Write>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10b      	bne.n	8007df0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	2134      	movs	r1, #52	@ 0x34
 8007dde:	fb01 f303 	mul.w	r3, r1, r3
 8007de2:	4413      	add	r3, r2
 8007de4:	3390      	adds	r3, #144	@ 0x90
 8007de6:	2201      	movs	r2, #1
 8007de8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dee:	e058      	b.n	8007ea2 <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d109      	bne.n	8007e0a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	2134      	movs	r1, #52	@ 0x34
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	4413      	add	r3, r2
 8007e02:	3390      	adds	r3, #144	@ 0x90
 8007e04:	2205      	movs	r2, #5
 8007e06:	701a      	strb	r2, [r3, #0]
      break;
 8007e08:	e04b      	b.n	8007ea2 <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d148      	bne.n	8007ea2 <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	2134      	movs	r1, #52	@ 0x34
 8007e16:	fb01 f303 	mul.w	r3, r1, r3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3390      	adds	r3, #144	@ 0x90
 8007e1e:	2208      	movs	r2, #8
 8007e20:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007e22:	2302      	movs	r3, #2
 8007e24:	75fb      	strb	r3, [r7, #23]
      break;
 8007e26:	e03c      	b.n	8007ea2 <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	2234      	movs	r2, #52	@ 0x34
 8007e2c:	fb02 f303 	mul.w	r3, r2, r3
 8007e30:	3398      	adds	r3, #152	@ 0x98
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4413      	add	r3, r2
 8007e36:	1d1a      	adds	r2, r3, #4
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fd49 	bl	80088d4 <USBH_MSC_SCSI_RequestSense>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d114      	bne.n	8007e76 <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	2134      	movs	r1, #52	@ 0x34
 8007e52:	fb01 f303 	mul.w	r3, r1, r3
 8007e56:	4413      	add	r3, r2
 8007e58:	3390      	adds	r3, #144	@ 0x90
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	2134      	movs	r1, #52	@ 0x34
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	4413      	add	r3, r2
 8007e6a:	3391      	adds	r3, #145	@ 0x91
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007e70:	2302      	movs	r3, #2
 8007e72:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e74:	e017      	b.n	8007ea6 <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d014      	beq.n	8007ea6 <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d111      	bne.n	8007ea6 <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	2134      	movs	r1, #52	@ 0x34
 8007e88:	fb01 f303 	mul.w	r3, r1, r3
 8007e8c:	4413      	add	r3, r2
 8007e8e:	3390      	adds	r3, #144	@ 0x90
 8007e90:	2208      	movs	r2, #8
 8007e92:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007e94:	2302      	movs	r3, #2
 8007e96:	75fb      	strb	r3, [r7, #23]
      break;
 8007e98:	e005      	b.n	8007ea6 <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 8007e9a:	bf00      	nop
 8007e9c:	e004      	b.n	8007ea8 <USBH_MSC_RdWrProcess+0x196>
      break;
 8007e9e:	bf00      	nop
 8007ea0:	e002      	b.n	8007ea8 <USBH_MSC_RdWrProcess+0x196>
      break;
 8007ea2:	bf00      	nop
 8007ea4:	e000      	b.n	8007ea8 <USBH_MSC_RdWrProcess+0x196>
      break;
 8007ea6:	bf00      	nop

  }
  return error;
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b0b      	cmp	r3, #11
 8007eda:	d10c      	bne.n	8007ef6 <USBH_MSC_UnitIsReady+0x44>
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	2134      	movs	r1, #52	@ 0x34
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3391      	adds	r3, #145	@ 0x91
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	73fb      	strb	r3, [r7, #15]
 8007ef4:	e001      	b.n	8007efa <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	460b      	mov	r3, r1
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b0b      	cmp	r3, #11
 8007f32:	d10d      	bne.n	8007f50 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	2234      	movs	r2, #52	@ 0x34
 8007f38:	fb02 f303 	mul.w	r3, r2, r3
 8007f3c:	3390      	adds	r3, #144	@ 0x90
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4413      	add	r3, r2
 8007f42:	2234      	movs	r2, #52	@ 0x34
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f003 fdc7 	bl	800bada <memcpy>
    return USBH_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	e000      	b.n	8007f52 <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 8007f50:	2302      	movs	r3, #2
  }
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b088      	sub	sp, #32
 8007f5e:	af02      	add	r7, sp, #8
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
 8007f66:	460b      	mov	r3, r1
 8007f68:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007f74:	7afb      	ldrb	r3, [r7, #11]
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00e      	beq.n	8007fa8 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007f90:	2b0b      	cmp	r3, #11
 8007f92:	d109      	bne.n	8007fa8 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007f94:	7afb      	ldrb	r3, [r7, #11]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	2134      	movs	r1, #52	@ 0x34
 8007f9a:	fb01 f303 	mul.w	r3, r1, r3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3390      	adds	r3, #144	@ 0x90
 8007fa2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d001      	beq.n	8007fac <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e032      	b.n	8008012 <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 8007fac:	7afb      	ldrb	r3, [r7, #11]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	2134      	movs	r1, #52	@ 0x34
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	3390      	adds	r3, #144	@ 0x90
 8007fba:	2206      	movs	r2, #6
 8007fbc:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007fbe:	7af9      	ldrb	r1, [r7, #11]
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fd72 	bl	8008ab2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fd4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007fd6:	e013      	b.n	8008000 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	1ad2      	subs	r2, r2, r3
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d805      	bhi.n	8007ffc <USBH_MSC_Read+0xa2>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e008      	b.n	8008012 <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff fe84 	bl	8007d12 <USBH_MSC_RdWrProcess>
 800800a:	4603      	mov	r3, r0
 800800c:	2b01      	cmp	r3, #1
 800800e:	d0e3      	beq.n	8007fd8 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b088      	sub	sp, #32
 800801e:	af02      	add	r7, sp, #8
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	460b      	mov	r3, r1
 8008028:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	b29a      	uxth	r2, r3
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00e      	beq.n	8008068 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008050:	2b0b      	cmp	r3, #11
 8008052:	d109      	bne.n	8008068 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	2134      	movs	r1, #52	@ 0x34
 800805a:	fb01 f303 	mul.w	r3, r1, r3
 800805e:	4413      	add	r3, r2
 8008060:	3390      	adds	r3, #144	@ 0x90
 8008062:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008064:	2b01      	cmp	r3, #1
 8008066:	d001      	beq.n	800806c <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 8008068:	2302      	movs	r3, #2
 800806a:	e032      	b.n	80080d2 <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	2134      	movs	r1, #52	@ 0x34
 8008072:	fb01 f303 	mul.w	r3, r1, r3
 8008076:	4413      	add	r3, r2
 8008078:	3390      	adds	r3, #144	@ 0x90
 800807a:	2207      	movs	r2, #7
 800807c:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800807e:	7af9      	ldrb	r1, [r7, #11]
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 fca2 	bl	80089d2 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008094:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008096:	e013      	b.n	80080c0 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad2      	subs	r2, r2, r3
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80080a8:	fb01 f303 	mul.w	r3, r1, r3
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d805      	bhi.n	80080bc <USBH_MSC_Write+0xa2>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 80080bc:	2302      	movs	r3, #2
 80080be:	e008      	b.n	80080d2 <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80080c0:	7afb      	ldrb	r3, [r7, #11]
 80080c2:	4619      	mov	r1, r3
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff fe24 	bl	8007d12 <USBH_MSC_RdWrProcess>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d0e3      	beq.n	8008098 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2221      	movs	r2, #33	@ 0x21
 80080e6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	22ff      	movs	r2, #255	@ 0xff
 80080ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008100:	2200      	movs	r2, #0
 8008102:	2100      	movs	r1, #0
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 ff44 	bl	8009f92 <USBH_CtlReq>
 800810a:	4603      	mov	r3, r0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	22a1      	movs	r2, #161	@ 0xa1
 8008122:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	22fe      	movs	r2, #254	@ 0xfe
 8008128:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800813c:	2201      	movs	r2, #1
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 ff26 	bl	8009f92 <USBH_CtlReq>
 8008146:	4603      	mov	r3, r0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4a09      	ldr	r2, [pc, #36]	@ (800818c <USBH_MSC_BOT_Init+0x3c>)
 8008166:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4a09      	ldr	r2, [pc, #36]	@ (8008190 <USBH_MSC_BOT_Init+0x40>)
 800816c:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	43425355 	.word	0x43425355
 8008190:	20304050 	.word	0x20304050

08008194 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af02      	add	r7, sp, #8
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80081a0:	2301      	movs	r3, #1
 80081a2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80081a4:	2301      	movs	r3, #1
 80081a6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80081a8:	2301      	movs	r3, #1
 80081aa:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081ac:	2300      	movs	r3, #0
 80081ae:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80081c4:	3b01      	subs	r3, #1
 80081c6:	2b0a      	cmp	r3, #10
 80081c8:	f200 819e 	bhi.w	8008508 <USBH_MSC_BOT_Process+0x374>
 80081cc:	a201      	add	r2, pc, #4	@ (adr r2, 80081d4 <USBH_MSC_BOT_Process+0x40>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	08008201 	.word	0x08008201
 80081d8:	08008229 	.word	0x08008229
 80081dc:	08008293 	.word	0x08008293
 80081e0:	080082b1 	.word	0x080082b1
 80081e4:	08008335 	.word	0x08008335
 80081e8:	08008357 	.word	0x08008357
 80081ec:	080083ef 	.word	0x080083ef
 80081f0:	0800840b 	.word	0x0800840b
 80081f4:	0800845d 	.word	0x0800845d
 80081f8:	0800848d 	.word	0x0800848d
 80081fc:	080084ef 	.word	0x080084ef
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	795b      	ldrb	r3, [r3, #5]
 800821a:	2201      	movs	r2, #1
 800821c:	9200      	str	r2, [sp, #0]
 800821e:	221f      	movs	r2, #31
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f002 f8c4 	bl	800a3ae <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008226:	e17e      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	795b      	ldrb	r3, [r3, #5]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f003 f934 	bl	800b49c <USBH_LL_GetURBState>
 8008234:	4603      	mov	r3, r0
 8008236:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008238:	7d3b      	ldrb	r3, [r7, #20]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d118      	bne.n	8008270 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00f      	beq.n	8008266 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800824c:	b25b      	sxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	da04      	bge.n	800825c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2203      	movs	r2, #3
 8008256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800825a:	e157      	b.n	800850c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2205      	movs	r2, #5
 8008260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008264:	e152      	b.n	800850c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2207      	movs	r2, #7
 800826a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800826e:	e14d      	b.n	800850c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008270:	7d3b      	ldrb	r3, [r7, #20]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d104      	bne.n	8008280 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800827e:	e145      	b.n	800850c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008280:	7d3b      	ldrb	r3, [r7, #20]
 8008282:	2b05      	cmp	r3, #5
 8008284:	f040 8142 	bne.w	800850c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	220a      	movs	r2, #10
 800828c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008290:	e13c      	b.n	800850c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	895a      	ldrh	r2, [r3, #10]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	791b      	ldrb	r3, [r3, #4]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f002 f8a9 	bl	800a3f8 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	2204      	movs	r2, #4
 80082aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 80082ae:	e13a      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	791b      	ldrb	r3, [r3, #4]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f003 f8f0 	bl	800b49c <USBH_LL_GetURBState>
 80082bc:	4603      	mov	r3, r0
 80082be:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80082c0:	7d3b      	ldrb	r3, [r7, #20]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d12d      	bne.n	8008322 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	8952      	ldrh	r2, [r2, #10]
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d910      	bls.n	80082f4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	8952      	ldrh	r2, [r2, #10]
 80082dc:	441a      	add	r2, r3
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	8952      	ldrh	r2, [r2, #10]
 80082ec:	1a9a      	subs	r2, r3, r2
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80082f2:	e002      	b.n	80082fa <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2200      	movs	r2, #0
 80082f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	895a      	ldrh	r2, [r3, #10]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	791b      	ldrb	r3, [r3, #4]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f002 f871 	bl	800a3f8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008316:	e0fb      	b.n	8008510 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2207      	movs	r2, #7
 800831c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008320:	e0f6      	b.n	8008510 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8008322:	7d3b      	ldrb	r3, [r7, #20]
 8008324:	2b05      	cmp	r3, #5
 8008326:	f040 80f3 	bne.w	8008510 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2209      	movs	r2, #9
 800832e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008332:	e0ed      	b.n	8008510 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	891a      	ldrh	r2, [r3, #8]
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	795b      	ldrb	r3, [r3, #5]
 8008342:	2001      	movs	r0, #1
 8008344:	9000      	str	r0, [sp, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f002 f831 	bl	800a3ae <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2206      	movs	r2, #6
 8008350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008354:	e0e7      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	795b      	ldrb	r3, [r3, #5]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f003 f89d 	bl	800b49c <USBH_LL_GetURBState>
 8008362:	4603      	mov	r3, r0
 8008364:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008366:	7d3b      	ldrb	r3, [r7, #20]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d12f      	bne.n	80083cc <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	8912      	ldrh	r2, [r2, #8]
 8008374:	4293      	cmp	r3, r2
 8008376:	d910      	bls.n	800839a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	8912      	ldrh	r2, [r2, #8]
 8008382:	441a      	add	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	8912      	ldrh	r2, [r2, #8]
 8008392:	1a9a      	subs	r2, r3, r2
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008398:	e002      	b.n	80083a0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2200      	movs	r2, #0
 800839e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00c      	beq.n	80083c2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	891a      	ldrh	r2, [r3, #8]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	795b      	ldrb	r3, [r3, #5]
 80083b6:	2001      	movs	r0, #1
 80083b8:	9000      	str	r0, [sp, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fff7 	bl	800a3ae <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80083c0:	e0a8      	b.n	8008514 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2207      	movs	r2, #7
 80083c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80083ca:	e0a3      	b.n	8008514 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083cc:	7d3b      	ldrb	r3, [r7, #20]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d104      	bne.n	80083dc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2205      	movs	r2, #5
 80083d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80083da:	e09b      	b.n	8008514 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80083dc:	7d3b      	ldrb	r3, [r7, #20]
 80083de:	2b05      	cmp	r3, #5
 80083e0:	f040 8098 	bne.w	8008514 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	220a      	movs	r2, #10
 80083e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80083ec:	e092      	b.n	8008514 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	791b      	ldrb	r3, [r3, #4]
 80083f8:	220d      	movs	r2, #13
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fffc 	bl	800a3f8 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2208      	movs	r2, #8
 8008404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008408:	e08d      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f003 f843 	bl	800b49c <USBH_LL_GetURBState>
 8008416:	4603      	mov	r3, r0
 8008418:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800841a:	7d3b      	ldrb	r3, [r7, #20]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d115      	bne.n	800844c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8a9 	bl	8008588 <USBH_MSC_DecodeCSW>
 8008436:	4603      	mov	r3, r0
 8008438:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800843a:	7d7b      	ldrb	r3, [r7, #21]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d102      	bne.n	8008446 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008444:	e068      	b.n	8008518 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008446:	2302      	movs	r3, #2
 8008448:	75fb      	strb	r3, [r7, #23]
      break;
 800844a:	e065      	b.n	8008518 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800844c:	7d3b      	ldrb	r3, [r7, #20]
 800844e:	2b05      	cmp	r3, #5
 8008450:	d162      	bne.n	8008518 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2209      	movs	r2, #9
 8008456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800845a:	e05d      	b.n	8008518 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	2200      	movs	r2, #0
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f864 	bl	8008530 <USBH_MSC_BOT_Abort>
 8008468:	4603      	mov	r3, r0
 800846a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800846c:	7dbb      	ldrb	r3, [r7, #22]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2207      	movs	r2, #7
 8008476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800847a:	e04f      	b.n	800851c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800847c:	7dbb      	ldrb	r3, [r7, #22]
 800847e:	2b04      	cmp	r3, #4
 8008480:	d14c      	bne.n	800851c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	220b      	movs	r2, #11
 8008486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800848a:	e047      	b.n	800851c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	2201      	movs	r2, #1
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f84c 	bl	8008530 <USBH_MSC_BOT_Abort>
 8008498:	4603      	mov	r3, r0
 800849a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800849c:	7dbb      	ldrb	r3, [r7, #22]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d11d      	bne.n	80084de <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	795b      	ldrb	r3, [r3, #5]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f003 f84b 	bl	800b544 <USBH_LL_GetToggle>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	7959      	ldrb	r1, [r3, #5]
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	f1c3 0301 	rsb	r3, r3, #1
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f003 f80c 	bl	800b4de <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f003 f805 	bl	800b4de <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2209      	movs	r2, #9
 80084d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80084dc:	e020      	b.n	8008520 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80084de:	7dbb      	ldrb	r3, [r7, #22]
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d11d      	bne.n	8008520 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	220b      	movs	r2, #11
 80084e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80084ec:	e018      	b.n	8008520 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fdf3 	bl	80080da <USBH_MSC_BOT_REQ_Reset>
 80084f4:	4603      	mov	r3, r0
 80084f6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d112      	bne.n	8008524 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8008506:	e00d      	b.n	8008524 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008508:	bf00      	nop
 800850a:	e00c      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>
      break;
 800850c:	bf00      	nop
 800850e:	e00a      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>
      break;
 8008510:	bf00      	nop
 8008512:	e008      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>
      break;
 8008514:	bf00      	nop
 8008516:	e006      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>
      break;
 8008518:	bf00      	nop
 800851a:	e004      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>
      break;
 800851c:	bf00      	nop
 800851e:	e002      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>
      break;
 8008520:	bf00      	nop
 8008522:	e000      	b.n	8008526 <USBH_MSC_BOT_Process+0x392>
      break;
 8008524:	bf00      	nop
  }
  return status;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
 800853c:	4613      	mov	r3, r2
 800853e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008540:	2302      	movs	r3, #2
 8008542:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800854e:	78bb      	ldrb	r3, [r7, #2]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <USBH_MSC_BOT_Abort+0x2a>
 8008554:	2b01      	cmp	r3, #1
 8008556:	d009      	beq.n	800856c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008558:	e011      	b.n	800857e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	79db      	ldrb	r3, [r3, #7]
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 f9e1 	bl	8009928 <USBH_ClrFeature>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]
      break;
 800856a:	e008      	b.n	800857e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	799b      	ldrb	r3, [r3, #6]
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 f9d8 	bl	8009928 <USBH_ClrFeature>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	bf00      	nop
  }
  return status;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800859a:	2301      	movs	r3, #1
 800859c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	791b      	ldrb	r3, [r3, #4]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f002 fee7 	bl	800b378 <USBH_LL_GetLastXferSize>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b0d      	cmp	r3, #13
 80085ae:	d002      	beq.n	80085b6 <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 80085b0:	2302      	movs	r3, #2
 80085b2:	73fb      	strb	r3, [r7, #15]
 80085b4:	e024      	b.n	8008600 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085ba:	4a14      	ldr	r2, [pc, #80]	@ (800860c <USBH_MSC_DecodeCSW+0x84>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d11d      	bne.n	80085fc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d119      	bne.n	8008600 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
 80085da:	e011      	b.n	8008600 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d102      	bne.n	80085ec <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80085e6:	2301      	movs	r3, #1
 80085e8:	73fb      	strb	r3, [r7, #15]
 80085ea:	e009      	b.n	8008600 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d104      	bne.n	8008600 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80085f6:	2302      	movs	r3, #2
 80085f8:	73fb      	strb	r3, [r7, #15]
 80085fa:	e001      	b.n	8008600 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80085fc:	2302      	movs	r3, #2
 80085fe:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	53425355 	.word	0x53425355

08008610 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 800861c:	2302      	movs	r3, #2
 800861e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008630:	2b01      	cmp	r3, #1
 8008632:	d002      	beq.n	800863a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008634:	2b02      	cmp	r3, #2
 8008636:	d021      	beq.n	800867c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008638:	e028      	b.n	800868c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2200      	movs	r2, #0
 800863e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	220a      	movs	r2, #10
 800864c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	3363      	adds	r3, #99	@ 0x63
 8008654:	2210      	movs	r2, #16
 8008656:	2100      	movs	r1, #0
 8008658:	4618      	mov	r0, r3
 800865a:	f003 f9b2 	bl	800b9c2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2202      	movs	r2, #2
 8008672:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8008676:	2301      	movs	r3, #1
 8008678:	73fb      	strb	r3, [r7, #15]
      break;
 800867a:	e007      	b.n	800868c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff fd87 	bl	8008194 <USBH_MSC_BOT_Process>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	bf00      	nop
  }

  return error;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	460b      	mov	r3, r1
 80086a0:	607a      	str	r2, [r7, #4]
 80086a2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 80086a4:	2301      	movs	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086ae:	69db      	ldr	r3, [r3, #28]
 80086b0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d002      	beq.n	80086c2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d027      	beq.n	8008710 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80086c0:	e05e      	b.n	8008780 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2208      	movs	r2, #8
 80086c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2280      	movs	r2, #128	@ 0x80
 80086cc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	220a      	movs	r2, #10
 80086d4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	3363      	adds	r3, #99	@ 0x63
 80086dc:	2210      	movs	r2, #16
 80086de:	2100      	movs	r1, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f003 f96e 	bl	800b9c2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2225      	movs	r2, #37	@ 0x25
 80086ea:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2202      	movs	r2, #2
 80086fa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f103 0210 	add.w	r2, r3, #16
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800870a:	2301      	movs	r3, #1
 800870c:	75fb      	strb	r3, [r7, #23]
      break;
 800870e:	e037      	b.n	8008780 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008710:	7afb      	ldrb	r3, [r7, #11]
 8008712:	4619      	mov	r1, r3
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f7ff fd3d 	bl	8008194 <USBH_MSC_BOT_Process>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d12c      	bne.n	800877e <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800872a:	3303      	adds	r3, #3
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008736:	3302      	adds	r3, #2
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	021b      	lsls	r3, r3, #8
 800873c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008744:	3301      	adds	r3, #1
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800874a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	061b      	lsls	r3, r3, #24
 8008756:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008762:	3307      	adds	r3, #7
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800876e:	3306      	adds	r3, #6
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	b29b      	uxth	r3, r3
 8008776:	4313      	orrs	r3, r2
 8008778:	b29a      	uxth	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	809a      	strh	r2, [r3, #4]
      break;
 800877e:	bf00      	nop
  }

  return error;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b086      	sub	sp, #24
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	460b      	mov	r3, r1
 8008794:	607a      	str	r2, [r7, #4]
 8008796:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008798:	2302      	movs	r3, #2
 800879a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d002      	beq.n	80087b6 <USBH_MSC_SCSI_Inquiry+0x2c>
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d03d      	beq.n	8008830 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80087b4:	e089      	b.n	80088ca <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2224      	movs	r2, #36	@ 0x24
 80087ba:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2280      	movs	r2, #128	@ 0x80
 80087c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	220a      	movs	r2, #10
 80087c8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	3363      	adds	r3, #99	@ 0x63
 80087d0:	220a      	movs	r2, #10
 80087d2:	2100      	movs	r1, #0
 80087d4:	4618      	mov	r0, r3
 80087d6:	f003 f8f4 	bl	800b9c2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2212      	movs	r2, #18
 80087de:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	015b      	lsls	r3, r3, #5
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2224      	movs	r2, #36	@ 0x24
 8008802:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2202      	movs	r2, #2
 800881a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f103 0210 	add.w	r2, r3, #16
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800882a:	2301      	movs	r3, #1
 800882c:	75fb      	strb	r3, [r7, #23]
      break;
 800882e:	e04c      	b.n	80088ca <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008830:	7afb      	ldrb	r3, [r7, #11]
 8008832:	4619      	mov	r1, r3
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7ff fcad 	bl	8008194 <USBH_MSC_BOT_Process>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d141      	bne.n	80088c8 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008844:	2222      	movs	r2, #34	@ 0x22
 8008846:	2100      	movs	r1, #0
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f003 f8ba 	bl	800b9c2 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 031f 	and.w	r3, r3, #31
 800885a:	b2da      	uxtb	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	095b      	lsrs	r3, r3, #5
 800886a:	b2da      	uxtb	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008876:	3301      	adds	r3, #1
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b25b      	sxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	da03      	bge.n	8008888 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	709a      	strb	r2, [r3, #2]
 8008886:	e002      	b.n	800888e <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	1cd8      	adds	r0, r3, #3
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008898:	3308      	adds	r3, #8
 800889a:	2208      	movs	r2, #8
 800889c:	4619      	mov	r1, r3
 800889e:	f003 f91c 	bl	800bada <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f103 000c 	add.w	r0, r3, #12
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ae:	3310      	adds	r3, #16
 80088b0:	2210      	movs	r2, #16
 80088b2:	4619      	mov	r1, r3
 80088b4:	f003 f911 	bl	800bada <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	331d      	adds	r3, #29
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 80088c2:	3220      	adds	r2, #32
 80088c4:	6812      	ldr	r2, [r2, #0]
 80088c6:	601a      	str	r2, [r3, #0]
      break;
 80088c8:	bf00      	nop
  }

  return error;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	460b      	mov	r3, r1
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80088e2:	2302      	movs	r3, #2
 80088e4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d002      	beq.n	8008900 <USBH_MSC_SCSI_RequestSense+0x2c>
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d03d      	beq.n	800897a <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 80088fe:	e063      	b.n	80089c8 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	220e      	movs	r2, #14
 8008904:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2280      	movs	r2, #128	@ 0x80
 800890a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	220a      	movs	r2, #10
 8008912:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	3363      	adds	r3, #99	@ 0x63
 800891a:	2210      	movs	r2, #16
 800891c:	2100      	movs	r1, #0
 800891e:	4618      	mov	r0, r3
 8008920:	f003 f84f 	bl	800b9c2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2203      	movs	r2, #3
 8008928:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	015b      	lsls	r3, r3, #5
 8008930:	b2da      	uxtb	r2, r3
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	220e      	movs	r2, #14
 800894c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f103 0210 	add.w	r2, r3, #16
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008974:	2301      	movs	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]
      break;
 8008978:	e026      	b.n	80089c8 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	4619      	mov	r1, r3
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f7ff fc08 	bl	8008194 <USBH_MSC_BOT_Process>
 8008984:	4603      	mov	r3, r0
 8008986:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d11b      	bne.n	80089c6 <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008994:	3302      	adds	r3, #2
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	b2da      	uxtb	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089a8:	7b1a      	ldrb	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089b4:	7b5a      	ldrb	r2, [r3, #13]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	785b      	ldrb	r3, [r3, #1]
 80089be:	2b3a      	cmp	r3, #58	@ 0x3a
 80089c0:	d101      	bne.n	80089c6 <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 80089c2:	2304      	movs	r3, #4
 80089c4:	75fb      	strb	r3, [r7, #23]
      break;
 80089c6:	bf00      	nop
  }

  return error;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	460b      	mov	r3, r1
 80089e0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80089e2:	2302      	movs	r3, #2
 80089e4:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d002      	beq.n	8008a00 <USBH_MSC_SCSI_Write+0x2e>
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d04c      	beq.n	8008a98 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80089fe:	e053      	b.n	8008aa8 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	2134      	movs	r1, #52	@ 0x34
 8008a06:	fb01 f303 	mul.w	r3, r1, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3398      	adds	r3, #152	@ 0x98
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	fb03 f202 	mul.w	r2, r3, r2
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	220a      	movs	r2, #10
 8008a28:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	3363      	adds	r3, #99	@ 0x63
 8008a30:	2210      	movs	r2, #16
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f002 ffc4 	bl	800b9c2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	222a      	movs	r2, #42	@ 0x2a
 8008a3e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8008a42:	79fa      	ldrb	r2, [r7, #7]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8008a4a:	79ba      	ldrb	r2, [r7, #6]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8008a52:	797a      	ldrb	r2, [r7, #5]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8008a5a:	1d3b      	adds	r3, r7, #4
 8008a5c:	781a      	ldrb	r2, [r3, #0]
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8008a64:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8008a6e:	f107 0320 	add.w	r3, r7, #32
 8008a72:	781a      	ldrb	r2, [r3, #0]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2202      	movs	r2, #2
 8008a86:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008a92:	2301      	movs	r3, #1
 8008a94:	75fb      	strb	r3, [r7, #23]
      break;
 8008a96:	e007      	b.n	8008aa8 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff fb79 	bl	8008194 <USBH_MSC_BOT_Process>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa6:	bf00      	nop
  }

  return error;
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b086      	sub	sp, #24
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d002      	beq.n	8008ae0 <USBH_MSC_SCSI_Read+0x2e>
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d04c      	beq.n	8008b78 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008ade:	e053      	b.n	8008b88 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	2134      	movs	r1, #52	@ 0x34
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	3398      	adds	r3, #152	@ 0x98
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	461a      	mov	r2, r3
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	fb03 f202 	mul.w	r2, r3, r2
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2280      	movs	r2, #128	@ 0x80
 8008b00:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	220a      	movs	r2, #10
 8008b08:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	3363      	adds	r3, #99	@ 0x63
 8008b10:	2210      	movs	r2, #16
 8008b12:	2100      	movs	r1, #0
 8008b14:	4618      	mov	r0, r3
 8008b16:	f002 ff54 	bl	800b9c2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2228      	movs	r2, #40	@ 0x28
 8008b1e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8008b22:	79fa      	ldrb	r2, [r7, #7]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8008b2a:	79ba      	ldrb	r2, [r7, #6]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8008b32:	797a      	ldrb	r2, [r7, #5]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8008b3a:	1d3b      	adds	r3, r7, #4
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8008b44:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8008b4e:	f107 0320 	add.w	r3, r7, #32
 8008b52:	781a      	ldrb	r2, [r3, #0]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008b72:	2301      	movs	r3, #1
 8008b74:	75fb      	strb	r3, [r7, #23]
      break;
 8008b76:	e007      	b.n	8008b88 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008b78:	7afb      	ldrb	r3, [r7, #11]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f7ff fb09 	bl	8008194 <USBH_MSC_BOT_Process>
 8008b82:	4603      	mov	r3, r0
 8008b84:	75fb      	strb	r3, [r7, #23]
      break;
 8008b86:	bf00      	nop
  }

  return error;
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e029      	b.n	8008bfe <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	79fa      	ldrb	r2, [r7, #7]
 8008bae:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 f81f 	bl	8008c06 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f002 fb0a 	bl	800b210 <USBH_LL_Init>

  return USBH_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	e009      	b.n	8008c2c <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	33e0      	adds	r3, #224	@ 0xe0
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	2200      	movs	r2, #0
 8008c24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b0f      	cmp	r3, #15
 8008c30:	d9f2      	bls.n	8008c18 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c32:	2300      	movs	r3, #0
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	e009      	b.n	8008c4c <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c42:	2200      	movs	r2, #0
 8008c44:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c52:	d3f1      	bcc.n	8008c38 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2240      	movs	r2, #64	@ 0x40
 8008c78:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	331c      	adds	r3, #28
 8008ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ca8:	2100      	movs	r1, #0
 8008caa:	4618      	mov	r0, r3
 8008cac:	f002 fe89 	bl	800b9c2 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f002 fe80 	bl	800b9c2 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008cc8:	2212      	movs	r2, #18
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f002 fe78 	bl	800b9c2 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008cd8:	223e      	movs	r2, #62	@ 0x3e
 8008cda:	2100      	movs	r1, #0
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f002 fe70 	bl	800b9c2 <memset>

  return USBH_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d016      	beq.n	8008d2e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10e      	bne.n	8008d28 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d10:	1c59      	adds	r1, r3, #1
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	33de      	adds	r3, #222	@ 0xde
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]
 8008d26:	e004      	b.n	8008d32 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	73fb      	strb	r3, [r7, #15]
 8008d2c:	e001      	b.n	8008d32 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008d56:	78fa      	ldrb	r2, [r7, #3]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d204      	bcs.n	8008d66 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008d64:	e001      	b.n	8008d6a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008d66:	2302      	movs	r3, #2
 8008d68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	4608      	mov	r0, r1
 8008d82:	4611      	mov	r1, r2
 8008d84:	461a      	mov	r2, r3
 8008d86:	4603      	mov	r3, r0
 8008d88:	70fb      	strb	r3, [r7, #3]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70bb      	strb	r3, [r7, #2]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008da0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008da2:	e025      	b.n	8008df0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
 8008da6:	221a      	movs	r2, #26
 8008da8:	fb02 f303 	mul.w	r3, r2, r3
 8008dac:	3308      	adds	r3, #8
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	3302      	adds	r3, #2
 8008db4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	795b      	ldrb	r3, [r3, #5]
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d002      	beq.n	8008dc6 <USBH_FindInterface+0x4e>
 8008dc0:	78fb      	ldrb	r3, [r7, #3]
 8008dc2:	2bff      	cmp	r3, #255	@ 0xff
 8008dc4:	d111      	bne.n	8008dea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008dca:	78ba      	ldrb	r2, [r7, #2]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d002      	beq.n	8008dd6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008dd0:	78bb      	ldrb	r3, [r7, #2]
 8008dd2:	2bff      	cmp	r3, #255	@ 0xff
 8008dd4:	d109      	bne.n	8008dea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008dda:	787a      	ldrb	r2, [r7, #1]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d002      	beq.n	8008de6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008de0:	787b      	ldrb	r3, [r7, #1]
 8008de2:	2bff      	cmp	r3, #255	@ 0xff
 8008de4:	d101      	bne.n	8008dea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	e006      	b.n	8008df8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	3301      	adds	r3, #1
 8008dee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d9d6      	bls.n	8008da4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008df6:	23ff      	movs	r3, #255	@ 0xff
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f002 fa3b 	bl	800b288 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008e12:	2101      	movs	r1, #1
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f002 fb54 	bl	800b4c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af04      	add	r7, sp, #16
 8008e2a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d102      	bne.n	8008e46 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2203      	movs	r2, #3
 8008e44:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b0b      	cmp	r3, #11
 8008e4e:	f200 81bb 	bhi.w	80091c8 <USBH_Process+0x3a4>
 8008e52:	a201      	add	r2, pc, #4	@ (adr r2, 8008e58 <USBH_Process+0x34>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008e89 	.word	0x08008e89
 8008e5c:	08008ebb 	.word	0x08008ebb
 8008e60:	08008f23 	.word	0x08008f23
 8008e64:	08009163 	.word	0x08009163
 8008e68:	080091c9 	.word	0x080091c9
 8008e6c:	08008fc3 	.word	0x08008fc3
 8008e70:	08009109 	.word	0x08009109
 8008e74:	08008ff9 	.word	0x08008ff9
 8008e78:	08009019 	.word	0x08009019
 8008e7c:	08009037 	.word	0x08009037
 8008e80:	0800907b 	.word	0x0800907b
 8008e84:	0800914b 	.word	0x0800914b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 819b 	beq.w	80091cc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008e9c:	20c8      	movs	r0, #200	@ 0xc8
 8008e9e:	f002 fb84 	bl	800b5aa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f002 fa4d 	bl	800b342 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008eb8:	e188      	b.n	80091cc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d107      	bne.n	8008ed4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ed2:	e18a      	b.n	80091ea <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008eda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ede:	d914      	bls.n	8008f0a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d903      	bls.n	8008f02 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	220d      	movs	r2, #13
 8008efe:	701a      	strb	r2, [r3, #0]
      break;
 8008f00:	e173      	b.n	80091ea <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	701a      	strb	r2, [r3, #0]
      break;
 8008f08:	e16f      	b.n	80091ea <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008f10:	f103 020a 	add.w	r2, r3, #10
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008f1a:	200a      	movs	r0, #10
 8008f1c:	f002 fb45 	bl	800b5aa <USBH_Delay>
      break;
 8008f20:	e163      	b.n	80091ea <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d005      	beq.n	8008f38 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f32:	2104      	movs	r1, #4
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008f38:	2064      	movs	r0, #100	@ 0x64
 8008f3a:	f002 fb36 	bl	800b5aa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f002 f9d8 	bl	800b2f4 <USBH_LL_GetSpeed>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2205      	movs	r2, #5
 8008f52:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008f54:	2100      	movs	r1, #0
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 fa9b 	bl	800a492 <USBH_AllocPipe>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	461a      	mov	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008f64:	2180      	movs	r1, #128	@ 0x80
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 fa93 	bl	800a492 <USBH_AllocPipe>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	461a      	mov	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	7919      	ldrb	r1, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f88:	9202      	str	r2, [sp, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	9201      	str	r2, [sp, #4]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	4603      	mov	r3, r0
 8008f92:	2280      	movs	r2, #128	@ 0x80
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 fa4d 	bl	800a434 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7959      	ldrb	r1, [r3, #5]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008fae:	9202      	str	r2, [sp, #8]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	9201      	str	r2, [sp, #4]
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2200      	movs	r2, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 fa3a 	bl	800a434 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fc0:	e113      	b.n	80091ea <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f916 	bl	80091f4 <USBH_HandleEnum>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f040 80fd 	bne.w	80091d0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d103      	bne.n	8008ff0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2208      	movs	r2, #8
 8008fec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008fee:	e0ef      	b.n	80091d0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2207      	movs	r2, #7
 8008ff4:	701a      	strb	r2, [r3, #0]
      break;
 8008ff6:	e0eb      	b.n	80091d0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f000 80e8 	beq.w	80091d4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800900a:	2101      	movs	r1, #1
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2208      	movs	r2, #8
 8009014:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009016:	e0dd      	b.n	80091d4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fc3a 	bl	800989a <USBH_SetCfg>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	f040 80d5 	bne.w	80091d8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2209      	movs	r2, #9
 8009032:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009034:	e0d0      	b.n	80091d8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800903c:	f003 0320 	and.w	r3, r3, #32
 8009040:	2b00      	cmp	r3, #0
 8009042:	d016      	beq.n	8009072 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009044:	2101      	movs	r1, #1
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fc4a 	bl	80098e0 <USBH_SetFeature>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d103      	bne.n	8009060 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	220a      	movs	r2, #10
 800905c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800905e:	e0bd      	b.n	80091dc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b03      	cmp	r3, #3
 8009066:	f040 80b9 	bne.w	80091dc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	220a      	movs	r2, #10
 800906e:	701a      	strb	r2, [r3, #0]
      break;
 8009070:	e0b4      	b.n	80091dc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	220a      	movs	r2, #10
 8009076:	701a      	strb	r2, [r3, #0]
      break;
 8009078:	e0b0      	b.n	80091dc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 80ad 	beq.w	80091e0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
 8009092:	e016      	b.n	80090c2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009094:	7bfa      	ldrb	r2, [r7, #15]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	32de      	adds	r2, #222	@ 0xde
 800909a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909e:	791a      	ldrb	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d108      	bne.n	80090bc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80090aa:	7bfa      	ldrb	r2, [r7, #15]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	32de      	adds	r2, #222	@ 0xde
 80090b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80090ba:	e005      	b.n	80090c8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	3301      	adds	r3, #1
 80090c0:	73fb      	strb	r3, [r7, #15]
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0e5      	beq.n	8009094 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d016      	beq.n	8009100 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	4798      	blx	r3
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d109      	bne.n	80090f8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2206      	movs	r2, #6
 80090e8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090f0:	2103      	movs	r1, #3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090f6:	e073      	b.n	80091e0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	220d      	movs	r2, #13
 80090fc:	701a      	strb	r2, [r3, #0]
      break;
 80090fe:	e06f      	b.n	80091e0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	220d      	movs	r2, #13
 8009104:	701a      	strb	r2, [r3, #0]
      break;
 8009106:	e06b      	b.n	80091e0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d017      	beq.n	8009142 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
 800911e:	4603      	mov	r3, r0
 8009120:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	220b      	movs	r2, #11
 800912e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009130:	e058      	b.n	80091e4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b02      	cmp	r3, #2
 8009138:	d154      	bne.n	80091e4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	220d      	movs	r2, #13
 800913e:	701a      	strb	r2, [r3, #0]
      break;
 8009140:	e050      	b.n	80091e4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	220d      	movs	r2, #13
 8009146:	701a      	strb	r2, [r3, #0]
      break;
 8009148:	e04c      	b.n	80091e4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009150:	2b00      	cmp	r3, #0
 8009152:	d049      	beq.n	80091e8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
      }
      break;
 8009160:	e042      	b.n	80091e8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff fd4b 	bl	8008c06 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800919e:	2105      	movs	r1, #5
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d107      	bne.n	80091c0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fe23 	bl	8008e04 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091be:	e014      	b.n	80091ea <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f002 f861 	bl	800b288 <USBH_LL_Start>
      break;
 80091c6:	e010      	b.n	80091ea <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80091c8:	bf00      	nop
 80091ca:	e00e      	b.n	80091ea <USBH_Process+0x3c6>
      break;
 80091cc:	bf00      	nop
 80091ce:	e00c      	b.n	80091ea <USBH_Process+0x3c6>
      break;
 80091d0:	bf00      	nop
 80091d2:	e00a      	b.n	80091ea <USBH_Process+0x3c6>
    break;
 80091d4:	bf00      	nop
 80091d6:	e008      	b.n	80091ea <USBH_Process+0x3c6>
      break;
 80091d8:	bf00      	nop
 80091da:	e006      	b.n	80091ea <USBH_Process+0x3c6>
      break;
 80091dc:	bf00      	nop
 80091de:	e004      	b.n	80091ea <USBH_Process+0x3c6>
      break;
 80091e0:	bf00      	nop
 80091e2:	e002      	b.n	80091ea <USBH_Process+0x3c6>
      break;
 80091e4:	bf00      	nop
 80091e6:	e000      	b.n	80091ea <USBH_Process+0x3c6>
      break;
 80091e8:	bf00      	nop
  }
  return USBH_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af04      	add	r7, sp, #16
 80091fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009200:	2301      	movs	r3, #1
 8009202:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	785b      	ldrb	r3, [r3, #1]
 8009208:	2b07      	cmp	r3, #7
 800920a:	f200 81bd 	bhi.w	8009588 <USBH_HandleEnum+0x394>
 800920e:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <USBH_HandleEnum+0x20>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	08009235 	.word	0x08009235
 8009218:	080092ef 	.word	0x080092ef
 800921c:	08009359 	.word	0x08009359
 8009220:	080093e3 	.word	0x080093e3
 8009224:	0800944d 	.word	0x0800944d
 8009228:	080094bd 	.word	0x080094bd
 800922c:	08009503 	.word	0x08009503
 8009230:	08009549 	.word	0x08009549
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009234:	2108      	movs	r1, #8
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fa4c 	bl	80096d4 <USBH_Get_DevDesc>
 800923c:	4603      	mov	r3, r0
 800923e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d12e      	bne.n	80092a4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7919      	ldrb	r1, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800926a:	9202      	str	r2, [sp, #8]
 800926c:	2200      	movs	r2, #0
 800926e:	9201      	str	r2, [sp, #4]
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	4603      	mov	r3, r0
 8009274:	2280      	movs	r2, #128	@ 0x80
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f8dc 	bl	800a434 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	7959      	ldrb	r1, [r3, #5]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009290:	9202      	str	r2, [sp, #8]
 8009292:	2200      	movs	r2, #0
 8009294:	9201      	str	r2, [sp, #4]
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	4603      	mov	r3, r0
 800929a:	2200      	movs	r2, #0
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 f8c9 	bl	800a434 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80092a2:	e173      	b.n	800958c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	f040 8170 	bne.w	800958c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80092b2:	3301      	adds	r3, #1
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d903      	bls.n	80092ce <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	220d      	movs	r2, #13
 80092ca:	701a      	strb	r2, [r3, #0]
      break;
 80092cc:	e15e      	b.n	800958c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	795b      	ldrb	r3, [r3, #5]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 f8fd 	bl	800a4d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	791b      	ldrb	r3, [r3, #4]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 f8f7 	bl	800a4d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	701a      	strb	r2, [r3, #0]
      break;
 80092ec:	e14e      	b.n	800958c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80092ee:	2112      	movs	r1, #18
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f9ef 	bl	80096d4 <USBH_Get_DevDesc>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d103      	bne.n	8009308 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009306:	e143      	b.n	8009590 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	2b03      	cmp	r3, #3
 800930c:	f040 8140 	bne.w	8009590 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009316:	3301      	adds	r3, #1
 8009318:	b2da      	uxtb	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009326:	2b03      	cmp	r3, #3
 8009328:	d903      	bls.n	8009332 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	220d      	movs	r2, #13
 800932e:	701a      	strb	r2, [r3, #0]
      break;
 8009330:	e12e      	b.n	8009590 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	795b      	ldrb	r3, [r3, #5]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 f8cb 	bl	800a4d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	791b      	ldrb	r3, [r3, #4]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 f8c5 	bl	800a4d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	701a      	strb	r2, [r3, #0]
      break;
 8009356:	e11b      	b.n	8009590 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009358:	2101      	movs	r1, #1
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fa79 	bl	8009852 <USBH_SetAddress>
 8009360:	4603      	mov	r3, r0
 8009362:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009364:	7bbb      	ldrb	r3, [r7, #14]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d130      	bne.n	80093cc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800936a:	2002      	movs	r0, #2
 800936c:	f002 f91d 	bl	800b5aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2203      	movs	r2, #3
 800937c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	7919      	ldrb	r1, [r3, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009392:	9202      	str	r2, [sp, #8]
 8009394:	2200      	movs	r2, #0
 8009396:	9201      	str	r2, [sp, #4]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	4603      	mov	r3, r0
 800939c:	2280      	movs	r2, #128	@ 0x80
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 f848 	bl	800a434 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7959      	ldrb	r1, [r3, #5]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093b8:	9202      	str	r2, [sp, #8]
 80093ba:	2200      	movs	r2, #0
 80093bc:	9201      	str	r2, [sp, #4]
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4603      	mov	r3, r0
 80093c2:	2200      	movs	r2, #0
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 f835 	bl	800a434 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093ca:	e0e3      	b.n	8009594 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	f040 80e0 	bne.w	8009594 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	220d      	movs	r2, #13
 80093d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	705a      	strb	r2, [r3, #1]
      break;
 80093e0:	e0d8      	b.n	8009594 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80093e2:	2109      	movs	r1, #9
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f9a1 	bl	800972c <USBH_Get_CfgDesc>
 80093ea:	4603      	mov	r3, r0
 80093ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093ee:	7bbb      	ldrb	r3, [r7, #14]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2204      	movs	r2, #4
 80093f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093fa:	e0cd      	b.n	8009598 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b03      	cmp	r3, #3
 8009400:	f040 80ca 	bne.w	8009598 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800940a:	3301      	adds	r3, #1
 800940c:	b2da      	uxtb	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800941a:	2b03      	cmp	r3, #3
 800941c:	d903      	bls.n	8009426 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	220d      	movs	r2, #13
 8009422:	701a      	strb	r2, [r3, #0]
      break;
 8009424:	e0b8      	b.n	8009598 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	795b      	ldrb	r3, [r3, #5]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 f851 	bl	800a4d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 f84b 	bl	800a4d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	701a      	strb	r2, [r3, #0]
      break;
 800944a:	e0a5      	b.n	8009598 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f969 	bl	800972c <USBH_Get_CfgDesc>
 800945a:	4603      	mov	r3, r0
 800945c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d103      	bne.n	800946c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2205      	movs	r2, #5
 8009468:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800946a:	e097      	b.n	800959c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b03      	cmp	r3, #3
 8009470:	f040 8094 	bne.w	800959c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800947a:	3301      	adds	r3, #1
 800947c:	b2da      	uxtb	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800948a:	2b03      	cmp	r3, #3
 800948c:	d903      	bls.n	8009496 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	220d      	movs	r2, #13
 8009492:	701a      	strb	r2, [r3, #0]
      break;
 8009494:	e082      	b.n	800959c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	795b      	ldrb	r3, [r3, #5]
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 f819 	bl	800a4d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	791b      	ldrb	r3, [r3, #4]
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f813 	bl	800a4d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	701a      	strb	r2, [r3, #0]
      break;
 80094ba:	e06f      	b.n	800959c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d019      	beq.n	80094fa <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094d2:	23ff      	movs	r3, #255	@ 0xff
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f953 	bl	8009780 <USBH_Get_StringDesc>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d103      	bne.n	80094ec <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2206      	movs	r2, #6
 80094e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80094ea:	e059      	b.n	80095a0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d156      	bne.n	80095a0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2206      	movs	r2, #6
 80094f6:	705a      	strb	r2, [r3, #1]
      break;
 80094f8:	e052      	b.n	80095a0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2206      	movs	r2, #6
 80094fe:	705a      	strb	r2, [r3, #1]
      break;
 8009500:	e04e      	b.n	80095a0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009508:	2b00      	cmp	r3, #0
 800950a:	d019      	beq.n	8009540 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009518:	23ff      	movs	r3, #255	@ 0xff
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f930 	bl	8009780 <USBH_Get_StringDesc>
 8009520:	4603      	mov	r3, r0
 8009522:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d103      	bne.n	8009532 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2207      	movs	r2, #7
 800952e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009530:	e038      	b.n	80095a4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b03      	cmp	r3, #3
 8009536:	d135      	bne.n	80095a4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2207      	movs	r2, #7
 800953c:	705a      	strb	r2, [r3, #1]
      break;
 800953e:	e031      	b.n	80095a4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2207      	movs	r2, #7
 8009544:	705a      	strb	r2, [r3, #1]
      break;
 8009546:	e02d      	b.n	80095a4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800954e:	2b00      	cmp	r3, #0
 8009550:	d017      	beq.n	8009582 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800955e:	23ff      	movs	r3, #255	@ 0xff
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f90d 	bl	8009780 <USBH_Get_StringDesc>
 8009566:	4603      	mov	r3, r0
 8009568:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d102      	bne.n	8009576 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009574:	e018      	b.n	80095a8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b03      	cmp	r3, #3
 800957a:	d115      	bne.n	80095a8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
      break;
 8009580:	e012      	b.n	80095a8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
      break;
 8009586:	e00f      	b.n	80095a8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009588:	bf00      	nop
 800958a:	e00e      	b.n	80095aa <USBH_HandleEnum+0x3b6>
      break;
 800958c:	bf00      	nop
 800958e:	e00c      	b.n	80095aa <USBH_HandleEnum+0x3b6>
      break;
 8009590:	bf00      	nop
 8009592:	e00a      	b.n	80095aa <USBH_HandleEnum+0x3b6>
      break;
 8009594:	bf00      	nop
 8009596:	e008      	b.n	80095aa <USBH_HandleEnum+0x3b6>
      break;
 8009598:	bf00      	nop
 800959a:	e006      	b.n	80095aa <USBH_HandleEnum+0x3b6>
      break;
 800959c:	bf00      	nop
 800959e:	e004      	b.n	80095aa <USBH_HandleEnum+0x3b6>
      break;
 80095a0:	bf00      	nop
 80095a2:	e002      	b.n	80095aa <USBH_HandleEnum+0x3b6>
      break;
 80095a4:	bf00      	nop
 80095a6:	e000      	b.n	80095aa <USBH_HandleEnum+0x3b6>
      break;
 80095a8:	bf00      	nop
  }
  return Status;
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f804 	bl	80095f6 <USBH_HandleSof>
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b0b      	cmp	r3, #11
 8009606:	d10a      	bne.n	800961e <USBH_HandleSof+0x28>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d005      	beq.n	800961e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	4798      	blx	r3
  }
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009636:	bf00      	nop
}
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009652:	bf00      	nop
}
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 fe06 	bl	800b2be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	791b      	ldrb	r3, [r3, #4]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 ff0b 	bl	800a4d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	795b      	ldrb	r3, [r3, #5]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 ff05 	bl	800a4d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af02      	add	r7, sp, #8
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80096e0:	887b      	ldrh	r3, [r7, #2]
 80096e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096e6:	d901      	bls.n	80096ec <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e01b      	b.n	8009724 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80096f2:	887b      	ldrh	r3, [r7, #2]
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	4613      	mov	r3, r2
 80096f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096fc:	2100      	movs	r1, #0
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f872 	bl	80097e8 <USBH_GetDescriptor>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d109      	bne.n	8009722 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009714:	887a      	ldrh	r2, [r7, #2]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f929 	bl	8009970 <USBH_ParseDevDesc>
 800971e:	4603      	mov	r3, r0
 8009720:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009722:	7bfb      	ldrb	r3, [r7, #15]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af02      	add	r7, sp, #8
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	331c      	adds	r3, #28
 800973c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800973e:	887b      	ldrh	r3, [r7, #2]
 8009740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009744:	d901      	bls.n	800974a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009746:	2303      	movs	r3, #3
 8009748:	e016      	b.n	8009778 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800974a:	887b      	ldrh	r3, [r7, #2]
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009754:	2100      	movs	r1, #0
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f846 	bl	80097e8 <USBH_GetDescriptor>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d107      	bne.n	8009776 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009766:	887b      	ldrh	r3, [r7, #2]
 8009768:	461a      	mov	r2, r3
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f9af 	bl	8009ad0 <USBH_ParseCfgDesc>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	607a      	str	r2, [r7, #4]
 800978a:	461a      	mov	r2, r3
 800978c:	460b      	mov	r3, r1
 800978e:	72fb      	strb	r3, [r7, #11]
 8009790:	4613      	mov	r3, r2
 8009792:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009794:	893b      	ldrh	r3, [r7, #8]
 8009796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800979a:	d802      	bhi.n	80097a2 <USBH_Get_StringDesc+0x22>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e01c      	b.n	80097e0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80097ae:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80097b6:	893b      	ldrh	r3, [r7, #8]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	460b      	mov	r3, r1
 80097bc:	2100      	movs	r1, #0
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 f812 	bl	80097e8 <USBH_GetDescriptor>
 80097c4:	4603      	mov	r3, r0
 80097c6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d107      	bne.n	80097de <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80097d4:	893a      	ldrh	r2, [r7, #8]
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fb8d 	bl	8009ef8 <USBH_ParseStringDesc>
  }

  return status;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	607b      	str	r3, [r7, #4]
 80097f2:	460b      	mov	r3, r1
 80097f4:	72fb      	strb	r3, [r7, #11]
 80097f6:	4613      	mov	r3, r2
 80097f8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	789b      	ldrb	r3, [r3, #2]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d11c      	bne.n	800983c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009802:	7afb      	ldrb	r3, [r7, #11]
 8009804:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009808:	b2da      	uxtb	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2206      	movs	r2, #6
 8009812:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	893a      	ldrh	r2, [r7, #8]
 8009818:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800981a:	893b      	ldrh	r3, [r7, #8]
 800981c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009824:	d104      	bne.n	8009830 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f240 4209 	movw	r2, #1033	@ 0x409
 800982c:	829a      	strh	r2, [r3, #20]
 800982e:	e002      	b.n	8009836 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	8b3a      	ldrh	r2, [r7, #24]
 800983a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800983c:	8b3b      	ldrh	r3, [r7, #24]
 800983e:	461a      	mov	r2, r3
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 fba5 	bl	8009f92 <USBH_CtlReq>
 8009848:	4603      	mov	r3, r0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	789b      	ldrb	r3, [r3, #2]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d10f      	bne.n	8009886 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2205      	movs	r2, #5
 8009870:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009872:	78fb      	ldrb	r3, [r7, #3]
 8009874:	b29a      	uxth	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009886:	2200      	movs	r2, #0
 8009888:	2100      	movs	r1, #0
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fb81 	bl	8009f92 <USBH_CtlReq>
 8009890:	4603      	mov	r3, r0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	789b      	ldrb	r3, [r3, #2]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d10e      	bne.n	80098cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2209      	movs	r2, #9
 80098b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	887a      	ldrh	r2, [r7, #2]
 80098be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80098cc:	2200      	movs	r2, #0
 80098ce:	2100      	movs	r1, #0
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fb5e 	bl	8009f92 <USBH_CtlReq>
 80098d6:	4603      	mov	r3, r0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	789b      	ldrb	r3, [r3, #2]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d10f      	bne.n	8009914 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2203      	movs	r2, #3
 80098fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	b29a      	uxth	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009914:	2200      	movs	r2, #0
 8009916:	2100      	movs	r1, #0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fb3a 	bl	8009f92 <USBH_CtlReq>
 800991e:	4603      	mov	r3, r0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	789b      	ldrb	r3, [r3, #2]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d10f      	bne.n	800995c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2202      	movs	r2, #2
 8009940:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	b29a      	uxth	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800995c:	2200      	movs	r2, #0
 800995e:	2100      	movs	r1, #0
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fb16 	bl	8009f92 <USBH_CtlReq>
 8009966:	4603      	mov	r3, r0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	4613      	mov	r3, r2
 800997c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009984:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009990:	2302      	movs	r3, #2
 8009992:	e094      	b.n	8009abe <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	781a      	ldrb	r2, [r3, #0]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	785a      	ldrb	r2, [r3, #1]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	3302      	adds	r3, #2
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	3303      	adds	r3, #3
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4313      	orrs	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	791a      	ldrb	r2, [r3, #4]
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	795a      	ldrb	r2, [r3, #5]
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	799a      	ldrb	r2, [r3, #6]
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	79da      	ldrb	r2, [r3, #7]
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d11b      	bne.n	8009a2a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	79db      	ldrb	r3, [r3, #7]
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	dc0f      	bgt.n	8009a1a <USBH_ParseDevDesc+0xaa>
 80099fa:	2b08      	cmp	r3, #8
 80099fc:	db0f      	blt.n	8009a1e <USBH_ParseDevDesc+0xae>
 80099fe:	3b08      	subs	r3, #8
 8009a00:	4a32      	ldr	r2, [pc, #200]	@ (8009acc <USBH_ParseDevDesc+0x15c>)
 8009a02:	fa22 f303 	lsr.w	r3, r2, r3
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bf14      	ite	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	2300      	moveq	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <USBH_ParseDevDesc+0xb6>
 8009a18:	e001      	b.n	8009a1e <USBH_ParseDevDesc+0xae>
 8009a1a:	2b40      	cmp	r3, #64	@ 0x40
 8009a1c:	d003      	beq.n	8009a26 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	2208      	movs	r2, #8
 8009a22:	71da      	strb	r2, [r3, #7]
        break;
 8009a24:	e000      	b.n	8009a28 <USBH_ParseDevDesc+0xb8>
        break;
 8009a26:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009a28:	e00e      	b.n	8009a48 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d107      	bne.n	8009a44 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	79db      	ldrb	r3, [r3, #7]
 8009a38:	2b08      	cmp	r3, #8
 8009a3a:	d005      	beq.n	8009a48 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	2208      	movs	r2, #8
 8009a40:	71da      	strb	r2, [r3, #7]
 8009a42:	e001      	b.n	8009a48 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009a44:	2303      	movs	r3, #3
 8009a46:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009a48:	88fb      	ldrh	r3, [r7, #6]
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d936      	bls.n	8009abc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	3308      	adds	r3, #8
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	3309      	adds	r3, #9
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	021b      	lsls	r3, r3, #8
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	4313      	orrs	r3, r2
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	330a      	adds	r3, #10
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	330b      	adds	r3, #11
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	021b      	lsls	r3, r3, #8
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	330c      	adds	r3, #12
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	330d      	adds	r3, #13
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	021b      	lsls	r3, r3, #8
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	4313      	orrs	r3, r2
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	7b9a      	ldrb	r2, [r3, #14]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	7bda      	ldrb	r2, [r3, #15]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	7c1a      	ldrb	r2, [r3, #16]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	7c5a      	ldrb	r2, [r3, #17]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	01000101 	.word	0x01000101

08009ad0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08c      	sub	sp, #48	@ 0x30
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	4613      	mov	r3, r2
 8009adc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009ae4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009afe:	2302      	movs	r3, #2
 8009b00:	e0da      	b.n	8009cb8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b09      	cmp	r3, #9
 8009b0c:	d002      	beq.n	8009b14 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b10:	2209      	movs	r2, #9
 8009b12:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	781a      	ldrb	r2, [r3, #0]
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	785a      	ldrb	r2, [r3, #1]
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	3302      	adds	r3, #2
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	3303      	adds	r3, #3
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	4313      	orrs	r3, r2
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b3e:	bf28      	it	cs
 8009b40:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	791a      	ldrb	r2, [r3, #4]
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	795a      	ldrb	r2, [r3, #5]
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	799a      	ldrb	r2, [r3, #6]
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	79da      	ldrb	r2, [r3, #7]
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	7a1a      	ldrb	r2, [r3, #8]
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009b72:	88fb      	ldrh	r3, [r7, #6]
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	f240 809d 	bls.w	8009cb4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009b7a:	2309      	movs	r3, #9
 8009b7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b82:	e081      	b.n	8009c88 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009b84:	f107 0316 	add.w	r3, r7, #22
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b8c:	f000 f9e7 	bl	8009f5e <USBH_GetNextDesc>
 8009b90:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d176      	bne.n	8009c88 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b09      	cmp	r3, #9
 8009ba0:	d002      	beq.n	8009ba8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba4:	2209      	movs	r2, #9
 8009ba6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bac:	221a      	movs	r2, #26
 8009bae:	fb02 f303 	mul.w	r3, r2, r3
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	6a3a      	ldr	r2, [r7, #32]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3302      	adds	r3, #2
 8009bba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bbe:	69f8      	ldr	r0, [r7, #28]
 8009bc0:	f000 f87e 	bl	8009cc0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009bce:	e043      	b.n	8009c58 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009bd0:	f107 0316 	add.w	r3, r7, #22
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bd8:	f000 f9c1 	bl	8009f5e <USBH_GetNextDesc>
 8009bdc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	785b      	ldrb	r3, [r3, #1]
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	d138      	bne.n	8009c58 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	795b      	ldrb	r3, [r3, #5]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d113      	bne.n	8009c16 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d003      	beq.n	8009bfe <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	799b      	ldrb	r3, [r3, #6]
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d10b      	bne.n	8009c16 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	79db      	ldrb	r3, [r3, #7]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <USBH_ParseCfgDesc+0x14e>
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b09      	cmp	r3, #9
 8009c0c:	d007      	beq.n	8009c1e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c10:	2209      	movs	r2, #9
 8009c12:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c14:	e003      	b.n	8009c1e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	2207      	movs	r2, #7
 8009c1a:	701a      	strb	r2, [r3, #0]
 8009c1c:	e000      	b.n	8009c20 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c1e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c24:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009c28:	3201      	adds	r2, #1
 8009c2a:	00d2      	lsls	r2, r2, #3
 8009c2c:	211a      	movs	r1, #26
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	4413      	add	r3, r2
 8009c34:	3308      	adds	r3, #8
 8009c36:	6a3a      	ldr	r2, [r7, #32]
 8009c38:	4413      	add	r3, r2
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c40:	69b9      	ldr	r1, [r7, #24]
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 f870 	bl	8009d28 <USBH_ParseEPDesc>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009c4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c52:	3301      	adds	r3, #1
 8009c54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	791b      	ldrb	r3, [r3, #4]
 8009c5c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d204      	bcs.n	8009c6e <USBH_ParseCfgDesc+0x19e>
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	885a      	ldrh	r2, [r3, #2]
 8009c68:	8afb      	ldrh	r3, [r7, #22]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d8b0      	bhi.n	8009bd0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	791b      	ldrb	r3, [r3, #4]
 8009c72:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d201      	bcs.n	8009c7e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e01c      	b.n	8009cb8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c82:	3301      	adds	r3, #1
 8009c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d805      	bhi.n	8009c9c <USBH_ParseCfgDesc+0x1cc>
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	885a      	ldrh	r2, [r3, #2]
 8009c94:	8afb      	ldrh	r3, [r7, #22]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	f63f af74 	bhi.w	8009b84 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	791b      	ldrb	r3, [r3, #4]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	bf28      	it	cs
 8009ca4:	2302      	movcs	r3, #2
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d201      	bcs.n	8009cb4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e001      	b.n	8009cb8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3730      	adds	r7, #48	@ 0x30
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	785a      	ldrb	r2, [r3, #1]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	789a      	ldrb	r2, [r3, #2]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	78da      	ldrb	r2, [r3, #3]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	3304      	adds	r3, #4
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	bf28      	it	cs
 8009cf4:	2302      	movcs	r3, #2
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	795a      	ldrb	r2, [r3, #5]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	799a      	ldrb	r2, [r3, #6]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	79da      	ldrb	r2, [r3, #7]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	7a1a      	ldrb	r2, [r3, #8]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	721a      	strb	r2, [r3, #8]
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	785a      	ldrb	r2, [r3, #1]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	789a      	ldrb	r2, [r3, #2]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	78da      	ldrb	r2, [r3, #3]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3305      	adds	r3, #5
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	799a      	ldrb	r2, [r3, #6]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	889b      	ldrh	r3, [r3, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d009      	beq.n	8009d96 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d8a:	d804      	bhi.n	8009d96 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d94:	d901      	bls.n	8009d9a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009d96:	2303      	movs	r3, #3
 8009d98:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d136      	bne.n	8009e12 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	78db      	ldrb	r3, [r3, #3]
 8009da8:	f003 0303 	and.w	r3, r3, #3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d108      	bne.n	8009dc2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	889b      	ldrh	r3, [r3, #4]
 8009db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009db8:	f240 8097 	bls.w	8009eea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	75fb      	strb	r3, [r7, #23]
 8009dc0:	e093      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	78db      	ldrb	r3, [r3, #3]
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d107      	bne.n	8009dde <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	889b      	ldrh	r3, [r3, #4]
 8009dd2:	2b40      	cmp	r3, #64	@ 0x40
 8009dd4:	f240 8089 	bls.w	8009eea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	75fb      	strb	r3, [r7, #23]
 8009ddc:	e085      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	78db      	ldrb	r3, [r3, #3]
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d005      	beq.n	8009df6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	78db      	ldrb	r3, [r3, #3]
 8009dee:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d10a      	bne.n	8009e0c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	799b      	ldrb	r3, [r3, #6]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <USBH_ParseEPDesc+0xde>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	799b      	ldrb	r3, [r3, #6]
 8009e02:	2b10      	cmp	r3, #16
 8009e04:	d970      	bls.n	8009ee8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009e06:	2303      	movs	r3, #3
 8009e08:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e0a:	e06d      	b.n	8009ee8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	75fb      	strb	r3, [r7, #23]
 8009e10:	e06b      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d13c      	bne.n	8009e96 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	78db      	ldrb	r3, [r3, #3]
 8009e20:	f003 0303 	and.w	r3, r3, #3
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d005      	beq.n	8009e34 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	78db      	ldrb	r3, [r3, #3]
 8009e2c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d106      	bne.n	8009e42 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	889b      	ldrh	r3, [r3, #4]
 8009e38:	2b40      	cmp	r3, #64	@ 0x40
 8009e3a:	d956      	bls.n	8009eea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009e40:	e053      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	78db      	ldrb	r3, [r3, #3]
 8009e46:	f003 0303 	and.w	r3, r3, #3
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d10e      	bne.n	8009e6c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	799b      	ldrb	r3, [r3, #6]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009e5a:	2b10      	cmp	r3, #16
 8009e5c:	d803      	bhi.n	8009e66 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009e62:	2b40      	cmp	r3, #64	@ 0x40
 8009e64:	d941      	bls.n	8009eea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e66:	2303      	movs	r3, #3
 8009e68:	75fb      	strb	r3, [r7, #23]
 8009e6a:	e03e      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	78db      	ldrb	r3, [r3, #3]
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d10b      	bne.n	8009e90 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	799b      	ldrb	r3, [r3, #6]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d004      	beq.n	8009e8a <USBH_ParseEPDesc+0x162>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	889b      	ldrh	r3, [r3, #4]
 8009e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e88:	d32f      	bcc.n	8009eea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	75fb      	strb	r3, [r7, #23]
 8009e8e:	e02c      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009e90:	2303      	movs	r3, #3
 8009e92:	75fb      	strb	r3, [r7, #23]
 8009e94:	e029      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d120      	bne.n	8009ee2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	78db      	ldrb	r3, [r3, #3]
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	889b      	ldrh	r3, [r3, #4]
 8009eb0:	2b08      	cmp	r3, #8
 8009eb2:	d01a      	beq.n	8009eea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	75fb      	strb	r3, [r7, #23]
 8009eb8:	e017      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	78db      	ldrb	r3, [r3, #3]
 8009ebe:	f003 0303 	and.w	r3, r3, #3
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d10a      	bne.n	8009edc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	799b      	ldrb	r3, [r3, #6]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <USBH_ParseEPDesc+0x1ae>
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	889b      	ldrh	r3, [r3, #4]
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	d909      	bls.n	8009eea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	75fb      	strb	r3, [r7, #23]
 8009eda:	e006      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009edc:	2303      	movs	r3, #3
 8009ede:	75fb      	strb	r3, [r7, #23]
 8009ee0:	e003      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	75fb      	strb	r3, [r7, #23]
 8009ee6:	e000      	b.n	8009eea <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ee8:	bf00      	nop
  }

  return status;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	371c      	adds	r7, #28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	4613      	mov	r3, r2
 8009f04:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b03      	cmp	r3, #3
 8009f0e:	d120      	bne.n	8009f52 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	1e9a      	subs	r2, r3, #2
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	bf28      	it	cs
 8009f1c:	4613      	movcs	r3, r2
 8009f1e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3302      	adds	r3, #2
 8009f24:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f26:	2300      	movs	r3, #0
 8009f28:	82fb      	strh	r3, [r7, #22]
 8009f2a:	e00b      	b.n	8009f44 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f2c:	8afb      	ldrh	r3, [r7, #22]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4413      	add	r3, r2
 8009f32:	781a      	ldrb	r2, [r3, #0]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009f3e:	8afb      	ldrh	r3, [r7, #22]
 8009f40:	3302      	adds	r3, #2
 8009f42:	82fb      	strh	r3, [r7, #22]
 8009f44:	8afa      	ldrh	r2, [r7, #22]
 8009f46:	8abb      	ldrh	r3, [r7, #20]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d3ef      	bcc.n	8009f2c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	701a      	strb	r2, [r3, #0]
  }
}
 8009f52:	bf00      	nop
 8009f54:	371c      	adds	r7, #28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	7812      	ldrb	r2, [r2, #0]
 8009f70:	4413      	add	r3, r2
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4413      	add	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009f84:	68fb      	ldr	r3, [r7, #12]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b086      	sub	sp, #24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	789b      	ldrb	r3, [r3, #2]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d002      	beq.n	8009fb2 <USBH_CtlReq+0x20>
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d00f      	beq.n	8009fd0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009fb0:	e027      	b.n	800a002 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	88fa      	ldrh	r2, [r7, #6]
 8009fbc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fce:	e018      	b.n	800a002 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f81b 	bl	800a00c <USBH_HandleControl>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <USBH_CtlReq+0x54>
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	2b03      	cmp	r3, #3
 8009fe4:	d106      	bne.n	8009ff4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	761a      	strb	r2, [r3, #24]
      break;
 8009ff2:	e005      	b.n	800a000 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d102      	bne.n	800a000 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	709a      	strb	r2, [r3, #2]
      break;
 800a000:	bf00      	nop
  }
  return status;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af02      	add	r7, sp, #8
 800a012:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a014:	2301      	movs	r3, #1
 800a016:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a018:	2300      	movs	r3, #0
 800a01a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	7e1b      	ldrb	r3, [r3, #24]
 800a020:	3b01      	subs	r3, #1
 800a022:	2b0a      	cmp	r3, #10
 800a024:	f200 8156 	bhi.w	800a2d4 <USBH_HandleControl+0x2c8>
 800a028:	a201      	add	r2, pc, #4	@ (adr r2, 800a030 <USBH_HandleControl+0x24>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a05d 	.word	0x0800a05d
 800a034:	0800a077 	.word	0x0800a077
 800a038:	0800a0e1 	.word	0x0800a0e1
 800a03c:	0800a107 	.word	0x0800a107
 800a040:	0800a13f 	.word	0x0800a13f
 800a044:	0800a169 	.word	0x0800a169
 800a048:	0800a1bb 	.word	0x0800a1bb
 800a04c:	0800a1dd 	.word	0x0800a1dd
 800a050:	0800a219 	.word	0x0800a219
 800a054:	0800a23f 	.word	0x0800a23f
 800a058:	0800a27d 	.word	0x0800a27d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f103 0110 	add.w	r1, r3, #16
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	795b      	ldrb	r3, [r3, #5]
 800a066:	461a      	mov	r2, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f943 	bl	800a2f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2202      	movs	r2, #2
 800a072:	761a      	strb	r2, [r3, #24]
      break;
 800a074:	e139      	b.n	800a2ea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	795b      	ldrb	r3, [r3, #5]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 fa0d 	bl	800b49c <USBH_LL_GetURBState>
 800a082:	4603      	mov	r3, r0
 800a084:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a086:	7bbb      	ldrb	r3, [r7, #14]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d11e      	bne.n	800a0ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7c1b      	ldrb	r3, [r3, #16]
 800a090:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a094:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	8adb      	ldrh	r3, [r3, #22]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a09e:	7b7b      	ldrb	r3, [r7, #13]
 800a0a0:	2b80      	cmp	r3, #128	@ 0x80
 800a0a2:	d103      	bne.n	800a0ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2203      	movs	r2, #3
 800a0a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0aa:	e115      	b.n	800a2d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2205      	movs	r2, #5
 800a0b0:	761a      	strb	r2, [r3, #24]
      break;
 800a0b2:	e111      	b.n	800a2d8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a0b4:	7b7b      	ldrb	r3, [r7, #13]
 800a0b6:	2b80      	cmp	r3, #128	@ 0x80
 800a0b8:	d103      	bne.n	800a0c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2209      	movs	r2, #9
 800a0be:	761a      	strb	r2, [r3, #24]
      break;
 800a0c0:	e10a      	b.n	800a2d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2207      	movs	r2, #7
 800a0c6:	761a      	strb	r2, [r3, #24]
      break;
 800a0c8:	e106      	b.n	800a2d8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d003      	beq.n	800a0d8 <USBH_HandleControl+0xcc>
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	f040 8100 	bne.w	800a2d8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	220b      	movs	r2, #11
 800a0dc:	761a      	strb	r2, [r3, #24]
      break;
 800a0de:	e0fb      	b.n	800a2d8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6899      	ldr	r1, [r3, #8]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	899a      	ldrh	r2, [r3, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	791b      	ldrb	r3, [r3, #4]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f93a 	bl	800a372 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2204      	movs	r2, #4
 800a102:	761a      	strb	r2, [r3, #24]
      break;
 800a104:	e0f1      	b.n	800a2ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	791b      	ldrb	r3, [r3, #4]
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 f9c5 	bl	800b49c <USBH_LL_GetURBState>
 800a112:	4603      	mov	r3, r0
 800a114:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d102      	bne.n	800a122 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2209      	movs	r2, #9
 800a120:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a122:	7bbb      	ldrb	r3, [r7, #14]
 800a124:	2b05      	cmp	r3, #5
 800a126:	d102      	bne.n	800a12e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a128:	2303      	movs	r3, #3
 800a12a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a12c:	e0d6      	b.n	800a2dc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	2b04      	cmp	r3, #4
 800a132:	f040 80d3 	bne.w	800a2dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	220b      	movs	r2, #11
 800a13a:	761a      	strb	r2, [r3, #24]
      break;
 800a13c:	e0ce      	b.n	800a2dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6899      	ldr	r1, [r3, #8]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	899a      	ldrh	r2, [r3, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	795b      	ldrb	r3, [r3, #5]
 800a14a:	2001      	movs	r0, #1
 800a14c:	9000      	str	r0, [sp, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f8ea 	bl	800a328 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2206      	movs	r2, #6
 800a164:	761a      	strb	r2, [r3, #24]
      break;
 800a166:	e0c0      	b.n	800a2ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	795b      	ldrb	r3, [r3, #5]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 f994 	bl	800b49c <USBH_LL_GetURBState>
 800a174:	4603      	mov	r3, r0
 800a176:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d103      	bne.n	800a186 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2207      	movs	r2, #7
 800a182:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a184:	e0ac      	b.n	800a2e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	2b05      	cmp	r3, #5
 800a18a:	d105      	bne.n	800a198 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	220c      	movs	r2, #12
 800a190:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a192:	2303      	movs	r3, #3
 800a194:	73fb      	strb	r3, [r7, #15]
      break;
 800a196:	e0a3      	b.n	800a2e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d103      	bne.n	800a1a6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2205      	movs	r2, #5
 800a1a2:	761a      	strb	r2, [r3, #24]
      break;
 800a1a4:	e09c      	b.n	800a2e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	f040 8099 	bne.w	800a2e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	220b      	movs	r2, #11
 800a1b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b8:	e092      	b.n	800a2e0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	791b      	ldrb	r3, [r3, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f8d5 	bl	800a372 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2208      	movs	r2, #8
 800a1d8:	761a      	strb	r2, [r3, #24]

      break;
 800a1da:	e086      	b.n	800a2ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	791b      	ldrb	r3, [r3, #4]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 f95a 	bl	800b49c <USBH_LL_GetURBState>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d105      	bne.n	800a1fe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	220d      	movs	r2, #13
 800a1f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1fc:	e072      	b.n	800a2e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a1fe:	7bbb      	ldrb	r3, [r7, #14]
 800a200:	2b04      	cmp	r3, #4
 800a202:	d103      	bne.n	800a20c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	220b      	movs	r2, #11
 800a208:	761a      	strb	r2, [r3, #24]
      break;
 800a20a:	e06b      	b.n	800a2e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
 800a20e:	2b05      	cmp	r3, #5
 800a210:	d168      	bne.n	800a2e4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a212:	2303      	movs	r3, #3
 800a214:	73fb      	strb	r3, [r7, #15]
      break;
 800a216:	e065      	b.n	800a2e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	795b      	ldrb	r3, [r3, #5]
 800a21c:	2201      	movs	r2, #1
 800a21e:	9200      	str	r2, [sp, #0]
 800a220:	2200      	movs	r2, #0
 800a222:	2100      	movs	r1, #0
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f87f 	bl	800a328 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a230:	b29a      	uxth	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	220a      	movs	r2, #10
 800a23a:	761a      	strb	r2, [r3, #24]
      break;
 800a23c:	e055      	b.n	800a2ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	795b      	ldrb	r3, [r3, #5]
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f001 f929 	bl	800b49c <USBH_LL_GetURBState>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d105      	bne.n	800a260 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	220d      	movs	r2, #13
 800a25c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a25e:	e043      	b.n	800a2e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a260:	7bbb      	ldrb	r3, [r7, #14]
 800a262:	2b02      	cmp	r3, #2
 800a264:	d103      	bne.n	800a26e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2209      	movs	r2, #9
 800a26a:	761a      	strb	r2, [r3, #24]
      break;
 800a26c:	e03c      	b.n	800a2e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	2b04      	cmp	r3, #4
 800a272:	d139      	bne.n	800a2e8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	220b      	movs	r2, #11
 800a278:	761a      	strb	r2, [r3, #24]
      break;
 800a27a:	e035      	b.n	800a2e8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	7e5b      	ldrb	r3, [r3, #25]
 800a280:	3301      	adds	r3, #1
 800a282:	b2da      	uxtb	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	765a      	strb	r2, [r3, #25]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	7e5b      	ldrb	r3, [r3, #25]
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d806      	bhi.n	800a29e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a29c:	e025      	b.n	800a2ea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a2a4:	2106      	movs	r1, #6
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	795b      	ldrb	r3, [r3, #5]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f90c 	bl	800a4d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	791b      	ldrb	r3, [r3, #4]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f906 	bl	800a4d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d2:	e00a      	b.n	800a2ea <USBH_HandleControl+0x2de>

    default:
      break;
 800a2d4:	bf00      	nop
 800a2d6:	e008      	b.n	800a2ea <USBH_HandleControl+0x2de>
      break;
 800a2d8:	bf00      	nop
 800a2da:	e006      	b.n	800a2ea <USBH_HandleControl+0x2de>
      break;
 800a2dc:	bf00      	nop
 800a2de:	e004      	b.n	800a2ea <USBH_HandleControl+0x2de>
      break;
 800a2e0:	bf00      	nop
 800a2e2:	e002      	b.n	800a2ea <USBH_HandleControl+0x2de>
      break;
 800a2e4:	bf00      	nop
 800a2e6:	e000      	b.n	800a2ea <USBH_HandleControl+0x2de>
      break;
 800a2e8:	bf00      	nop
  }

  return status;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b088      	sub	sp, #32
 800a2f8:	af04      	add	r7, sp, #16
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	4613      	mov	r3, r2
 800a300:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a302:	79f9      	ldrb	r1, [r7, #7]
 800a304:	2300      	movs	r3, #0
 800a306:	9303      	str	r3, [sp, #12]
 800a308:	2308      	movs	r3, #8
 800a30a:	9302      	str	r3, [sp, #8]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	2300      	movs	r3, #0
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	2300      	movs	r3, #0
 800a316:	2200      	movs	r2, #0
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f001 f88e 	bl	800b43a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af04      	add	r7, sp, #16
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	4611      	mov	r1, r2
 800a334:	461a      	mov	r2, r3
 800a336:	460b      	mov	r3, r1
 800a338:	80fb      	strh	r3, [r7, #6]
 800a33a:	4613      	mov	r3, r2
 800a33c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a34c:	7979      	ldrb	r1, [r7, #5]
 800a34e:	7e3b      	ldrb	r3, [r7, #24]
 800a350:	9303      	str	r3, [sp, #12]
 800a352:	88fb      	ldrh	r3, [r7, #6]
 800a354:	9302      	str	r3, [sp, #8]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	2301      	movs	r3, #1
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	2300      	movs	r3, #0
 800a360:	2200      	movs	r2, #0
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f001 f869 	bl	800b43a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b088      	sub	sp, #32
 800a376:	af04      	add	r7, sp, #16
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	60b9      	str	r1, [r7, #8]
 800a37c:	4611      	mov	r1, r2
 800a37e:	461a      	mov	r2, r3
 800a380:	460b      	mov	r3, r1
 800a382:	80fb      	strh	r3, [r7, #6]
 800a384:	4613      	mov	r3, r2
 800a386:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a388:	7979      	ldrb	r1, [r7, #5]
 800a38a:	2300      	movs	r3, #0
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	9302      	str	r3, [sp, #8]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	2301      	movs	r3, #1
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	2300      	movs	r3, #0
 800a39c:	2201      	movs	r2, #1
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f001 f84b 	bl	800b43a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a3a4:	2300      	movs	r3, #0

}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b088      	sub	sp, #32
 800a3b2:	af04      	add	r7, sp, #16
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	460b      	mov	r3, r1
 800a3be:	80fb      	strh	r3, [r7, #6]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a3d2:	7979      	ldrb	r1, [r7, #5]
 800a3d4:	7e3b      	ldrb	r3, [r7, #24]
 800a3d6:	9303      	str	r3, [sp, #12]
 800a3d8:	88fb      	ldrh	r3, [r7, #6]
 800a3da:	9302      	str	r3, [sp, #8]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	9301      	str	r3, [sp, #4]
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f001 f826 	bl	800b43a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af04      	add	r7, sp, #16
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	4611      	mov	r1, r2
 800a404:	461a      	mov	r2, r3
 800a406:	460b      	mov	r3, r1
 800a408:	80fb      	strh	r3, [r7, #6]
 800a40a:	4613      	mov	r3, r2
 800a40c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a40e:	7979      	ldrb	r1, [r7, #5]
 800a410:	2300      	movs	r3, #0
 800a412:	9303      	str	r3, [sp, #12]
 800a414:	88fb      	ldrh	r3, [r7, #6]
 800a416:	9302      	str	r3, [sp, #8]
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	2301      	movs	r3, #1
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	2302      	movs	r3, #2
 800a422:	2201      	movs	r2, #1
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f001 f808 	bl	800b43a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af04      	add	r7, sp, #16
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	4608      	mov	r0, r1
 800a43e:	4611      	mov	r1, r2
 800a440:	461a      	mov	r2, r3
 800a442:	4603      	mov	r3, r0
 800a444:	70fb      	strb	r3, [r7, #3]
 800a446:	460b      	mov	r3, r1
 800a448:	70bb      	strb	r3, [r7, #2]
 800a44a:	4613      	mov	r3, r2
 800a44c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a44e:	7878      	ldrb	r0, [r7, #1]
 800a450:	78ba      	ldrb	r2, [r7, #2]
 800a452:	78f9      	ldrb	r1, [r7, #3]
 800a454:	8b3b      	ldrh	r3, [r7, #24]
 800a456:	9302      	str	r3, [sp, #8]
 800a458:	7d3b      	ldrb	r3, [r7, #20]
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	7c3b      	ldrb	r3, [r7, #16]
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	4603      	mov	r3, r0
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 ff9b 	bl	800b39e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	460b      	mov	r3, r1
 800a47c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 ffba 	bl	800b3fc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f836 	bl	800a510 <USBH_GetFreePipe>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a4a8:	89fb      	ldrh	r3, [r7, #14]
 800a4aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00a      	beq.n	800a4c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a4b2:	78fa      	ldrb	r2, [r7, #3]
 800a4b4:	89fb      	ldrh	r3, [r7, #14]
 800a4b6:	f003 030f 	and.w	r3, r3, #15
 800a4ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	33e0      	adds	r3, #224	@ 0xe0
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	440b      	add	r3, r1
 800a4c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a4c8:	89fb      	ldrh	r3, [r7, #14]
 800a4ca:	b2db      	uxtb	r3, r3
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	2b0f      	cmp	r3, #15
 800a4e4:	d80d      	bhi.n	800a502 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	33e0      	adds	r3, #224	@ 0xe0
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	78fb      	ldrb	r3, [r7, #3]
 800a4f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a4f8:	6879      	ldr	r1, [r7, #4]
 800a4fa:	33e0      	adds	r3, #224	@ 0xe0
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	440b      	add	r3, r1
 800a500:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a51c:	2300      	movs	r3, #0
 800a51e:	73fb      	strb	r3, [r7, #15]
 800a520:	e00f      	b.n	800a542 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	33e0      	adds	r3, #224	@ 0xe0
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d102      	bne.n	800a53c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	e007      	b.n	800a54c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	3301      	adds	r3, #1
 800a540:	73fb      	strb	r3, [r7, #15]
 800a542:	7bfb      	ldrb	r3, [r7, #15]
 800a544:	2b0f      	cmp	r3, #15
 800a546:	d9ec      	bls.n	800a522 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a548:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	4a08      	ldr	r2, [pc, #32]	@ (800a588 <disk_status+0x30>)
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	79fa      	ldrb	r2, [r7, #7]
 800a570:	4905      	ldr	r1, [pc, #20]	@ (800a588 <disk_status+0x30>)
 800a572:	440a      	add	r2, r1
 800a574:	7a12      	ldrb	r2, [r2, #8]
 800a576:	4610      	mov	r0, r2
 800a578:	4798      	blx	r3
 800a57a:	4603      	mov	r3, r0
 800a57c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	2000126c 	.word	0x2000126c

0800a58c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a59a:	79fb      	ldrb	r3, [r7, #7]
 800a59c:	4a0e      	ldr	r2, [pc, #56]	@ (800a5d8 <disk_initialize+0x4c>)
 800a59e:	5cd3      	ldrb	r3, [r2, r3]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d114      	bne.n	800a5ce <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a5d8 <disk_initialize+0x4c>)
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	79fa      	ldrb	r2, [r7, #7]
 800a5b2:	4909      	ldr	r1, [pc, #36]	@ (800a5d8 <disk_initialize+0x4c>)
 800a5b4:	440a      	add	r2, r1
 800a5b6:	7a12      	ldrb	r2, [r2, #8]
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	4798      	blx	r3
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
 800a5c8:	4a03      	ldr	r2, [pc, #12]	@ (800a5d8 <disk_initialize+0x4c>)
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	2000126c 	.word	0x2000126c

0800a5dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	607a      	str	r2, [r7, #4]
 800a5e6:	603b      	str	r3, [r7, #0]
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	4a0a      	ldr	r2, [pc, #40]	@ (800a618 <disk_read+0x3c>)
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	689c      	ldr	r4, [r3, #8]
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	4a07      	ldr	r2, [pc, #28]	@ (800a618 <disk_read+0x3c>)
 800a5fc:	4413      	add	r3, r2
 800a5fe:	7a18      	ldrb	r0, [r3, #8]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	68b9      	ldr	r1, [r7, #8]
 800a606:	47a0      	blx	r4
 800a608:	4603      	mov	r3, r0
 800a60a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a60c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	bd90      	pop	{r4, r7, pc}
 800a616:	bf00      	nop
 800a618:	2000126c 	.word	0x2000126c

0800a61c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a61c:	b590      	push	{r4, r7, lr}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
 800a626:	603b      	str	r3, [r7, #0]
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	4a0a      	ldr	r2, [pc, #40]	@ (800a658 <disk_write+0x3c>)
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	68dc      	ldr	r4, [r3, #12]
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	4a07      	ldr	r2, [pc, #28]	@ (800a658 <disk_write+0x3c>)
 800a63c:	4413      	add	r3, r2
 800a63e:	7a18      	ldrb	r0, [r3, #8]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	68b9      	ldr	r1, [r7, #8]
 800a646:	47a0      	blx	r4
 800a648:	4603      	mov	r3, r0
 800a64a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	bd90      	pop	{r4, r7, pc}
 800a656:	bf00      	nop
 800a658:	2000126c 	.word	0x2000126c

0800a65c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	4603      	mov	r3, r0
 800a664:	603a      	str	r2, [r7, #0]
 800a666:	71fb      	strb	r3, [r7, #7]
 800a668:	460b      	mov	r3, r1
 800a66a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	4a09      	ldr	r2, [pc, #36]	@ (800a694 <disk_ioctl+0x38>)
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	79fa      	ldrb	r2, [r7, #7]
 800a67a:	4906      	ldr	r1, [pc, #24]	@ (800a694 <disk_ioctl+0x38>)
 800a67c:	440a      	add	r2, r1
 800a67e:	7a10      	ldrb	r0, [r2, #8]
 800a680:	79b9      	ldrb	r1, [r7, #6]
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	4798      	blx	r3
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]
  return res;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	2000126c 	.word	0x2000126c

0800a698 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a6a8:	89fb      	ldrh	r3, [r7, #14]
 800a6aa:	021b      	lsls	r3, r3, #8
 800a6ac:	b21a      	sxth	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	b21b      	sxth	r3, r3
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	b21b      	sxth	r3, r3
 800a6b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a6ba:	89fb      	ldrh	r3, [r7, #14]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3303      	adds	r3, #3
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	021b      	lsls	r3, r3, #8
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	3202      	adds	r2, #2
 800a6e0:	7812      	ldrb	r2, [r2, #0]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	021b      	lsls	r3, r3, #8
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	3201      	adds	r2, #1
 800a6ee:	7812      	ldrb	r2, [r2, #0]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	021b      	lsls	r3, r3, #8
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	7812      	ldrb	r2, [r2, #0]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
	return rv;
 800a700:	68fb      	ldr	r3, [r7, #12]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
	...

0800a710 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a718:	2300      	movs	r3, #0
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	e010      	b.n	800a740 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a71e:	4a0d      	ldr	r2, [pc, #52]	@ (800a754 <clear_lock+0x44>)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	011b      	lsls	r3, r3, #4
 800a724:	4413      	add	r3, r2
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d105      	bne.n	800a73a <clear_lock+0x2a>
 800a72e:	4a09      	ldr	r2, [pc, #36]	@ (800a754 <clear_lock+0x44>)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	011b      	lsls	r3, r3, #4
 800a734:	4413      	add	r3, r2
 800a736:	2200      	movs	r2, #0
 800a738:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3301      	adds	r3, #1
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d9eb      	bls.n	800a71e <clear_lock+0xe>
	}
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	2000124c 	.word	0x2000124c

0800a758 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	78db      	ldrb	r3, [r3, #3]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d034      	beq.n	800a7d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a770:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	7858      	ldrb	r0, [r3, #1]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a77c:	2301      	movs	r3, #1
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	f7ff ff4c 	bl	800a61c <disk_write>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	73fb      	strb	r3, [r7, #15]
 800a78e:	e022      	b.n	800a7d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	1ad2      	subs	r2, r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d217      	bcs.n	800a7d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	789b      	ldrb	r3, [r3, #2]
 800a7aa:	613b      	str	r3, [r7, #16]
 800a7ac:	e010      	b.n	800a7d0 <sync_window+0x78>
					wsect += fs->fsize;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	7858      	ldrb	r0, [r3, #1]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	f7ff ff29 	bl	800a61c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	613b      	str	r3, [r7, #16]
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d8eb      	bhi.n	800a7ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d01b      	beq.n	800a830 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7ff ffad 	bl	800a758 <sync_window>
 800a7fe:	4603      	mov	r3, r0
 800a800:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d113      	bne.n	800a830 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	7858      	ldrb	r0, [r3, #1]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a812:	2301      	movs	r3, #1
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	f7ff fee1 	bl	800a5dc <disk_read>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a820:	f04f 33ff 	mov.w	r3, #4294967295
 800a824:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a826:	2301      	movs	r3, #1
 800a828:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800a830:	7bfb      	ldrb	r3, [r7, #15]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b087      	sub	sp, #28
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a842:	f04f 33ff 	mov.w	r3, #4294967295
 800a846:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d031      	beq.n	800a8b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	e002      	b.n	800a85e <get_ldnumber+0x24>
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	3301      	adds	r3, #1
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2b20      	cmp	r3, #32
 800a864:	d903      	bls.n	800a86e <get_ldnumber+0x34>
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b3a      	cmp	r3, #58	@ 0x3a
 800a86c:	d1f4      	bne.n	800a858 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2b3a      	cmp	r3, #58	@ 0x3a
 800a874:	d11c      	bne.n	800a8b0 <get_ldnumber+0x76>
			tp = *path;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	60fa      	str	r2, [r7, #12]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	3b30      	subs	r3, #48	@ 0x30
 800a886:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	2b09      	cmp	r3, #9
 800a88c:	d80e      	bhi.n	800a8ac <get_ldnumber+0x72>
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	429a      	cmp	r2, r3
 800a894:	d10a      	bne.n	800a8ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d107      	bne.n	800a8ac <get_ldnumber+0x72>
					vol = (int)i;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	e002      	b.n	800a8b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a8b4:	693b      	ldr	r3, [r7, #16]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	371c      	adds	r7, #28
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
	...

0800a8c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	70da      	strb	r2, [r3, #3]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8da:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7ff ff7e 	bl	800a7e0 <move_window>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <check_fs+0x2a>
 800a8ea:	2304      	movs	r3, #4
 800a8ec:	e038      	b.n	800a960 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3338      	adds	r3, #56	@ 0x38
 800a8f2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fece 	bl	800a698 <ld_word>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	461a      	mov	r2, r3
 800a900:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a904:	429a      	cmp	r2, r3
 800a906:	d001      	beq.n	800a90c <check_fs+0x48>
 800a908:	2303      	movs	r3, #3
 800a90a:	e029      	b.n	800a960 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a912:	2be9      	cmp	r3, #233	@ 0xe9
 800a914:	d009      	beq.n	800a92a <check_fs+0x66>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a91c:	2beb      	cmp	r3, #235	@ 0xeb
 800a91e:	d11e      	bne.n	800a95e <check_fs+0x9a>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a926:	2b90      	cmp	r3, #144	@ 0x90
 800a928:	d119      	bne.n	800a95e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	3338      	adds	r3, #56	@ 0x38
 800a92e:	3336      	adds	r3, #54	@ 0x36
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff fec9 	bl	800a6c8 <ld_dword>
 800a936:	4603      	mov	r3, r0
 800a938:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a93c:	4a0a      	ldr	r2, [pc, #40]	@ (800a968 <check_fs+0xa4>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d101      	bne.n	800a946 <check_fs+0x82>
 800a942:	2300      	movs	r3, #0
 800a944:	e00c      	b.n	800a960 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3338      	adds	r3, #56	@ 0x38
 800a94a:	3352      	adds	r3, #82	@ 0x52
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7ff febb 	bl	800a6c8 <ld_dword>
 800a952:	4603      	mov	r3, r0
 800a954:	4a05      	ldr	r2, [pc, #20]	@ (800a96c <check_fs+0xa8>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d101      	bne.n	800a95e <check_fs+0x9a>
 800a95a:	2300      	movs	r3, #0
 800a95c:	e000      	b.n	800a960 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a95e:	2302      	movs	r3, #2
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	00544146 	.word	0x00544146
 800a96c:	33544146 	.word	0x33544146

0800a970 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b096      	sub	sp, #88	@ 0x58
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	4613      	mov	r3, r2
 800a97c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2200      	movs	r2, #0
 800a982:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f7ff ff58 	bl	800a83a <get_ldnumber>
 800a98a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da01      	bge.n	800a996 <find_volume+0x26>
 800a992:	230b      	movs	r3, #11
 800a994:	e265      	b.n	800ae62 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a996:	4a9f      	ldr	r2, [pc, #636]	@ (800ac14 <find_volume+0x2a4>)
 800a998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a99e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <find_volume+0x3a>
 800a9a6:	230c      	movs	r3, #12
 800a9a8:	e25b      	b.n	800ae62 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a9b0:	79fb      	ldrb	r3, [r7, #7]
 800a9b2:	f023 0301 	bic.w	r3, r3, #1
 800a9b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d01a      	beq.n	800a9f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff fdc7 	bl	800a558 <disk_status>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a9d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10c      	bne.n	800a9f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <find_volume+0x82>
 800a9e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a9e6:	f003 0304 	and.w	r3, r3, #4
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a9ee:	230a      	movs	r3, #10
 800a9f0:	e237      	b.n	800ae62 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e235      	b.n	800ae62 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	785b      	ldrb	r3, [r3, #1]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff fdbf 	bl	800a58c <disk_initialize>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aa14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aa20:	2303      	movs	r3, #3
 800aa22:	e21e      	b.n	800ae62 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aa24:	79fb      	ldrb	r3, [r7, #7]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d007      	beq.n	800aa3a <find_volume+0xca>
 800aa2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa2e:	f003 0304 	and.w	r3, r3, #4
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800aa36:	230a      	movs	r3, #10
 800aa38:	e213      	b.n	800ae62 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3c:	7858      	ldrb	r0, [r3, #1]
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa40:	330c      	adds	r3, #12
 800aa42:	461a      	mov	r2, r3
 800aa44:	2102      	movs	r1, #2
 800aa46:	f7ff fe09 	bl	800a65c <disk_ioctl>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <find_volume+0xe4>
 800aa50:	2301      	movs	r3, #1
 800aa52:	e206      	b.n	800ae62 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800aa54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa56:	899b      	ldrh	r3, [r3, #12]
 800aa58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa5c:	d80d      	bhi.n	800aa7a <find_volume+0x10a>
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa60:	899b      	ldrh	r3, [r3, #12]
 800aa62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa66:	d308      	bcc.n	800aa7a <find_volume+0x10a>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6a:	899b      	ldrh	r3, [r3, #12]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa70:	899b      	ldrh	r3, [r3, #12]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	4013      	ands	r3, r2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <find_volume+0x10e>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e1f1      	b.n	800ae62 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aa82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aa86:	f7ff ff1d 	bl	800a8c4 <check_fs>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aa90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d149      	bne.n	800ab2c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aa98:	2300      	movs	r3, #0
 800aa9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa9c:	e01e      	b.n	800aadc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800aaa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaa6:	011b      	lsls	r3, r3, #4
 800aaa8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800aaac:	4413      	add	r3, r2
 800aaae:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab2:	3304      	adds	r3, #4
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <find_volume+0x158>
 800aaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabc:	3308      	adds	r3, #8
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff fe02 	bl	800a6c8 <ld_dword>
 800aac4:	4602      	mov	r2, r0
 800aac6:	e000      	b.n	800aaca <find_volume+0x15a>
 800aac8:	2200      	movs	r2, #0
 800aaca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	3358      	adds	r3, #88	@ 0x58
 800aad0:	443b      	add	r3, r7
 800aad2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aad8:	3301      	adds	r3, #1
 800aada:	643b      	str	r3, [r7, #64]	@ 0x40
 800aadc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d9dd      	bls.n	800aa9e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aae2:	2300      	movs	r3, #0
 800aae4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800aae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <find_volume+0x182>
 800aaec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800aaf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	3358      	adds	r3, #88	@ 0x58
 800aaf8:	443b      	add	r3, r7
 800aafa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aafe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ab00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d005      	beq.n	800ab12 <find_volume+0x1a2>
 800ab06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab0a:	f7ff fedb 	bl	800a8c4 <check_fs>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	e000      	b.n	800ab14 <find_volume+0x1a4>
 800ab12:	2303      	movs	r3, #3
 800ab14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ab18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d905      	bls.n	800ab2c <find_volume+0x1bc>
 800ab20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab22:	3301      	adds	r3, #1
 800ab24:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d9e2      	bls.n	800aaf2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ab2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d101      	bne.n	800ab38 <find_volume+0x1c8>
 800ab34:	2301      	movs	r3, #1
 800ab36:	e194      	b.n	800ae62 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ab38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d901      	bls.n	800ab44 <find_volume+0x1d4>
 800ab40:	230d      	movs	r3, #13
 800ab42:	e18e      	b.n	800ae62 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ab44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab46:	3338      	adds	r3, #56	@ 0x38
 800ab48:	330b      	adds	r3, #11
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff fda4 	bl	800a698 <ld_word>
 800ab50:	4603      	mov	r3, r0
 800ab52:	461a      	mov	r2, r3
 800ab54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab56:	899b      	ldrh	r3, [r3, #12]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d001      	beq.n	800ab60 <find_volume+0x1f0>
 800ab5c:	230d      	movs	r3, #13
 800ab5e:	e180      	b.n	800ae62 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	3338      	adds	r3, #56	@ 0x38
 800ab64:	3316      	adds	r3, #22
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff fd96 	bl	800a698 <ld_word>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ab70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <find_volume+0x214>
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	3338      	adds	r3, #56	@ 0x38
 800ab7a:	3324      	adds	r3, #36	@ 0x24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7ff fda3 	bl	800a6c8 <ld_dword>
 800ab82:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ab84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab88:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ab90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ab94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab96:	789b      	ldrb	r3, [r3, #2]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d005      	beq.n	800aba8 <find_volume+0x238>
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9e:	789b      	ldrb	r3, [r3, #2]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d001      	beq.n	800aba8 <find_volume+0x238>
 800aba4:	230d      	movs	r3, #13
 800aba6:	e15c      	b.n	800ae62 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abaa:	789b      	ldrb	r3, [r3, #2]
 800abac:	461a      	mov	r2, r3
 800abae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abb0:	fb02 f303 	mul.w	r3, r2, r3
 800abb4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800abb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abbc:	461a      	mov	r2, r3
 800abbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800abc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc4:	895b      	ldrh	r3, [r3, #10]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d008      	beq.n	800abdc <find_volume+0x26c>
 800abca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abcc:	895b      	ldrh	r3, [r3, #10]
 800abce:	461a      	mov	r2, r3
 800abd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd2:	895b      	ldrh	r3, [r3, #10]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	4013      	ands	r3, r2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d001      	beq.n	800abe0 <find_volume+0x270>
 800abdc:	230d      	movs	r3, #13
 800abde:	e140      	b.n	800ae62 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe2:	3338      	adds	r3, #56	@ 0x38
 800abe4:	3311      	adds	r3, #17
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff fd56 	bl	800a698 <ld_word>
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	891b      	ldrh	r3, [r3, #8]
 800abf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abfa:	8992      	ldrh	r2, [r2, #12]
 800abfc:	0952      	lsrs	r2, r2, #5
 800abfe:	b292      	uxth	r2, r2
 800ac00:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac04:	fb01 f202 	mul.w	r2, r1, r2
 800ac08:	1a9b      	subs	r3, r3, r2
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <find_volume+0x2a8>
 800ac10:	230d      	movs	r3, #13
 800ac12:	e126      	b.n	800ae62 <find_volume+0x4f2>
 800ac14:	20001244 	.word	0x20001244

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ac18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1a:	3338      	adds	r3, #56	@ 0x38
 800ac1c:	3313      	adds	r3, #19
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff fd3a 	bl	800a698 <ld_word>
 800ac24:	4603      	mov	r3, r0
 800ac26:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ac28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <find_volume+0x2cc>
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac30:	3338      	adds	r3, #56	@ 0x38
 800ac32:	3320      	adds	r3, #32
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff fd47 	bl	800a6c8 <ld_dword>
 800ac3a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	3338      	adds	r3, #56	@ 0x38
 800ac40:	330e      	adds	r3, #14
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff fd28 	bl	800a698 <ld_word>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ac4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <find_volume+0x2e6>
 800ac52:	230d      	movs	r3, #13
 800ac54:	e105      	b.n	800ae62 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ac56:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ac58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac5a:	4413      	add	r3, r2
 800ac5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac5e:	8911      	ldrh	r1, [r2, #8]
 800ac60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac62:	8992      	ldrh	r2, [r2, #12]
 800ac64:	0952      	lsrs	r2, r2, #5
 800ac66:	b292      	uxth	r2, r2
 800ac68:	fbb1 f2f2 	udiv	r2, r1, r2
 800ac6c:	b292      	uxth	r2, r2
 800ac6e:	4413      	add	r3, r2
 800ac70:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ac72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d201      	bcs.n	800ac7e <find_volume+0x30e>
 800ac7a:	230d      	movs	r3, #13
 800ac7c:	e0f1      	b.n	800ae62 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ac7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac86:	8952      	ldrh	r2, [r2, #10]
 800ac88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <find_volume+0x328>
 800ac94:	230d      	movs	r3, #13
 800ac96:	e0e4      	b.n	800ae62 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d802      	bhi.n	800acae <find_volume+0x33e>
 800aca8:	2302      	movs	r3, #2
 800acaa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800acae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d802      	bhi.n	800acbe <find_volume+0x34e>
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800acbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc0:	1c9a      	adds	r2, r3, #2
 800acc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800acc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acca:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800accc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800acce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acd0:	441a      	add	r2, r3
 800acd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800acd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acda:	441a      	add	r2, r3
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800ace0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	d11e      	bne.n	800ad26 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	3338      	adds	r3, #56	@ 0x38
 800acec:	332a      	adds	r3, #42	@ 0x2a
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff fcd2 	bl	800a698 <ld_word>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <find_volume+0x38e>
 800acfa:	230d      	movs	r3, #13
 800acfc:	e0b1      	b.n	800ae62 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800acfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad00:	891b      	ldrh	r3, [r3, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <find_volume+0x39a>
 800ad06:	230d      	movs	r3, #13
 800ad08:	e0ab      	b.n	800ae62 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0c:	3338      	adds	r3, #56	@ 0x38
 800ad0e:	332c      	adds	r3, #44	@ 0x2c
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff fcd9 	bl	800a6c8 <ld_dword>
 800ad16:	4602      	mov	r2, r0
 800ad18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad24:	e01f      	b.n	800ad66 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	891b      	ldrh	r3, [r3, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <find_volume+0x3c2>
 800ad2e:	230d      	movs	r3, #13
 800ad30:	e097      	b.n	800ae62 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ad32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad38:	441a      	add	r2, r3
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ad3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d103      	bne.n	800ad4e <find_volume+0x3de>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	005b      	lsls	r3, r3, #1
 800ad4c:	e00a      	b.n	800ad64 <find_volume+0x3f4>
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad50:	69da      	ldr	r2, [r3, #28]
 800ad52:	4613      	mov	r3, r2
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	4413      	add	r3, r2
 800ad58:	085a      	lsrs	r2, r3, #1
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ad64:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ad66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad68:	6a1a      	ldr	r2, [r3, #32]
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6c:	899b      	ldrh	r3, [r3, #12]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad72:	440b      	add	r3, r1
 800ad74:	3b01      	subs	r3, #1
 800ad76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ad78:	8989      	ldrh	r1, [r1, #12]
 800ad7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d201      	bcs.n	800ad86 <find_volume+0x416>
 800ad82:	230d      	movs	r3, #13
 800ad84:	e06d      	b.n	800ae62 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ad86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad88:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8c:	615a      	str	r2, [r3, #20]
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad90:	695a      	ldr	r2, [r3, #20]
 800ad92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad94:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ad96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad98:	2280      	movs	r2, #128	@ 0x80
 800ad9a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ad9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d149      	bne.n	800ae38 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ada4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada6:	3338      	adds	r3, #56	@ 0x38
 800ada8:	3330      	adds	r3, #48	@ 0x30
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff fc74 	bl	800a698 <ld_word>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d140      	bne.n	800ae38 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800adb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adb8:	3301      	adds	r3, #1
 800adba:	4619      	mov	r1, r3
 800adbc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800adbe:	f7ff fd0f 	bl	800a7e0 <move_window>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d137      	bne.n	800ae38 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800adc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adca:	2200      	movs	r2, #0
 800adcc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800adce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add0:	3338      	adds	r3, #56	@ 0x38
 800add2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff fc5e 	bl	800a698 <ld_word>
 800addc:	4603      	mov	r3, r0
 800adde:	461a      	mov	r2, r3
 800ade0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d127      	bne.n	800ae38 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ade8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adea:	3338      	adds	r3, #56	@ 0x38
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fc6b 	bl	800a6c8 <ld_dword>
 800adf2:	4603      	mov	r3, r0
 800adf4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae6c <find_volume+0x4fc>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d11e      	bne.n	800ae38 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800adfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfc:	3338      	adds	r3, #56	@ 0x38
 800adfe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff fc60 	bl	800a6c8 <ld_dword>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	4a19      	ldr	r2, [pc, #100]	@ (800ae70 <find_volume+0x500>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d113      	bne.n	800ae38 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ae10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae12:	3338      	adds	r3, #56	@ 0x38
 800ae14:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fc55 	bl	800a6c8 <ld_dword>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae22:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ae24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae26:	3338      	adds	r3, #56	@ 0x38
 800ae28:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff fc4b 	bl	800a6c8 <ld_dword>
 800ae32:	4602      	mov	r2, r0
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ae38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ae3e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ae40:	4b0c      	ldr	r3, [pc, #48]	@ (800ae74 <find_volume+0x504>)
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	3301      	adds	r3, #1
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	4b0a      	ldr	r3, [pc, #40]	@ (800ae74 <find_volume+0x504>)
 800ae4a:	801a      	strh	r2, [r3, #0]
 800ae4c:	4b09      	ldr	r3, [pc, #36]	@ (800ae74 <find_volume+0x504>)
 800ae4e:	881a      	ldrh	r2, [r3, #0]
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800ae54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae56:	2200      	movs	r2, #0
 800ae58:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ae5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ae5c:	f7ff fc58 	bl	800a710 <clear_lock>
#endif
	return FR_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3758      	adds	r7, #88	@ 0x58
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	41615252 	.word	0x41615252
 800ae70:	61417272 	.word	0x61417272
 800ae74:	20001248 	.word	0x20001248

0800ae78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	4613      	mov	r3, r2
 800ae84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ae8a:	f107 0310 	add.w	r3, r7, #16
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff fcd3 	bl	800a83a <get_ldnumber>
 800ae94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	da01      	bge.n	800aea0 <f_mount+0x28>
 800ae9c:	230b      	movs	r3, #11
 800ae9e:	e02b      	b.n	800aef8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aea0:	4a17      	ldr	r2, [pc, #92]	@ (800af00 <f_mount+0x88>)
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aea8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d005      	beq.n	800aebc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aeb0:	69b8      	ldr	r0, [r7, #24]
 800aeb2:	f7ff fc2d 	bl	800a710 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d002      	beq.n	800aec8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	490d      	ldr	r1, [pc, #52]	@ (800af00 <f_mount+0x88>)
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <f_mount+0x66>
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d001      	beq.n	800aee2 <f_mount+0x6a>
 800aede:	2300      	movs	r3, #0
 800aee0:	e00a      	b.n	800aef8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aee2:	f107 010c 	add.w	r1, r7, #12
 800aee6:	f107 0308 	add.w	r3, r7, #8
 800aeea:	2200      	movs	r2, #0
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7ff fd3f 	bl	800a970 <find_volume>
 800aef2:	4603      	mov	r3, r0
 800aef4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3720      	adds	r7, #32
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20001244 	.word	0x20001244

0800af04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af04:	b480      	push	{r7}
 800af06:	b087      	sub	sp, #28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	4613      	mov	r3, r2
 800af10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af12:	2301      	movs	r3, #1
 800af14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af1a:	4b1f      	ldr	r3, [pc, #124]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af1c:	7a5b      	ldrb	r3, [r3, #9]
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b00      	cmp	r3, #0
 800af22:	d131      	bne.n	800af88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af24:	4b1c      	ldr	r3, [pc, #112]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af26:	7a5b      	ldrb	r3, [r3, #9]
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	461a      	mov	r2, r3
 800af2c:	4b1a      	ldr	r3, [pc, #104]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af2e:	2100      	movs	r1, #0
 800af30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af32:	4b19      	ldr	r3, [pc, #100]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af34:	7a5b      	ldrb	r3, [r3, #9]
 800af36:	b2db      	uxtb	r3, r3
 800af38:	4a17      	ldr	r2, [pc, #92]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af42:	4b15      	ldr	r3, [pc, #84]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af44:	7a5b      	ldrb	r3, [r3, #9]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	461a      	mov	r2, r3
 800af4a:	4b13      	ldr	r3, [pc, #76]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af4c:	4413      	add	r3, r2
 800af4e:	79fa      	ldrb	r2, [r7, #7]
 800af50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af52:	4b11      	ldr	r3, [pc, #68]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af54:	7a5b      	ldrb	r3, [r3, #9]
 800af56:	b2db      	uxtb	r3, r3
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	b2d1      	uxtb	r1, r2
 800af5c:	4a0e      	ldr	r2, [pc, #56]	@ (800af98 <FATFS_LinkDriverEx+0x94>)
 800af5e:	7251      	strb	r1, [r2, #9]
 800af60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af62:	7dbb      	ldrb	r3, [r7, #22]
 800af64:	3330      	adds	r3, #48	@ 0x30
 800af66:	b2da      	uxtb	r2, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	3301      	adds	r3, #1
 800af70:	223a      	movs	r2, #58	@ 0x3a
 800af72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	3302      	adds	r3, #2
 800af78:	222f      	movs	r2, #47	@ 0x2f
 800af7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	3303      	adds	r3, #3
 800af80:	2200      	movs	r2, #0
 800af82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af88:	7dfb      	ldrb	r3, [r7, #23]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	2000126c 	.word	0x2000126c

0800af9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800afa6:	2200      	movs	r2, #0
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff ffaa 	bl	800af04 <FATFS_LinkDriverEx>
 800afb0:	4603      	mov	r3, r0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
	...

0800afbc <MX_USB_HOST_App_state>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
uint8_t MX_USB_HOST_App_state(void)
{
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0
  return Appli_state;
 800afc0:	4b03      	ldr	r3, [pc, #12]	@ (800afd0 <MX_USB_HOST_App_state+0x14>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	20001650 	.word	0x20001650

0800afd4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800afd8:	2201      	movs	r2, #1
 800afda:	490e      	ldr	r1, [pc, #56]	@ (800b014 <MX_USB_HOST_Init+0x40>)
 800afdc:	480e      	ldr	r0, [pc, #56]	@ (800b018 <MX_USB_HOST_Init+0x44>)
 800afde:	f7fd fdd8 	bl	8008b92 <USBH_Init>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800afe8:	f7f5 fdee 	bl	8000bc8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800afec:	490b      	ldr	r1, [pc, #44]	@ (800b01c <MX_USB_HOST_Init+0x48>)
 800afee:	480a      	ldr	r0, [pc, #40]	@ (800b018 <MX_USB_HOST_Init+0x44>)
 800aff0:	f7fd fe7c 	bl	8008cec <USBH_RegisterClass>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800affa:	f7f5 fde5 	bl	8000bc8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800affe:	4806      	ldr	r0, [pc, #24]	@ (800b018 <MX_USB_HOST_Init+0x44>)
 800b000:	f7fd ff00 	bl	8008e04 <USBH_Start>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b00a:	f7f5 fddd 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b00e:	bf00      	nop
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	0800b035 	.word	0x0800b035
 800b018:	20001278 	.word	0x20001278
 800b01c:	20000010 	.word	0x20000010

0800b020 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b024:	4802      	ldr	r0, [pc, #8]	@ (800b030 <MX_USB_HOST_Process+0x10>)
 800b026:	f7fd fefd 	bl	8008e24 <USBH_Process>
}
 800b02a:	bf00      	nop
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20001278 	.word	0x20001278

0800b034 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	3b01      	subs	r3, #1
 800b044:	2b04      	cmp	r3, #4
 800b046:	d829      	bhi.n	800b09c <USBH_UserProcess+0x68>
 800b048:	a201      	add	r2, pc, #4	@ (adr r2, 800b050 <USBH_UserProcess+0x1c>)
 800b04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04e:	bf00      	nop
 800b050:	0800b065 	.word	0x0800b065
 800b054:	0800b081 	.word	0x0800b081
 800b058:	0800b09d 	.word	0x0800b09d
 800b05c:	0800b08f 	.word	0x0800b08f
 800b060:	0800b06d 	.word	0x0800b06d
  {
  case HOST_USER_SELECT_CONFIGURATION:
	  printf("\n USB Config");
 800b064:	4810      	ldr	r0, [pc, #64]	@ (800b0a8 <USBH_UserProcess+0x74>)
 800b066:	f000 fc57 	bl	800b918 <iprintf>
  break;
 800b06a:	e018      	b.n	800b09e <USBH_UserProcess+0x6a>

  case HOST_USER_DISCONNECTION:
	  printf("\n USB Disconnected");
 800b06c:	480f      	ldr	r0, [pc, #60]	@ (800b0ac <USBH_UserProcess+0x78>)
 800b06e:	f000 fc53 	bl	800b918 <iprintf>
	  usb_exp_disk = 1;
 800b072:	4b0f      	ldr	r3, [pc, #60]	@ (800b0b0 <USBH_UserProcess+0x7c>)
 800b074:	2201      	movs	r2, #1
 800b076:	701a      	strb	r2, [r3, #0]
	  Appli_state = APPLICATION_DISCONNECT;
 800b078:	4b0e      	ldr	r3, [pc, #56]	@ (800b0b4 <USBH_UserProcess+0x80>)
 800b07a:	2203      	movs	r2, #3
 800b07c:	701a      	strb	r2, [r3, #0]
  break;
 800b07e:	e00e      	b.n	800b09e <USBH_UserProcess+0x6a>

  case HOST_USER_CLASS_ACTIVE:
	  printf("\n USB READY");
 800b080:	480d      	ldr	r0, [pc, #52]	@ (800b0b8 <USBH_UserProcess+0x84>)
 800b082:	f000 fc49 	bl	800b918 <iprintf>
  Appli_state = APPLICATION_READY;
 800b086:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b4 <USBH_UserProcess+0x80>)
 800b088:	2202      	movs	r2, #2
 800b08a:	701a      	strb	r2, [r3, #0]
  break;
 800b08c:	e007      	b.n	800b09e <USBH_UserProcess+0x6a>

  case HOST_USER_CONNECTION:
	  printf("\n USB Connected");
 800b08e:	480b      	ldr	r0, [pc, #44]	@ (800b0bc <USBH_UserProcess+0x88>)
 800b090:	f000 fc42 	bl	800b918 <iprintf>
  Appli_state = APPLICATION_START;
 800b094:	4b07      	ldr	r3, [pc, #28]	@ (800b0b4 <USBH_UserProcess+0x80>)
 800b096:	2201      	movs	r2, #1
 800b098:	701a      	strb	r2, [r3, #0]
  break;
 800b09a:	e000      	b.n	800b09e <USBH_UserProcess+0x6a>

  default:
  break;
 800b09c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b09e:	bf00      	nop
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0800c598 	.word	0x0800c598
 800b0ac:	0800c5a8 	.word	0x0800c5a8
 800b0b0:	20000001 	.word	0x20000001
 800b0b4:	20001650 	.word	0x20001650
 800b0b8:	0800c5bc 	.word	0x0800c5bc
 800b0bc:	0800c5c8 	.word	0x0800c5c8

0800b0c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08a      	sub	sp, #40	@ 0x28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0c8:	f107 0314 	add.w	r3, r7, #20
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	605a      	str	r2, [r3, #4]
 800b0d2:	609a      	str	r2, [r3, #8]
 800b0d4:	60da      	str	r2, [r3, #12]
 800b0d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0e0:	d13a      	bne.n	800b158 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	613b      	str	r3, [r7, #16]
 800b0e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b160 <HAL_HCD_MspInit+0xa0>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ea:	4a1d      	ldr	r2, [pc, #116]	@ (800b160 <HAL_HCD_MspInit+0xa0>)
 800b0ec:	f043 0301 	orr.w	r3, r3, #1
 800b0f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b160 <HAL_HCD_MspInit+0xa0>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b0fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b104:	2302      	movs	r3, #2
 800b106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b108:	2300      	movs	r3, #0
 800b10a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b10c:	2303      	movs	r3, #3
 800b10e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b110:	230a      	movs	r3, #10
 800b112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b114:	f107 0314 	add.w	r3, r7, #20
 800b118:	4619      	mov	r1, r3
 800b11a:	4812      	ldr	r0, [pc, #72]	@ (800b164 <HAL_HCD_MspInit+0xa4>)
 800b11c:	f7f6 f9c4 	bl	80014a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b120:	4b0f      	ldr	r3, [pc, #60]	@ (800b160 <HAL_HCD_MspInit+0xa0>)
 800b122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b124:	4a0e      	ldr	r2, [pc, #56]	@ (800b160 <HAL_HCD_MspInit+0xa0>)
 800b126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b12a:	6353      	str	r3, [r2, #52]	@ 0x34
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	4b0b      	ldr	r3, [pc, #44]	@ (800b160 <HAL_HCD_MspInit+0xa0>)
 800b132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b134:	4a0a      	ldr	r2, [pc, #40]	@ (800b160 <HAL_HCD_MspInit+0xa0>)
 800b136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b13a:	6453      	str	r3, [r2, #68]	@ 0x44
 800b13c:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <HAL_HCD_MspInit+0xa0>)
 800b13e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	2043      	movs	r0, #67	@ 0x43
 800b14e:	f7f6 f8e2 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b152:	2043      	movs	r0, #67	@ 0x43
 800b154:	f7f6 f8fb 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b158:	bf00      	nop
 800b15a:	3728      	adds	r7, #40	@ 0x28
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	40023800 	.word	0x40023800
 800b164:	40020000 	.word	0x40020000

0800b168 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe fa2b 	bl	80095d2 <USBH_LL_IncTimer>
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b192:	4618      	mov	r0, r3
 800b194:	f7fe fa63 	bl	800965e <USBH_LL_Connect>
}
 800b198:	bf00      	nop
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe fa6c 	bl	800968c <USBH_LL_Disconnect>
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	70fb      	strb	r3, [r7, #3]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe fa1d 	bl	8009626 <USBH_LL_PortEnabled>
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe fa1d 	bl	8009642 <USBH_LL_PortDisabled>
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d12a      	bne.n	800b278 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b222:	4a18      	ldr	r2, [pc, #96]	@ (800b284 <USBH_LL_Init+0x74>)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a15      	ldr	r2, [pc, #84]	@ (800b284 <USBH_LL_Init+0x74>)
 800b22e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b232:	4b14      	ldr	r3, [pc, #80]	@ (800b284 <USBH_LL_Init+0x74>)
 800b234:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b238:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b23a:	4b12      	ldr	r3, [pc, #72]	@ (800b284 <USBH_LL_Init+0x74>)
 800b23c:	2208      	movs	r2, #8
 800b23e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b240:	4b10      	ldr	r3, [pc, #64]	@ (800b284 <USBH_LL_Init+0x74>)
 800b242:	2201      	movs	r2, #1
 800b244:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b246:	4b0f      	ldr	r3, [pc, #60]	@ (800b284 <USBH_LL_Init+0x74>)
 800b248:	2200      	movs	r2, #0
 800b24a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b24c:	4b0d      	ldr	r3, [pc, #52]	@ (800b284 <USBH_LL_Init+0x74>)
 800b24e:	2202      	movs	r2, #2
 800b250:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b252:	4b0c      	ldr	r3, [pc, #48]	@ (800b284 <USBH_LL_Init+0x74>)
 800b254:	2200      	movs	r2, #0
 800b256:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b258:	480a      	ldr	r0, [pc, #40]	@ (800b284 <USBH_LL_Init+0x74>)
 800b25a:	f7f6 fb0d 	bl	8001878 <HAL_HCD_Init>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b264:	f7f5 fcb0 	bl	8000bc8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b268:	4806      	ldr	r0, [pc, #24]	@ (800b284 <USBH_LL_Init+0x74>)
 800b26a:	f7f6 ff6d 	bl	8002148 <HAL_HCD_GetCurrentFrame>
 800b26e:	4603      	mov	r3, r0
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7fe f99e 	bl	80095b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20001654 	.word	0x20001654

0800b288 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7f6 feda 	bl	8002058 <HAL_HCD_Start>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 f988 	bl	800b5c0 <USBH_Get_USB_Status>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f6 fee2 	bl	800209e <HAL_HCD_Stop>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 f96d 	bl	800b5c0 <USBH_Get_USB_Status>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b306:	4618      	mov	r0, r3
 800b308:	f7f6 ff2c 	bl	8002164 <HAL_HCD_GetCurrentSpeed>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d00c      	beq.n	800b32c <USBH_LL_GetSpeed+0x38>
 800b312:	2b02      	cmp	r3, #2
 800b314:	d80d      	bhi.n	800b332 <USBH_LL_GetSpeed+0x3e>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d002      	beq.n	800b320 <USBH_LL_GetSpeed+0x2c>
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d003      	beq.n	800b326 <USBH_LL_GetSpeed+0x32>
 800b31e:	e008      	b.n	800b332 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
    break;
 800b324:	e008      	b.n	800b338 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b326:	2301      	movs	r3, #1
 800b328:	73fb      	strb	r3, [r7, #15]
    break;
 800b32a:	e005      	b.n	800b338 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b32c:	2302      	movs	r3, #2
 800b32e:	73fb      	strb	r3, [r7, #15]
    break;
 800b330:	e002      	b.n	800b338 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b332:	2301      	movs	r3, #1
 800b334:	73fb      	strb	r3, [r7, #15]
    break;
 800b336:	bf00      	nop
  }
  return  speed;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b358:	4618      	mov	r0, r3
 800b35a:	f7f6 febd 	bl	80020d8 <HAL_HCD_ResetPort>
 800b35e:	4603      	mov	r3, r0
 800b360:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b362:	7bfb      	ldrb	r3, [r7, #15]
 800b364:	4618      	mov	r0, r3
 800b366:	f000 f92b 	bl	800b5c0 <USBH_Get_USB_Status>
 800b36a:	4603      	mov	r3, r0
 800b36c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b36e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b38a:	78fa      	ldrb	r2, [r7, #3]
 800b38c:	4611      	mov	r1, r2
 800b38e:	4618      	mov	r0, r3
 800b390:	f7f6 fec5 	bl	800211e <HAL_HCD_HC_GetXferCount>
 800b394:	4603      	mov	r3, r0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b39e:	b590      	push	{r4, r7, lr}
 800b3a0:	b089      	sub	sp, #36	@ 0x24
 800b3a2:	af04      	add	r7, sp, #16
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	4608      	mov	r0, r1
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	70fb      	strb	r3, [r7, #3]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	70bb      	strb	r3, [r7, #2]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b3c6:	787c      	ldrb	r4, [r7, #1]
 800b3c8:	78ba      	ldrb	r2, [r7, #2]
 800b3ca:	78f9      	ldrb	r1, [r7, #3]
 800b3cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3ce:	9302      	str	r3, [sp, #8]
 800b3d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	4623      	mov	r3, r4
 800b3de:	f7f6 fab2 	bl	8001946 <HAL_HCD_HC_Init>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 f8e9 	bl	800b5c0 <USBH_Get_USB_Status>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd90      	pop	{r4, r7, pc}

0800b3fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b416:	78fa      	ldrb	r2, [r7, #3]
 800b418:	4611      	mov	r1, r2
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7f6 fb4b 	bl	8001ab6 <HAL_HCD_HC_Halt>
 800b420:	4603      	mov	r3, r0
 800b422:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b424:	7bfb      	ldrb	r3, [r7, #15]
 800b426:	4618      	mov	r0, r3
 800b428:	f000 f8ca 	bl	800b5c0 <USBH_Get_USB_Status>
 800b42c:	4603      	mov	r3, r0
 800b42e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b430:	7bbb      	ldrb	r3, [r7, #14]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b43a:	b590      	push	{r4, r7, lr}
 800b43c:	b089      	sub	sp, #36	@ 0x24
 800b43e:	af04      	add	r7, sp, #16
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	4608      	mov	r0, r1
 800b444:	4611      	mov	r1, r2
 800b446:	461a      	mov	r2, r3
 800b448:	4603      	mov	r3, r0
 800b44a:	70fb      	strb	r3, [r7, #3]
 800b44c:	460b      	mov	r3, r1
 800b44e:	70bb      	strb	r3, [r7, #2]
 800b450:	4613      	mov	r3, r2
 800b452:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b454:	2300      	movs	r3, #0
 800b456:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b458:	2300      	movs	r3, #0
 800b45a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b462:	787c      	ldrb	r4, [r7, #1]
 800b464:	78ba      	ldrb	r2, [r7, #2]
 800b466:	78f9      	ldrb	r1, [r7, #3]
 800b468:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b46c:	9303      	str	r3, [sp, #12]
 800b46e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b470:	9302      	str	r3, [sp, #8]
 800b472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	4623      	mov	r3, r4
 800b47e:	f7f6 fb3d 	bl	8001afc <HAL_HCD_HC_SubmitRequest>
 800b482:	4603      	mov	r3, r0
 800b484:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	4618      	mov	r0, r3
 800b48a:	f000 f899 	bl	800b5c0 <USBH_Get_USB_Status>
 800b48e:	4603      	mov	r3, r0
 800b490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b492:	7bbb      	ldrb	r3, [r7, #14]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd90      	pop	{r4, r7, pc}

0800b49c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4ae:	78fa      	ldrb	r2, [r7, #3]
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7f6 fe1e 	bl	80020f4 <HAL_HCD_HC_GetURBState>
 800b4b8:	4603      	mov	r3, r0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b082      	sub	sp, #8
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800b4ce:	20c8      	movs	r0, #200	@ 0xc8
 800b4d0:	f7f5 fe22 	bl	8001118 <HAL_Delay>
  return USBH_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b085      	sub	sp, #20
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	70fb      	strb	r3, [r7, #3]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4f4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b4f6:	78fa      	ldrb	r2, [r7, #3]
 800b4f8:	68f9      	ldr	r1, [r7, #12]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	011b      	lsls	r3, r3, #4
 800b4fe:	1a9b      	subs	r3, r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	440b      	add	r3, r1
 800b504:	3317      	adds	r3, #23
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00a      	beq.n	800b522 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b50c:	78fa      	ldrb	r2, [r7, #3]
 800b50e:	68f9      	ldr	r1, [r7, #12]
 800b510:	4613      	mov	r3, r2
 800b512:	011b      	lsls	r3, r3, #4
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	440b      	add	r3, r1
 800b51a:	333c      	adds	r3, #60	@ 0x3c
 800b51c:	78ba      	ldrb	r2, [r7, #2]
 800b51e:	701a      	strb	r2, [r3, #0]
 800b520:	e009      	b.n	800b536 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b522:	78fa      	ldrb	r2, [r7, #3]
 800b524:	68f9      	ldr	r1, [r7, #12]
 800b526:	4613      	mov	r3, r2
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	1a9b      	subs	r3, r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	440b      	add	r3, r1
 800b530:	333d      	adds	r3, #61	@ 0x3d
 800b532:	78ba      	ldrb	r2, [r7, #2]
 800b534:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b55a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b55c:	78fa      	ldrb	r2, [r7, #3]
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	4613      	mov	r3, r2
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	3317      	adds	r3, #23
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00a      	beq.n	800b588 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b572:	78fa      	ldrb	r2, [r7, #3]
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	011b      	lsls	r3, r3, #4
 800b57a:	1a9b      	subs	r3, r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	440b      	add	r3, r1
 800b580:	333c      	adds	r3, #60	@ 0x3c
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	73fb      	strb	r3, [r7, #15]
 800b586:	e009      	b.n	800b59c <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b588:	78fa      	ldrb	r2, [r7, #3]
 800b58a:	68b9      	ldr	r1, [r7, #8]
 800b58c:	4613      	mov	r3, r2
 800b58e:	011b      	lsls	r3, r3, #4
 800b590:	1a9b      	subs	r3, r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	440b      	add	r3, r1
 800b596:	333d      	adds	r3, #61	@ 0x3d
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7f5 fdb0 	bl	8001118 <HAL_Delay>
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5ce:	79fb      	ldrb	r3, [r7, #7]
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d817      	bhi.n	800b604 <USBH_Get_USB_Status+0x44>
 800b5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5dc <USBH_Get_USB_Status+0x1c>)
 800b5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5da:	bf00      	nop
 800b5dc:	0800b5ed 	.word	0x0800b5ed
 800b5e0:	0800b5f3 	.word	0x0800b5f3
 800b5e4:	0800b5f9 	.word	0x0800b5f9
 800b5e8:	0800b5ff 	.word	0x0800b5ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f0:	e00b      	b.n	800b60a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f6:	e008      	b.n	800b60a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b5fc:	e005      	b.n	800b60a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5fe:	2302      	movs	r3, #2
 800b600:	73fb      	strb	r3, [r7, #15]
    break;
 800b602:	e002      	b.n	800b60a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b604:	2302      	movs	r3, #2
 800b606:	73fb      	strb	r3, [r7, #15]
    break;
 800b608:	bf00      	nop
  }
  return usb_status;
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <malloc>:
 800b618:	4b02      	ldr	r3, [pc, #8]	@ (800b624 <malloc+0xc>)
 800b61a:	4601      	mov	r1, r0
 800b61c:	6818      	ldr	r0, [r3, #0]
 800b61e:	f000 b82d 	b.w	800b67c <_malloc_r>
 800b622:	bf00      	nop
 800b624:	2000003c 	.word	0x2000003c

0800b628 <free>:
 800b628:	4b02      	ldr	r3, [pc, #8]	@ (800b634 <free+0xc>)
 800b62a:	4601      	mov	r1, r0
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	f000 ba63 	b.w	800baf8 <_free_r>
 800b632:	bf00      	nop
 800b634:	2000003c 	.word	0x2000003c

0800b638 <sbrk_aligned>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	4e0f      	ldr	r6, [pc, #60]	@ (800b678 <sbrk_aligned+0x40>)
 800b63c:	460c      	mov	r4, r1
 800b63e:	6831      	ldr	r1, [r6, #0]
 800b640:	4605      	mov	r5, r0
 800b642:	b911      	cbnz	r1, 800b64a <sbrk_aligned+0x12>
 800b644:	f000 f9fa 	bl	800ba3c <_sbrk_r>
 800b648:	6030      	str	r0, [r6, #0]
 800b64a:	4621      	mov	r1, r4
 800b64c:	4628      	mov	r0, r5
 800b64e:	f000 f9f5 	bl	800ba3c <_sbrk_r>
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	d103      	bne.n	800b65e <sbrk_aligned+0x26>
 800b656:	f04f 34ff 	mov.w	r4, #4294967295
 800b65a:	4620      	mov	r0, r4
 800b65c:	bd70      	pop	{r4, r5, r6, pc}
 800b65e:	1cc4      	adds	r4, r0, #3
 800b660:	f024 0403 	bic.w	r4, r4, #3
 800b664:	42a0      	cmp	r0, r4
 800b666:	d0f8      	beq.n	800b65a <sbrk_aligned+0x22>
 800b668:	1a21      	subs	r1, r4, r0
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 f9e6 	bl	800ba3c <_sbrk_r>
 800b670:	3001      	adds	r0, #1
 800b672:	d1f2      	bne.n	800b65a <sbrk_aligned+0x22>
 800b674:	e7ef      	b.n	800b656 <sbrk_aligned+0x1e>
 800b676:	bf00      	nop
 800b678:	20001a34 	.word	0x20001a34

0800b67c <_malloc_r>:
 800b67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b680:	1ccd      	adds	r5, r1, #3
 800b682:	f025 0503 	bic.w	r5, r5, #3
 800b686:	3508      	adds	r5, #8
 800b688:	2d0c      	cmp	r5, #12
 800b68a:	bf38      	it	cc
 800b68c:	250c      	movcc	r5, #12
 800b68e:	2d00      	cmp	r5, #0
 800b690:	4606      	mov	r6, r0
 800b692:	db01      	blt.n	800b698 <_malloc_r+0x1c>
 800b694:	42a9      	cmp	r1, r5
 800b696:	d904      	bls.n	800b6a2 <_malloc_r+0x26>
 800b698:	230c      	movs	r3, #12
 800b69a:	6033      	str	r3, [r6, #0]
 800b69c:	2000      	movs	r0, #0
 800b69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b778 <_malloc_r+0xfc>
 800b6a6:	f000 f869 	bl	800b77c <__malloc_lock>
 800b6aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ae:	461c      	mov	r4, r3
 800b6b0:	bb44      	cbnz	r4, 800b704 <_malloc_r+0x88>
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f7ff ffbf 	bl	800b638 <sbrk_aligned>
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	4604      	mov	r4, r0
 800b6be:	d158      	bne.n	800b772 <_malloc_r+0xf6>
 800b6c0:	f8d8 4000 	ldr.w	r4, [r8]
 800b6c4:	4627      	mov	r7, r4
 800b6c6:	2f00      	cmp	r7, #0
 800b6c8:	d143      	bne.n	800b752 <_malloc_r+0xd6>
 800b6ca:	2c00      	cmp	r4, #0
 800b6cc:	d04b      	beq.n	800b766 <_malloc_r+0xea>
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	eb04 0903 	add.w	r9, r4, r3
 800b6d8:	f000 f9b0 	bl	800ba3c <_sbrk_r>
 800b6dc:	4581      	cmp	r9, r0
 800b6de:	d142      	bne.n	800b766 <_malloc_r+0xea>
 800b6e0:	6821      	ldr	r1, [r4, #0]
 800b6e2:	1a6d      	subs	r5, r5, r1
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7ff ffa6 	bl	800b638 <sbrk_aligned>
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d03a      	beq.n	800b766 <_malloc_r+0xea>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	442b      	add	r3, r5
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	bb62      	cbnz	r2, 800b758 <_malloc_r+0xdc>
 800b6fe:	f8c8 7000 	str.w	r7, [r8]
 800b702:	e00f      	b.n	800b724 <_malloc_r+0xa8>
 800b704:	6822      	ldr	r2, [r4, #0]
 800b706:	1b52      	subs	r2, r2, r5
 800b708:	d420      	bmi.n	800b74c <_malloc_r+0xd0>
 800b70a:	2a0b      	cmp	r2, #11
 800b70c:	d917      	bls.n	800b73e <_malloc_r+0xc2>
 800b70e:	1961      	adds	r1, r4, r5
 800b710:	42a3      	cmp	r3, r4
 800b712:	6025      	str	r5, [r4, #0]
 800b714:	bf18      	it	ne
 800b716:	6059      	strne	r1, [r3, #4]
 800b718:	6863      	ldr	r3, [r4, #4]
 800b71a:	bf08      	it	eq
 800b71c:	f8c8 1000 	streq.w	r1, [r8]
 800b720:	5162      	str	r2, [r4, r5]
 800b722:	604b      	str	r3, [r1, #4]
 800b724:	4630      	mov	r0, r6
 800b726:	f000 f82f 	bl	800b788 <__malloc_unlock>
 800b72a:	f104 000b 	add.w	r0, r4, #11
 800b72e:	1d23      	adds	r3, r4, #4
 800b730:	f020 0007 	bic.w	r0, r0, #7
 800b734:	1ac2      	subs	r2, r0, r3
 800b736:	bf1c      	itt	ne
 800b738:	1a1b      	subne	r3, r3, r0
 800b73a:	50a3      	strne	r3, [r4, r2]
 800b73c:	e7af      	b.n	800b69e <_malloc_r+0x22>
 800b73e:	6862      	ldr	r2, [r4, #4]
 800b740:	42a3      	cmp	r3, r4
 800b742:	bf0c      	ite	eq
 800b744:	f8c8 2000 	streq.w	r2, [r8]
 800b748:	605a      	strne	r2, [r3, #4]
 800b74a:	e7eb      	b.n	800b724 <_malloc_r+0xa8>
 800b74c:	4623      	mov	r3, r4
 800b74e:	6864      	ldr	r4, [r4, #4]
 800b750:	e7ae      	b.n	800b6b0 <_malloc_r+0x34>
 800b752:	463c      	mov	r4, r7
 800b754:	687f      	ldr	r7, [r7, #4]
 800b756:	e7b6      	b.n	800b6c6 <_malloc_r+0x4a>
 800b758:	461a      	mov	r2, r3
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	42a3      	cmp	r3, r4
 800b75e:	d1fb      	bne.n	800b758 <_malloc_r+0xdc>
 800b760:	2300      	movs	r3, #0
 800b762:	6053      	str	r3, [r2, #4]
 800b764:	e7de      	b.n	800b724 <_malloc_r+0xa8>
 800b766:	230c      	movs	r3, #12
 800b768:	6033      	str	r3, [r6, #0]
 800b76a:	4630      	mov	r0, r6
 800b76c:	f000 f80c 	bl	800b788 <__malloc_unlock>
 800b770:	e794      	b.n	800b69c <_malloc_r+0x20>
 800b772:	6005      	str	r5, [r0, #0]
 800b774:	e7d6      	b.n	800b724 <_malloc_r+0xa8>
 800b776:	bf00      	nop
 800b778:	20001a38 	.word	0x20001a38

0800b77c <__malloc_lock>:
 800b77c:	4801      	ldr	r0, [pc, #4]	@ (800b784 <__malloc_lock+0x8>)
 800b77e:	f000 b9aa 	b.w	800bad6 <__retarget_lock_acquire_recursive>
 800b782:	bf00      	nop
 800b784:	20001b7c 	.word	0x20001b7c

0800b788 <__malloc_unlock>:
 800b788:	4801      	ldr	r0, [pc, #4]	@ (800b790 <__malloc_unlock+0x8>)
 800b78a:	f000 b9a5 	b.w	800bad8 <__retarget_lock_release_recursive>
 800b78e:	bf00      	nop
 800b790:	20001b7c 	.word	0x20001b7c

0800b794 <std>:
 800b794:	2300      	movs	r3, #0
 800b796:	b510      	push	{r4, lr}
 800b798:	4604      	mov	r4, r0
 800b79a:	e9c0 3300 	strd	r3, r3, [r0]
 800b79e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7a2:	6083      	str	r3, [r0, #8]
 800b7a4:	8181      	strh	r1, [r0, #12]
 800b7a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7a8:	81c2      	strh	r2, [r0, #14]
 800b7aa:	6183      	str	r3, [r0, #24]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	2208      	movs	r2, #8
 800b7b0:	305c      	adds	r0, #92	@ 0x5c
 800b7b2:	f000 f906 	bl	800b9c2 <memset>
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ec <std+0x58>)
 800b7b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f0 <std+0x5c>)
 800b7bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7be:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f4 <std+0x60>)
 800b7c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f8 <std+0x64>)
 800b7c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7fc <std+0x68>)
 800b7c8:	6224      	str	r4, [r4, #32]
 800b7ca:	429c      	cmp	r4, r3
 800b7cc:	d006      	beq.n	800b7dc <std+0x48>
 800b7ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7d2:	4294      	cmp	r4, r2
 800b7d4:	d002      	beq.n	800b7dc <std+0x48>
 800b7d6:	33d0      	adds	r3, #208	@ 0xd0
 800b7d8:	429c      	cmp	r4, r3
 800b7da:	d105      	bne.n	800b7e8 <std+0x54>
 800b7dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7e4:	f000 b976 	b.w	800bad4 <__retarget_lock_init_recursive>
 800b7e8:	bd10      	pop	{r4, pc}
 800b7ea:	bf00      	nop
 800b7ec:	0800b93d 	.word	0x0800b93d
 800b7f0:	0800b95f 	.word	0x0800b95f
 800b7f4:	0800b997 	.word	0x0800b997
 800b7f8:	0800b9bb 	.word	0x0800b9bb
 800b7fc:	20001a3c 	.word	0x20001a3c

0800b800 <stdio_exit_handler>:
 800b800:	4a02      	ldr	r2, [pc, #8]	@ (800b80c <stdio_exit_handler+0xc>)
 800b802:	4903      	ldr	r1, [pc, #12]	@ (800b810 <stdio_exit_handler+0x10>)
 800b804:	4803      	ldr	r0, [pc, #12]	@ (800b814 <stdio_exit_handler+0x14>)
 800b806:	f000 b869 	b.w	800b8dc <_fwalk_sglue>
 800b80a:	bf00      	nop
 800b80c:	20000030 	.word	0x20000030
 800b810:	0800c235 	.word	0x0800c235
 800b814:	20000040 	.word	0x20000040

0800b818 <cleanup_stdio>:
 800b818:	6841      	ldr	r1, [r0, #4]
 800b81a:	4b0c      	ldr	r3, [pc, #48]	@ (800b84c <cleanup_stdio+0x34>)
 800b81c:	4299      	cmp	r1, r3
 800b81e:	b510      	push	{r4, lr}
 800b820:	4604      	mov	r4, r0
 800b822:	d001      	beq.n	800b828 <cleanup_stdio+0x10>
 800b824:	f000 fd06 	bl	800c234 <_fflush_r>
 800b828:	68a1      	ldr	r1, [r4, #8]
 800b82a:	4b09      	ldr	r3, [pc, #36]	@ (800b850 <cleanup_stdio+0x38>)
 800b82c:	4299      	cmp	r1, r3
 800b82e:	d002      	beq.n	800b836 <cleanup_stdio+0x1e>
 800b830:	4620      	mov	r0, r4
 800b832:	f000 fcff 	bl	800c234 <_fflush_r>
 800b836:	68e1      	ldr	r1, [r4, #12]
 800b838:	4b06      	ldr	r3, [pc, #24]	@ (800b854 <cleanup_stdio+0x3c>)
 800b83a:	4299      	cmp	r1, r3
 800b83c:	d004      	beq.n	800b848 <cleanup_stdio+0x30>
 800b83e:	4620      	mov	r0, r4
 800b840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b844:	f000 bcf6 	b.w	800c234 <_fflush_r>
 800b848:	bd10      	pop	{r4, pc}
 800b84a:	bf00      	nop
 800b84c:	20001a3c 	.word	0x20001a3c
 800b850:	20001aa4 	.word	0x20001aa4
 800b854:	20001b0c 	.word	0x20001b0c

0800b858 <global_stdio_init.part.0>:
 800b858:	b510      	push	{r4, lr}
 800b85a:	4b0b      	ldr	r3, [pc, #44]	@ (800b888 <global_stdio_init.part.0+0x30>)
 800b85c:	4c0b      	ldr	r4, [pc, #44]	@ (800b88c <global_stdio_init.part.0+0x34>)
 800b85e:	4a0c      	ldr	r2, [pc, #48]	@ (800b890 <global_stdio_init.part.0+0x38>)
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	4620      	mov	r0, r4
 800b864:	2200      	movs	r2, #0
 800b866:	2104      	movs	r1, #4
 800b868:	f7ff ff94 	bl	800b794 <std>
 800b86c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b870:	2201      	movs	r2, #1
 800b872:	2109      	movs	r1, #9
 800b874:	f7ff ff8e 	bl	800b794 <std>
 800b878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b87c:	2202      	movs	r2, #2
 800b87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b882:	2112      	movs	r1, #18
 800b884:	f7ff bf86 	b.w	800b794 <std>
 800b888:	20001b74 	.word	0x20001b74
 800b88c:	20001a3c 	.word	0x20001a3c
 800b890:	0800b801 	.word	0x0800b801

0800b894 <__sfp_lock_acquire>:
 800b894:	4801      	ldr	r0, [pc, #4]	@ (800b89c <__sfp_lock_acquire+0x8>)
 800b896:	f000 b91e 	b.w	800bad6 <__retarget_lock_acquire_recursive>
 800b89a:	bf00      	nop
 800b89c:	20001b7d 	.word	0x20001b7d

0800b8a0 <__sfp_lock_release>:
 800b8a0:	4801      	ldr	r0, [pc, #4]	@ (800b8a8 <__sfp_lock_release+0x8>)
 800b8a2:	f000 b919 	b.w	800bad8 <__retarget_lock_release_recursive>
 800b8a6:	bf00      	nop
 800b8a8:	20001b7d 	.word	0x20001b7d

0800b8ac <__sinit>:
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	f7ff fff0 	bl	800b894 <__sfp_lock_acquire>
 800b8b4:	6a23      	ldr	r3, [r4, #32]
 800b8b6:	b11b      	cbz	r3, 800b8c0 <__sinit+0x14>
 800b8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8bc:	f7ff bff0 	b.w	800b8a0 <__sfp_lock_release>
 800b8c0:	4b04      	ldr	r3, [pc, #16]	@ (800b8d4 <__sinit+0x28>)
 800b8c2:	6223      	str	r3, [r4, #32]
 800b8c4:	4b04      	ldr	r3, [pc, #16]	@ (800b8d8 <__sinit+0x2c>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1f5      	bne.n	800b8b8 <__sinit+0xc>
 800b8cc:	f7ff ffc4 	bl	800b858 <global_stdio_init.part.0>
 800b8d0:	e7f2      	b.n	800b8b8 <__sinit+0xc>
 800b8d2:	bf00      	nop
 800b8d4:	0800b819 	.word	0x0800b819
 800b8d8:	20001b74 	.word	0x20001b74

0800b8dc <_fwalk_sglue>:
 800b8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	4688      	mov	r8, r1
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	2600      	movs	r6, #0
 800b8e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8ec:	f1b9 0901 	subs.w	r9, r9, #1
 800b8f0:	d505      	bpl.n	800b8fe <_fwalk_sglue+0x22>
 800b8f2:	6824      	ldr	r4, [r4, #0]
 800b8f4:	2c00      	cmp	r4, #0
 800b8f6:	d1f7      	bne.n	800b8e8 <_fwalk_sglue+0xc>
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d907      	bls.n	800b914 <_fwalk_sglue+0x38>
 800b904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b908:	3301      	adds	r3, #1
 800b90a:	d003      	beq.n	800b914 <_fwalk_sglue+0x38>
 800b90c:	4629      	mov	r1, r5
 800b90e:	4638      	mov	r0, r7
 800b910:	47c0      	blx	r8
 800b912:	4306      	orrs	r6, r0
 800b914:	3568      	adds	r5, #104	@ 0x68
 800b916:	e7e9      	b.n	800b8ec <_fwalk_sglue+0x10>

0800b918 <iprintf>:
 800b918:	b40f      	push	{r0, r1, r2, r3}
 800b91a:	b507      	push	{r0, r1, r2, lr}
 800b91c:	4906      	ldr	r1, [pc, #24]	@ (800b938 <iprintf+0x20>)
 800b91e:	ab04      	add	r3, sp, #16
 800b920:	6808      	ldr	r0, [r1, #0]
 800b922:	f853 2b04 	ldr.w	r2, [r3], #4
 800b926:	6881      	ldr	r1, [r0, #8]
 800b928:	9301      	str	r3, [sp, #4]
 800b92a:	f000 f959 	bl	800bbe0 <_vfiprintf_r>
 800b92e:	b003      	add	sp, #12
 800b930:	f85d eb04 	ldr.w	lr, [sp], #4
 800b934:	b004      	add	sp, #16
 800b936:	4770      	bx	lr
 800b938:	2000003c 	.word	0x2000003c

0800b93c <__sread>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	460c      	mov	r4, r1
 800b940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b944:	f000 f868 	bl	800ba18 <_read_r>
 800b948:	2800      	cmp	r0, #0
 800b94a:	bfab      	itete	ge
 800b94c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b94e:	89a3      	ldrhlt	r3, [r4, #12]
 800b950:	181b      	addge	r3, r3, r0
 800b952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b956:	bfac      	ite	ge
 800b958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b95a:	81a3      	strhlt	r3, [r4, #12]
 800b95c:	bd10      	pop	{r4, pc}

0800b95e <__swrite>:
 800b95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b962:	461f      	mov	r7, r3
 800b964:	898b      	ldrh	r3, [r1, #12]
 800b966:	05db      	lsls	r3, r3, #23
 800b968:	4605      	mov	r5, r0
 800b96a:	460c      	mov	r4, r1
 800b96c:	4616      	mov	r6, r2
 800b96e:	d505      	bpl.n	800b97c <__swrite+0x1e>
 800b970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b974:	2302      	movs	r3, #2
 800b976:	2200      	movs	r2, #0
 800b978:	f000 f83c 	bl	800b9f4 <_lseek_r>
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b986:	81a3      	strh	r3, [r4, #12]
 800b988:	4632      	mov	r2, r6
 800b98a:	463b      	mov	r3, r7
 800b98c:	4628      	mov	r0, r5
 800b98e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b992:	f000 b863 	b.w	800ba5c <_write_r>

0800b996 <__sseek>:
 800b996:	b510      	push	{r4, lr}
 800b998:	460c      	mov	r4, r1
 800b99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b99e:	f000 f829 	bl	800b9f4 <_lseek_r>
 800b9a2:	1c43      	adds	r3, r0, #1
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	bf15      	itete	ne
 800b9a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b9b2:	81a3      	strheq	r3, [r4, #12]
 800b9b4:	bf18      	it	ne
 800b9b6:	81a3      	strhne	r3, [r4, #12]
 800b9b8:	bd10      	pop	{r4, pc}

0800b9ba <__sclose>:
 800b9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9be:	f000 b809 	b.w	800b9d4 <_close_r>

0800b9c2 <memset>:
 800b9c2:	4402      	add	r2, r0
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d100      	bne.n	800b9cc <memset+0xa>
 800b9ca:	4770      	bx	lr
 800b9cc:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d0:	e7f9      	b.n	800b9c6 <memset+0x4>
	...

0800b9d4 <_close_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d06      	ldr	r5, [pc, #24]	@ (800b9f0 <_close_r+0x1c>)
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f5 fa82 	bl	8000ee8 <_close>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_close_r+0x1a>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_close_r+0x1a>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	20001b78 	.word	0x20001b78

0800b9f4 <_lseek_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d07      	ldr	r5, [pc, #28]	@ (800ba14 <_lseek_r+0x20>)
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	4608      	mov	r0, r1
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	2200      	movs	r2, #0
 800ba00:	602a      	str	r2, [r5, #0]
 800ba02:	461a      	mov	r2, r3
 800ba04:	f7f5 fa97 	bl	8000f36 <_lseek>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_lseek_r+0x1e>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_lseek_r+0x1e>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	20001b78 	.word	0x20001b78

0800ba18 <_read_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4d07      	ldr	r5, [pc, #28]	@ (800ba38 <_read_r+0x20>)
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	4608      	mov	r0, r1
 800ba20:	4611      	mov	r1, r2
 800ba22:	2200      	movs	r2, #0
 800ba24:	602a      	str	r2, [r5, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	f7f5 fa25 	bl	8000e76 <_read>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d102      	bne.n	800ba36 <_read_r+0x1e>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	b103      	cbz	r3, 800ba36 <_read_r+0x1e>
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	20001b78 	.word	0x20001b78

0800ba3c <_sbrk_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4d06      	ldr	r5, [pc, #24]	@ (800ba58 <_sbrk_r+0x1c>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	4604      	mov	r4, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	f7f5 fa82 	bl	8000f50 <_sbrk>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_sbrk_r+0x1a>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_sbrk_r+0x1a>
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	20001b78 	.word	0x20001b78

0800ba5c <_write_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4d07      	ldr	r5, [pc, #28]	@ (800ba7c <_write_r+0x20>)
 800ba60:	4604      	mov	r4, r0
 800ba62:	4608      	mov	r0, r1
 800ba64:	4611      	mov	r1, r2
 800ba66:	2200      	movs	r2, #0
 800ba68:	602a      	str	r2, [r5, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f7f5 fa20 	bl	8000eb0 <_write>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d102      	bne.n	800ba7a <_write_r+0x1e>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	b103      	cbz	r3, 800ba7a <_write_r+0x1e>
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	20001b78 	.word	0x20001b78

0800ba80 <__errno>:
 800ba80:	4b01      	ldr	r3, [pc, #4]	@ (800ba88 <__errno+0x8>)
 800ba82:	6818      	ldr	r0, [r3, #0]
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	2000003c 	.word	0x2000003c

0800ba8c <__libc_init_array>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	4d0d      	ldr	r5, [pc, #52]	@ (800bac4 <__libc_init_array+0x38>)
 800ba90:	4c0d      	ldr	r4, [pc, #52]	@ (800bac8 <__libc_init_array+0x3c>)
 800ba92:	1b64      	subs	r4, r4, r5
 800ba94:	10a4      	asrs	r4, r4, #2
 800ba96:	2600      	movs	r6, #0
 800ba98:	42a6      	cmp	r6, r4
 800ba9a:	d109      	bne.n	800bab0 <__libc_init_array+0x24>
 800ba9c:	4d0b      	ldr	r5, [pc, #44]	@ (800bacc <__libc_init_array+0x40>)
 800ba9e:	4c0c      	ldr	r4, [pc, #48]	@ (800bad0 <__libc_init_array+0x44>)
 800baa0:	f000 fd08 	bl	800c4b4 <_init>
 800baa4:	1b64      	subs	r4, r4, r5
 800baa6:	10a4      	asrs	r4, r4, #2
 800baa8:	2600      	movs	r6, #0
 800baaa:	42a6      	cmp	r6, r4
 800baac:	d105      	bne.n	800baba <__libc_init_array+0x2e>
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bab4:	4798      	blx	r3
 800bab6:	3601      	adds	r6, #1
 800bab8:	e7ee      	b.n	800ba98 <__libc_init_array+0xc>
 800baba:	f855 3b04 	ldr.w	r3, [r5], #4
 800babe:	4798      	blx	r3
 800bac0:	3601      	adds	r6, #1
 800bac2:	e7f2      	b.n	800baaa <__libc_init_array+0x1e>
 800bac4:	0800c640 	.word	0x0800c640
 800bac8:	0800c640 	.word	0x0800c640
 800bacc:	0800c640 	.word	0x0800c640
 800bad0:	0800c644 	.word	0x0800c644

0800bad4 <__retarget_lock_init_recursive>:
 800bad4:	4770      	bx	lr

0800bad6 <__retarget_lock_acquire_recursive>:
 800bad6:	4770      	bx	lr

0800bad8 <__retarget_lock_release_recursive>:
 800bad8:	4770      	bx	lr

0800bada <memcpy>:
 800bada:	440a      	add	r2, r1
 800badc:	4291      	cmp	r1, r2
 800bade:	f100 33ff 	add.w	r3, r0, #4294967295
 800bae2:	d100      	bne.n	800bae6 <memcpy+0xc>
 800bae4:	4770      	bx	lr
 800bae6:	b510      	push	{r4, lr}
 800bae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baf0:	4291      	cmp	r1, r2
 800baf2:	d1f9      	bne.n	800bae8 <memcpy+0xe>
 800baf4:	bd10      	pop	{r4, pc}
	...

0800baf8 <_free_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4605      	mov	r5, r0
 800bafc:	2900      	cmp	r1, #0
 800bafe:	d041      	beq.n	800bb84 <_free_r+0x8c>
 800bb00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb04:	1f0c      	subs	r4, r1, #4
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	bfb8      	it	lt
 800bb0a:	18e4      	addlt	r4, r4, r3
 800bb0c:	f7ff fe36 	bl	800b77c <__malloc_lock>
 800bb10:	4a1d      	ldr	r2, [pc, #116]	@ (800bb88 <_free_r+0x90>)
 800bb12:	6813      	ldr	r3, [r2, #0]
 800bb14:	b933      	cbnz	r3, 800bb24 <_free_r+0x2c>
 800bb16:	6063      	str	r3, [r4, #4]
 800bb18:	6014      	str	r4, [r2, #0]
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb20:	f7ff be32 	b.w	800b788 <__malloc_unlock>
 800bb24:	42a3      	cmp	r3, r4
 800bb26:	d908      	bls.n	800bb3a <_free_r+0x42>
 800bb28:	6820      	ldr	r0, [r4, #0]
 800bb2a:	1821      	adds	r1, r4, r0
 800bb2c:	428b      	cmp	r3, r1
 800bb2e:	bf01      	itttt	eq
 800bb30:	6819      	ldreq	r1, [r3, #0]
 800bb32:	685b      	ldreq	r3, [r3, #4]
 800bb34:	1809      	addeq	r1, r1, r0
 800bb36:	6021      	streq	r1, [r4, #0]
 800bb38:	e7ed      	b.n	800bb16 <_free_r+0x1e>
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	b10b      	cbz	r3, 800bb44 <_free_r+0x4c>
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	d9fa      	bls.n	800bb3a <_free_r+0x42>
 800bb44:	6811      	ldr	r1, [r2, #0]
 800bb46:	1850      	adds	r0, r2, r1
 800bb48:	42a0      	cmp	r0, r4
 800bb4a:	d10b      	bne.n	800bb64 <_free_r+0x6c>
 800bb4c:	6820      	ldr	r0, [r4, #0]
 800bb4e:	4401      	add	r1, r0
 800bb50:	1850      	adds	r0, r2, r1
 800bb52:	4283      	cmp	r3, r0
 800bb54:	6011      	str	r1, [r2, #0]
 800bb56:	d1e0      	bne.n	800bb1a <_free_r+0x22>
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	6053      	str	r3, [r2, #4]
 800bb5e:	4408      	add	r0, r1
 800bb60:	6010      	str	r0, [r2, #0]
 800bb62:	e7da      	b.n	800bb1a <_free_r+0x22>
 800bb64:	d902      	bls.n	800bb6c <_free_r+0x74>
 800bb66:	230c      	movs	r3, #12
 800bb68:	602b      	str	r3, [r5, #0]
 800bb6a:	e7d6      	b.n	800bb1a <_free_r+0x22>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	1821      	adds	r1, r4, r0
 800bb70:	428b      	cmp	r3, r1
 800bb72:	bf04      	itt	eq
 800bb74:	6819      	ldreq	r1, [r3, #0]
 800bb76:	685b      	ldreq	r3, [r3, #4]
 800bb78:	6063      	str	r3, [r4, #4]
 800bb7a:	bf04      	itt	eq
 800bb7c:	1809      	addeq	r1, r1, r0
 800bb7e:	6021      	streq	r1, [r4, #0]
 800bb80:	6054      	str	r4, [r2, #4]
 800bb82:	e7ca      	b.n	800bb1a <_free_r+0x22>
 800bb84:	bd38      	pop	{r3, r4, r5, pc}
 800bb86:	bf00      	nop
 800bb88:	20001a38 	.word	0x20001a38

0800bb8c <__sfputc_r>:
 800bb8c:	6893      	ldr	r3, [r2, #8]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	b410      	push	{r4}
 800bb94:	6093      	str	r3, [r2, #8]
 800bb96:	da08      	bge.n	800bbaa <__sfputc_r+0x1e>
 800bb98:	6994      	ldr	r4, [r2, #24]
 800bb9a:	42a3      	cmp	r3, r4
 800bb9c:	db01      	blt.n	800bba2 <__sfputc_r+0x16>
 800bb9e:	290a      	cmp	r1, #10
 800bba0:	d103      	bne.n	800bbaa <__sfputc_r+0x1e>
 800bba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bba6:	f000 bb6d 	b.w	800c284 <__swbuf_r>
 800bbaa:	6813      	ldr	r3, [r2, #0]
 800bbac:	1c58      	adds	r0, r3, #1
 800bbae:	6010      	str	r0, [r2, #0]
 800bbb0:	7019      	strb	r1, [r3, #0]
 800bbb2:	4608      	mov	r0, r1
 800bbb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <__sfputs_r>:
 800bbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	460f      	mov	r7, r1
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	18d5      	adds	r5, r2, r3
 800bbc4:	42ac      	cmp	r4, r5
 800bbc6:	d101      	bne.n	800bbcc <__sfputs_r+0x12>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	e007      	b.n	800bbdc <__sfputs_r+0x22>
 800bbcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd0:	463a      	mov	r2, r7
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7ff ffda 	bl	800bb8c <__sfputc_r>
 800bbd8:	1c43      	adds	r3, r0, #1
 800bbda:	d1f3      	bne.n	800bbc4 <__sfputs_r+0xa>
 800bbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbe0 <_vfiprintf_r>:
 800bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	b09d      	sub	sp, #116	@ 0x74
 800bbe8:	4614      	mov	r4, r2
 800bbea:	4698      	mov	r8, r3
 800bbec:	4606      	mov	r6, r0
 800bbee:	b118      	cbz	r0, 800bbf8 <_vfiprintf_r+0x18>
 800bbf0:	6a03      	ldr	r3, [r0, #32]
 800bbf2:	b90b      	cbnz	r3, 800bbf8 <_vfiprintf_r+0x18>
 800bbf4:	f7ff fe5a 	bl	800b8ac <__sinit>
 800bbf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbfa:	07d9      	lsls	r1, r3, #31
 800bbfc:	d405      	bmi.n	800bc0a <_vfiprintf_r+0x2a>
 800bbfe:	89ab      	ldrh	r3, [r5, #12]
 800bc00:	059a      	lsls	r2, r3, #22
 800bc02:	d402      	bmi.n	800bc0a <_vfiprintf_r+0x2a>
 800bc04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc06:	f7ff ff66 	bl	800bad6 <__retarget_lock_acquire_recursive>
 800bc0a:	89ab      	ldrh	r3, [r5, #12]
 800bc0c:	071b      	lsls	r3, r3, #28
 800bc0e:	d501      	bpl.n	800bc14 <_vfiprintf_r+0x34>
 800bc10:	692b      	ldr	r3, [r5, #16]
 800bc12:	b99b      	cbnz	r3, 800bc3c <_vfiprintf_r+0x5c>
 800bc14:	4629      	mov	r1, r5
 800bc16:	4630      	mov	r0, r6
 800bc18:	f000 fb72 	bl	800c300 <__swsetup_r>
 800bc1c:	b170      	cbz	r0, 800bc3c <_vfiprintf_r+0x5c>
 800bc1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc20:	07dc      	lsls	r4, r3, #31
 800bc22:	d504      	bpl.n	800bc2e <_vfiprintf_r+0x4e>
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	b01d      	add	sp, #116	@ 0x74
 800bc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2e:	89ab      	ldrh	r3, [r5, #12]
 800bc30:	0598      	lsls	r0, r3, #22
 800bc32:	d4f7      	bmi.n	800bc24 <_vfiprintf_r+0x44>
 800bc34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc36:	f7ff ff4f 	bl	800bad8 <__retarget_lock_release_recursive>
 800bc3a:	e7f3      	b.n	800bc24 <_vfiprintf_r+0x44>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc40:	2320      	movs	r3, #32
 800bc42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc46:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc4a:	2330      	movs	r3, #48	@ 0x30
 800bc4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bdfc <_vfiprintf_r+0x21c>
 800bc50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc54:	f04f 0901 	mov.w	r9, #1
 800bc58:	4623      	mov	r3, r4
 800bc5a:	469a      	mov	sl, r3
 800bc5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc60:	b10a      	cbz	r2, 800bc66 <_vfiprintf_r+0x86>
 800bc62:	2a25      	cmp	r2, #37	@ 0x25
 800bc64:	d1f9      	bne.n	800bc5a <_vfiprintf_r+0x7a>
 800bc66:	ebba 0b04 	subs.w	fp, sl, r4
 800bc6a:	d00b      	beq.n	800bc84 <_vfiprintf_r+0xa4>
 800bc6c:	465b      	mov	r3, fp
 800bc6e:	4622      	mov	r2, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7ff ffa1 	bl	800bbba <__sfputs_r>
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f000 80a7 	beq.w	800bdcc <_vfiprintf_r+0x1ec>
 800bc7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc80:	445a      	add	r2, fp
 800bc82:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc84:	f89a 3000 	ldrb.w	r3, [sl]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 809f 	beq.w	800bdcc <_vfiprintf_r+0x1ec>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f04f 32ff 	mov.w	r2, #4294967295
 800bc94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc98:	f10a 0a01 	add.w	sl, sl, #1
 800bc9c:	9304      	str	r3, [sp, #16]
 800bc9e:	9307      	str	r3, [sp, #28]
 800bca0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bca4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bca6:	4654      	mov	r4, sl
 800bca8:	2205      	movs	r2, #5
 800bcaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcae:	4853      	ldr	r0, [pc, #332]	@ (800bdfc <_vfiprintf_r+0x21c>)
 800bcb0:	f7f4 fa96 	bl	80001e0 <memchr>
 800bcb4:	9a04      	ldr	r2, [sp, #16]
 800bcb6:	b9d8      	cbnz	r0, 800bcf0 <_vfiprintf_r+0x110>
 800bcb8:	06d1      	lsls	r1, r2, #27
 800bcba:	bf44      	itt	mi
 800bcbc:	2320      	movmi	r3, #32
 800bcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcc2:	0713      	lsls	r3, r2, #28
 800bcc4:	bf44      	itt	mi
 800bcc6:	232b      	movmi	r3, #43	@ 0x2b
 800bcc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bccc:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcd2:	d015      	beq.n	800bd00 <_vfiprintf_r+0x120>
 800bcd4:	9a07      	ldr	r2, [sp, #28]
 800bcd6:	4654      	mov	r4, sl
 800bcd8:	2000      	movs	r0, #0
 800bcda:	f04f 0c0a 	mov.w	ip, #10
 800bcde:	4621      	mov	r1, r4
 800bce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bce4:	3b30      	subs	r3, #48	@ 0x30
 800bce6:	2b09      	cmp	r3, #9
 800bce8:	d94b      	bls.n	800bd82 <_vfiprintf_r+0x1a2>
 800bcea:	b1b0      	cbz	r0, 800bd1a <_vfiprintf_r+0x13a>
 800bcec:	9207      	str	r2, [sp, #28]
 800bcee:	e014      	b.n	800bd1a <_vfiprintf_r+0x13a>
 800bcf0:	eba0 0308 	sub.w	r3, r0, r8
 800bcf4:	fa09 f303 	lsl.w	r3, r9, r3
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	9304      	str	r3, [sp, #16]
 800bcfc:	46a2      	mov	sl, r4
 800bcfe:	e7d2      	b.n	800bca6 <_vfiprintf_r+0xc6>
 800bd00:	9b03      	ldr	r3, [sp, #12]
 800bd02:	1d19      	adds	r1, r3, #4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	9103      	str	r1, [sp, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bfbb      	ittet	lt
 800bd0c:	425b      	neglt	r3, r3
 800bd0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd12:	9307      	strge	r3, [sp, #28]
 800bd14:	9307      	strlt	r3, [sp, #28]
 800bd16:	bfb8      	it	lt
 800bd18:	9204      	strlt	r2, [sp, #16]
 800bd1a:	7823      	ldrb	r3, [r4, #0]
 800bd1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd1e:	d10a      	bne.n	800bd36 <_vfiprintf_r+0x156>
 800bd20:	7863      	ldrb	r3, [r4, #1]
 800bd22:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd24:	d132      	bne.n	800bd8c <_vfiprintf_r+0x1ac>
 800bd26:	9b03      	ldr	r3, [sp, #12]
 800bd28:	1d1a      	adds	r2, r3, #4
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	9203      	str	r2, [sp, #12]
 800bd2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd32:	3402      	adds	r4, #2
 800bd34:	9305      	str	r3, [sp, #20]
 800bd36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be0c <_vfiprintf_r+0x22c>
 800bd3a:	7821      	ldrb	r1, [r4, #0]
 800bd3c:	2203      	movs	r2, #3
 800bd3e:	4650      	mov	r0, sl
 800bd40:	f7f4 fa4e 	bl	80001e0 <memchr>
 800bd44:	b138      	cbz	r0, 800bd56 <_vfiprintf_r+0x176>
 800bd46:	9b04      	ldr	r3, [sp, #16]
 800bd48:	eba0 000a 	sub.w	r0, r0, sl
 800bd4c:	2240      	movs	r2, #64	@ 0x40
 800bd4e:	4082      	lsls	r2, r0
 800bd50:	4313      	orrs	r3, r2
 800bd52:	3401      	adds	r4, #1
 800bd54:	9304      	str	r3, [sp, #16]
 800bd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd5a:	4829      	ldr	r0, [pc, #164]	@ (800be00 <_vfiprintf_r+0x220>)
 800bd5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd60:	2206      	movs	r2, #6
 800bd62:	f7f4 fa3d 	bl	80001e0 <memchr>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d03f      	beq.n	800bdea <_vfiprintf_r+0x20a>
 800bd6a:	4b26      	ldr	r3, [pc, #152]	@ (800be04 <_vfiprintf_r+0x224>)
 800bd6c:	bb1b      	cbnz	r3, 800bdb6 <_vfiprintf_r+0x1d6>
 800bd6e:	9b03      	ldr	r3, [sp, #12]
 800bd70:	3307      	adds	r3, #7
 800bd72:	f023 0307 	bic.w	r3, r3, #7
 800bd76:	3308      	adds	r3, #8
 800bd78:	9303      	str	r3, [sp, #12]
 800bd7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd7c:	443b      	add	r3, r7
 800bd7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd80:	e76a      	b.n	800bc58 <_vfiprintf_r+0x78>
 800bd82:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd86:	460c      	mov	r4, r1
 800bd88:	2001      	movs	r0, #1
 800bd8a:	e7a8      	b.n	800bcde <_vfiprintf_r+0xfe>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	3401      	adds	r4, #1
 800bd90:	9305      	str	r3, [sp, #20]
 800bd92:	4619      	mov	r1, r3
 800bd94:	f04f 0c0a 	mov.w	ip, #10
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd9e:	3a30      	subs	r2, #48	@ 0x30
 800bda0:	2a09      	cmp	r2, #9
 800bda2:	d903      	bls.n	800bdac <_vfiprintf_r+0x1cc>
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d0c6      	beq.n	800bd36 <_vfiprintf_r+0x156>
 800bda8:	9105      	str	r1, [sp, #20]
 800bdaa:	e7c4      	b.n	800bd36 <_vfiprintf_r+0x156>
 800bdac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e7f0      	b.n	800bd98 <_vfiprintf_r+0x1b8>
 800bdb6:	ab03      	add	r3, sp, #12
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	462a      	mov	r2, r5
 800bdbc:	4b12      	ldr	r3, [pc, #72]	@ (800be08 <_vfiprintf_r+0x228>)
 800bdbe:	a904      	add	r1, sp, #16
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f3af 8000 	nop.w
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	1c78      	adds	r0, r7, #1
 800bdca:	d1d6      	bne.n	800bd7a <_vfiprintf_r+0x19a>
 800bdcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdce:	07d9      	lsls	r1, r3, #31
 800bdd0:	d405      	bmi.n	800bdde <_vfiprintf_r+0x1fe>
 800bdd2:	89ab      	ldrh	r3, [r5, #12]
 800bdd4:	059a      	lsls	r2, r3, #22
 800bdd6:	d402      	bmi.n	800bdde <_vfiprintf_r+0x1fe>
 800bdd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdda:	f7ff fe7d 	bl	800bad8 <__retarget_lock_release_recursive>
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	065b      	lsls	r3, r3, #25
 800bde2:	f53f af1f 	bmi.w	800bc24 <_vfiprintf_r+0x44>
 800bde6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bde8:	e71e      	b.n	800bc28 <_vfiprintf_r+0x48>
 800bdea:	ab03      	add	r3, sp, #12
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	462a      	mov	r2, r5
 800bdf0:	4b05      	ldr	r3, [pc, #20]	@ (800be08 <_vfiprintf_r+0x228>)
 800bdf2:	a904      	add	r1, sp, #16
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f000 f879 	bl	800beec <_printf_i>
 800bdfa:	e7e4      	b.n	800bdc6 <_vfiprintf_r+0x1e6>
 800bdfc:	0800c604 	.word	0x0800c604
 800be00:	0800c60e 	.word	0x0800c60e
 800be04:	00000000 	.word	0x00000000
 800be08:	0800bbbb 	.word	0x0800bbbb
 800be0c:	0800c60a 	.word	0x0800c60a

0800be10 <_printf_common>:
 800be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	4616      	mov	r6, r2
 800be16:	4698      	mov	r8, r3
 800be18:	688a      	ldr	r2, [r1, #8]
 800be1a:	690b      	ldr	r3, [r1, #16]
 800be1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be20:	4293      	cmp	r3, r2
 800be22:	bfb8      	it	lt
 800be24:	4613      	movlt	r3, r2
 800be26:	6033      	str	r3, [r6, #0]
 800be28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be2c:	4607      	mov	r7, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	b10a      	cbz	r2, 800be36 <_printf_common+0x26>
 800be32:	3301      	adds	r3, #1
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	0699      	lsls	r1, r3, #26
 800be3a:	bf42      	ittt	mi
 800be3c:	6833      	ldrmi	r3, [r6, #0]
 800be3e:	3302      	addmi	r3, #2
 800be40:	6033      	strmi	r3, [r6, #0]
 800be42:	6825      	ldr	r5, [r4, #0]
 800be44:	f015 0506 	ands.w	r5, r5, #6
 800be48:	d106      	bne.n	800be58 <_printf_common+0x48>
 800be4a:	f104 0a19 	add.w	sl, r4, #25
 800be4e:	68e3      	ldr	r3, [r4, #12]
 800be50:	6832      	ldr	r2, [r6, #0]
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	42ab      	cmp	r3, r5
 800be56:	dc26      	bgt.n	800bea6 <_printf_common+0x96>
 800be58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be5c:	6822      	ldr	r2, [r4, #0]
 800be5e:	3b00      	subs	r3, #0
 800be60:	bf18      	it	ne
 800be62:	2301      	movne	r3, #1
 800be64:	0692      	lsls	r2, r2, #26
 800be66:	d42b      	bmi.n	800bec0 <_printf_common+0xb0>
 800be68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be6c:	4641      	mov	r1, r8
 800be6e:	4638      	mov	r0, r7
 800be70:	47c8      	blx	r9
 800be72:	3001      	adds	r0, #1
 800be74:	d01e      	beq.n	800beb4 <_printf_common+0xa4>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	6922      	ldr	r2, [r4, #16]
 800be7a:	f003 0306 	and.w	r3, r3, #6
 800be7e:	2b04      	cmp	r3, #4
 800be80:	bf02      	ittt	eq
 800be82:	68e5      	ldreq	r5, [r4, #12]
 800be84:	6833      	ldreq	r3, [r6, #0]
 800be86:	1aed      	subeq	r5, r5, r3
 800be88:	68a3      	ldr	r3, [r4, #8]
 800be8a:	bf0c      	ite	eq
 800be8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be90:	2500      	movne	r5, #0
 800be92:	4293      	cmp	r3, r2
 800be94:	bfc4      	itt	gt
 800be96:	1a9b      	subgt	r3, r3, r2
 800be98:	18ed      	addgt	r5, r5, r3
 800be9a:	2600      	movs	r6, #0
 800be9c:	341a      	adds	r4, #26
 800be9e:	42b5      	cmp	r5, r6
 800bea0:	d11a      	bne.n	800bed8 <_printf_common+0xc8>
 800bea2:	2000      	movs	r0, #0
 800bea4:	e008      	b.n	800beb8 <_printf_common+0xa8>
 800bea6:	2301      	movs	r3, #1
 800bea8:	4652      	mov	r2, sl
 800beaa:	4641      	mov	r1, r8
 800beac:	4638      	mov	r0, r7
 800beae:	47c8      	blx	r9
 800beb0:	3001      	adds	r0, #1
 800beb2:	d103      	bne.n	800bebc <_printf_common+0xac>
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bebc:	3501      	adds	r5, #1
 800bebe:	e7c6      	b.n	800be4e <_printf_common+0x3e>
 800bec0:	18e1      	adds	r1, r4, r3
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	2030      	movs	r0, #48	@ 0x30
 800bec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800beca:	4422      	add	r2, r4
 800becc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bed0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bed4:	3302      	adds	r3, #2
 800bed6:	e7c7      	b.n	800be68 <_printf_common+0x58>
 800bed8:	2301      	movs	r3, #1
 800beda:	4622      	mov	r2, r4
 800bedc:	4641      	mov	r1, r8
 800bede:	4638      	mov	r0, r7
 800bee0:	47c8      	blx	r9
 800bee2:	3001      	adds	r0, #1
 800bee4:	d0e6      	beq.n	800beb4 <_printf_common+0xa4>
 800bee6:	3601      	adds	r6, #1
 800bee8:	e7d9      	b.n	800be9e <_printf_common+0x8e>
	...

0800beec <_printf_i>:
 800beec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bef0:	7e0f      	ldrb	r7, [r1, #24]
 800bef2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bef4:	2f78      	cmp	r7, #120	@ 0x78
 800bef6:	4691      	mov	r9, r2
 800bef8:	4680      	mov	r8, r0
 800befa:	460c      	mov	r4, r1
 800befc:	469a      	mov	sl, r3
 800befe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf02:	d807      	bhi.n	800bf14 <_printf_i+0x28>
 800bf04:	2f62      	cmp	r7, #98	@ 0x62
 800bf06:	d80a      	bhi.n	800bf1e <_printf_i+0x32>
 800bf08:	2f00      	cmp	r7, #0
 800bf0a:	f000 80d2 	beq.w	800c0b2 <_printf_i+0x1c6>
 800bf0e:	2f58      	cmp	r7, #88	@ 0x58
 800bf10:	f000 80b9 	beq.w	800c086 <_printf_i+0x19a>
 800bf14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf1c:	e03a      	b.n	800bf94 <_printf_i+0xa8>
 800bf1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf22:	2b15      	cmp	r3, #21
 800bf24:	d8f6      	bhi.n	800bf14 <_printf_i+0x28>
 800bf26:	a101      	add	r1, pc, #4	@ (adr r1, 800bf2c <_printf_i+0x40>)
 800bf28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf2c:	0800bf85 	.word	0x0800bf85
 800bf30:	0800bf99 	.word	0x0800bf99
 800bf34:	0800bf15 	.word	0x0800bf15
 800bf38:	0800bf15 	.word	0x0800bf15
 800bf3c:	0800bf15 	.word	0x0800bf15
 800bf40:	0800bf15 	.word	0x0800bf15
 800bf44:	0800bf99 	.word	0x0800bf99
 800bf48:	0800bf15 	.word	0x0800bf15
 800bf4c:	0800bf15 	.word	0x0800bf15
 800bf50:	0800bf15 	.word	0x0800bf15
 800bf54:	0800bf15 	.word	0x0800bf15
 800bf58:	0800c099 	.word	0x0800c099
 800bf5c:	0800bfc3 	.word	0x0800bfc3
 800bf60:	0800c053 	.word	0x0800c053
 800bf64:	0800bf15 	.word	0x0800bf15
 800bf68:	0800bf15 	.word	0x0800bf15
 800bf6c:	0800c0bb 	.word	0x0800c0bb
 800bf70:	0800bf15 	.word	0x0800bf15
 800bf74:	0800bfc3 	.word	0x0800bfc3
 800bf78:	0800bf15 	.word	0x0800bf15
 800bf7c:	0800bf15 	.word	0x0800bf15
 800bf80:	0800c05b 	.word	0x0800c05b
 800bf84:	6833      	ldr	r3, [r6, #0]
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	6032      	str	r2, [r6, #0]
 800bf8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf94:	2301      	movs	r3, #1
 800bf96:	e09d      	b.n	800c0d4 <_printf_i+0x1e8>
 800bf98:	6833      	ldr	r3, [r6, #0]
 800bf9a:	6820      	ldr	r0, [r4, #0]
 800bf9c:	1d19      	adds	r1, r3, #4
 800bf9e:	6031      	str	r1, [r6, #0]
 800bfa0:	0606      	lsls	r6, r0, #24
 800bfa2:	d501      	bpl.n	800bfa8 <_printf_i+0xbc>
 800bfa4:	681d      	ldr	r5, [r3, #0]
 800bfa6:	e003      	b.n	800bfb0 <_printf_i+0xc4>
 800bfa8:	0645      	lsls	r5, r0, #25
 800bfaa:	d5fb      	bpl.n	800bfa4 <_printf_i+0xb8>
 800bfac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfb0:	2d00      	cmp	r5, #0
 800bfb2:	da03      	bge.n	800bfbc <_printf_i+0xd0>
 800bfb4:	232d      	movs	r3, #45	@ 0x2d
 800bfb6:	426d      	negs	r5, r5
 800bfb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfbc:	4859      	ldr	r0, [pc, #356]	@ (800c124 <_printf_i+0x238>)
 800bfbe:	230a      	movs	r3, #10
 800bfc0:	e011      	b.n	800bfe6 <_printf_i+0xfa>
 800bfc2:	6821      	ldr	r1, [r4, #0]
 800bfc4:	6833      	ldr	r3, [r6, #0]
 800bfc6:	0608      	lsls	r0, r1, #24
 800bfc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfcc:	d402      	bmi.n	800bfd4 <_printf_i+0xe8>
 800bfce:	0649      	lsls	r1, r1, #25
 800bfd0:	bf48      	it	mi
 800bfd2:	b2ad      	uxthmi	r5, r5
 800bfd4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfd6:	4853      	ldr	r0, [pc, #332]	@ (800c124 <_printf_i+0x238>)
 800bfd8:	6033      	str	r3, [r6, #0]
 800bfda:	bf14      	ite	ne
 800bfdc:	230a      	movne	r3, #10
 800bfde:	2308      	moveq	r3, #8
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfe6:	6866      	ldr	r6, [r4, #4]
 800bfe8:	60a6      	str	r6, [r4, #8]
 800bfea:	2e00      	cmp	r6, #0
 800bfec:	bfa2      	ittt	ge
 800bfee:	6821      	ldrge	r1, [r4, #0]
 800bff0:	f021 0104 	bicge.w	r1, r1, #4
 800bff4:	6021      	strge	r1, [r4, #0]
 800bff6:	b90d      	cbnz	r5, 800bffc <_printf_i+0x110>
 800bff8:	2e00      	cmp	r6, #0
 800bffa:	d04b      	beq.n	800c094 <_printf_i+0x1a8>
 800bffc:	4616      	mov	r6, r2
 800bffe:	fbb5 f1f3 	udiv	r1, r5, r3
 800c002:	fb03 5711 	mls	r7, r3, r1, r5
 800c006:	5dc7      	ldrb	r7, [r0, r7]
 800c008:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c00c:	462f      	mov	r7, r5
 800c00e:	42bb      	cmp	r3, r7
 800c010:	460d      	mov	r5, r1
 800c012:	d9f4      	bls.n	800bffe <_printf_i+0x112>
 800c014:	2b08      	cmp	r3, #8
 800c016:	d10b      	bne.n	800c030 <_printf_i+0x144>
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	07df      	lsls	r7, r3, #31
 800c01c:	d508      	bpl.n	800c030 <_printf_i+0x144>
 800c01e:	6923      	ldr	r3, [r4, #16]
 800c020:	6861      	ldr	r1, [r4, #4]
 800c022:	4299      	cmp	r1, r3
 800c024:	bfde      	ittt	le
 800c026:	2330      	movle	r3, #48	@ 0x30
 800c028:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c02c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c030:	1b92      	subs	r2, r2, r6
 800c032:	6122      	str	r2, [r4, #16]
 800c034:	f8cd a000 	str.w	sl, [sp]
 800c038:	464b      	mov	r3, r9
 800c03a:	aa03      	add	r2, sp, #12
 800c03c:	4621      	mov	r1, r4
 800c03e:	4640      	mov	r0, r8
 800c040:	f7ff fee6 	bl	800be10 <_printf_common>
 800c044:	3001      	adds	r0, #1
 800c046:	d14a      	bne.n	800c0de <_printf_i+0x1f2>
 800c048:	f04f 30ff 	mov.w	r0, #4294967295
 800c04c:	b004      	add	sp, #16
 800c04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	f043 0320 	orr.w	r3, r3, #32
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	4833      	ldr	r0, [pc, #204]	@ (800c128 <_printf_i+0x23c>)
 800c05c:	2778      	movs	r7, #120	@ 0x78
 800c05e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c062:	6823      	ldr	r3, [r4, #0]
 800c064:	6831      	ldr	r1, [r6, #0]
 800c066:	061f      	lsls	r7, r3, #24
 800c068:	f851 5b04 	ldr.w	r5, [r1], #4
 800c06c:	d402      	bmi.n	800c074 <_printf_i+0x188>
 800c06e:	065f      	lsls	r7, r3, #25
 800c070:	bf48      	it	mi
 800c072:	b2ad      	uxthmi	r5, r5
 800c074:	6031      	str	r1, [r6, #0]
 800c076:	07d9      	lsls	r1, r3, #31
 800c078:	bf44      	itt	mi
 800c07a:	f043 0320 	orrmi.w	r3, r3, #32
 800c07e:	6023      	strmi	r3, [r4, #0]
 800c080:	b11d      	cbz	r5, 800c08a <_printf_i+0x19e>
 800c082:	2310      	movs	r3, #16
 800c084:	e7ac      	b.n	800bfe0 <_printf_i+0xf4>
 800c086:	4827      	ldr	r0, [pc, #156]	@ (800c124 <_printf_i+0x238>)
 800c088:	e7e9      	b.n	800c05e <_printf_i+0x172>
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	f023 0320 	bic.w	r3, r3, #32
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	e7f6      	b.n	800c082 <_printf_i+0x196>
 800c094:	4616      	mov	r6, r2
 800c096:	e7bd      	b.n	800c014 <_printf_i+0x128>
 800c098:	6833      	ldr	r3, [r6, #0]
 800c09a:	6825      	ldr	r5, [r4, #0]
 800c09c:	6961      	ldr	r1, [r4, #20]
 800c09e:	1d18      	adds	r0, r3, #4
 800c0a0:	6030      	str	r0, [r6, #0]
 800c0a2:	062e      	lsls	r6, r5, #24
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	d501      	bpl.n	800c0ac <_printf_i+0x1c0>
 800c0a8:	6019      	str	r1, [r3, #0]
 800c0aa:	e002      	b.n	800c0b2 <_printf_i+0x1c6>
 800c0ac:	0668      	lsls	r0, r5, #25
 800c0ae:	d5fb      	bpl.n	800c0a8 <_printf_i+0x1bc>
 800c0b0:	8019      	strh	r1, [r3, #0]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	6123      	str	r3, [r4, #16]
 800c0b6:	4616      	mov	r6, r2
 800c0b8:	e7bc      	b.n	800c034 <_printf_i+0x148>
 800c0ba:	6833      	ldr	r3, [r6, #0]
 800c0bc:	1d1a      	adds	r2, r3, #4
 800c0be:	6032      	str	r2, [r6, #0]
 800c0c0:	681e      	ldr	r6, [r3, #0]
 800c0c2:	6862      	ldr	r2, [r4, #4]
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	f7f4 f88a 	bl	80001e0 <memchr>
 800c0cc:	b108      	cbz	r0, 800c0d2 <_printf_i+0x1e6>
 800c0ce:	1b80      	subs	r0, r0, r6
 800c0d0:	6060      	str	r0, [r4, #4]
 800c0d2:	6863      	ldr	r3, [r4, #4]
 800c0d4:	6123      	str	r3, [r4, #16]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0dc:	e7aa      	b.n	800c034 <_printf_i+0x148>
 800c0de:	6923      	ldr	r3, [r4, #16]
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	47d0      	blx	sl
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d0ad      	beq.n	800c048 <_printf_i+0x15c>
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	079b      	lsls	r3, r3, #30
 800c0f0:	d413      	bmi.n	800c11a <_printf_i+0x22e>
 800c0f2:	68e0      	ldr	r0, [r4, #12]
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	4298      	cmp	r0, r3
 800c0f8:	bfb8      	it	lt
 800c0fa:	4618      	movlt	r0, r3
 800c0fc:	e7a6      	b.n	800c04c <_printf_i+0x160>
 800c0fe:	2301      	movs	r3, #1
 800c100:	4632      	mov	r2, r6
 800c102:	4649      	mov	r1, r9
 800c104:	4640      	mov	r0, r8
 800c106:	47d0      	blx	sl
 800c108:	3001      	adds	r0, #1
 800c10a:	d09d      	beq.n	800c048 <_printf_i+0x15c>
 800c10c:	3501      	adds	r5, #1
 800c10e:	68e3      	ldr	r3, [r4, #12]
 800c110:	9903      	ldr	r1, [sp, #12]
 800c112:	1a5b      	subs	r3, r3, r1
 800c114:	42ab      	cmp	r3, r5
 800c116:	dcf2      	bgt.n	800c0fe <_printf_i+0x212>
 800c118:	e7eb      	b.n	800c0f2 <_printf_i+0x206>
 800c11a:	2500      	movs	r5, #0
 800c11c:	f104 0619 	add.w	r6, r4, #25
 800c120:	e7f5      	b.n	800c10e <_printf_i+0x222>
 800c122:	bf00      	nop
 800c124:	0800c615 	.word	0x0800c615
 800c128:	0800c626 	.word	0x0800c626

0800c12c <__sflush_r>:
 800c12c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c134:	0716      	lsls	r6, r2, #28
 800c136:	4605      	mov	r5, r0
 800c138:	460c      	mov	r4, r1
 800c13a:	d454      	bmi.n	800c1e6 <__sflush_r+0xba>
 800c13c:	684b      	ldr	r3, [r1, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	dc02      	bgt.n	800c148 <__sflush_r+0x1c>
 800c142:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c144:	2b00      	cmp	r3, #0
 800c146:	dd48      	ble.n	800c1da <__sflush_r+0xae>
 800c148:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c14a:	2e00      	cmp	r6, #0
 800c14c:	d045      	beq.n	800c1da <__sflush_r+0xae>
 800c14e:	2300      	movs	r3, #0
 800c150:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c154:	682f      	ldr	r7, [r5, #0]
 800c156:	6a21      	ldr	r1, [r4, #32]
 800c158:	602b      	str	r3, [r5, #0]
 800c15a:	d030      	beq.n	800c1be <__sflush_r+0x92>
 800c15c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	0759      	lsls	r1, r3, #29
 800c162:	d505      	bpl.n	800c170 <__sflush_r+0x44>
 800c164:	6863      	ldr	r3, [r4, #4]
 800c166:	1ad2      	subs	r2, r2, r3
 800c168:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c16a:	b10b      	cbz	r3, 800c170 <__sflush_r+0x44>
 800c16c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c16e:	1ad2      	subs	r2, r2, r3
 800c170:	2300      	movs	r3, #0
 800c172:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c174:	6a21      	ldr	r1, [r4, #32]
 800c176:	4628      	mov	r0, r5
 800c178:	47b0      	blx	r6
 800c17a:	1c43      	adds	r3, r0, #1
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	d106      	bne.n	800c18e <__sflush_r+0x62>
 800c180:	6829      	ldr	r1, [r5, #0]
 800c182:	291d      	cmp	r1, #29
 800c184:	d82b      	bhi.n	800c1de <__sflush_r+0xb2>
 800c186:	4a2a      	ldr	r2, [pc, #168]	@ (800c230 <__sflush_r+0x104>)
 800c188:	410a      	asrs	r2, r1
 800c18a:	07d6      	lsls	r6, r2, #31
 800c18c:	d427      	bmi.n	800c1de <__sflush_r+0xb2>
 800c18e:	2200      	movs	r2, #0
 800c190:	6062      	str	r2, [r4, #4]
 800c192:	04d9      	lsls	r1, r3, #19
 800c194:	6922      	ldr	r2, [r4, #16]
 800c196:	6022      	str	r2, [r4, #0]
 800c198:	d504      	bpl.n	800c1a4 <__sflush_r+0x78>
 800c19a:	1c42      	adds	r2, r0, #1
 800c19c:	d101      	bne.n	800c1a2 <__sflush_r+0x76>
 800c19e:	682b      	ldr	r3, [r5, #0]
 800c1a0:	b903      	cbnz	r3, 800c1a4 <__sflush_r+0x78>
 800c1a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1a6:	602f      	str	r7, [r5, #0]
 800c1a8:	b1b9      	cbz	r1, 800c1da <__sflush_r+0xae>
 800c1aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1ae:	4299      	cmp	r1, r3
 800c1b0:	d002      	beq.n	800c1b8 <__sflush_r+0x8c>
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f7ff fca0 	bl	800baf8 <_free_r>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1bc:	e00d      	b.n	800c1da <__sflush_r+0xae>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	47b0      	blx	r6
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	1c50      	adds	r0, r2, #1
 800c1c8:	d1c9      	bne.n	800c15e <__sflush_r+0x32>
 800c1ca:	682b      	ldr	r3, [r5, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0c6      	beq.n	800c15e <__sflush_r+0x32>
 800c1d0:	2b1d      	cmp	r3, #29
 800c1d2:	d001      	beq.n	800c1d8 <__sflush_r+0xac>
 800c1d4:	2b16      	cmp	r3, #22
 800c1d6:	d11e      	bne.n	800c216 <__sflush_r+0xea>
 800c1d8:	602f      	str	r7, [r5, #0]
 800c1da:	2000      	movs	r0, #0
 800c1dc:	e022      	b.n	800c224 <__sflush_r+0xf8>
 800c1de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1e2:	b21b      	sxth	r3, r3
 800c1e4:	e01b      	b.n	800c21e <__sflush_r+0xf2>
 800c1e6:	690f      	ldr	r7, [r1, #16]
 800c1e8:	2f00      	cmp	r7, #0
 800c1ea:	d0f6      	beq.n	800c1da <__sflush_r+0xae>
 800c1ec:	0793      	lsls	r3, r2, #30
 800c1ee:	680e      	ldr	r6, [r1, #0]
 800c1f0:	bf08      	it	eq
 800c1f2:	694b      	ldreq	r3, [r1, #20]
 800c1f4:	600f      	str	r7, [r1, #0]
 800c1f6:	bf18      	it	ne
 800c1f8:	2300      	movne	r3, #0
 800c1fa:	eba6 0807 	sub.w	r8, r6, r7
 800c1fe:	608b      	str	r3, [r1, #8]
 800c200:	f1b8 0f00 	cmp.w	r8, #0
 800c204:	dde9      	ble.n	800c1da <__sflush_r+0xae>
 800c206:	6a21      	ldr	r1, [r4, #32]
 800c208:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c20a:	4643      	mov	r3, r8
 800c20c:	463a      	mov	r2, r7
 800c20e:	4628      	mov	r0, r5
 800c210:	47b0      	blx	r6
 800c212:	2800      	cmp	r0, #0
 800c214:	dc08      	bgt.n	800c228 <__sflush_r+0xfc>
 800c216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c21a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c21e:	81a3      	strh	r3, [r4, #12]
 800c220:	f04f 30ff 	mov.w	r0, #4294967295
 800c224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c228:	4407      	add	r7, r0
 800c22a:	eba8 0800 	sub.w	r8, r8, r0
 800c22e:	e7e7      	b.n	800c200 <__sflush_r+0xd4>
 800c230:	dfbffffe 	.word	0xdfbffffe

0800c234 <_fflush_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	690b      	ldr	r3, [r1, #16]
 800c238:	4605      	mov	r5, r0
 800c23a:	460c      	mov	r4, r1
 800c23c:	b913      	cbnz	r3, 800c244 <_fflush_r+0x10>
 800c23e:	2500      	movs	r5, #0
 800c240:	4628      	mov	r0, r5
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	b118      	cbz	r0, 800c24e <_fflush_r+0x1a>
 800c246:	6a03      	ldr	r3, [r0, #32]
 800c248:	b90b      	cbnz	r3, 800c24e <_fflush_r+0x1a>
 800c24a:	f7ff fb2f 	bl	800b8ac <__sinit>
 800c24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d0f3      	beq.n	800c23e <_fflush_r+0xa>
 800c256:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c258:	07d0      	lsls	r0, r2, #31
 800c25a:	d404      	bmi.n	800c266 <_fflush_r+0x32>
 800c25c:	0599      	lsls	r1, r3, #22
 800c25e:	d402      	bmi.n	800c266 <_fflush_r+0x32>
 800c260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c262:	f7ff fc38 	bl	800bad6 <__retarget_lock_acquire_recursive>
 800c266:	4628      	mov	r0, r5
 800c268:	4621      	mov	r1, r4
 800c26a:	f7ff ff5f 	bl	800c12c <__sflush_r>
 800c26e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c270:	07da      	lsls	r2, r3, #31
 800c272:	4605      	mov	r5, r0
 800c274:	d4e4      	bmi.n	800c240 <_fflush_r+0xc>
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	059b      	lsls	r3, r3, #22
 800c27a:	d4e1      	bmi.n	800c240 <_fflush_r+0xc>
 800c27c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c27e:	f7ff fc2b 	bl	800bad8 <__retarget_lock_release_recursive>
 800c282:	e7dd      	b.n	800c240 <_fflush_r+0xc>

0800c284 <__swbuf_r>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	460e      	mov	r6, r1
 800c288:	4614      	mov	r4, r2
 800c28a:	4605      	mov	r5, r0
 800c28c:	b118      	cbz	r0, 800c296 <__swbuf_r+0x12>
 800c28e:	6a03      	ldr	r3, [r0, #32]
 800c290:	b90b      	cbnz	r3, 800c296 <__swbuf_r+0x12>
 800c292:	f7ff fb0b 	bl	800b8ac <__sinit>
 800c296:	69a3      	ldr	r3, [r4, #24]
 800c298:	60a3      	str	r3, [r4, #8]
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	071a      	lsls	r2, r3, #28
 800c29e:	d501      	bpl.n	800c2a4 <__swbuf_r+0x20>
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	b943      	cbnz	r3, 800c2b6 <__swbuf_r+0x32>
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f000 f82a 	bl	800c300 <__swsetup_r>
 800c2ac:	b118      	cbz	r0, 800c2b6 <__swbuf_r+0x32>
 800c2ae:	f04f 37ff 	mov.w	r7, #4294967295
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b6:	6823      	ldr	r3, [r4, #0]
 800c2b8:	6922      	ldr	r2, [r4, #16]
 800c2ba:	1a98      	subs	r0, r3, r2
 800c2bc:	6963      	ldr	r3, [r4, #20]
 800c2be:	b2f6      	uxtb	r6, r6
 800c2c0:	4283      	cmp	r3, r0
 800c2c2:	4637      	mov	r7, r6
 800c2c4:	dc05      	bgt.n	800c2d2 <__swbuf_r+0x4e>
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7ff ffb3 	bl	800c234 <_fflush_r>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d1ed      	bne.n	800c2ae <__swbuf_r+0x2a>
 800c2d2:	68a3      	ldr	r3, [r4, #8]
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	60a3      	str	r3, [r4, #8]
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	1c5a      	adds	r2, r3, #1
 800c2dc:	6022      	str	r2, [r4, #0]
 800c2de:	701e      	strb	r6, [r3, #0]
 800c2e0:	6962      	ldr	r2, [r4, #20]
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d004      	beq.n	800c2f2 <__swbuf_r+0x6e>
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	07db      	lsls	r3, r3, #31
 800c2ec:	d5e1      	bpl.n	800c2b2 <__swbuf_r+0x2e>
 800c2ee:	2e0a      	cmp	r6, #10
 800c2f0:	d1df      	bne.n	800c2b2 <__swbuf_r+0x2e>
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f7ff ff9d 	bl	800c234 <_fflush_r>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d0d9      	beq.n	800c2b2 <__swbuf_r+0x2e>
 800c2fe:	e7d6      	b.n	800c2ae <__swbuf_r+0x2a>

0800c300 <__swsetup_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4b29      	ldr	r3, [pc, #164]	@ (800c3a8 <__swsetup_r+0xa8>)
 800c304:	4605      	mov	r5, r0
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	460c      	mov	r4, r1
 800c30a:	b118      	cbz	r0, 800c314 <__swsetup_r+0x14>
 800c30c:	6a03      	ldr	r3, [r0, #32]
 800c30e:	b90b      	cbnz	r3, 800c314 <__swsetup_r+0x14>
 800c310:	f7ff facc 	bl	800b8ac <__sinit>
 800c314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c318:	0719      	lsls	r1, r3, #28
 800c31a:	d422      	bmi.n	800c362 <__swsetup_r+0x62>
 800c31c:	06da      	lsls	r2, r3, #27
 800c31e:	d407      	bmi.n	800c330 <__swsetup_r+0x30>
 800c320:	2209      	movs	r2, #9
 800c322:	602a      	str	r2, [r5, #0]
 800c324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	f04f 30ff 	mov.w	r0, #4294967295
 800c32e:	e033      	b.n	800c398 <__swsetup_r+0x98>
 800c330:	0758      	lsls	r0, r3, #29
 800c332:	d512      	bpl.n	800c35a <__swsetup_r+0x5a>
 800c334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c336:	b141      	cbz	r1, 800c34a <__swsetup_r+0x4a>
 800c338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c33c:	4299      	cmp	r1, r3
 800c33e:	d002      	beq.n	800c346 <__swsetup_r+0x46>
 800c340:	4628      	mov	r0, r5
 800c342:	f7ff fbd9 	bl	800baf8 <_free_r>
 800c346:	2300      	movs	r3, #0
 800c348:	6363      	str	r3, [r4, #52]	@ 0x34
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	2300      	movs	r3, #0
 800c354:	6063      	str	r3, [r4, #4]
 800c356:	6923      	ldr	r3, [r4, #16]
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f043 0308 	orr.w	r3, r3, #8
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	b94b      	cbnz	r3, 800c37a <__swsetup_r+0x7a>
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c370:	d003      	beq.n	800c37a <__swsetup_r+0x7a>
 800c372:	4621      	mov	r1, r4
 800c374:	4628      	mov	r0, r5
 800c376:	f000 f83f 	bl	800c3f8 <__smakebuf_r>
 800c37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c37e:	f013 0201 	ands.w	r2, r3, #1
 800c382:	d00a      	beq.n	800c39a <__swsetup_r+0x9a>
 800c384:	2200      	movs	r2, #0
 800c386:	60a2      	str	r2, [r4, #8]
 800c388:	6962      	ldr	r2, [r4, #20]
 800c38a:	4252      	negs	r2, r2
 800c38c:	61a2      	str	r2, [r4, #24]
 800c38e:	6922      	ldr	r2, [r4, #16]
 800c390:	b942      	cbnz	r2, 800c3a4 <__swsetup_r+0xa4>
 800c392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c396:	d1c5      	bne.n	800c324 <__swsetup_r+0x24>
 800c398:	bd38      	pop	{r3, r4, r5, pc}
 800c39a:	0799      	lsls	r1, r3, #30
 800c39c:	bf58      	it	pl
 800c39e:	6962      	ldrpl	r2, [r4, #20]
 800c3a0:	60a2      	str	r2, [r4, #8]
 800c3a2:	e7f4      	b.n	800c38e <__swsetup_r+0x8e>
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	e7f7      	b.n	800c398 <__swsetup_r+0x98>
 800c3a8:	2000003c 	.word	0x2000003c

0800c3ac <__swhatbuf_r>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	b096      	sub	sp, #88	@ 0x58
 800c3b8:	4615      	mov	r5, r2
 800c3ba:	461e      	mov	r6, r3
 800c3bc:	da0d      	bge.n	800c3da <__swhatbuf_r+0x2e>
 800c3be:	89a3      	ldrh	r3, [r4, #12]
 800c3c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c3c4:	f04f 0100 	mov.w	r1, #0
 800c3c8:	bf14      	ite	ne
 800c3ca:	2340      	movne	r3, #64	@ 0x40
 800c3cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	6031      	str	r1, [r6, #0]
 800c3d4:	602b      	str	r3, [r5, #0]
 800c3d6:	b016      	add	sp, #88	@ 0x58
 800c3d8:	bd70      	pop	{r4, r5, r6, pc}
 800c3da:	466a      	mov	r2, sp
 800c3dc:	f000 f848 	bl	800c470 <_fstat_r>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	dbec      	blt.n	800c3be <__swhatbuf_r+0x12>
 800c3e4:	9901      	ldr	r1, [sp, #4]
 800c3e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3ee:	4259      	negs	r1, r3
 800c3f0:	4159      	adcs	r1, r3
 800c3f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3f6:	e7eb      	b.n	800c3d0 <__swhatbuf_r+0x24>

0800c3f8 <__smakebuf_r>:
 800c3f8:	898b      	ldrh	r3, [r1, #12]
 800c3fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3fc:	079d      	lsls	r5, r3, #30
 800c3fe:	4606      	mov	r6, r0
 800c400:	460c      	mov	r4, r1
 800c402:	d507      	bpl.n	800c414 <__smakebuf_r+0x1c>
 800c404:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	6123      	str	r3, [r4, #16]
 800c40c:	2301      	movs	r3, #1
 800c40e:	6163      	str	r3, [r4, #20]
 800c410:	b003      	add	sp, #12
 800c412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c414:	ab01      	add	r3, sp, #4
 800c416:	466a      	mov	r2, sp
 800c418:	f7ff ffc8 	bl	800c3ac <__swhatbuf_r>
 800c41c:	9f00      	ldr	r7, [sp, #0]
 800c41e:	4605      	mov	r5, r0
 800c420:	4639      	mov	r1, r7
 800c422:	4630      	mov	r0, r6
 800c424:	f7ff f92a 	bl	800b67c <_malloc_r>
 800c428:	b948      	cbnz	r0, 800c43e <__smakebuf_r+0x46>
 800c42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c42e:	059a      	lsls	r2, r3, #22
 800c430:	d4ee      	bmi.n	800c410 <__smakebuf_r+0x18>
 800c432:	f023 0303 	bic.w	r3, r3, #3
 800c436:	f043 0302 	orr.w	r3, r3, #2
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	e7e2      	b.n	800c404 <__smakebuf_r+0xc>
 800c43e:	89a3      	ldrh	r3, [r4, #12]
 800c440:	6020      	str	r0, [r4, #0]
 800c442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	9b01      	ldr	r3, [sp, #4]
 800c44a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c44e:	b15b      	cbz	r3, 800c468 <__smakebuf_r+0x70>
 800c450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c454:	4630      	mov	r0, r6
 800c456:	f000 f81d 	bl	800c494 <_isatty_r>
 800c45a:	b128      	cbz	r0, 800c468 <__smakebuf_r+0x70>
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f023 0303 	bic.w	r3, r3, #3
 800c462:	f043 0301 	orr.w	r3, r3, #1
 800c466:	81a3      	strh	r3, [r4, #12]
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	431d      	orrs	r5, r3
 800c46c:	81a5      	strh	r5, [r4, #12]
 800c46e:	e7cf      	b.n	800c410 <__smakebuf_r+0x18>

0800c470 <_fstat_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4d07      	ldr	r5, [pc, #28]	@ (800c490 <_fstat_r+0x20>)
 800c474:	2300      	movs	r3, #0
 800c476:	4604      	mov	r4, r0
 800c478:	4608      	mov	r0, r1
 800c47a:	4611      	mov	r1, r2
 800c47c:	602b      	str	r3, [r5, #0]
 800c47e:	f7f4 fd3f 	bl	8000f00 <_fstat>
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	d102      	bne.n	800c48c <_fstat_r+0x1c>
 800c486:	682b      	ldr	r3, [r5, #0]
 800c488:	b103      	cbz	r3, 800c48c <_fstat_r+0x1c>
 800c48a:	6023      	str	r3, [r4, #0]
 800c48c:	bd38      	pop	{r3, r4, r5, pc}
 800c48e:	bf00      	nop
 800c490:	20001b78 	.word	0x20001b78

0800c494 <_isatty_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4d06      	ldr	r5, [pc, #24]	@ (800c4b0 <_isatty_r+0x1c>)
 800c498:	2300      	movs	r3, #0
 800c49a:	4604      	mov	r4, r0
 800c49c:	4608      	mov	r0, r1
 800c49e:	602b      	str	r3, [r5, #0]
 800c4a0:	f7f4 fd3e 	bl	8000f20 <_isatty>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	d102      	bne.n	800c4ae <_isatty_r+0x1a>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	b103      	cbz	r3, 800c4ae <_isatty_r+0x1a>
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	20001b78 	.word	0x20001b78

0800c4b4 <_init>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	bf00      	nop
 800c4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ba:	bc08      	pop	{r3}
 800c4bc:	469e      	mov	lr, r3
 800c4be:	4770      	bx	lr

0800c4c0 <_fini>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	bf00      	nop
 800c4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c6:	bc08      	pop	{r3}
 800c4c8:	469e      	mov	lr, r3
 800c4ca:	4770      	bx	lr
