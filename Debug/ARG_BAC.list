
ARG_BAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e478  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800e618  0800e618  0000f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9b4  0800e9b4  0001008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9b4  0800e9b4  0000f9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9bc  0800e9bc  0001008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9bc  0800e9bc  0000f9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e9c0  0800e9c0  0000f9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800e9c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  2000008c  0800ea50  0001008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  0800ea50  00010b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7cc  00000000  00000000  000100bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c5  00000000  00000000  0002b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00030050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef7  00000000  00000000  00031408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7f3  00000000  00000000  000322ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd24  00000000  00000000  0004daf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f600  00000000  00000000  0006b816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fae16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000586c  00000000  00000000  000fae5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001006c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e600 	.word	0x0800e600

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800e600 	.word	0x0800e600

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <W25QXX_WriteEnable>:

#define FLASH_CS_LOW()  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET)
#define FLASH_CS_HIGH() HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET)


void W25QXX_WriteEnable(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x06; // Write Enable
 8000586:	2306      	movs	r3, #6
 8000588:	71fb      	strb	r3, [r7, #7]
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <W25QXX_WriteEnable+0x34>)
 8000590:	f001 fa42 	bl	8001a18 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000594:	1df9      	adds	r1, r7, #7
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	2201      	movs	r2, #1
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <W25QXX_WriteEnable+0x38>)
 800059e:	f004 f89c 	bl	80046da <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <W25QXX_WriteEnable+0x34>)
 80005a8:	f001 fa36 	bl	8001a18 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020000 	.word	0x40020000
 80005b8:	200000a8 	.word	0x200000a8

080005bc <W25QXX_ReadStatus>:

uint8_t W25QXX_ReadStatus(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x05;  // Read Status Register
 80005c2:	2305      	movs	r3, #5
 80005c4:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71bb      	strb	r3, [r7, #6]
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 80005ca:	2200      	movs	r2, #0
 80005cc:	2110      	movs	r1, #16
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <W25QXX_ReadStatus+0x48>)
 80005d0:	f001 fa22 	bl	8001a18 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80005d4:	1df9      	adds	r1, r7, #7
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2201      	movs	r2, #1
 80005dc:	480a      	ldr	r0, [pc, #40]	@ (8000608 <W25QXX_ReadStatus+0x4c>)
 80005de:	f004 f87c 	bl	80046da <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &status, 1, HAL_MAX_DELAY);
 80005e2:	1db9      	adds	r1, r7, #6
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	2201      	movs	r2, #1
 80005ea:	4807      	ldr	r0, [pc, #28]	@ (8000608 <W25QXX_ReadStatus+0x4c>)
 80005ec:	f004 f9b9 	bl	8004962 <HAL_SPI_Receive>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
    FLASH_CS_HIGH();
 80005f0:	2201      	movs	r2, #1
 80005f2:	2110      	movs	r1, #16
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <W25QXX_ReadStatus+0x48>)
 80005f6:	f001 fa0f 	bl	8001a18 <HAL_GPIO_WritePin>
    return status;
 80005fa:	79bb      	ldrb	r3, [r7, #6]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020000 	.word	0x40020000
 8000608:	200000a8 	.word	0x200000a8

0800060c <W25QXX_WriteData>:

void W25QXX_WriteData(uint32_t address, uint8_t* data, uint16_t size) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	4613      	mov	r3, r2
 8000618:	80fb      	strh	r3, [r7, #6]
    W25QXX_WriteEnable();  // Enable writing
 800061a:	f7ff ffb1 	bl	8000580 <W25QXX_WriteEnable>
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 800061e:	2302      	movs	r3, #2
 8000620:	753b      	strb	r3, [r7, #20]
                       (address >> 16) & 0xFF,  // Address bytes
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 8000626:	b2db      	uxtb	r3, r3
 8000628:	757b      	strb	r3, [r7, #21]
                       (address >> 8) & 0xFF,
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[4] = { 0x02,  // Page Program Command
 800062e:	b2db      	uxtb	r3, r3
 8000630:	75bb      	strb	r3, [r7, #22]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	75fb      	strb	r3, [r7, #23]
                       address & 0xFF };
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4811      	ldr	r0, [pc, #68]	@ (8000684 <W25QXX_WriteData+0x78>)
 800063e:	f001 f9eb 	bl	8001a18 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);      // Send command & address
 8000642:	f107 0114 	add.w	r1, r7, #20
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	2204      	movs	r2, #4
 800064c:	480e      	ldr	r0, [pc, #56]	@ (8000688 <W25QXX_WriteData+0x7c>)
 800064e:	f004 f844 	bl	80046da <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);  // Send data
 8000652:	88fa      	ldrh	r2, [r7, #6]
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <W25QXX_WriteData+0x7c>)
 800065c:	f004 f83d 	bl	80046da <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8000660:	2201      	movs	r2, #1
 8000662:	2110      	movs	r1, #16
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <W25QXX_WriteData+0x78>)
 8000666:	f001 f9d7 	bl	8001a18 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
    while (W25QXX_ReadStatus() & 0x01);                   // Wait for write to finish
 800066a:	bf00      	nop
 800066c:	f7ff ffa6 	bl	80005bc <W25QXX_ReadStatus>
 8000670:	4603      	mov	r3, r0
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f8      	bne.n	800066c <W25QXX_WriteData+0x60>
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40020000 	.word	0x40020000
 8000688:	200000a8 	.word	0x200000a8

0800068c <W25QXX_ReadData>:

void W25QXX_ReadData(uint32_t address, uint8_t* buffer, uint16_t size) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	4613      	mov	r3, r2
 8000698:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 800069a:	2303      	movs	r3, #3
 800069c:	753b      	strb	r3, [r7, #20]
                       (address >> 16) & 0xFF,
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	757b      	strb	r3, [r7, #21]
                       (address >> 8) & 0xFF,
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[4] = { 0x03,  // Read Data Command
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	75bb      	strb	r3, [r7, #22]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	75fb      	strb	r3, [r7, #23]
                       address & 0xFF };
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
    FLASH_CS_LOW();
 80006b4:	2200      	movs	r2, #0
 80006b6:	2110      	movs	r1, #16
 80006b8:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <W25QXX_ReadData+0x64>)
 80006ba:	f001 f9ad 	bl	8001a18 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);      // Send command & address
 80006be:	f107 0114 	add.w	r1, r7, #20
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	2204      	movs	r2, #4
 80006c8:	480a      	ldr	r0, [pc, #40]	@ (80006f4 <W25QXX_ReadData+0x68>)
 80006ca:	f004 f806 	bl	80046da <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY); // Receive data
 80006ce:	88fa      	ldrh	r2, [r7, #6]
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <W25QXX_ReadData+0x68>)
 80006d8:	f004 f943 	bl	8004962 <HAL_SPI_Receive>
    FLASH_CS_HIGH();
 80006dc:	2201      	movs	r2, #1
 80006de:	2110      	movs	r1, #16
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <W25QXX_ReadData+0x64>)
 80006e2:	f001 f999 	bl	8001a18 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40020000 	.word	0x40020000
 80006f4:	200000a8 	.word	0x200000a8

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	f5ad 5d04 	sub.w	sp, sp, #8448	@ 0x2100
 80006fe:	b081      	sub	sp, #4
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fdb3 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f993 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 fa85 	bl	8000c18 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800070e:	f000 fa2f 	bl	8000b70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000712:	f000 fa57 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000716:	f000 f9f5 	bl	8000b04 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800071a:	f00c fca3 	bl	800d064 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800071e:	f006 fe41 	bl	80073a4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  if (f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 0) != FR_OK)
 8000722:	2200      	movs	r2, #0
 8000724:	49a8      	ldr	r1, [pc, #672]	@ (80009c8 <main+0x2d0>)
 8000726:	48a9      	ldr	r0, [pc, #676]	@ (80009cc <main+0x2d4>)
 8000728:	f00b fe8a 	bl	800c440 <f_mount>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <main+0x40>
  {
    printf("\n\n ERROR : USBHFatFS Initialization");
 8000732:	48a7      	ldr	r0, [pc, #668]	@ (80009d0 <main+0x2d8>)
 8000734:	f00d f938 	bl	800d9a8 <iprintf>
  }

  HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	49a6      	ldr	r1, [pc, #664]	@ (80009d4 <main+0x2dc>)
 800073c:	48a6      	ldr	r0, [pc, #664]	@ (80009d8 <main+0x2e0>)
 800073e:	f004 fdf0 	bl	8005322 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	49a3      	ldr	r1, [pc, #652]	@ (80009d4 <main+0x2dc>)
 8000746:	48a5      	ldr	r0, [pc, #660]	@ (80009dc <main+0x2e4>)
 8000748:	f004 fdeb 	bl	8005322 <HAL_UART_Receive_IT>

  // Test data to write to flash
      uint8_t write_data[16] = "Hello, W25QXX!";
 800074c:	4ba4      	ldr	r3, [pc, #656]	@ (80009e0 <main+0x2e8>)
 800074e:	f507 5403 	add.w	r4, r7, #8384	@ 0x20c0
 8000752:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8000756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000758:	c407      	stmia	r4!, {r0, r1, r2}
 800075a:	8023      	strh	r3, [r4, #0]
 800075c:	3402      	adds	r4, #2
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	7023      	strb	r3, [r4, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8000768:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 800076c:	7013      	strb	r3, [r2, #0]
      uint8_t read_data[16] = {0};
 800076e:	2300      	movs	r3, #0
 8000770:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8000774:	f102 0218 	add.w	r2, r2, #24
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800077e:	f103 031c 	add.w	r3, r3, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
      ONBOARD_LED_OFF();
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000790:	4894      	ldr	r0, [pc, #592]	@ (80009e4 <main+0x2ec>)
 8000792:	f001 f941 	bl	8001a18 <HAL_GPIO_WritePin>

      // Write data to address 0x000000
      printf("\n SPI FLASH DATA WRITE STARTED");
 8000796:	4894      	ldr	r0, [pc, #592]	@ (80009e8 <main+0x2f0>)
 8000798:	f00d f906 	bl	800d9a8 <iprintf>
      W25QXX_WriteData(0x000000, write_data, sizeof(write_data));
 800079c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80007a0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80007a4:	2210      	movs	r2, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff ff2f 	bl	800060c <W25QXX_WriteData>
      printf("\n SPI FLASH DATA WRITE COMPLETED");
 80007ae:	488f      	ldr	r0, [pc, #572]	@ (80009ec <main+0x2f4>)
 80007b0:	f00d f8fa 	bl	800d9a8 <iprintf>

      // Read data back from address 0x000000
      printf("\n SPI FLASH DATA READ STARTED");
 80007b4:	488e      	ldr	r0, [pc, #568]	@ (80009f0 <main+0x2f8>)
 80007b6:	f00d f8f7 	bl	800d9a8 <iprintf>
      W25QXX_ReadData(0x000000, read_data, sizeof(read_data));
 80007ba:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80007be:	f103 0318 	add.w	r3, r3, #24
 80007c2:	2210      	movs	r2, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	2000      	movs	r0, #0
 80007c8:	f7ff ff60 	bl	800068c <W25QXX_ReadData>
      printf("\n SPI FLASH DATA READ COMPLETED");
 80007cc:	4889      	ldr	r0, [pc, #548]	@ (80009f4 <main+0x2fc>)
 80007ce:	f00d f8eb 	bl	800d9a8 <iprintf>
//      for(uint8_t i = 0; i < 16;i++)
//      {
//          printf("%c", read_data[i]);
//      }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007d2:	f00c fc6d 	bl	800d0b0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if ((MX_USB_HOST_App_state() == APPLICATION_READY) && usb_exp_disk)
 80007d6:	f00c fc39 	bl	800d04c <MX_USB_HOST_App_state>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d1f8      	bne.n	80007d2 <main+0xda>
 80007e0:	4b85      	ldr	r3, [pc, #532]	@ (80009f8 <main+0x300>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f4      	beq.n	80007d2 <main+0xda>
    {
      usb_exp_disk = 0;
 80007e8:	4b83      	ldr	r3, [pc, #524]	@ (80009f8 <main+0x300>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
      printf("\n USB DETECTED");
 80007ee:	4883      	ldr	r0, [pc, #524]	@ (80009fc <main+0x304>)
 80007f0:	f00d f8da 	bl	800d9a8 <iprintf>
//      printf("\n usb  =  %d", Explore_Disk(USBHPath, 1));

      res = f_mount(&USBFatFS, "", 1);
 80007f4:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80007f8:	2201      	movs	r2, #1
 80007fa:	4981      	ldr	r1, [pc, #516]	@ (8000a00 <main+0x308>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f00b fe1f 	bl	800c440 <f_mount>
 8000802:	4603      	mov	r3, r0
 8000804:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8000808:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 800080c:	7013      	strb	r3, [r2, #0]
          if (res != FR_OK) {
 800080e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000812:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d008      	beq.n	800082e <main+0x136>
              printf("Failed to mount USB drive. Error: %d\n", res);
 800081c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000820:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4619      	mov	r1, r3
 8000828:	4876      	ldr	r0, [pc, #472]	@ (8000a04 <main+0x30c>)
 800082a:	f00d f8bd 	bl	800d9a8 <iprintf>
          }
          printf("USB Drive mounted successfully.\n");
 800082e:	4876      	ldr	r0, [pc, #472]	@ (8000a08 <main+0x310>)
 8000830:	f00d f922 	bl	800da78 <puts>

          // 4. Create and Write to a File on USB
              res = f_open(&MyFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000834:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000838:	3b10      	subs	r3, #16
 800083a:	220a      	movs	r2, #10
 800083c:	4973      	ldr	r1, [pc, #460]	@ (8000a0c <main+0x314>)
 800083e:	4618      	mov	r0, r3
 8000840:	f00b fe44 	bl	800c4cc <f_open>
 8000844:	4603      	mov	r3, r0
 8000846:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800084a:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 800084e:	7013      	strb	r3, [r2, #0]
              if (res == FR_OK) {
 8000850:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000854:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d149      	bne.n	80008f2 <main+0x1fa>
                  const char *data = "Hello, USB World!";
 800085e:	4b6c      	ldr	r3, [pc, #432]	@ (8000a10 <main+0x318>)
 8000860:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8000864:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000868:	6013      	str	r3, [r2, #0]
                  res = f_write(&MyFile, data, strlen(data), &bytesWritten);
 800086a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800086e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	f7ff fcb4 	bl	80001e0 <strlen>
 8000878:	4602      	mov	r2, r0
 800087a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800087e:	3b38      	subs	r3, #56	@ 0x38
 8000880:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8000884:	3810      	subs	r0, #16
 8000886:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 800088a:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 800088e:	6809      	ldr	r1, [r1, #0]
 8000890:	f00c f943 	bl	800cb1a <f_write>
 8000894:	4603      	mov	r3, r0
 8000896:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800089a:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 800089e:	7013      	strb	r3, [r2, #0]
                  if (res == FR_OK && bytesWritten == strlen(data)) {
 80008a0:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80008a4:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d111      	bne.n	80008d2 <main+0x1da>
 80008ae:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80008b2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	f7ff fc92 	bl	80001e0 <strlen>
 80008bc:	4602      	mov	r2, r0
 80008be:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008c2:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d103      	bne.n	80008d2 <main+0x1da>
                      printf("Data written successfully to USB.\n");
 80008ca:	4852      	ldr	r0, [pc, #328]	@ (8000a14 <main+0x31c>)
 80008cc:	f00d f8d4 	bl	800da78 <puts>
 80008d0:	e008      	b.n	80008e4 <main+0x1ec>
                  } else {
                      printf("Failed to write data to USB. Error: %d\n", res);
 80008d2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80008d6:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	484e      	ldr	r0, [pc, #312]	@ (8000a18 <main+0x320>)
 80008e0:	f00d f862 	bl	800d9a8 <iprintf>
                  }
                  f_close(&MyFile);  // Close file after writing
 80008e4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80008e8:	3b10      	subs	r3, #16
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00c fb27 	bl	800cf3e <f_close>
 80008f0:	e008      	b.n	8000904 <main+0x20c>
              } else {
                  printf("Failed to open file for writing. Error: %d\n", res);
 80008f2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80008f6:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4847      	ldr	r0, [pc, #284]	@ (8000a1c <main+0x324>)
 8000900:	f00d f852 	bl	800d9a8 <iprintf>
              }

              // 5. Read the Data Back from the File
              res = f_open(&MyFile, "test.txt", FA_READ);
 8000904:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000908:	3b10      	subs	r3, #16
 800090a:	2201      	movs	r2, #1
 800090c:	493f      	ldr	r1, [pc, #252]	@ (8000a0c <main+0x314>)
 800090e:	4618      	mov	r0, r3
 8000910:	f00b fddc 	bl	800c4cc <f_open>
 8000914:	4603      	mov	r3, r0
 8000916:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800091a:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 800091e:	7013      	strb	r3, [r2, #0]
              if (res == FR_OK) {
 8000920:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000924:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d13a      	bne.n	80009a4 <main+0x2ac>
                  res = f_read(&MyFile, buffer, sizeof(buffer) - 1, &bytesRead);
 800092e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000932:	3b3c      	subs	r3, #60	@ 0x3c
 8000934:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000938:	3934      	subs	r1, #52	@ 0x34
 800093a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800093e:	3810      	subs	r0, #16
 8000940:	2263      	movs	r2, #99	@ 0x63
 8000942:	f00b ff8b 	bl	800c85c <f_read>
 8000946:	4603      	mov	r3, r0
 8000948:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800094c:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000950:	7013      	strb	r3, [r2, #0]
                  if (res == FR_OK) {
 8000952:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000956:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d111      	bne.n	8000984 <main+0x28c>
                      buffer[bytesRead] = '\0';  // Null-terminate the read data
 8000960:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000964:	f853 3cfc 	ldr.w	r3, [r3, #-252]
 8000968:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 800096c:	4413      	add	r3, r2
 800096e:	2200      	movs	r2, #0
 8000970:	f803 2cf4 	strb.w	r2, [r3, #-244]
                      printf("Data read from USB: %s\n", buffer);
 8000974:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000978:	3b34      	subs	r3, #52	@ 0x34
 800097a:	4619      	mov	r1, r3
 800097c:	4828      	ldr	r0, [pc, #160]	@ (8000a20 <main+0x328>)
 800097e:	f00d f813 	bl	800d9a8 <iprintf>
 8000982:	e008      	b.n	8000996 <main+0x29e>
                  } else {
                      printf("Failed to read data from USB. Error: %d\n", res);
 8000984:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000988:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	4824      	ldr	r0, [pc, #144]	@ (8000a24 <main+0x32c>)
 8000992:	f00d f809 	bl	800d9a8 <iprintf>
                  }
                  f_close(&MyFile);  // Close file after reading
 8000996:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800099a:	3b10      	subs	r3, #16
 800099c:	4618      	mov	r0, r3
 800099e:	f00c face 	bl	800cf3e <f_close>
 80009a2:	e008      	b.n	80009b6 <main+0x2be>
              } else {
                  printf("Failed to open file for reading. Error: %d\n", res);
 80009a4:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80009a8:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	481d      	ldr	r0, [pc, #116]	@ (8000a28 <main+0x330>)
 80009b2:	f00c fff9 	bl	800d9a8 <iprintf>
              }

              // 6. Unmount the USB Drive after Operations
              f_mount(NULL, "", 1);
 80009b6:	2201      	movs	r2, #1
 80009b8:	4911      	ldr	r1, [pc, #68]	@ (8000a00 <main+0x308>)
 80009ba:	2000      	movs	r0, #0
 80009bc:	f00b fd40 	bl	800c440 <f_mount>
              printf("USB Drive unmounted.\n");
 80009c0:	481a      	ldr	r0, [pc, #104]	@ (8000a2c <main+0x334>)
 80009c2:	f00d f859 	bl	800da78 <puts>
    MX_USB_HOST_Process();
 80009c6:	e704      	b.n	80007d2 <main+0xda>
 80009c8:	20000208 	.word	0x20000208
 80009cc:	2000020c 	.word	0x2000020c
 80009d0:	0800e618 	.word	0x0800e618
 80009d4:	20000190 	.word	0x20000190
 80009d8:	20000100 	.word	0x20000100
 80009dc:	20000148 	.word	0x20000148
 80009e0:	0800e83c 	.word	0x0800e83c
 80009e4:	40020800 	.word	0x40020800
 80009e8:	0800e63c 	.word	0x0800e63c
 80009ec:	0800e65c 	.word	0x0800e65c
 80009f0:	0800e680 	.word	0x0800e680
 80009f4:	0800e6a0 	.word	0x0800e6a0
 80009f8:	20000001 	.word	0x20000001
 80009fc:	0800e6c0 	.word	0x0800e6c0
 8000a00:	0800e6d0 	.word	0x0800e6d0
 8000a04:	0800e6d4 	.word	0x0800e6d4
 8000a08:	0800e6fc 	.word	0x0800e6fc
 8000a0c:	0800e71c 	.word	0x0800e71c
 8000a10:	0800e728 	.word	0x0800e728
 8000a14:	0800e73c 	.word	0x0800e73c
 8000a18:	0800e760 	.word	0x0800e760
 8000a1c:	0800e788 	.word	0x0800e788
 8000a20:	0800e7b4 	.word	0x0800e7b4
 8000a24:	0800e7cc 	.word	0x0800e7cc
 8000a28:	0800e7f8 	.word	0x0800e7f8
 8000a2c:	0800e824 	.word	0x0800e824

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	@ 0x50
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2230      	movs	r2, #48	@ 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00d f8fa 	bl	800dc38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a27      	ldr	r2, [pc, #156]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b22      	ldr	r3, [pc, #136]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a7c:	4a20      	ldr	r2, [pc, #128]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000aa8:	2390      	movs	r3, #144	@ 0x90
 8000aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ab0:	2305      	movs	r3, #5
 8000ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 f92d 	bl	8003d18 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac4:	f000 f99c 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fb8f 	bl	8004208 <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000af0:	f000 f986 	bl	8000e00 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	3750      	adds	r7, #80	@ 0x50
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b0a:	4a18      	ldr	r2, [pc, #96]	@ (8000b6c <MX_SPI1_Init+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b38:	2220      	movs	r2, #32
 8000b3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b50:	220a      	movs	r2, #10
 8000b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <MX_SPI1_Init+0x64>)
 8000b56:	f003 fd37 	bl	80045c8 <HAL_SPI_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b60:	f000 f94e 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000a8 	.word	0x200000a8
 8000b6c:	40013000 	.word	0x40013000

08000b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	@ (8000bc0 <MX_USART1_UART_Init+0x50>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_USART1_UART_Init+0x4c>)
 8000ba8:	f004 fae0 	bl	800516c <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bb2:	f000 f925 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000100 	.word	0x20000100
 8000bc0:	40011000 	.word	0x40011000

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <MX_USART2_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f004 fab6 	bl	800516c <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f8fb 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000148 	.word	0x20000148
 8000c14:	40004400 	.word	0x40004400

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b34      	ldr	r3, [pc, #208]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a33      	ldr	r2, [pc, #204]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a2c      	ldr	r2, [pc, #176]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <MX_GPIO_Init+0xec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c88:	481f      	ldr	r0, [pc, #124]	@ (8000d08 <MX_GPIO_Init+0xf0>)
 8000c8a:	f000 fec5 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2110      	movs	r1, #16
 8000c92:	481e      	ldr	r0, [pc, #120]	@ (8000d0c <MX_GPIO_Init+0xf4>)
 8000c94:	f000 fec0 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OnBoardLED_Pin */
  GPIO_InitStruct.Pin = OnBoardLED_Pin;
 8000c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OnBoardLED_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4815      	ldr	r0, [pc, #84]	@ (8000d08 <MX_GPIO_Init+0xf0>)
 8000cb2:	f000 fd15 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RainGuagePulseInput_Pin */
  GPIO_InitStruct.Pin = RainGuagePulseInput_Pin;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RainGuagePulseInput_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4810      	ldr	r0, [pc, #64]	@ (8000d0c <MX_GPIO_Init+0xf4>)
 8000ccc:	f000 fd08 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <MX_GPIO_Init+0xf4>)
 8000ce8:	f000 fcfa 	bl	80016e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2007      	movs	r0, #7
 8000cf2:	f000 fc2c 	bl	800154e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	f000 fc45 	bl	8001586 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_UART_RxCpltCallback>:
   @param  UartHandle: UART handle.
   @note   This callback executes once defined bytes of reception completed
   @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
//	  if (UartHandle->Instance == USART1)
//	  {
////		    HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
//	  }
	  if (UartHandle->Instance == USART2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <HAL_UART_RxCpltCallback+0x3c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10f      	bne.n	8000d42 <HAL_UART_RxCpltCallback+0x32>
	  {
		    HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	490a      	ldr	r1, [pc, #40]	@ (8000d50 <HAL_UART_RxCpltCallback+0x40>)
 8000d26:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <HAL_UART_RxCpltCallback+0x44>)
 8000d28:	f004 fafb 	bl	8005322 <HAL_UART_Receive_IT>
		    g_buff[wr_ptr++] = aRxBuffer;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_UART_RxCpltCallback+0x48>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	b2d1      	uxtb	r1, r2
 8000d34:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <HAL_UART_RxCpltCallback+0x48>)
 8000d36:	7011      	strb	r1, [r2, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_UART_RxCpltCallback+0x40>)
 8000d3c:	7819      	ldrb	r1, [r3, #0]
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <HAL_UART_RxCpltCallback+0x4c>)
 8000d40:	5499      	strb	r1, [r3, r2]
//		    printf("%c", aRxBuffer);
	  }
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	20000190 	.word	0x20000190
 8000d54:	20000148 	.word	0x20000148
 8000d58:	200001f8 	.word	0x200001f8
 8000d5c:	20000194 	.word	0x20000194

08000d60 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	  if (UartHandle->Instance == USART1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a09      	ldr	r2, [pc, #36]	@ (8000d94 <HAL_UART_TxCpltCallback+0x34>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d102      	bne.n	8000d78 <HAL_UART_TxCpltCallback+0x18>
	  {
	    /* Set transmission flag: transfer complete */
		  SerialTxReady = SET;
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_UART_TxCpltCallback+0x38>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
	  }
	  if (UartHandle->Instance == USART2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_UART_TxCpltCallback+0x3c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d102      	bne.n	8000d88 <HAL_UART_TxCpltCallback+0x28>
	  {
	    /* Set transmission flag: transfer complete */
		  ModemTxReady = SET;
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <HAL_UART_TxCpltCallback+0x40>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
	  }
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40011000 	.word	0x40011000
 8000d98:	20000191 	.word	0x20000191
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	20000000 	.word	0x20000000

08000da4 <HAL_GPIO_EXTI_Callback>:
   @brief EXTI line detection callbacks
   @param GPIO_Pin: Specifies the pins connected EXTI line
   @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == RainGuagePulseInput_Pin)
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d10b      	bne.n	8000dcc <HAL_GPIO_EXTI_Callback+0x28>
  {
    if (HAL_GPIO_ReadPin(RainGuagePulseInput_GPIO_Port, RainGuagePulseInput_Pin)
 8000db4:	2102      	movs	r1, #2
 8000db6:	4807      	ldr	r0, [pc, #28]	@ (8000dd4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000db8:	f000 fe16 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d104      	bne.n	8000dcc <HAL_GPIO_EXTI_Callback+0x28>
         == GPIO_PIN_SET)
    {
    	HAL_GPIO_TogglePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin);
 8000dc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc6:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <HAL_GPIO_EXTI_Callback+0x34>)
 8000dc8:	f000 fe3f 	bl	8001a4a <HAL_GPIO_TogglePin>
    }
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020800 	.word	0x40020800

08000ddc <__io_putchar>:
   @brief  Retargets the C library APP_DEBUG_STR function to the USART.
   @param  None
   @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0XFFFF);
 8000de4:	1d39      	adds	r1, r7, #4
 8000de6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dea:	2201      	movs	r2, #1
 8000dec:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <__io_putchar+0x20>)
 8000dee:	f004 fa0d 	bl	800520c <HAL_UART_Transmit>
  return ch;
 8000df2:	687b      	ldr	r3, [r7, #4]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000100 	.word	0x20000100

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <Error_Handler+0x8>

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_SPI_MspInit+0x84>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12b      	bne.n	8000ed6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	4a17      	ldr	r2, [pc, #92]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000e88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eb6:	23e0      	movs	r3, #224	@ 0xe0
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000ed2:	f000 fc05 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	@ 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40013000 	.word	0x40013000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	@ 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff4 <HAL_UART_MspInit+0x108>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d135      	bne.n	8000f7a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a38      	ldr	r2, [pc, #224]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b36      	ldr	r3, [pc, #216]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a31      	ldr	r2, [pc, #196]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_Tx_Pin|MODEM_Rx_Pin;
 8000f46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	4826      	ldr	r0, [pc, #152]	@ (8000ffc <HAL_UART_MspInit+0x110>)
 8000f64:	f000 fbbc 	bl	80016e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2025      	movs	r0, #37	@ 0x25
 8000f6e:	f000 faee 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f72:	2025      	movs	r0, #37	@ 0x25
 8000f74:	f000 fb07 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f78:	e038      	b.n	8000fec <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a20      	ldr	r2, [pc, #128]	@ (8001000 <HAL_UART_MspInit+0x114>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d133      	bne.n	8000fec <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <HAL_UART_MspInit+0x10c>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERIAL_Tx_Pin|SERIAL_Rx_Pin;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <HAL_UART_MspInit+0x110>)
 8000fd8:	f000 fb82 	bl	80016e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2026      	movs	r0, #38	@ 0x26
 8000fe2:	f000 fab4 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe6:	2026      	movs	r0, #38	@ 0x26
 8000fe8:	f000 facd 	bl	8001586 <HAL_NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	@ 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40004400 	.word	0x40004400

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <NMI_Handler+0x4>

0800100c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <MemManage_Handler+0x4>

0800101c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <UsageFault_Handler+0x4>

0800102c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 f959 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <USART1_IRQHandler+0x10>)
 800106a:	f004 f97f 	bl	800536c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000100 	.word	0x20000100

08001078 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <USART2_IRQHandler+0x10>)
 800107e:	f004 f975 	bl	800536c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000148 	.word	0x20000148

0800108c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <OTG_FS_IRQHandler+0x10>)
 8001092:	f000 ffed 	bl	8002070 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20001654 	.word	0x20001654

080010a0 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80010a4:	2002      	movs	r0, #2
 80010a6:	f000 fceb 	bl	8001a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e00a      	b.n	80010d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010c0:	f3af 8000 	nop.w
 80010c4:	4601      	mov	r1, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	60ba      	str	r2, [r7, #8]
 80010cc:	b2ca      	uxtb	r2, r1
 80010ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbf0      	blt.n	80010c0 <_read+0x12>
  }

  return len;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e009      	b.n	800110e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	60ba      	str	r2, [r7, #8]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe6a 	bl	8000ddc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	dbf1      	blt.n	80010fa <_write+0x12>
  }
  return len;
 8001116:	687b      	ldr	r3, [r7, #4]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_close>:

int _close(int file)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001148:	605a      	str	r2, [r3, #4]
  return 0;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_isatty>:

int _isatty(int file)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	@ (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f00c fd9c 	bl	800dcf4 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20010000 	.word	0x20010000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	200001fc 	.word	0x200001fc
 80011f0:	20001b80 	.word	0x20001b80

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001250 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800121c:	f7ff ffea 	bl	80011f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001222:	490d      	ldr	r1, [pc, #52]	@ (8001258 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001224:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001238:	4c0a      	ldr	r4, [pc, #40]	@ (8001264 <LoopFillZerobss+0x22>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001246:	f00c fd5b 	bl	800dd00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff fa55 	bl	80006f8 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800125c:	0800e9c4 	.word	0x0800e9c4
  ldr r2, =_sbss
 8001260:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001264:	20001b80 	.word	0x20001b80

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f94f 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	200f      	movs	r0, #15
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fdb4 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f967 	bl	80015a2 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f92f 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	@ (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000004 	.word	0x20000004
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000008 	.word	0x20000008

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2000000c 	.word	0x2000000c
 8001334:	20000200 	.word	0x20000200

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	@ (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000200 	.word	0x20000200

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000000c 	.word	0x2000000c

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	@ (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	@ (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	@ (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	@ 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff29 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff3e 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff31 	bl	80013fc <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa2 	bl	80014f4 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff feb6 	bl	8001338 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d008      	beq.n	80015ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2280      	movs	r2, #128	@ 0x80
 80015de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e052      	b.n	8001692 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0216 	bic.w	r2, r2, #22
 80015fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800160a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d103      	bne.n	800161c <HAL_DMA_Abort+0x62>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0208 	bic.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163c:	e013      	b.n	8001666 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800163e:	f7ff fe7b 	bl	8001338 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b05      	cmp	r3, #5
 800164a:	d90c      	bls.n	8001666 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e015      	b.n	8001692 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e4      	bne.n	800163e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001678:	223f      	movs	r2, #63	@ 0x3f
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d004      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2280      	movs	r2, #128	@ 0x80
 80016b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e00c      	b.n	80016d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2205      	movs	r2, #5
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	@ 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e159      	b.n	80019b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8148 	bne.w	80019aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	2b02      	cmp	r3, #2
 8001730:	d130      	bne.n	8001794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 0201 	and.w	r2, r3, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b03      	cmp	r3, #3
 800179e:	d017      	beq.n	80017d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a2 	beq.w	80019aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b57      	ldr	r3, [pc, #348]	@ (80019c8 <HAL_GPIO_Init+0x2e8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	4a56      	ldr	r2, [pc, #344]	@ (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001874:	6453      	str	r3, [r2, #68]	@ 0x44
 8001876:	4b54      	ldr	r3, [pc, #336]	@ (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001882:	4a52      	ldr	r2, [pc, #328]	@ (80019cc <HAL_GPIO_Init+0x2ec>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a49      	ldr	r2, [pc, #292]	@ (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x202>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a48      	ldr	r2, [pc, #288]	@ (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x1fe>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a47      	ldr	r2, [pc, #284]	@ (80019d8 <HAL_GPIO_Init+0x2f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x1fa>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a46      	ldr	r2, [pc, #280]	@ (80019dc <HAL_GPIO_Init+0x2fc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x1f6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a45      	ldr	r2, [pc, #276]	@ (80019e0 <HAL_GPIO_Init+0x300>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x1f2>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	@ (80019cc <HAL_GPIO_Init+0x2ec>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b38      	ldr	r3, [pc, #224]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001926:	4a2f      	ldr	r2, [pc, #188]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800192c:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001950:	4a24      	ldr	r2, [pc, #144]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197a:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a4:	4a0f      	ldr	r2, [pc, #60]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f aea2 	bls.w	80016fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a34:	e003      	b.n	8001a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	041a      	lsls	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	619a      	str	r2, [r3, #24]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a5c:	887a      	ldrh	r2, [r7, #2]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	041a      	lsls	r2, r3, #16
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f980 	bl	8000da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40013c00 	.word	0x40013c00

08001ab0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e059      	b.n	8001b76 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d106      	bne.n	8001ae2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f00b fb37 	bl	800d150 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001af0:	d102      	bne.n	8001af8 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 fbf6 	bl	80062ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7c1a      	ldrb	r2, [r3, #16]
 8001b0a:	f88d 2000 	strb.w	r2, [sp]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b12:	f004 fb77 	bl	8006204 <USB_CoreInit>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e026      	b.n	8001b76 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f004 fbee 	bl	8006310 <USB_SetCurrentMode>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e017      	b.n	8001b76 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7c1a      	ldrb	r2, [r3, #16]
 8001b4e:	f88d 2000 	strb.w	r2, [sp]
 8001b52:	3304      	adds	r3, #4
 8001b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b56:	f004 fd91 	bl	800667c <USB_HostInit>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e004      	b.n	8001b76 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b7e:	b590      	push	{r4, r7, lr}
 8001b80:	b08b      	sub	sp, #44	@ 0x2c
 8001b82:	af04      	add	r7, sp, #16
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	4608      	mov	r0, r1
 8001b88:	4611      	mov	r1, r2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	70fb      	strb	r3, [r7, #3]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70bb      	strb	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001b98:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b9a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_HCD_HC_Init+0x2c>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e09d      	b.n	8001ce6 <HAL_HCD_HC_Init+0x168>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3319      	adds	r3, #25
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3314      	adds	r3, #20
 8001bd6:	787a      	ldrb	r2, [r7, #1]
 8001bd8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	3315      	adds	r3, #21
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3326      	adds	r3, #38	@ 0x26
 8001bfe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001c02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	78bb      	ldrb	r3, [r7, #2]
 8001c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c0c:	b2d8      	uxtb	r0, r3
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	3316      	adds	r3, #22
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fbc7 	bl	80023b8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001c2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da0a      	bge.n	8001c48 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3317      	adds	r3, #23
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	e009      	b.n	8001c5c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	3317      	adds	r3, #23
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fe59 	bl	8006918 <USB_GetHostSpeed>
 8001c66:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d10b      	bne.n	8001c88 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d107      	bne.n	8001c88 <HAL_HCD_HC_Init+0x10a>
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d104      	bne.n	8001c88 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2bbc      	cmp	r3, #188	@ 0xbc
 8001c82:	d901      	bls.n	8001c88 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001c84:	23bc      	movs	r3, #188	@ 0xbc
 8001c86:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	3318      	adds	r3, #24
 8001c98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001c9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	3328      	adds	r3, #40	@ 0x28
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	787c      	ldrb	r4, [r7, #1]
 8001cc0:	78ba      	ldrb	r2, [r7, #2]
 8001cc2:	78f9      	ldrb	r1, [r7, #3]
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	f004 fe48 	bl	8006968 <USB_HC_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}

08001cee <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_HCD_HC_Halt+0x1e>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e00f      	b.n	8001d2c <HAL_HCD_HC_Halt+0x3e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f005 f98e 	bl	800703e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	4611      	mov	r1, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	4603      	mov	r3, r0
 8001d44:	70fb      	strb	r3, [r7, #3]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70bb      	strb	r3, [r7, #2]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3317      	adds	r3, #23
 8001d5e:	78ba      	ldrb	r2, [r7, #2]
 8001d60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3326      	adds	r3, #38	@ 0x26
 8001d72:	787a      	ldrb	r2, [r7, #1]
 8001d74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d76:	7c3b      	ldrb	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d114      	bne.n	8001da6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	332a      	adds	r3, #42	@ 0x2a
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3319      	adds	r3, #25
 8001da0:	7f3a      	ldrb	r2, [r7, #28]
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e009      	b.n	8001dba <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	332a      	adds	r3, #42	@ 0x2a
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dba:	787b      	ldrb	r3, [r7, #1]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	f200 8102 	bhi.w	8001fc6 <HAL_HCD_HC_SubmitRequest+0x292>
 8001dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001dd9 	.word	0x08001dd9
 8001dcc:	08001fb1 	.word	0x08001fb1
 8001dd0:	08001e9d 	.word	0x08001e9d
 8001dd4:	08001f27 	.word	0x08001f27
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001dd8:	7c3b      	ldrb	r3, [r7, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	f040 80f5 	bne.w	8001fca <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001de0:	78bb      	ldrb	r3, [r7, #2]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d12d      	bne.n	8001e42 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001de6:	8b3b      	ldrh	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	333d      	adds	r3, #61	@ 0x3d
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	333d      	adds	r3, #61	@ 0x3d
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10a      	bne.n	8001e2c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	332a      	adds	r3, #42	@ 0x2a
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001e2a:	e0ce      	b.n	8001fca <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	332a      	adds	r3, #42	@ 0x2a
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	701a      	strb	r2, [r3, #0]
      break;
 8001e40:	e0c3      	b.n	8001fca <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	331a      	adds	r3, #26
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f040 80b8 	bne.w	8001fca <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	333c      	adds	r3, #60	@ 0x3c
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	332a      	adds	r3, #42	@ 0x2a
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
      break;
 8001e84:	e0a1      	b.n	8001fca <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	332a      	adds	r3, #42	@ 0x2a
 8001e96:	2202      	movs	r2, #2
 8001e98:	701a      	strb	r2, [r3, #0]
      break;
 8001e9a:	e096      	b.n	8001fca <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e9c:	78bb      	ldrb	r3, [r7, #2]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d120      	bne.n	8001ee4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	333d      	adds	r3, #61	@ 0x3d
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	332a      	adds	r3, #42	@ 0x2a
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ecc:	e07e      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	332a      	adds	r3, #42	@ 0x2a
 8001ede:	2202      	movs	r2, #2
 8001ee0:	701a      	strb	r2, [r3, #0]
      break;
 8001ee2:	e073      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	333c      	adds	r3, #60	@ 0x3c
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10a      	bne.n	8001f10 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	332a      	adds	r3, #42	@ 0x2a
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
      break;
 8001f0e:	e05d      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	332a      	adds	r3, #42	@ 0x2a
 8001f20:	2202      	movs	r2, #2
 8001f22:	701a      	strb	r2, [r3, #0]
      break;
 8001f24:	e052      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f26:	78bb      	ldrb	r3, [r7, #2]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d120      	bne.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	333d      	adds	r3, #61	@ 0x3d
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	332a      	adds	r3, #42	@ 0x2a
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f56:	e039      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	332a      	adds	r3, #42	@ 0x2a
 8001f68:	2202      	movs	r2, #2
 8001f6a:	701a      	strb	r2, [r3, #0]
      break;
 8001f6c:	e02e      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	333c      	adds	r3, #60	@ 0x3c
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	332a      	adds	r3, #42	@ 0x2a
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
      break;
 8001f98:	e018      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	332a      	adds	r3, #42	@ 0x2a
 8001faa:	2202      	movs	r2, #2
 8001fac:	701a      	strb	r2, [r3, #0]
      break;
 8001fae:	e00d      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	332a      	adds	r3, #42	@ 0x2a
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
      break;
 8001fc4:	e002      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e000      	b.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001fca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	332c      	adds	r3, #44	@ 0x2c
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	8b39      	ldrh	r1, [r7, #24]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4403      	add	r3, r0
 8001ff0:	3334      	adds	r3, #52	@ 0x34
 8001ff2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	334c      	adds	r3, #76	@ 0x4c
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3338      	adds	r3, #56	@ 0x38
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3315      	adds	r3, #21
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	334d      	adds	r3, #77	@ 0x4d
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	3310      	adds	r3, #16
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	1d19      	adds	r1, r3, #4
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	799b      	ldrb	r3, [r3, #6]
 800205e:	461a      	mov	r2, r3
 8002060:	f004 fd98 	bl	8006b94 <USB_HC_StartXfer>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop

08002070 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f004 fab8 	bl	80065fc <USB_GetMode>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	f040 80fb 	bne.w	800228a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f004 fa7b 	bl	8006594 <USB_ReadInterrupts>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80f1 	beq.w	8002288 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fa72 	bl	8006594 <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020ba:	d104      	bne.n	80020c6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80020c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fa62 	bl	8006594 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020da:	d104      	bne.n	80020e6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 fa52 	bl	8006594 <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020fa:	d104      	bne.n	8002106 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002104:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fa42 	bl	8006594 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d103      	bne.n	8002122 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2202      	movs	r2, #2
 8002120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fa34 	bl	8006594 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002136:	d120      	bne.n	800217a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002140:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d113      	bne.n	800217a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002152:	2110      	movs	r1, #16
 8002154:	6938      	ldr	r0, [r7, #16]
 8002156:	f004 f927 	bl	80063a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800215a:	6938      	ldr	r0, [r7, #16]
 800215c:	f004 f956 	bl	800640c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7a5b      	ldrb	r3, [r3, #9]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d105      	bne.n	8002174 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fb32 	bl	80067d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f00b f85b 	bl	800d230 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fa08 	bl	8006594 <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800218a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800218e:	d102      	bne.n	8002196 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f001 fd4d 	bl	8003c30 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f004 f9fa 	bl	8006594 <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d106      	bne.n	80021b8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f00b f824 	bl	800d1f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2208      	movs	r2, #8
 80021b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 f9e9 	bl	8006594 <USB_ReadInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021cc:	d139      	bne.n	8002242 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f004 ff22 	bl	800701c <USB_HC_ReadInterrupt>
 80021d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e025      	b.n	800222c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d018      	beq.n	8002226 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800220a:	d106      	bne.n	800221a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f905 	bl	8002422 <HCD_HC_IN_IRQHandler>
 8002218:	e005      	b.n	8002226 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 ff67 	bl	80030f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	795b      	ldrb	r3, [r3, #5]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4293      	cmp	r3, r2
 8002236:	d3d3      	bcc.n	80021e0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002240:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f004 f9a4 	bl	8006594 <USB_ReadInterrupts>
 800224c:	4603      	mov	r3, r0
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b10      	cmp	r3, #16
 8002254:	d101      	bne.n	800225a <HAL_HCD_IRQHandler+0x1ea>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_HCD_IRQHandler+0x1ec>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d014      	beq.n	800228a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0210 	bic.w	r2, r2, #16
 800226e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f001 fbfe 	bl	8003a72 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0210 	orr.w	r2, r2, #16
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	e000      	b.n	800228a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002288:	bf00      	nop
    }
  }
}
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_HCD_Start+0x16>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e013      	b.n	80022ce <HAL_HCD_Start+0x3e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f004 faf6 	bl	80068a6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 f804 	bl	80062cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_HCD_Stop+0x16>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e00d      	b.n	8002308 <HAL_HCD_Stop+0x32>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 ffc0 	bl	800727e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f004 fa98 	bl	8006852 <USB_ResetPort>
 8002322:	4603      	mov	r3, r0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	334c      	adds	r3, #76	@ 0x4c
 8002348:	781b      	ldrb	r3, [r3, #0]
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3338      	adds	r3, #56	@ 0x38
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f004 fada 	bl	8006946 <USB_GetCurrentFrame>
 8002392:	4603      	mov	r3, r0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f004 fab5 	bl	8006918 <USB_GetHostSpeed>
 80023ae:	4603      	mov	r3, r0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	331a      	adds	r3, #26
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	331b      	adds	r3, #27
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3325      	adds	r3, #37	@ 0x25
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3324      	adds	r3, #36	@ 0x24
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f004 f8ba 	bl	80065ba <USB_ReadChInterrupts>
 8002446:	4603      	mov	r3, r0
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d11a      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2304      	movs	r3, #4
 8002460:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	334d      	adds	r3, #77	@ 0x4d
 8002472:	2207      	movs	r2, #7
 8002474:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f004 fddd 	bl	800703e <USB_HC_Halt>
 8002484:	e09e      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f004 f893 	bl	80065ba <USB_ReadChInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800249e:	d11b      	bne.n	80024d8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	334d      	adds	r3, #77	@ 0x4d
 80024c4:	2208      	movs	r2, #8
 80024c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fdb4 	bl	800703e <USB_HC_Halt>
 80024d6:	e075      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 f86a 	bl	80065ba <USB_ReadChInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d11a      	bne.n	8002526 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fc:	461a      	mov	r2, r3
 80024fe:	2308      	movs	r3, #8
 8002500:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	334d      	adds	r3, #77	@ 0x4d
 8002512:	2206      	movs	r2, #6
 8002514:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f004 fd8d 	bl	800703e <USB_HC_Halt>
 8002524:	e04e      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f004 f843 	bl	80065ba <USB_ReadChInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253e:	d11b      	bne.n	8002578 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800254c:	461a      	mov	r2, r3
 800254e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002552:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	334d      	adds	r3, #77	@ 0x4d
 8002564:	2209      	movs	r2, #9
 8002566:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f004 fd64 	bl	800703e <USB_HC_Halt>
 8002576:	e025      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f004 f81a 	bl	80065ba <USB_ReadChInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258c:	2b80      	cmp	r3, #128	@ 0x80
 800258e:	d119      	bne.n	80025c4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259c:	461a      	mov	r2, r3
 800259e:	2380      	movs	r3, #128	@ 0x80
 80025a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	334d      	adds	r3, #77	@ 0x4d
 80025b2:	2207      	movs	r2, #7
 80025b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 fd3d 	bl	800703e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fff4 	bl	80065ba <USB_ReadChInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025dc:	d112      	bne.n	8002604 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 fd29 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025fe:	6093      	str	r3, [r2, #8]
 8002600:	f000 bd75 	b.w	80030ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f003 ffd4 	bl	80065ba <USB_ReadChInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 8128 	bne.w	800286e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	2320      	movs	r3, #32
 800262e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	331b      	adds	r3, #27
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d119      	bne.n	800267a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	331b      	adds	r3, #27
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	0151      	lsls	r1, r2, #5
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	440a      	add	r2, r1
 8002670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002678:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	799b      	ldrb	r3, [r3, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01b      	beq.n	80026ba <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3330      	adds	r3, #48	@ 0x30
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	1ac9      	subs	r1, r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4403      	add	r3, r0
 80026b6:	3338      	adds	r3, #56	@ 0x38
 80026b8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	334d      	adds	r3, #77	@ 0x4d
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3344      	adds	r3, #68	@ 0x44
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	2301      	movs	r3, #1
 80026f2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3326      	adds	r3, #38	@ 0x26
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3326      	adds	r3, #38	@ 0x26
 800271a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800271c:	2b02      	cmp	r3, #2
 800271e:	d110      	bne.n	8002742 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f004 fc88 	bl	800703e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	2310      	movs	r3, #16
 800273e:	6093      	str	r3, [r2, #8]
 8002740:	e03d      	b.n	80027be <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3326      	adds	r3, #38	@ 0x26
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d00a      	beq.n	800276e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3326      	adds	r3, #38	@ 0x26
 8002768:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800276a:	2b01      	cmp	r3, #1
 800276c:	d127      	bne.n	80027be <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	0151      	lsls	r1, r2, #5
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	440a      	add	r2, r1
 8002784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002788:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800278c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	334c      	adds	r3, #76	@ 0x4c
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	334c      	adds	r3, #76	@ 0x4c
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f00a fd47 	bl	800d24c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	799b      	ldrb	r3, [r3, #6]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d13b      	bne.n	800283e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3338      	adds	r3, #56	@ 0x38
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4403      	add	r3, r0
 80027e6:	3328      	adds	r3, #40	@ 0x28
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	440b      	add	r3, r1
 80027ec:	1e59      	subs	r1, r3, #1
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4403      	add	r3, r0
 80027fc:	3328      	adds	r3, #40	@ 0x28
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	fbb1 f3f3 	udiv	r3, r1, r3
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8470 	beq.w	80030ee <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	333c      	adds	r3, #60	@ 0x3c
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2d8      	uxtb	r0, r3
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	333c      	adds	r3, #60	@ 0x3c
 8002836:	4602      	mov	r2, r0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	f000 bc58 	b.w	80030ee <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	333c      	adds	r3, #60	@ 0x3c
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	f083 0301 	eor.w	r3, r3, #1
 8002856:	b2d8      	uxtb	r0, r3
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	333c      	adds	r3, #60	@ 0x3c
 8002866:	4602      	mov	r2, r0
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	f000 bc40 	b.w	80030ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fe9f 	bl	80065ba <USB_ReadChInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b20      	cmp	r3, #32
 8002884:	d131      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002892:	461a      	mov	r2, r3
 8002894:	2320      	movs	r3, #32
 8002896:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	331a      	adds	r3, #26
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 841f 	bne.w	80030ee <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	331b      	adds	r3, #27
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	334d      	adds	r3, #77	@ 0x4d
 80028d4:	2203      	movs	r2, #3
 80028d6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fbac 	bl	800703e <USB_HC_Halt>
 80028e6:	f000 bc02 	b.w	80030ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 fe61 	bl	80065ba <USB_ReadChInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	f040 8305 	bne.w	8002f0e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2302      	movs	r3, #2
 8002914:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	334d      	adds	r3, #77	@ 0x4d
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d114      	bne.n	8002956 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	334d      	adds	r3, #77	@ 0x4d
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	334c      	adds	r3, #76	@ 0x4c
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e2cc      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	334d      	adds	r3, #77	@ 0x4d
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b06      	cmp	r3, #6
 800296a:	d114      	bne.n	8002996 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	334c      	adds	r3, #76	@ 0x4c
 8002990:	2205      	movs	r2, #5
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	e2ac      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	334d      	adds	r3, #77	@ 0x4d
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b07      	cmp	r3, #7
 80029aa:	d00b      	beq.n	80029c4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	334d      	adds	r3, #77	@ 0x4d
 80029bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029be:	2b09      	cmp	r3, #9
 80029c0:	f040 80a6 	bne.w	8002b10 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	334d      	adds	r3, #77	@ 0x4d
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3344      	adds	r3, #68	@ 0x44
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4403      	add	r3, r0
 80029f8:	3344      	adds	r3, #68	@ 0x44
 80029fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3344      	adds	r3, #68	@ 0x44
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d943      	bls.n	8002a9a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3344      	adds	r3, #68	@ 0x44
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	331a      	adds	r3, #26
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d123      	bne.n	8002a84 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	331b      	adds	r3, #27
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	331c      	adds	r3, #28
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a82:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	334c      	adds	r3, #76	@ 0x4c
 8002a94:	2204      	movs	r2, #4
 8002a96:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a98:	e229      	b.n	8002eee <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	334c      	adds	r3, #76	@ 0x4c
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3326      	adds	r3, #38	@ 0x26
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3326      	adds	r3, #38	@ 0x26
 8002ad4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	f040 8209 	bne.w	8002eee <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002af2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002afa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b0e:	e1ee      	b.n	8002eee <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	334d      	adds	r3, #77	@ 0x4d
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	f040 80c8 	bne.w	8002cb8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334d      	adds	r3, #77	@ 0x4d
 8002b38:	2202      	movs	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	331b      	adds	r3, #27
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	f040 81ce 	bne.w	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3326      	adds	r3, #38	@ 0x26
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d16b      	bne.n	8002c42 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3348      	adds	r3, #72	@ 0x48
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c59      	adds	r1, r3, #1
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4403      	add	r3, r0
 8002b8a:	3348      	adds	r3, #72	@ 0x48
 8002b8c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3348      	adds	r3, #72	@ 0x48
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d943      	bls.n	8002c2c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3348      	adds	r3, #72	@ 0x48
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	331b      	adds	r3, #27
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3344      	adds	r3, #68	@ 0x44
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d809      	bhi.n	8002bf6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	331c      	adds	r3, #28
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	0151      	lsls	r1, r2, #5
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c14:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	334c      	adds	r3, #76	@ 0x4c
 8002c26:	2204      	movs	r2, #4
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e014      	b.n	8002c56 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	334c      	adds	r3, #76	@ 0x4c
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e009      	b.n	8002c56 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	334c      	adds	r3, #76	@ 0x4c
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3326      	adds	r3, #38	@ 0x26
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3326      	adds	r3, #38	@ 0x26
 8002c7c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	f040 8136 	bne.w	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c9a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ca2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e11b      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	334d      	adds	r3, #77	@ 0x4d
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	f040 8081 	bne.w	8002dd2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	334d      	adds	r3, #77	@ 0x4d
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	331b      	adds	r3, #27
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 80fa 	bne.w	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	334c      	adds	r3, #76	@ 0x4c
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	0151      	lsls	r1, r2, #5
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	440a      	add	r2, r1
 8002d26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	0151      	lsls	r1, r2, #5
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	440a      	add	r2, r1
 8002d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d4e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	0151      	lsls	r1, r2, #5
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	440a      	add	r2, r1
 8002d66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d6a:	f023 0320 	bic.w	r3, r3, #32
 8002d6e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3326      	adds	r3, #38	@ 0x26
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3326      	adds	r3, #38	@ 0x26
 8002d96:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	f040 80a9 	bne.w	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002db4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dbc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	e08e      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	334d      	adds	r3, #77	@ 0x4d
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d143      	bne.n	8002e70 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	334d      	adds	r3, #77	@ 0x4d
 8002df8:	2202      	movs	r2, #2
 8002dfa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334c      	adds	r3, #76	@ 0x4c
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3326      	adds	r3, #38	@ 0x26
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3326      	adds	r3, #38	@ 0x26
 8002e36:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d159      	bne.n	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e52:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e5a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e03f      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	334d      	adds	r3, #77	@ 0x4d
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d126      	bne.n	8002ed4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	334d      	adds	r3, #77	@ 0x4d
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3344      	adds	r3, #68	@ 0x44
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1c59      	adds	r1, r3, #1
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4403      	add	r3, r0
 8002eba:	3344      	adds	r3, #68	@ 0x44
 8002ebc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	334c      	adds	r3, #76	@ 0x4c
 8002ece:	2204      	movs	r2, #4
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e00d      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	334d      	adds	r3, #77	@ 0x4d
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	f000 8100 	beq.w	80030ec <HCD_HC_IN_IRQHandler+0xcca>
 8002eec:	e000      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002eee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	334c      	adds	r3, #76	@ 0x4c
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f00a f9a0 	bl	800d24c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f0c:	e0ef      	b.n	80030ee <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fb4f 	bl	80065ba <USB_ReadChInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f22:	2b40      	cmp	r3, #64	@ 0x40
 8002f24:	d12f      	bne.n	8002f86 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	2340      	movs	r3, #64	@ 0x40
 8002f36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	334d      	adds	r3, #77	@ 0x4d
 8002f48:	2205      	movs	r2, #5
 8002f4a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	331a      	adds	r3, #26
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3344      	adds	r3, #68	@ 0x44
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f004 f85d 	bl	800703e <USB_HC_Halt>
 8002f84:	e0b3      	b.n	80030ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fb13 	bl	80065ba <USB_ReadChInterrupts>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	f040 80a7 	bne.w	80030ee <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3326      	adds	r3, #38	@ 0x26
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d11b      	bne.n	8002fee <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3344      	adds	r3, #68	@ 0x44
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334d      	adds	r3, #77	@ 0x4d
 8002fda:	2204      	movs	r2, #4
 8002fdc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 f829 	bl	800703e <USB_HC_Halt>
 8002fec:	e03f      	b.n	800306e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3326      	adds	r3, #38	@ 0x26
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3326      	adds	r3, #38	@ 0x26
 8003014:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003016:	2b02      	cmp	r3, #2
 8003018:	d129      	bne.n	800306e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	3344      	adds	r3, #68	@ 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	799b      	ldrb	r3, [r3, #6]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HCD_HC_IN_IRQHandler+0xc2a>
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	331b      	adds	r3, #27
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d110      	bne.n	800306e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	334d      	adds	r3, #77	@ 0x4d
 800305c:	2204      	movs	r2, #4
 800305e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f003 ffe8 	bl	800703e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	331b      	adds	r3, #27
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d129      	bne.n	80030d8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	331b      	adds	r3, #27
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	0151      	lsls	r1, r2, #5
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	440a      	add	r2, r1
 80030ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	0151      	lsls	r1, r2, #5
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	440a      	add	r2, r1
 80030ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030d2:	f043 0320 	orr.w	r3, r3, #32
 80030d6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	2310      	movs	r3, #16
 80030e8:	6093      	str	r3, [r2, #8]
 80030ea:	e000      	b.n	80030ee <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80030ec:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fa51 	bl	80065ba <USB_ReadChInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d11b      	bne.n	800315a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312e:	461a      	mov	r2, r3
 8003130:	2304      	movs	r3, #4
 8003132:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334d      	adds	r3, #77	@ 0x4d
 8003144:	2207      	movs	r2, #7
 8003146:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f003 ff74 	bl	800703e <USB_HC_Halt>
 8003156:	f000 bc89 	b.w	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f003 fa29 	bl	80065ba <USB_ReadChInterrupts>
 8003168:	4603      	mov	r3, r0
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b20      	cmp	r3, #32
 8003170:	f040 8082 	bne.w	8003278 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003180:	461a      	mov	r2, r3
 8003182:	2320      	movs	r3, #32
 8003184:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3319      	adds	r3, #25
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d124      	bne.n	80031e6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3319      	adds	r3, #25
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	334c      	adds	r3, #76	@ 0x4c
 80031c0:	2202      	movs	r2, #2
 80031c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	334d      	adds	r3, #77	@ 0x4d
 80031d4:	2203      	movs	r2, #3
 80031d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 ff2c 	bl	800703e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	331a      	adds	r3, #26
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f040 8437 	bne.w	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	331b      	adds	r3, #27
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 842b 	bne.w	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3326      	adds	r3, #38	@ 0x26
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d009      	beq.n	8003240 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	331b      	adds	r3, #27
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	2203      	movs	r2, #3
 8003252:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f003 feee 	bl	800703e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	3344      	adds	r3, #68	@ 0x44
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e3f9      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f003 f99a 	bl	80065ba <USB_ReadChInterrupts>
 8003286:	4603      	mov	r3, r0
 8003288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003290:	d111      	bne.n	80032b6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329e:	461a      	mov	r2, r3
 80032a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 fec5 	bl	800703e <USB_HC_Halt>
 80032b4:	e3da      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 f97b 	bl	80065ba <USB_ReadChInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d168      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3344      	adds	r3, #68	@ 0x44
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f003 f965 	bl	80065ba <USB_ReadChInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f6:	2b40      	cmp	r3, #64	@ 0x40
 80032f8:	d112      	bne.n	8003320 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3319      	adds	r3, #25
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331a:	461a      	mov	r2, r3
 800331c:	2340      	movs	r3, #64	@ 0x40
 800331e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	331b      	adds	r3, #27
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d019      	beq.n	800336a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	331b      	adds	r3, #27
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	440a      	add	r2, r1
 8003360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003368:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003376:	461a      	mov	r2, r3
 8003378:	2301      	movs	r3, #1
 800337a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	334d      	adds	r3, #77	@ 0x4d
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fe50 	bl	800703e <USB_HC_Halt>
 800339e:	e365      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 f906 	bl	80065ba <USB_ReadChInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b4:	2b40      	cmp	r3, #64	@ 0x40
 80033b6:	d139      	bne.n	800342c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	334d      	adds	r3, #77	@ 0x4d
 80033c8:	2205      	movs	r2, #5
 80033ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	331a      	adds	r3, #26
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3319      	adds	r3, #25
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	3344      	adds	r3, #68	@ 0x44
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f003 fe13 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003424:	461a      	mov	r2, r3
 8003426:	2340      	movs	r3, #64	@ 0x40
 8003428:	6093      	str	r3, [r2, #8]
 800342a:	e31f      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f003 f8c0 	bl	80065ba <USB_ReadChInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b08      	cmp	r3, #8
 8003442:	d11a      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	2308      	movs	r3, #8
 8003454:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	334d      	adds	r3, #77	@ 0x4d
 8003466:	2206      	movs	r2, #6
 8003468:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f003 fde3 	bl	800703e <USB_HC_Halt>
 8003478:	e2f8      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f003 f899 	bl	80065ba <USB_ReadChInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b10      	cmp	r3, #16
 8003490:	d144      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3344      	adds	r3, #68	@ 0x44
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	334d      	adds	r3, #77	@ 0x4d
 80034b6:	2204      	movs	r2, #4
 80034b8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3319      	adds	r3, #25
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d114      	bne.n	80034fa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3318      	adds	r3, #24
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3319      	adds	r3, #25
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fd9b 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4413      	add	r3, r2
 8003510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003514:	461a      	mov	r2, r3
 8003516:	2310      	movs	r3, #16
 8003518:	6093      	str	r3, [r2, #8]
 800351a:	e2a7      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f003 f848 	bl	80065ba <USB_ReadChInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003530:	2b80      	cmp	r3, #128	@ 0x80
 8003532:	f040 8083 	bne.w	800363c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	799b      	ldrb	r3, [r3, #6]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d111      	bne.n	8003562 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	334d      	adds	r3, #77	@ 0x4d
 800354e:	2207      	movs	r2, #7
 8003550:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f003 fd6f 	bl	800703e <USB_HC_Halt>
 8003560:	e062      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3344      	adds	r3, #68	@ 0x44
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	1c59      	adds	r1, r3, #1
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4403      	add	r3, r0
 8003582:	3344      	adds	r3, #68	@ 0x44
 8003584:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	3344      	adds	r3, #68	@ 0x44
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d922      	bls.n	80035e2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3344      	adds	r3, #68	@ 0x44
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	334c      	adds	r3, #76	@ 0x4c
 80035c0:	2204      	movs	r2, #4
 80035c2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334c      	adds	r3, #76	@ 0x4c
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f009 fe36 	bl	800d24c <HAL_HCD_HC_NotifyURBChange_Callback>
 80035e0:	e022      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	334c      	adds	r3, #76	@ 0x4c
 80035f2:	2202      	movs	r2, #2
 80035f4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800360c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003614:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	6093      	str	r3, [r2, #8]
 800363a:	e217      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f002 ffb8 	bl	80065ba <USB_ReadChInterrupts>
 800364a:	4603      	mov	r3, r0
 800364c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003654:	d11b      	bne.n	800368e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	334d      	adds	r3, #77	@ 0x4d
 8003666:	2209      	movs	r2, #9
 8003668:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f003 fce3 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800368a:	6093      	str	r3, [r2, #8]
 800368c:	e1ee      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f002 ff8f 	bl	80065ba <USB_ReadChInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	f040 81df 	bne.w	8003a66 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b4:	461a      	mov	r2, r3
 80036b6:	2302      	movs	r3, #2
 80036b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	334d      	adds	r3, #77	@ 0x4d
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	f040 8093 	bne.w	80037f8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	334d      	adds	r3, #77	@ 0x4d
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	334c      	adds	r3, #76	@ 0x4c
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3326      	adds	r3, #38	@ 0x26
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d00b      	beq.n	8003728 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	3326      	adds	r3, #38	@ 0x26
 8003720:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003722:	2b03      	cmp	r3, #3
 8003724:	f040 8190 	bne.w	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	799b      	ldrb	r3, [r3, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d115      	bne.n	800375c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	333d      	adds	r3, #61	@ 0x3d
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2d8      	uxtb	r0, r3
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	333d      	adds	r3, #61	@ 0x3d
 8003758:	4602      	mov	r2, r0
 800375a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	799b      	ldrb	r3, [r3, #6]
 8003760:	2b01      	cmp	r3, #1
 8003762:	f040 8171 	bne.w	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	3334      	adds	r3, #52	@ 0x34
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8165 	beq.w	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3334      	adds	r3, #52	@ 0x34
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4403      	add	r3, r0
 800379e:	3328      	adds	r3, #40	@ 0x28
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	440b      	add	r3, r1
 80037a4:	1e59      	subs	r1, r3, #1
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4403      	add	r3, r0
 80037b4:	3328      	adds	r3, #40	@ 0x28
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037bc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 813f 	beq.w	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	333d      	adds	r3, #61	@ 0x3d
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	f083 0301 	eor.w	r3, r3, #1
 80037e2:	b2d8      	uxtb	r0, r3
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	333d      	adds	r3, #61	@ 0x3d
 80037f2:	4602      	mov	r2, r0
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e127      	b.n	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	334d      	adds	r3, #77	@ 0x4d
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b03      	cmp	r3, #3
 800380c:	d120      	bne.n	8003850 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334d      	adds	r3, #77	@ 0x4d
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	331b      	adds	r3, #27
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 8107 	bne.w	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334c      	adds	r3, #76	@ 0x4c
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e0fb      	b.n	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	334d      	adds	r3, #77	@ 0x4d
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b04      	cmp	r3, #4
 8003864:	d13a      	bne.n	80038dc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	334d      	adds	r3, #77	@ 0x4d
 8003876:	2202      	movs	r2, #2
 8003878:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	334c      	adds	r3, #76	@ 0x4c
 800388a:	2202      	movs	r2, #2
 800388c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	331b      	adds	r3, #27
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	f040 80d1 	bne.w	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	331b      	adds	r3, #27
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	0151      	lsls	r1, r2, #5
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	440a      	add	r2, r1
 80038d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d8:	6053      	str	r3, [r2, #4]
 80038da:	e0b5      	b.n	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	334d      	adds	r3, #77	@ 0x4d
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d114      	bne.n	800391c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	334d      	adds	r3, #77	@ 0x4d
 8003902:	2202      	movs	r2, #2
 8003904:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	334c      	adds	r3, #76	@ 0x4c
 8003916:	2202      	movs	r2, #2
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	e095      	b.n	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	334d      	adds	r3, #77	@ 0x4d
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b06      	cmp	r3, #6
 8003930:	d114      	bne.n	800395c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	334d      	adds	r3, #77	@ 0x4d
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	334c      	adds	r3, #76	@ 0x4c
 8003956:	2205      	movs	r2, #5
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e075      	b.n	8003a48 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	334d      	adds	r3, #77	@ 0x4d
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b07      	cmp	r3, #7
 8003970:	d00a      	beq.n	8003988 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	334d      	adds	r3, #77	@ 0x4d
 8003982:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003984:	2b09      	cmp	r3, #9
 8003986:	d170      	bne.n	8003a6a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	334d      	adds	r3, #77	@ 0x4d
 8003998:	2202      	movs	r2, #2
 800399a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3344      	adds	r3, #68	@ 0x44
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4403      	add	r3, r0
 80039bc:	3344      	adds	r3, #68	@ 0x44
 80039be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	3344      	adds	r3, #68	@ 0x44
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d914      	bls.n	8003a00 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	3344      	adds	r3, #68	@ 0x44
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	334c      	adds	r3, #76	@ 0x4c
 80039fa:	2204      	movs	r2, #4
 80039fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039fe:	e022      	b.n	8003a46 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	334c      	adds	r3, #76	@ 0x4c
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a2a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a32:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a40:	461a      	mov	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a46:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	334c      	adds	r3, #76	@ 0x4c
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f009 fbf4 	bl	800d24c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a64:	e002      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003a6a:	bf00      	nop
  }
}
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b08a      	sub	sp, #40	@ 0x28
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	0c5b      	lsrs	r3, r3, #17
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d004      	beq.n	8003ab8 <HCD_RXQLVL_IRQHandler+0x46>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	f000 80b6 	beq.w	8003c22 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ab6:	e0b7      	b.n	8003c28 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80b3 	beq.w	8003c26 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	332c      	adds	r3, #44	@ 0x2c
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a7 	beq.w	8003c26 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3338      	adds	r3, #56	@ 0x38
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	18d1      	adds	r1, r2, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4403      	add	r3, r0
 8003afc:	3334      	adds	r3, #52	@ 0x34
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4299      	cmp	r1, r3
 8003b02:	f200 8083 	bhi.w	8003c0c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	332c      	adds	r3, #44	@ 0x2c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	f002 fcdf 	bl	80064e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	332c      	adds	r3, #44	@ 0x2c
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	18d1      	adds	r1, r2, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4403      	add	r3, r0
 8003b4a:	332c      	adds	r3, #44	@ 0x2c
 8003b4c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3338      	adds	r3, #56	@ 0x38
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	18d1      	adds	r1, r2, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4403      	add	r3, r0
 8003b72:	3338      	adds	r3, #56	@ 0x38
 8003b74:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	0cdb      	lsrs	r3, r3, #19
 8003b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b8a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	3328      	adds	r3, #40	@ 0x28
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d13f      	bne.n	8003c26 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d03c      	beq.n	8003c26 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bc2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bca:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	333c      	adds	r3, #60	@ 0x3c
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f083 0301 	eor.w	r3, r3, #1
 8003bf4:	b2d8      	uxtb	r0, r3
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	333c      	adds	r3, #60	@ 0x3c
 8003c06:	4602      	mov	r2, r0
 8003c08:	701a      	strb	r2, [r3, #0]
      break;
 8003c0a:	e00c      	b.n	8003c26 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	334c      	adds	r3, #76	@ 0x4c
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	701a      	strb	r2, [r3, #0]
      break;
 8003c20:	e001      	b.n	8003c26 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003c26:	bf00      	nop
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3728      	adds	r7, #40	@ 0x28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003c5c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d10b      	bne.n	8003c80 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d102      	bne.n	8003c78 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f009 face 	bl	800d214 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f043 0302 	orr.w	r3, r3, #2
 8003c7e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d132      	bne.n	8003cf0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f043 0308 	orr.w	r3, r3, #8
 8003c90:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d126      	bne.n	8003cea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7a5b      	ldrb	r3, [r3, #9]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d113      	bne.n	8003ccc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cae:	d106      	bne.n	8003cbe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f002 fd8e 	bl	80067d8 <USB_InitFSLSPClkSel>
 8003cbc:	e011      	b.n	8003ce2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f002 fd87 	bl	80067d8 <USB_InitFSLSPClkSel>
 8003cca:	e00a      	b.n	8003ce2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	79db      	ldrb	r3, [r3, #7]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d106      	bne.n	8003ce2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003ce0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f009 fac0 	bl	800d268 <HAL_HCD_PortEnabled_Callback>
 8003ce8:	e002      	b.n	8003cf0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f009 faca 	bl	800d284 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d103      	bne.n	8003d02 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f043 0320 	orr.w	r3, r3, #32
 8003d00:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6013      	str	r3, [r2, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e267      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d075      	beq.n	8003e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d36:	4b88      	ldr	r3, [pc, #544]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b85      	ldr	r3, [pc, #532]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d112      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b82      	ldr	r3, [pc, #520]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x108>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d157      	bne.n	8003e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e242      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x74>
 8003d7e:	4b76      	ldr	r3, [pc, #472]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a75      	ldr	r2, [pc, #468]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x98>
 8003d96:	4b70      	ldr	r3, [pc, #448]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6f      	ldr	r2, [pc, #444]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6c      	ldr	r2, [pc, #432]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003db0:	4b69      	ldr	r3, [pc, #420]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a68      	ldr	r2, [pc, #416]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b66      	ldr	r3, [pc, #408]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a65      	ldr	r2, [pc, #404]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fab2 	bl	8001338 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd faae 	bl	8001338 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e207      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b5b      	ldr	r3, [pc, #364]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xc0>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd fa9e 	bl	8001338 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd fa9a 	bl	8001338 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	@ 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1f3      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b51      	ldr	r3, [pc, #324]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0xe8>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d063      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b47      	ldr	r3, [pc, #284]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e46:	4b44      	ldr	r3, [pc, #272]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b41      	ldr	r3, [pc, #260]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1c7      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4937      	ldr	r1, [pc, #220]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e03a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b34      	ldr	r3, [pc, #208]	@ (8003f5c <HAL_RCC_OscConfig+0x244>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fa53 	bl	8001338 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd fa4f 	bl	8001338 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1a8      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b28      	ldr	r3, [pc, #160]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4925      	ldr	r1, [pc, #148]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b24      	ldr	r3, [pc, #144]	@ (8003f5c <HAL_RCC_OscConfig+0x244>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd fa32 	bl	8001338 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd fa2e 	bl	8001338 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e187      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d036      	beq.n	8003f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <HAL_RCC_OscConfig+0x248>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd fa12 	bl	8001338 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fd fa0e 	bl	8001338 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e167      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x200>
 8003f36:	e01b      	b.n	8003f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f38:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <HAL_RCC_OscConfig+0x248>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd f9fb 	bl	8001338 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	e00e      	b.n	8003f64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fd f9f7 	bl	8001338 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d907      	bls.n	8003f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e150      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	42470000 	.word	0x42470000
 8003f60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	4b88      	ldr	r3, [pc, #544]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ea      	bne.n	8003f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8097 	beq.w	80040ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f82:	4b81      	ldr	r3, [pc, #516]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	4b7d      	ldr	r3, [pc, #500]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	4a7c      	ldr	r2, [pc, #496]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	4b77      	ldr	r3, [pc, #476]	@ (800418c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d118      	bne.n	8003fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fba:	4b74      	ldr	r3, [pc, #464]	@ (800418c <HAL_RCC_OscConfig+0x474>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a73      	ldr	r2, [pc, #460]	@ (800418c <HAL_RCC_OscConfig+0x474>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd f9b7 	bl	8001338 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fce:	f7fd f9b3 	bl	8001338 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e10c      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800418c <HAL_RCC_OscConfig+0x474>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x2ea>
 8003ff4:	4b64      	ldr	r3, [pc, #400]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff8:	4a63      	ldr	r2, [pc, #396]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004000:	e01c      	b.n	800403c <HAL_RCC_OscConfig+0x324>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b05      	cmp	r3, #5
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x30c>
 800400a:	4b5f      	ldr	r3, [pc, #380]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	4a5e      	ldr	r2, [pc, #376]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004010:	f043 0304 	orr.w	r3, r3, #4
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
 8004016:	4b5c      	ldr	r3, [pc, #368]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	4a5b      	ldr	r2, [pc, #364]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
 8004022:	e00b      	b.n	800403c <HAL_RCC_OscConfig+0x324>
 8004024:	4b58      	ldr	r3, [pc, #352]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004028:	4a57      	ldr	r2, [pc, #348]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004030:	4b55      	ldr	r3, [pc, #340]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	4a54      	ldr	r2, [pc, #336]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004036:	f023 0304 	bic.w	r3, r3, #4
 800403a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fd f978 	bl	8001338 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fd f974 	bl	8001338 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0cb      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	4b49      	ldr	r3, [pc, #292]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0ee      	beq.n	800404c <HAL_RCC_OscConfig+0x334>
 800406e:	e014      	b.n	800409a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004070:	f7fd f962 	bl	8001338 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd f95e 	bl	8001338 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0b5      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408e:	4b3e      	ldr	r3, [pc, #248]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ee      	bne.n	8004078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800409a:	7dfb      	ldrb	r3, [r7, #23]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a0:	4b39      	ldr	r3, [pc, #228]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	4a38      	ldr	r2, [pc, #224]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 80040a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a1 	beq.w	80041f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040b6:	4b34      	ldr	r3, [pc, #208]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d05c      	beq.n	800417c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d141      	bne.n	800414e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b31      	ldr	r3, [pc, #196]	@ (8004190 <HAL_RCC_OscConfig+0x478>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fd f932 	bl	8001338 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd f92e 	bl	8001338 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e087      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b27      	ldr	r3, [pc, #156]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	491b      	ldr	r1, [pc, #108]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004120:	4b1b      	ldr	r3, [pc, #108]	@ (8004190 <HAL_RCC_OscConfig+0x478>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fd f907 	bl	8001338 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412e:	f7fd f903 	bl	8001338 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e05c      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004140:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x416>
 800414c:	e054      	b.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <HAL_RCC_OscConfig+0x478>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd f8f0 	bl	8001338 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd f8ec 	bl	8001338 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e045      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_RCC_OscConfig+0x470>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x444>
 800417a:	e03d      	b.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e038      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000
 8004190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004194:	4b1b      	ldr	r3, [pc, #108]	@ (8004204 <HAL_RCC_OscConfig+0x4ec>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d028      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d121      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d11a      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d111      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0cc      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b68      	ldr	r3, [pc, #416]	@ (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d90c      	bls.n	8004244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b65      	ldr	r3, [pc, #404]	@ (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b63      	ldr	r3, [pc, #396]	@ (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0b8      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800425c:	4b59      	ldr	r3, [pc, #356]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a58      	ldr	r2, [pc, #352]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004266:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004274:	4b53      	ldr	r3, [pc, #332]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a52      	ldr	r2, [pc, #328]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800427e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b50      	ldr	r3, [pc, #320]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	494d      	ldr	r1, [pc, #308]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d044      	beq.n	8004328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d119      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	4b3f      	ldr	r3, [pc, #252]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d6:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e067      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b37      	ldr	r3, [pc, #220]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4934      	ldr	r1, [pc, #208]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fd f81e 	bl	8001338 <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fd f81a 	bl	8001338 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e04f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b2b      	ldr	r3, [pc, #172]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b25      	ldr	r3, [pc, #148]	@ (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d20c      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b22      	ldr	r3, [pc, #136]	@ (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b20      	ldr	r3, [pc, #128]	@ (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e032      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b19      	ldr	r3, [pc, #100]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4916      	ldr	r1, [pc, #88]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437a:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	490e      	ldr	r1, [pc, #56]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800438e:	f000 f821 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004392:	4602      	mov	r2, r0
 8004394:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	490a      	ldr	r1, [pc, #40]	@ (80043c8 <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	5ccb      	ldrb	r3, [r1, r3]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	4a09      	ldr	r2, [pc, #36]	@ (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043aa:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc ff7e 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023c00 	.word	0x40023c00
 80043c4:	40023800 	.word	0x40023800
 80043c8:	0800e8d4 	.word	0x0800e8d4
 80043cc:	20000004 	.word	0x20000004
 80043d0:	20000008 	.word	0x20000008

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b090      	sub	sp, #64	@ 0x40
 80043da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ec:	4b59      	ldr	r3, [pc, #356]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d00d      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x40>
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	f200 80a1 	bhi.w	8004540 <HAL_RCC_GetSysClockFreq+0x16c>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x34>
 8004402:	2b04      	cmp	r3, #4
 8004404:	d003      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x3a>
 8004406:	e09b      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b53      	ldr	r3, [pc, #332]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x184>)
 800440a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800440c:	e09b      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800440e:	4b53      	ldr	r3, [pc, #332]	@ (800455c <HAL_RCC_GetSysClockFreq+0x188>)
 8004410:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004412:	e098      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004414:	4b4f      	ldr	r3, [pc, #316]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x180>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800441c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441e:	4b4d      	ldr	r3, [pc, #308]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x180>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d028      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b4a      	ldr	r3, [pc, #296]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x180>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	2200      	movs	r2, #0
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	627a      	str	r2, [r7, #36]	@ 0x24
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800443c:	2100      	movs	r1, #0
 800443e:	4b47      	ldr	r3, [pc, #284]	@ (800455c <HAL_RCC_GetSysClockFreq+0x188>)
 8004440:	fb03 f201 	mul.w	r2, r3, r1
 8004444:	2300      	movs	r3, #0
 8004446:	fb00 f303 	mul.w	r3, r0, r3
 800444a:	4413      	add	r3, r2
 800444c:	4a43      	ldr	r2, [pc, #268]	@ (800455c <HAL_RCC_GetSysClockFreq+0x188>)
 800444e:	fba0 1202 	umull	r1, r2, r0, r2
 8004452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004454:	460a      	mov	r2, r1
 8004456:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445a:	4413      	add	r3, r2
 800445c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800445e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004460:	2200      	movs	r2, #0
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	61fa      	str	r2, [r7, #28]
 8004466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800446e:	f7fb ff0f 	bl	8000290 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4613      	mov	r3, r2
 8004478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800447a:	e053      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800447c:	4b35      	ldr	r3, [pc, #212]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x180>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	2200      	movs	r2, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	617a      	str	r2, [r7, #20]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800448e:	f04f 0b00 	mov.w	fp, #0
 8004492:	4652      	mov	r2, sl
 8004494:	465b      	mov	r3, fp
 8004496:	f04f 0000 	mov.w	r0, #0
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	0159      	lsls	r1, r3, #5
 80044a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a4:	0150      	lsls	r0, r2, #5
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	ebb2 080a 	subs.w	r8, r2, sl
 80044ae:	eb63 090b 	sbc.w	r9, r3, fp
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044c6:	ebb2 0408 	subs.w	r4, r2, r8
 80044ca:	eb63 0509 	sbc.w	r5, r3, r9
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	00eb      	lsls	r3, r5, #3
 80044d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044dc:	00e2      	lsls	r2, r4, #3
 80044de:	4614      	mov	r4, r2
 80044e0:	461d      	mov	r5, r3
 80044e2:	eb14 030a 	adds.w	r3, r4, sl
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	eb45 030b 	adc.w	r3, r5, fp
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044fa:	4629      	mov	r1, r5
 80044fc:	028b      	lsls	r3, r1, #10
 80044fe:	4621      	mov	r1, r4
 8004500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004504:	4621      	mov	r1, r4
 8004506:	028a      	lsls	r2, r1, #10
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450e:	2200      	movs	r2, #0
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	60fa      	str	r2, [r7, #12]
 8004514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004518:	f7fb feba 	bl	8000290 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4613      	mov	r3, r2
 8004522:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004524:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x180>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	3301      	adds	r3, #1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004534:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800453e:	e002      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x184>)
 8004542:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004548:	4618      	mov	r0, r3
 800454a:	3740      	adds	r7, #64	@ 0x40
 800454c:	46bd      	mov	sp, r7
 800454e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	00f42400 	.word	0x00f42400
 800455c:	017d7840 	.word	0x017d7840

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000004 	.word	0x20000004

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	@ (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	0800e8e4 	.word	0x0800e8e4

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045a4:	f7ff ffdc 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0b5b      	lsrs	r3, r3, #13
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	0800e8e4 	.word	0x0800e8e4

080045c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07b      	b.n	80046d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ea:	d009      	beq.n	8004600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	e005      	b.n	8004600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fc1e 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004684:	ea42 0103 	orr.w	r1, r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0104 	and.w	r1, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	f003 0210 	and.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b088      	sub	sp, #32
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ea:	f7fc fe25 	bl	8001338 <HAL_GetTick>
 80046ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d001      	beq.n	8004704 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
 8004702:	e12a      	b.n	800495a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_SPI_Transmit+0x36>
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e122      	b.n	800495a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_SPI_Transmit+0x48>
 800471e:	2302      	movs	r3, #2
 8004720:	e11b      	b.n	800495a <HAL_SPI_Transmit+0x280>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2203      	movs	r2, #3
 800472e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004770:	d10f      	bne.n	8004792 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d007      	beq.n	80047b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b8:	d152      	bne.n	8004860 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_Transmit+0xee>
 80047c2:	8b7b      	ldrh	r3, [r7, #26]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d145      	bne.n	8004854 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047ec:	e032      	b.n	8004854 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d112      	bne.n	8004822 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004820:	e018      	b.n	8004854 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004822:	f7fc fd89 	bl	8001338 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d803      	bhi.n	800483a <HAL_SPI_Transmit+0x160>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d102      	bne.n	8004840 <HAL_SPI_Transmit+0x166>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e082      	b.n	800495a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1c7      	bne.n	80047ee <HAL_SPI_Transmit+0x114>
 800485e:	e053      	b.n	8004908 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_SPI_Transmit+0x194>
 8004868:	8b7b      	ldrh	r3, [r7, #26]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d147      	bne.n	80048fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004894:	e033      	b.n	80048fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d113      	bne.n	80048cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048ca:	e018      	b.n	80048fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048cc:	f7fc fd34 	bl	8001338 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d803      	bhi.n	80048e4 <HAL_SPI_Transmit+0x20a>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d102      	bne.n	80048ea <HAL_SPI_Transmit+0x210>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e02d      	b.n	800495a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1c6      	bne.n	8004896 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fbd9 	bl	80050c4 <SPI_EndRxTxTransaction>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004958:	2300      	movs	r3, #0
  }
}
 800495a:	4618      	mov	r0, r3
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b088      	sub	sp, #32
 8004966:	af02      	add	r7, sp, #8
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	d001      	beq.n	8004982 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
 8004980:	e104      	b.n	8004b8c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800498a:	d112      	bne.n	80049b2 <HAL_SPI_Receive+0x50>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10e      	bne.n	80049b2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2204      	movs	r2, #4
 8004998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800499c:	88fa      	ldrh	r2, [r7, #6]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f8f3 	bl	8004b94 <HAL_SPI_TransmitReceive>
 80049ae:	4603      	mov	r3, r0
 80049b0:	e0ec      	b.n	8004b8c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b2:	f7fc fcc1 	bl	8001338 <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Receive+0x62>
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0e1      	b.n	8004b8c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_SPI_Receive+0x74>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e0da      	b.n	8004b8c <HAL_SPI_Receive+0x22a>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2204      	movs	r2, #4
 80049e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	88fa      	ldrh	r2, [r7, #6]
 80049f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a24:	d10f      	bne.n	8004a46 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	d007      	beq.n	8004a64 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d170      	bne.n	8004b4e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a6c:	e035      	b.n	8004ada <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d115      	bne.n	8004aa8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f103 020c 	add.w	r2, r3, #12
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aa6:	e018      	b.n	8004ada <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa8:	f7fc fc46 	bl	8001338 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d803      	bhi.n	8004ac0 <HAL_SPI_Receive+0x15e>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d102      	bne.n	8004ac6 <HAL_SPI_Receive+0x164>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e058      	b.n	8004b8c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1c4      	bne.n	8004a6e <HAL_SPI_Receive+0x10c>
 8004ae4:	e038      	b.n	8004b58 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d113      	bne.n	8004b1c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afe:	b292      	uxth	r2, r2
 8004b00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	1c9a      	adds	r2, r3, #2
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b1a:	e018      	b.n	8004b4e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b1c:	f7fc fc0c 	bl	8001338 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d803      	bhi.n	8004b34 <HAL_SPI_Receive+0x1d2>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d102      	bne.n	8004b3a <HAL_SPI_Receive+0x1d8>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e01e      	b.n	8004b8c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1c6      	bne.n	8004ae6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fa4b 	bl	8004ff8 <SPI_EndRxTransaction>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
  }
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	@ 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba6:	f7fc fbc7 	bl	8001338 <HAL_GetTick>
 8004baa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bb2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bbe:	7ffb      	ldrb	r3, [r7, #31]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d00c      	beq.n	8004bde <HAL_SPI_TransmitReceive+0x4a>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bca:	d106      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x46>
 8004bd4:	7ffb      	ldrb	r3, [r7, #31]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d001      	beq.n	8004bde <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e17f      	b.n	8004ede <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x5c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x5c>
 8004bea:	887b      	ldrh	r3, [r7, #2]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e174      	b.n	8004ede <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x6e>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e16d      	b.n	8004ede <HAL_SPI_TransmitReceive+0x34a>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d003      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2205      	movs	r2, #5
 8004c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	887a      	ldrh	r2, [r7, #2]
 8004c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	887a      	ldrh	r2, [r7, #2]
 8004c46:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5e:	2b40      	cmp	r3, #64	@ 0x40
 8004c60:	d007      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c7a:	d17e      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0xf6>
 8004c84:	8afb      	ldrh	r3, [r7, #22]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d16c      	bne.n	8004d64 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	1c9a      	adds	r2, r3, #2
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cae:	e059      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d11b      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x162>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d016      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x162>
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d113      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd2:	881a      	ldrh	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d119      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x1a4>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d014      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d18:	b292      	uxth	r2, r2
 8004d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	1c9a      	adds	r2, r3, #2
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d34:	2301      	movs	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d38:	f7fc fafe 	bl	8001338 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d80d      	bhi.n	8004d64 <HAL_SPI_TransmitReceive+0x1d0>
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d009      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0bc      	b.n	8004ede <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1a0      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x11c>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d19b      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x11c>
 8004d78:	e082      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x1f4>
 8004d82:	8afb      	ldrh	r3, [r7, #22]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d171      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	7812      	ldrb	r2, [r2, #0]
 8004d94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dae:	e05d      	b.n	8004e6c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d11c      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x264>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d017      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x264>
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d114      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d119      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x2a6>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d014      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e36:	2301      	movs	r3, #1
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e3a:	f7fc fa7d 	bl	8001338 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d803      	bhi.n	8004e52 <HAL_SPI_TransmitReceive+0x2be>
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d102      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x2c4>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e038      	b.n	8004ede <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d19c      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x21c>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d197      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f91d 	bl	80050c4 <SPI_EndRxTxTransaction>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e01d      	b.n	8004ede <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3728      	adds	r7, #40	@ 0x28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ef8:	f7fc fa1e 	bl	8001338 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f08:	f7fc fa16 	bl	8001338 <HAL_GetTick>
 8004f0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f0e:	4b39      	ldr	r3, [pc, #228]	@ (8004ff4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	015b      	lsls	r3, r3, #5
 8004f14:	0d1b      	lsrs	r3, r3, #20
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1e:	e054      	b.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d050      	beq.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f28:	f7fc fa06 	bl	8001338 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d902      	bls.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d13d      	bne.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f56:	d111      	bne.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f60:	d004      	beq.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6a:	d107      	bne.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f84:	d10f      	bne.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e017      	b.n	8004fea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d19b      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000004 	.word	0x20000004

08004ff8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800500c:	d111      	bne.n	8005032 <SPI_EndRxTransaction+0x3a>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005016:	d004      	beq.n	8005022 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005020:	d107      	bne.n	8005032 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005030:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800503a:	d12a      	bne.n	8005092 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005044:	d012      	beq.n	800506c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	2180      	movs	r1, #128	@ 0x80
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7ff ff49 	bl	8004ee8 <SPI_WaitFlagStateUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d02d      	beq.n	80050b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005060:	f043 0220 	orr.w	r2, r3, #32
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e026      	b.n	80050ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2200      	movs	r2, #0
 8005074:	2101      	movs	r1, #1
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff ff36 	bl	8004ee8 <SPI_WaitFlagStateUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01a      	beq.n	80050b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005086:	f043 0220 	orr.w	r2, r3, #32
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e013      	b.n	80050ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2200      	movs	r2, #0
 800509a:	2101      	movs	r1, #1
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff ff23 	bl	8004ee8 <SPI_WaitFlagStateUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e000      	b.n	80050ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2201      	movs	r2, #1
 80050d8:	2102      	movs	r1, #2
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7ff ff04 	bl	8004ee8 <SPI_WaitFlagStateUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e032      	b.n	800515c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005164 <SPI_EndRxTxTransaction+0xa0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <SPI_EndRxTxTransaction+0xa4>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	0d5b      	lsrs	r3, r3, #21
 8005102:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005114:	d112      	bne.n	800513c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2200      	movs	r2, #0
 800511e:	2180      	movs	r1, #128	@ 0x80
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff fee1 	bl	8004ee8 <SPI_WaitFlagStateUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d016      	beq.n	800515a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e00f      	b.n	800515c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3b01      	subs	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005152:	2b80      	cmp	r3, #128	@ 0x80
 8005154:	d0f2      	beq.n	800513c <SPI_EndRxTxTransaction+0x78>
 8005156:	e000      	b.n	800515a <SPI_EndRxTxTransaction+0x96>
        break;
 8005158:	bf00      	nop
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000004 	.word	0x20000004
 8005168:	165e9f81 	.word	0x165e9f81

0800516c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e042      	b.n	8005204 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb feaa 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	@ 0x24
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fdb3 	bl	8005d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	@ 0x28
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b20      	cmp	r3, #32
 800522a:	d175      	bne.n	8005318 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_Transmit+0x2c>
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e06e      	b.n	800531a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2221      	movs	r2, #33	@ 0x21
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524a:	f7fc f875 	bl	8001338 <HAL_GetTick>
 800524e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005264:	d108      	bne.n	8005278 <HAL_UART_Transmit+0x6c>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e003      	b.n	8005280 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005280:	e02e      	b.n	80052e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	2180      	movs	r1, #128	@ 0x80
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fb15 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e03a      	b.n	800531a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3302      	adds	r3, #2
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	e007      	b.n	80052d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	3301      	adds	r3, #1
 80052d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1cb      	bne.n	8005282 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2200      	movs	r2, #0
 80052f2:	2140      	movs	r1, #64	@ 0x40
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fae1 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e006      	b.n	800531a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	4613      	mov	r3, r2
 800532e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b20      	cmp	r3, #32
 800533a:	d112      	bne.n	8005362 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_UART_Receive_IT+0x26>
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e00b      	b.n	8005364 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	461a      	mov	r2, r3
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fb08 	bl	800596e <UART_Start_Receive_IT>
 800535e:	4603      	mov	r3, r0
 8005360:	e000      	b.n	8005364 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b0ba      	sub	sp, #232	@ 0xe8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005392:	2300      	movs	r3, #0
 8005394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005398:	2300      	movs	r3, #0
 800539a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800539e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10f      	bne.n	80053d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_UART_IRQHandler+0x66>
 80053be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fbe8 	bl	8005ba0 <UART_Receive_IT>
      return;
 80053d0:	e25b      	b.n	800588a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80de 	beq.w	8005598 <HAL_UART_IRQHandler+0x22c>
 80053dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80d1 	beq.w	8005598 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <HAL_UART_IRQHandler+0xae>
 8005402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <HAL_UART_IRQHandler+0xd2>
 8005426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	f043 0202 	orr.w	r2, r3, #2
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800543e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <HAL_UART_IRQHandler+0xf6>
 800544a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545a:	f043 0204 	orr.w	r2, r3, #4
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d011      	beq.n	8005492 <HAL_UART_IRQHandler+0x126>
 800546e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800547a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f043 0208 	orr.w	r2, r3, #8
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 81f2 	beq.w	8005880 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800549c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_UART_IRQHandler+0x14e>
 80054a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fb73 	bl	8005ba0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c4:	2b40      	cmp	r3, #64	@ 0x40
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <HAL_UART_IRQHandler+0x17a>
 80054de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04f      	beq.n	8005586 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa7b 	bl	80059e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f6:	2b40      	cmp	r3, #64	@ 0x40
 80054f8:	d141      	bne.n	800557e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3314      	adds	r3, #20
 8005500:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3314      	adds	r3, #20
 8005522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005526:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800552a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800553e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1d9      	bne.n	80054fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d013      	beq.n	8005576 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005552:	4a7e      	ldr	r2, [pc, #504]	@ (800574c <HAL_UART_IRQHandler+0x3e0>)
 8005554:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	4618      	mov	r0, r3
 800555c:	f7fc f89d 	bl	800169a <HAL_DMA_Abort_IT>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d016      	beq.n	8005594 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005570:	4610      	mov	r0, r2
 8005572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005574:	e00e      	b.n	8005594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f98a 	bl	8005890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	e00a      	b.n	8005594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f986 	bl	8005890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e006      	b.n	8005594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f982 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005592:	e175      	b.n	8005880 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	bf00      	nop
    return;
 8005596:	e173      	b.n	8005880 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559c:	2b01      	cmp	r3, #1
 800559e:	f040 814f 	bne.w	8005840 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8148 	beq.w	8005840 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8141 	beq.w	8005840 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055be:	2300      	movs	r3, #0
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055de:	2b40      	cmp	r3, #64	@ 0x40
 80055e0:	f040 80b6 	bne.w	8005750 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8145 	beq.w	8005884 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005602:	429a      	cmp	r2, r3
 8005604:	f080 813e 	bcs.w	8005884 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800560e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800561a:	f000 8088 	beq.w	800572e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800563c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800564a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800564e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005656:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1d9      	bne.n	800561e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800567a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800568e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005692:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e1      	bne.n	800566a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3314      	adds	r3, #20
 80056ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3314      	adds	r3, #20
 80056c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e3      	bne.n	80056a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056fe:	f023 0310 	bic.w	r3, r3, #16
 8005702:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005710:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005712:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005716:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800571e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e3      	bne.n	80056ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005728:	4618      	mov	r0, r3
 800572a:	f7fb ff46 	bl	80015ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800573c:	b29b      	uxth	r3, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	b29b      	uxth	r3, r3
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8ad 	bl	80058a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800574a:	e09b      	b.n	8005884 <HAL_UART_IRQHandler+0x518>
 800574c:	08005aa9 	.word	0x08005aa9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005758:	b29b      	uxth	r3, r3
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 808e 	beq.w	8005888 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800576c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8089 	beq.w	8005888 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800578c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800579a:	647a      	str	r2, [r7, #68]	@ 0x44
 800579c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e3      	bne.n	8005776 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3314      	adds	r3, #20
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	623b      	str	r3, [r7, #32]
   return(result);
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e3      	bne.n	80057ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	60fb      	str	r3, [r7, #12]
   return(result);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0310 	bic.w	r3, r3, #16
 800580a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005818:	61fa      	str	r2, [r7, #28]
 800581a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	617b      	str	r3, [r7, #20]
   return(result);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e3      	bne.n	80057f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005832:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f833 	bl	80058a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800583e:	e023      	b.n	8005888 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <HAL_UART_IRQHandler+0x4f4>
 800584c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f939 	bl	8005ad0 <UART_Transmit_IT>
    return;
 800585e:	e014      	b.n	800588a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00e      	beq.n	800588a <HAL_UART_IRQHandler+0x51e>
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f979 	bl	8005b70 <UART_EndTransmit_IT>
    return;
 800587e:	e004      	b.n	800588a <HAL_UART_IRQHandler+0x51e>
    return;
 8005880:	bf00      	nop
 8005882:	e002      	b.n	800588a <HAL_UART_IRQHandler+0x51e>
      return;
 8005884:	bf00      	nop
 8005886:	e000      	b.n	800588a <HAL_UART_IRQHandler+0x51e>
      return;
 8005888:	bf00      	nop
  }
}
 800588a:	37e8      	adds	r7, #232	@ 0xe8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058cc:	e03b      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d037      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d6:	f7fb fd2f 	bl	8001338 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <UART_WaitOnFlagUntilTimeout+0x30>
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e03a      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d023      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b80      	cmp	r3, #128	@ 0x80
 8005902:	d020      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b40      	cmp	r3, #64	@ 0x40
 8005908:	d01d      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d116      	bne.n	8005946 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f857 	bl	80059e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2208      	movs	r2, #8
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e00f      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4013      	ands	r3, r2
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	429a      	cmp	r2, r3
 8005962:	d0b4      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	4613      	mov	r3, r2
 800597a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	88fa      	ldrh	r2, [r7, #6]
 8005986:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	88fa      	ldrh	r2, [r7, #6]
 800598c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2222      	movs	r2, #34	@ 0x22
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0220 	orr.w	r2, r2, #32
 80059d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b095      	sub	sp, #84	@ 0x54
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e5      	bne.n	80059ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e5      	bne.n	8005a1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d119      	bne.n	8005a8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f023 0310 	bic.w	r3, r3, #16
 8005a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a7a:	61ba      	str	r2, [r7, #24]
 8005a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	613b      	str	r3, [r7, #16]
   return(result);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e5      	bne.n	8005a5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a9c:	bf00      	nop
 8005a9e:	3754      	adds	r7, #84	@ 0x54
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fee4 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b21      	cmp	r3, #33	@ 0x21
 8005ae2:	d13e      	bne.n	8005b62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aec:	d114      	bne.n	8005b18 <UART_Transmit_IT+0x48>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d110      	bne.n	8005b18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]
 8005b16:	e008      	b.n	8005b2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	1c59      	adds	r1, r3, #1
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6211      	str	r1, [r2, #32]
 8005b22:	781a      	ldrb	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4619      	mov	r1, r3
 8005b38:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e000      	b.n	8005b64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b62:	2302      	movs	r3, #2
  }
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fb f8e5 	bl	8000d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	@ 0x30
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b22      	cmp	r3, #34	@ 0x22
 8005bb2:	f040 80ae 	bne.w	8005d12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbe:	d117      	bne.n	8005bf0 <UART_Receive_IT+0x50>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d113      	bne.n	8005bf0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be8:	1c9a      	adds	r2, r3, #2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bee:	e026      	b.n	8005c3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c02:	d007      	beq.n	8005c14 <UART_Receive_IT+0x74>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <UART_Receive_IT+0x82>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e008      	b.n	8005c34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d15d      	bne.n	8005d0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0220 	bic.w	r2, r2, #32
 8005c60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d135      	bne.n	8005d04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	613b      	str	r3, [r7, #16]
   return(result);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f023 0310 	bic.w	r3, r3, #16
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cbe:	623a      	str	r2, [r7, #32]
 8005cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	69f9      	ldr	r1, [r7, #28]
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d10a      	bne.n	8005cf6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff fdd1 	bl	80058a4 <HAL_UARTEx_RxEventCallback>
 8005d02:	e002      	b.n	8005d0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7fb f803 	bl	8000d10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e002      	b.n	8005d14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e000      	b.n	8005d14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3730      	adds	r7, #48	@ 0x30
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d20:	b0c0      	sub	sp, #256	@ 0x100
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d38:	68d9      	ldr	r1, [r3, #12]
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	ea40 0301 	orr.w	r3, r0, r1
 8005d44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d74:	f021 010c 	bic.w	r1, r1, #12
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d82:	430b      	orrs	r3, r1
 8005d84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d96:	6999      	ldr	r1, [r3, #24]
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	ea40 0301 	orr.w	r3, r0, r1
 8005da2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b8f      	ldr	r3, [pc, #572]	@ (8005fe8 <UART_SetConfig+0x2cc>)
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d005      	beq.n	8005dbc <UART_SetConfig+0xa0>
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b8d      	ldr	r3, [pc, #564]	@ (8005fec <UART_SetConfig+0x2d0>)
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d104      	bne.n	8005dc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dbc:	f7fe fbf0 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8005dc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dc4:	e003      	b.n	8005dce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dc6:	f7fe fbd7 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8005dca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd8:	f040 810c 	bne.w	8005ff4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de0:	2200      	movs	r2, #0
 8005de2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005de6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005dea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dee:	4622      	mov	r2, r4
 8005df0:	462b      	mov	r3, r5
 8005df2:	1891      	adds	r1, r2, r2
 8005df4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005df6:	415b      	adcs	r3, r3
 8005df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005dfe:	4621      	mov	r1, r4
 8005e00:	eb12 0801 	adds.w	r8, r2, r1
 8005e04:	4629      	mov	r1, r5
 8005e06:	eb43 0901 	adc.w	r9, r3, r1
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e1e:	4690      	mov	r8, r2
 8005e20:	4699      	mov	r9, r3
 8005e22:	4623      	mov	r3, r4
 8005e24:	eb18 0303 	adds.w	r3, r8, r3
 8005e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e2c:	462b      	mov	r3, r5
 8005e2e:	eb49 0303 	adc.w	r3, r9, r3
 8005e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	18db      	adds	r3, r3, r3
 8005e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e50:	4613      	mov	r3, r2
 8005e52:	eb42 0303 	adc.w	r3, r2, r3
 8005e56:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e60:	f7fa fa16 	bl	8000290 <__aeabi_uldivmod>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4b61      	ldr	r3, [pc, #388]	@ (8005ff0 <UART_SetConfig+0x2d4>)
 8005e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	011c      	lsls	r4, r3, #4
 8005e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	1891      	adds	r1, r2, r2
 8005e8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e8c:	415b      	adcs	r3, r3
 8005e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e94:	4641      	mov	r1, r8
 8005e96:	eb12 0a01 	adds.w	sl, r2, r1
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005eac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eb4:	4692      	mov	sl, r2
 8005eb6:	469b      	mov	fp, r3
 8005eb8:	4643      	mov	r3, r8
 8005eba:	eb1a 0303 	adds.w	r3, sl, r3
 8005ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ed8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005edc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	18db      	adds	r3, r3, r3
 8005ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	eb42 0303 	adc.w	r3, r2, r3
 8005eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ef2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ef6:	f7fa f9cb 	bl	8000290 <__aeabi_uldivmod>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4611      	mov	r1, r2
 8005f00:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff0 <UART_SetConfig+0x2d4>)
 8005f02:	fba3 2301 	umull	r2, r3, r3, r1
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	2264      	movs	r2, #100	@ 0x64
 8005f0a:	fb02 f303 	mul.w	r3, r2, r3
 8005f0e:	1acb      	subs	r3, r1, r3
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f16:	4b36      	ldr	r3, [pc, #216]	@ (8005ff0 <UART_SetConfig+0x2d4>)
 8005f18:	fba3 2302 	umull	r2, r3, r3, r2
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f24:	441c      	add	r4, r3
 8005f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f38:	4642      	mov	r2, r8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	1891      	adds	r1, r2, r2
 8005f3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f40:	415b      	adcs	r3, r3
 8005f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f48:	4641      	mov	r1, r8
 8005f4a:	1851      	adds	r1, r2, r1
 8005f4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f4e:	4649      	mov	r1, r9
 8005f50:	414b      	adcs	r3, r1
 8005f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f60:	4659      	mov	r1, fp
 8005f62:	00cb      	lsls	r3, r1, #3
 8005f64:	4651      	mov	r1, sl
 8005f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f6a:	4651      	mov	r1, sl
 8005f6c:	00ca      	lsls	r2, r1, #3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	4603      	mov	r3, r0
 8005f74:	4642      	mov	r2, r8
 8005f76:	189b      	adds	r3, r3, r2
 8005f78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	460a      	mov	r2, r1
 8005f80:	eb42 0303 	adc.w	r3, r2, r3
 8005f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	18db      	adds	r3, r3, r3
 8005fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	eb42 0303 	adc.w	r3, r2, r3
 8005fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fb2:	f7fa f96d 	bl	8000290 <__aeabi_uldivmod>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff0 <UART_SetConfig+0x2d4>)
 8005fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	2164      	movs	r1, #100	@ 0x64
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	3332      	adds	r3, #50	@ 0x32
 8005fce:	4a08      	ldr	r2, [pc, #32]	@ (8005ff0 <UART_SetConfig+0x2d4>)
 8005fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	f003 0207 	and.w	r2, r3, #7
 8005fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4422      	add	r2, r4
 8005fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fe4:	e106      	b.n	80061f4 <UART_SetConfig+0x4d8>
 8005fe6:	bf00      	nop
 8005fe8:	40011000 	.word	0x40011000
 8005fec:	40011400 	.word	0x40011400
 8005ff0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ffe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006002:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006006:	4642      	mov	r2, r8
 8006008:	464b      	mov	r3, r9
 800600a:	1891      	adds	r1, r2, r2
 800600c:	6239      	str	r1, [r7, #32]
 800600e:	415b      	adcs	r3, r3
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
 8006012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006016:	4641      	mov	r1, r8
 8006018:	1854      	adds	r4, r2, r1
 800601a:	4649      	mov	r1, r9
 800601c:	eb43 0501 	adc.w	r5, r3, r1
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	00eb      	lsls	r3, r5, #3
 800602a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800602e:	00e2      	lsls	r2, r4, #3
 8006030:	4614      	mov	r4, r2
 8006032:	461d      	mov	r5, r3
 8006034:	4643      	mov	r3, r8
 8006036:	18e3      	adds	r3, r4, r3
 8006038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800603c:	464b      	mov	r3, r9
 800603e:	eb45 0303 	adc.w	r3, r5, r3
 8006042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006052:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006062:	4629      	mov	r1, r5
 8006064:	008b      	lsls	r3, r1, #2
 8006066:	4621      	mov	r1, r4
 8006068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800606c:	4621      	mov	r1, r4
 800606e:	008a      	lsls	r2, r1, #2
 8006070:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006074:	f7fa f90c 	bl	8000290 <__aeabi_uldivmod>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4b60      	ldr	r3, [pc, #384]	@ (8006200 <UART_SetConfig+0x4e4>)
 800607e:	fba3 2302 	umull	r2, r3, r3, r2
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	011c      	lsls	r4, r3, #4
 8006086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800608a:	2200      	movs	r2, #0
 800608c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006090:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006094:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006098:	4642      	mov	r2, r8
 800609a:	464b      	mov	r3, r9
 800609c:	1891      	adds	r1, r2, r2
 800609e:	61b9      	str	r1, [r7, #24]
 80060a0:	415b      	adcs	r3, r3
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a8:	4641      	mov	r1, r8
 80060aa:	1851      	adds	r1, r2, r1
 80060ac:	6139      	str	r1, [r7, #16]
 80060ae:	4649      	mov	r1, r9
 80060b0:	414b      	adcs	r3, r1
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060c0:	4659      	mov	r1, fp
 80060c2:	00cb      	lsls	r3, r1, #3
 80060c4:	4651      	mov	r1, sl
 80060c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ca:	4651      	mov	r1, sl
 80060cc:	00ca      	lsls	r2, r1, #3
 80060ce:	4610      	mov	r0, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	4642      	mov	r2, r8
 80060d6:	189b      	adds	r3, r3, r2
 80060d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060dc:	464b      	mov	r3, r9
 80060de:	460a      	mov	r2, r1
 80060e0:	eb42 0303 	adc.w	r3, r2, r3
 80060e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006100:	4649      	mov	r1, r9
 8006102:	008b      	lsls	r3, r1, #2
 8006104:	4641      	mov	r1, r8
 8006106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800610a:	4641      	mov	r1, r8
 800610c:	008a      	lsls	r2, r1, #2
 800610e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006112:	f7fa f8bd 	bl	8000290 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4611      	mov	r1, r2
 800611c:	4b38      	ldr	r3, [pc, #224]	@ (8006200 <UART_SetConfig+0x4e4>)
 800611e:	fba3 2301 	umull	r2, r3, r3, r1
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	2264      	movs	r2, #100	@ 0x64
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	1acb      	subs	r3, r1, r3
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	3332      	adds	r3, #50	@ 0x32
 8006130:	4a33      	ldr	r2, [pc, #204]	@ (8006200 <UART_SetConfig+0x4e4>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800613c:	441c      	add	r4, r3
 800613e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006142:	2200      	movs	r2, #0
 8006144:	673b      	str	r3, [r7, #112]	@ 0x70
 8006146:	677a      	str	r2, [r7, #116]	@ 0x74
 8006148:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800614c:	4642      	mov	r2, r8
 800614e:	464b      	mov	r3, r9
 8006150:	1891      	adds	r1, r2, r2
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	415b      	adcs	r3, r3
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800615c:	4641      	mov	r1, r8
 800615e:	1851      	adds	r1, r2, r1
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	4649      	mov	r1, r9
 8006164:	414b      	adcs	r3, r1
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006174:	4659      	mov	r1, fp
 8006176:	00cb      	lsls	r3, r1, #3
 8006178:	4651      	mov	r1, sl
 800617a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800617e:	4651      	mov	r1, sl
 8006180:	00ca      	lsls	r2, r1, #3
 8006182:	4610      	mov	r0, r2
 8006184:	4619      	mov	r1, r3
 8006186:	4603      	mov	r3, r0
 8006188:	4642      	mov	r2, r8
 800618a:	189b      	adds	r3, r3, r2
 800618c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800618e:	464b      	mov	r3, r9
 8006190:	460a      	mov	r2, r1
 8006192:	eb42 0303 	adc.w	r3, r2, r3
 8006196:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80061a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061b0:	4649      	mov	r1, r9
 80061b2:	008b      	lsls	r3, r1, #2
 80061b4:	4641      	mov	r1, r8
 80061b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ba:	4641      	mov	r1, r8
 80061bc:	008a      	lsls	r2, r1, #2
 80061be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061c2:	f7fa f865 	bl	8000290 <__aeabi_uldivmod>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <UART_SetConfig+0x4e4>)
 80061cc:	fba3 1302 	umull	r1, r3, r3, r2
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	2164      	movs	r1, #100	@ 0x64
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	3332      	adds	r3, #50	@ 0x32
 80061de:	4a08      	ldr	r2, [pc, #32]	@ (8006200 <UART_SetConfig+0x4e4>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	f003 020f 	and.w	r2, r3, #15
 80061ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4422      	add	r2, r4
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061fa:	46bd      	mov	sp, r7
 80061fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006200:	51eb851f 	.word	0x51eb851f

08006204 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006204:	b084      	sub	sp, #16
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	f107 001c 	add.w	r0, r7, #28
 8006212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006216:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800621a:	2b01      	cmp	r3, #1
 800621c:	d123      	bne.n	8006266 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006222:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006246:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800624a:	2b01      	cmp	r3, #1
 800624c:	d105      	bne.n	800625a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f9dc 	bl	8006618 <USB_CoreReset>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e01b      	b.n	800629e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9d0 	bl	8006618 <USB_CoreReset>
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800627c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006288:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006290:	e005      	b.n	800629e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800629e:	7fbb      	ldrb	r3, [r7, #30]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10b      	bne.n	80062bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f043 0206 	orr.w	r2, r3, #6
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f043 0220 	orr.w	r2, r3, #32
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c8:	b004      	add	sp, #16
 80062ca:	4770      	bx	lr

080062cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f043 0201 	orr.w	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f023 0201 	bic.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d115      	bne.n	800635e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800633e:	200a      	movs	r0, #10
 8006340:	f7fb f806 	bl	8001350 <HAL_Delay>
      ms += 10U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	330a      	adds	r3, #10
 8006348:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f956 	bl	80065fc <USB_GetMode>
 8006350:	4603      	mov	r3, r0
 8006352:	2b01      	cmp	r3, #1
 8006354:	d01e      	beq.n	8006394 <USB_SetCurrentMode+0x84>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2bc7      	cmp	r3, #199	@ 0xc7
 800635a:	d9f0      	bls.n	800633e <USB_SetCurrentMode+0x2e>
 800635c:	e01a      	b.n	8006394 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d115      	bne.n	8006390 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006370:	200a      	movs	r0, #10
 8006372:	f7fa ffed 	bl	8001350 <HAL_Delay>
      ms += 10U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	330a      	adds	r3, #10
 800637a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f93d 	bl	80065fc <USB_GetMode>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <USB_SetCurrentMode+0x84>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2bc7      	cmp	r3, #199	@ 0xc7
 800638c:	d9f0      	bls.n	8006370 <USB_SetCurrentMode+0x60>
 800638e:	e001      	b.n	8006394 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e005      	b.n	80063a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2bc8      	cmp	r3, #200	@ 0xc8
 8006398:	d101      	bne.n	800639e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3301      	adds	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063c2:	d901      	bls.n	80063c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e01b      	b.n	8006400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	daf2      	bge.n	80063b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	019b      	lsls	r3, r3, #6
 80063d8:	f043 0220 	orr.w	r2, r3, #32
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3301      	adds	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063ec:	d901      	bls.n	80063f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e006      	b.n	8006400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d0f0      	beq.n	80063e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006424:	d901      	bls.n	800642a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e018      	b.n	800645c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	daf2      	bge.n	8006418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2210      	movs	r2, #16
 800643a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3301      	adds	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006448:	d901      	bls.n	800644e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e006      	b.n	800645c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b10      	cmp	r3, #16
 8006458:	d0f0      	beq.n	800643c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006468:	b480      	push	{r7}
 800646a:	b089      	sub	sp, #36	@ 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4611      	mov	r1, r2
 8006474:	461a      	mov	r2, r3
 8006476:	460b      	mov	r3, r1
 8006478:	71fb      	strb	r3, [r7, #7]
 800647a:	4613      	mov	r3, r2
 800647c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006486:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	d123      	bne.n	80064d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800648e:	88bb      	ldrh	r3, [r7, #4]
 8006490:	3303      	adds	r3, #3
 8006492:	089b      	lsrs	r3, r3, #2
 8006494:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006496:	2300      	movs	r3, #0
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	e018      	b.n	80064ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	031a      	lsls	r2, r3, #12
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a8:	461a      	mov	r2, r3
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3301      	adds	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	3301      	adds	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3301      	adds	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	3301      	adds	r3, #1
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d3e2      	bcc.n	800649c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3724      	adds	r7, #36	@ 0x24
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b08b      	sub	sp, #44	@ 0x2c
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	b29b      	uxth	r3, r3
 8006500:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800650a:	2300      	movs	r3, #0
 800650c:	623b      	str	r3, [r7, #32]
 800650e:	e014      	b.n	800653a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	601a      	str	r2, [r3, #0]
    pDest++;
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	3301      	adds	r3, #1
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	3301      	adds	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	3301      	adds	r3, #1
 800652c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	3301      	adds	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	3301      	adds	r3, #1
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	6a3a      	ldr	r2, [r7, #32]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	429a      	cmp	r2, r3
 8006540:	d3e6      	bcc.n	8006510 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006542:	8bfb      	ldrh	r3, [r7, #30]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01e      	beq.n	8006586 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006552:	461a      	mov	r2, r3
 8006554:	f107 0310 	add.w	r3, r7, #16
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	fa22 f303 	lsr.w	r3, r2, r3
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	701a      	strb	r2, [r3, #0]
      i++;
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	3301      	adds	r3, #1
 8006572:	623b      	str	r3, [r7, #32]
      pDest++;
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	3301      	adds	r3, #1
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800657a:	8bfb      	ldrh	r3, [r7, #30]
 800657c:	3b01      	subs	r3, #1
 800657e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006580:	8bfb      	ldrh	r3, [r7, #30]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1ea      	bne.n	800655c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006588:	4618      	mov	r0, r3
 800658a:	372c      	adds	r7, #44	@ 0x2c
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4013      	ands	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065ac:	68fb      	ldr	r3, [r7, #12]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065ee:	68bb      	ldr	r3, [r7, #8]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0301 	and.w	r3, r3, #1
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006630:	d901      	bls.n	8006636 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e01b      	b.n	800666e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	daf2      	bge.n	8006624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f043 0201 	orr.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800665a:	d901      	bls.n	8006660 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e006      	b.n	800666e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b01      	cmp	r3, #1
 800666a:	d0f0      	beq.n	800664e <USB_CoreReset+0x36>

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800667c:	b084      	sub	sp, #16
 800667e:	b580      	push	{r7, lr}
 8006680:	b086      	sub	sp, #24
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800668a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800669c:	461a      	mov	r2, r3
 800669e:	2300      	movs	r3, #0
 80066a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d119      	bne.n	8006706 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80066d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d10a      	bne.n	80066f0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066e8:	f043 0304 	orr.w	r3, r3, #4
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e014      	b.n	800671a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066fe:	f023 0304 	bic.w	r3, r3, #4
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e009      	b.n	800671a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006714:	f023 0304 	bic.w	r3, r3, #4
 8006718:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800671a:	2110      	movs	r1, #16
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fe43 	bl	80063a8 <USB_FlushTxFifo>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fe6d 	bl	800640c <USB_FlushRxFifo>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	e015      	b.n	800676e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674e:	461a      	mov	r2, r3
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006762:	461a      	mov	r2, r3
 8006764:	2300      	movs	r3, #0
 8006766:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3301      	adds	r3, #1
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006772:	461a      	mov	r2, r3
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4293      	cmp	r3, r2
 8006778:	d3e3      	bcc.n	8006742 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f04f 32ff 	mov.w	r2, #4294967295
 8006786:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2280      	movs	r2, #128	@ 0x80
 800678c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a0e      	ldr	r2, [pc, #56]	@ (80067cc <USB_HostInit+0x150>)
 8006792:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a0e      	ldr	r2, [pc, #56]	@ (80067d0 <USB_HostInit+0x154>)
 8006798:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800679c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f043 0210 	orr.w	r2, r3, #16
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699a      	ldr	r2, [r3, #24]
 80067b4:	4b07      	ldr	r3, [pc, #28]	@ (80067d4 <USB_HostInit+0x158>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c8:	b004      	add	sp, #16
 80067ca:	4770      	bx	lr
 80067cc:	00600080 	.word	0x00600080
 80067d0:	004000e0 	.word	0x004000e0
 80067d4:	a3200008 	.word	0xa3200008

080067d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006810:	4313      	orrs	r3, r2
 8006812:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d107      	bne.n	800682a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006820:	461a      	mov	r2, r3
 8006822:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006826:	6053      	str	r3, [r2, #4]
 8006828:	e00c      	b.n	8006844 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d107      	bne.n	8006840 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006836:	461a      	mov	r2, r3
 8006838:	f241 7370 	movw	r3, #6000	@ 0x1770
 800683c:	6053      	str	r3, [r2, #4]
 800683e:	e001      	b.n	8006844 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006872:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800687c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006880:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006882:	2064      	movs	r0, #100	@ 0x64
 8006884:	f7fa fd64 	bl	8001350 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006894:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006896:	200a      	movs	r0, #10
 8006898:	f7fa fd5a 	bl	8001350 <HAL_Delay>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80068ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <USB_DriveVbus+0x44>
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d106      	bne.n	80068ea <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80068e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068e8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f4:	d109      	bne.n	800690a <USB_DriveVbus+0x64>
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006908:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	0c5b      	lsrs	r3, r3, #17
 8006936:	f003 0303 	and.w	r3, r3, #3
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006946:	b480      	push	{r7}
 8006948:	b085      	sub	sp, #20
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	b29b      	uxth	r3, r3
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	461a      	mov	r2, r3
 8006976:	4603      	mov	r3, r0
 8006978:	70fb      	strb	r3, [r7, #3]
 800697a:	460b      	mov	r3, r1
 800697c:	70bb      	strb	r3, [r7, #2]
 800697e:	4613      	mov	r3, r2
 8006980:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006996:	461a      	mov	r2, r3
 8006998:	f04f 33ff 	mov.w	r3, #4294967295
 800699c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800699e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d867      	bhi.n	8006a76 <USB_HC_Init+0x10e>
 80069a6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <USB_HC_Init+0x44>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	08006a39 	.word	0x08006a39
 80069b4:	080069bd 	.word	0x080069bd
 80069b8:	080069fb 	.word	0x080069fb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c8:	461a      	mov	r2, r3
 80069ca:	f240 439d 	movw	r3, #1181	@ 0x49d
 80069ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80069d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	da51      	bge.n	8006a7c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80069f8:	e040      	b.n	8006a7c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a06:	461a      	mov	r2, r3
 8006a08:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006a0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	da34      	bge.n	8006a80 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	0151      	lsls	r1, r2, #5
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a34:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006a36:	e023      	b.n	8006a80 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a44:	461a      	mov	r2, r3
 8006a46:	f240 2325 	movw	r3, #549	@ 0x225
 8006a4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	da17      	bge.n	8006a84 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	78fa      	ldrb	r2, [r7, #3]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a6e:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006a72:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006a74:	e006      	b.n	8006a84 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	77fb      	strb	r3, [r7, #31]
      break;
 8006a7a:	e004      	b.n	8006a86 <USB_HC_Init+0x11e>
      break;
 8006a7c:	bf00      	nop
 8006a7e:	e002      	b.n	8006a86 <USB_HC_Init+0x11e>
      break;
 8006a80:	bf00      	nop
 8006a82:	e000      	b.n	8006a86 <USB_HC_Init+0x11e>
      break;
 8006a84:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a92:	461a      	mov	r2, r3
 8006a94:	2300      	movs	r3, #0
 8006a96:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ab2:	f043 0302 	orr.w	r3, r3, #2
 8006ab6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8006acc:	6939      	ldr	r1, [r7, #16]
 8006ace:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006ae2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da03      	bge.n	8006af2 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e001      	b.n	8006af6 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ff0e 	bl	8006918 <USB_GetHostSpeed>
 8006afc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006afe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d106      	bne.n	8006b14 <USB_HC_Init+0x1ac>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d003      	beq.n	8006b14 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e001      	b.n	8006b18 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b18:	787b      	ldrb	r3, [r7, #1]
 8006b1a:	059b      	lsls	r3, r3, #22
 8006b1c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b20:	78bb      	ldrb	r3, [r7, #2]
 8006b22:	02db      	lsls	r3, r3, #11
 8006b24:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b28:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b2e:	049b      	lsls	r3, r3, #18
 8006b30:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b34:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006b36:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b3c:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b56:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006b58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d003      	beq.n	8006b68 <USB_HC_Init+0x200>
 8006b60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d10f      	bne.n	8006b88 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b86:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop

08006b94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	@ 0x30
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006bac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006bb0:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	799b      	ldrb	r3, [r3, #6]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d158      	bne.n	8006c6c <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	78db      	ldrb	r3, [r3, #3]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	8a92      	ldrh	r2, [r2, #20]
 8006bcc:	fb03 f202 	mul.w	r2, r3, r2
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	61da      	str	r2, [r3, #28]
 8006bd4:	e079      	b.n	8006cca <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	7c9b      	ldrb	r3, [r3, #18]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d130      	bne.n	8006c40 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	2bbc      	cmp	r3, #188	@ 0xbc
 8006be4:	d918      	bls.n	8006c18 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	8a9b      	ldrh	r3, [r3, #20]
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d003      	beq.n	8006c08 <USB_HC_StartXfer+0x74>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d103      	bne.n	8006c10 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	60da      	str	r2, [r3, #12]
 8006c0e:	e05c      	b.n	8006cca <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2201      	movs	r2, #1
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	e058      	b.n	8006cca <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6a1a      	ldr	r2, [r3, #32]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d007      	beq.n	8006c38 <USB_HC_StartXfer+0xa4>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d003      	beq.n	8006c38 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2204      	movs	r2, #4
 8006c34:	60da      	str	r2, [r3, #12]
 8006c36:	e048      	b.n	8006cca <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	60da      	str	r2, [r3, #12]
 8006c3e:	e044      	b.n	8006cca <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d10d      	bne.n	8006c62 <USB_HC_StartXfer+0xce>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	8a92      	ldrh	r2, [r2, #20]
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d907      	bls.n	8006c62 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	8a92      	ldrh	r2, [r2, #20]
 8006c58:	fb03 f202 	mul.w	r2, r3, r2
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	61da      	str	r2, [r3, #28]
 8006c60:	e033      	b.n	8006cca <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	61da      	str	r2, [r3, #28]
 8006c6a:	e02e      	b.n	8006cca <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d018      	beq.n	8006ca6 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	8a92      	ldrh	r2, [r2, #20]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	8a92      	ldrh	r2, [r2, #20]
 8006c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c88:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006c8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006c8c:	8b7b      	ldrh	r3, [r7, #26]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d90b      	bls.n	8006caa <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8006c92:	8b7b      	ldrh	r3, [r7, #26]
 8006c94:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	8a92      	ldrh	r2, [r2, #20]
 8006c9c:	fb03 f202 	mul.w	r2, r3, r2
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	61da      	str	r2, [r3, #28]
 8006ca4:	e001      	b.n	8006caa <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	78db      	ldrb	r3, [r3, #3]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006cb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	8a92      	ldrh	r2, [r2, #20]
 8006cb8:	fb03 f202 	mul.w	r2, r3, r2
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61da      	str	r2, [r3, #28]
 8006cc0:	e003      	b.n	8006cca <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6a1a      	ldr	r2, [r3, #32]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006cd4:	04d9      	lsls	r1, r3, #19
 8006cd6:	4ba4      	ldr	r3, [pc, #656]	@ (8006f68 <USB_HC_StartXfer+0x3d4>)
 8006cd8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cda:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	7d9b      	ldrb	r3, [r3, #22]
 8006ce0:	075b      	lsls	r3, r3, #29
 8006ce2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ce6:	69f9      	ldr	r1, [r7, #28]
 8006ce8:	0148      	lsls	r0, r1, #5
 8006cea:	6a39      	ldr	r1, [r7, #32]
 8006cec:	4401      	add	r1, r0
 8006cee:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cf2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cf4:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d009      	beq.n	8006d10 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	6999      	ldr	r1, [r3, #24]
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d0c:	460a      	mov	r2, r1
 8006d0e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	6a3a      	ldr	r2, [r7, #32]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d46:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	7e7b      	ldrb	r3, [r7, #25]
 8006d58:	075b      	lsls	r3, r3, #29
 8006d5a:	69f9      	ldr	r1, [r7, #28]
 8006d5c:	0148      	lsls	r0, r1, #5
 8006d5e:	6a39      	ldr	r1, [r7, #32]
 8006d60:	4401      	add	r1, r0
 8006d62:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006d66:	4313      	orrs	r3, r2
 8006d68:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	799b      	ldrb	r3, [r3, #6]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	f040 80c4 	bne.w	8006efc <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	7c5b      	ldrb	r3, [r3, #17]
 8006d78:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	6a3a      	ldr	r2, [r7, #32]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006d8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006d90:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	6a3a      	ldr	r2, [r7, #32]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006db0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	79db      	ldrb	r3, [r3, #7]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d123      	bne.n	8006e02 <USB_HC_StartXfer+0x26e>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	78db      	ldrb	r3, [r3, #3]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d11f      	bne.n	8006e02 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	6a3a      	ldr	r2, [r7, #32]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de0:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	6a3a      	ldr	r2, [r7, #32]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e00:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	7c9b      	ldrb	r3, [r3, #18]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d003      	beq.n	8006e12 <USB_HC_StartXfer+0x27e>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7c9b      	ldrb	r3, [r3, #18]
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d117      	bne.n	8006e42 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d113      	bne.n	8006e42 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	78db      	ldrb	r3, [r3, #3]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10f      	bne.n	8006e42 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e40:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	7c9b      	ldrb	r3, [r3, #18]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d163      	bne.n	8006f12 <USB_HC_StartXfer+0x37e>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	78db      	ldrb	r3, [r3, #3]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d15f      	bne.n	8006f12 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d859      	bhi.n	8006f10 <USB_HC_StartXfer+0x37c>
 8006e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <USB_HC_StartXfer+0x2d0>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006e97 	.word	0x08006e97
 8006e6c:	08006eb9 	.word	0x08006eb9
 8006e70:	08006edb 	.word	0x08006edb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	6a3a      	ldr	r2, [r7, #32]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e92:	6053      	str	r3, [r2, #4]
          break;
 8006e94:	e03d      	b.n	8006f12 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	6a3a      	ldr	r2, [r7, #32]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eb0:	f043 030e 	orr.w	r3, r3, #14
 8006eb4:	6053      	str	r3, [r2, #4]
          break;
 8006eb6:	e02c      	b.n	8006f12 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ed6:	6053      	str	r3, [r2, #4]
          break;
 8006ed8:	e01b      	b.n	8006f12 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ef4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ef8:	6053      	str	r3, [r2, #4]
          break;
 8006efa:	e00a      	b.n	8006f12 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6053      	str	r3, [r2, #4]
 8006f0e:	e000      	b.n	8006f12 <USB_HC_StartXfer+0x37e>
          break;
 8006f10:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f28:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	78db      	ldrb	r3, [r3, #3]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	e003      	b.n	8006f44 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f42:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f4a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f58:	461a      	mov	r2, r3
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e055      	b.n	8007014 <USB_HC_StartXfer+0x480>
 8006f68:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	78db      	ldrb	r3, [r3, #3]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d14e      	bne.n	8007012 <USB_HC_StartXfer+0x47e>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d04a      	beq.n	8007012 <USB_HC_StartXfer+0x47e>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	79db      	ldrb	r3, [r3, #7]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d146      	bne.n	8007012 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	7c9b      	ldrb	r3, [r3, #18]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d831      	bhi.n	8006ff0 <USB_HC_StartXfer+0x45c>
 8006f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <USB_HC_StartXfer+0x400>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fa5 	.word	0x08006fa5
 8006f98:	08006fc9 	.word	0x08006fc9
 8006f9c:	08006fa5 	.word	0x08006fa5
 8006fa0:	08006fc9 	.word	0x08006fc9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	3303      	adds	r3, #3
 8006faa:	089b      	lsrs	r3, r3, #2
 8006fac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006fae:	8afa      	ldrh	r2, [r7, #22]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d91c      	bls.n	8006ff4 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f043 0220 	orr.w	r2, r3, #32
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fc6:	e015      	b.n	8006ff4 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	3303      	adds	r3, #3
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fd2:	8afa      	ldrh	r2, [r7, #22]
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d90a      	bls.n	8006ff8 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fee:	e003      	b.n	8006ff8 <USB_HC_StartXfer+0x464>

      default:
        break;
 8006ff0:	bf00      	nop
 8006ff2:	e002      	b.n	8006ffa <USB_HC_StartXfer+0x466>
        break;
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <USB_HC_StartXfer+0x466>
        break;
 8006ff8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6999      	ldr	r1, [r3, #24]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	785a      	ldrb	r2, [r3, #1]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	b29b      	uxth	r3, r3
 8007008:	2000      	movs	r0, #0
 800700a:	9000      	str	r0, [sp, #0]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff fa2b 	bl	8006468 <USB_WritePacket>
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3728      	adds	r7, #40	@ 0x28
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	b29b      	uxth	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800703e:	b480      	push	{r7}
 8007040:	b089      	sub	sp, #36	@ 0x24
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	0c9b      	lsrs	r3, r3, #18
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	0fdb      	lsrs	r3, r3, #31
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	0fdb      	lsrs	r3, r3, #31
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d10d      	bne.n	80070c0 <USB_HC_Halt+0x82>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <USB_HC_Halt+0x82>
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d002      	beq.n	80070bc <USB_HC_Halt+0x7e>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d101      	bne.n	80070c0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	e0d8      	b.n	8007272 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <USB_HC_Halt+0x8e>
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d173      	bne.n	80071b4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d14a      	bne.n	800718e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d133      	bne.n	800716c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	440a      	add	r2, r1
 800711a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800711e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007122:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	440a      	add	r2, r1
 800713a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800713e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007142:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3301      	adds	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007150:	d82e      	bhi.n	80071b0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007164:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007168:	d0ec      	beq.n	8007144 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800716a:	e081      	b.n	8007270 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	440a      	add	r2, r1
 8007182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007186:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800718a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800718c:	e070      	b.n	8007270 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	4413      	add	r3, r2
 8007196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	0151      	lsls	r1, r2, #5
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	440a      	add	r2, r1
 80071a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ae:	e05f      	b.n	8007270 <USB_HC_Halt+0x232>
            break;
 80071b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071b2:	e05d      	b.n	8007270 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d133      	bne.n	800724c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007202:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	440a      	add	r2, r1
 800721a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800721e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007222:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	3301      	adds	r3, #1
 8007228:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007230:	d81d      	bhi.n	800726e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007248:	d0ec      	beq.n	8007224 <USB_HC_Halt+0x1e6>
 800724a:	e011      	b.n	8007270 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	0151      	lsls	r1, r2, #5
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	440a      	add	r2, r1
 8007262:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007266:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	e000      	b.n	8007270 <USB_HC_Halt+0x232>
          break;
 800726e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3724      	adds	r7, #36	@ 0x24
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b088      	sub	sp, #32
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff f82b 	bl	80062ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007298:	2110      	movs	r1, #16
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff f884 	bl	80063a8 <USB_FlushTxFifo>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff f8ae 	bl	800640c <USB_FlushRxFifo>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072ba:	2300      	movs	r3, #0
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	e01f      	b.n	8007300 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072d6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072de:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072e6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072f4:	461a      	mov	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	3301      	adds	r3, #1
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b0f      	cmp	r3, #15
 8007304:	d9dc      	bls.n	80072c0 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007306:	2300      	movs	r3, #0
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	e034      	b.n	8007376 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	4413      	add	r3, r2
 8007314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007322:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800732a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007332:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	4413      	add	r3, r2
 800733c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007340:	461a      	mov	r2, r3
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3301      	adds	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007352:	d80c      	bhi.n	800736e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	4413      	add	r3, r2
 800735c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800736a:	d0ec      	beq.n	8007346 <USB_StopHost+0xc8>
 800736c:	e000      	b.n	8007370 <USB_StopHost+0xf2>
        break;
 800736e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	3301      	adds	r3, #1
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b0f      	cmp	r3, #15
 800737a:	d9c7      	bls.n	800730c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007382:	461a      	mov	r2, r3
 8007384:	f04f 33ff 	mov.w	r3, #4294967295
 8007388:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fe ff9a 	bl	80062cc <USB_EnableGlobalInt>

  return ret;
 8007398:	7ffb      	ldrb	r3, [r7, #31]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80073a8:	4904      	ldr	r1, [pc, #16]	@ (80073bc <MX_FATFS_Init+0x18>)
 80073aa:	4805      	ldr	r0, [pc, #20]	@ (80073c0 <MX_FATFS_Init+0x1c>)
 80073ac:	f005 fe3e 	bl	800d02c <FATFS_LinkDriver>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	4b03      	ldr	r3, [pc, #12]	@ (80073c4 <MX_FATFS_Init+0x20>)
 80073b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80073b8:	bf00      	nop
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20000208 	.word	0x20000208
 80073c0:	0800e8ec 	.word	0x0800e8ec
 80073c4:	20000204 	.word	0x20000204

080073c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80073cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	4619      	mov	r1, r3
 8007402:	4808      	ldr	r0, [pc, #32]	@ (8007424 <USBH_status+0x34>)
 8007404:	f000 fe79 	bl	80080fa <USBH_MSC_UnitIsReady>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <USBH_status+0x24>
  {
    res = RES_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
 8007412:	e001      	b.n	8007418 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20001278 	.word	0x20001278

08007428 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b094      	sub	sp, #80	@ 0x50
 800742c:	af02      	add	r7, sp, #8
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800743e:	7bf9      	ldrb	r1, [r7, #15]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	4813      	ldr	r0, [pc, #76]	@ (8007498 <USBH_read+0x70>)
 800744a:	f000 feaa 	bl	80081a2 <USBH_MSC_Read>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <USBH_read+0x34>
  {
    res = RES_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800745a:	e017      	b.n	800748c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800745c:	f107 0210 	add.w	r2, r7, #16
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	4619      	mov	r1, r3
 8007464:	480c      	ldr	r0, [pc, #48]	@ (8007498 <USBH_read+0x70>)
 8007466:	f000 fe73 	bl	8008150 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800746a:	7f7b      	ldrb	r3, [r7, #29]
 800746c:	2b3a      	cmp	r3, #58	@ 0x3a
 800746e:	d005      	beq.n	800747c <USBH_read+0x54>
 8007470:	2b3a      	cmp	r3, #58	@ 0x3a
 8007472:	dc07      	bgt.n	8007484 <USBH_read+0x5c>
 8007474:	2b04      	cmp	r3, #4
 8007476:	d001      	beq.n	800747c <USBH_read+0x54>
 8007478:	2b28      	cmp	r3, #40	@ 0x28
 800747a:	d103      	bne.n	8007484 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800747c:	2303      	movs	r3, #3
 800747e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8007482:	e003      	b.n	800748c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800748a:	bf00      	nop
    }
  }

  return res;
 800748c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007490:	4618      	mov	r0, r3
 8007492:	3748      	adds	r7, #72	@ 0x48
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20001278 	.word	0x20001278

0800749c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b094      	sub	sp, #80	@ 0x50
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80074b2:	7bf9      	ldrb	r1, [r7, #15]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	4817      	ldr	r0, [pc, #92]	@ (800751c <USBH_write+0x80>)
 80074be:	f000 fed0 	bl	8008262 <USBH_MSC_Write>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <USBH_write+0x34>
  {
    res = RES_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80074ce:	e01f      	b.n	8007510 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80074d0:	f107 0210 	add.w	r2, r7, #16
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	4619      	mov	r1, r3
 80074d8:	4810      	ldr	r0, [pc, #64]	@ (800751c <USBH_write+0x80>)
 80074da:	f000 fe39 	bl	8008150 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80074de:	7f7b      	ldrb	r3, [r7, #29]
 80074e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80074e2:	d00d      	beq.n	8007500 <USBH_write+0x64>
 80074e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80074e6:	dc0f      	bgt.n	8007508 <USBH_write+0x6c>
 80074e8:	2b28      	cmp	r3, #40	@ 0x28
 80074ea:	d009      	beq.n	8007500 <USBH_write+0x64>
 80074ec:	2b28      	cmp	r3, #40	@ 0x28
 80074ee:	dc0b      	bgt.n	8007508 <USBH_write+0x6c>
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d005      	beq.n	8007500 <USBH_write+0x64>
 80074f4:	2b27      	cmp	r3, #39	@ 0x27
 80074f6:	d107      	bne.n	8007508 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80074f8:	2302      	movs	r3, #2
 80074fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80074fe:	e007      	b.n	8007510 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007500:	2303      	movs	r3, #3
 8007502:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8007506:	e003      	b.n	8007510 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800750e:	bf00      	nop
    }
  }

  return res;
 8007510:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007514:	4618      	mov	r0, r3
 8007516:	3748      	adds	r7, #72	@ 0x48
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20001278 	.word	0x20001278

08007520 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b090      	sub	sp, #64	@ 0x40
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	603a      	str	r2, [r7, #0]
 800752a:	71fb      	strb	r3, [r7, #7]
 800752c:	460b      	mov	r3, r1
 800752e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007536:	79bb      	ldrb	r3, [r7, #6]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d852      	bhi.n	80075e2 <USBH_ioctl+0xc2>
 800753c:	a201      	add	r2, pc, #4	@ (adr r2, 8007544 <USBH_ioctl+0x24>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007555 	.word	0x08007555
 8007548:	0800755d 	.word	0x0800755d
 800754c:	08007587 	.word	0x08007587
 8007550:	080075b3 	.word	0x080075b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800755a:	e045      	b.n	80075e8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800755c:	f107 0208 	add.w	r2, r7, #8
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	4619      	mov	r1, r3
 8007564:	4823      	ldr	r0, [pc, #140]	@ (80075f4 <USBH_ioctl+0xd4>)
 8007566:	f000 fdf3 	bl	8008150 <USBH_MSC_GetLUNInfo>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800757c:	e034      	b.n	80075e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8007584:	e030      	b.n	80075e8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007586:	f107 0208 	add.w	r2, r7, #8
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	4619      	mov	r1, r3
 800758e:	4819      	ldr	r0, [pc, #100]	@ (80075f4 <USBH_ioctl+0xd4>)
 8007590:	f000 fdde 	bl	8008150 <USBH_MSC_GetLUNInfo>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d107      	bne.n	80075aa <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800759a:	8a3b      	ldrh	r3, [r7, #16]
 800759c:	461a      	mov	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80075a8:	e01e      	b.n	80075e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80075b0:	e01a      	b.n	80075e8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80075b2:	f107 0208 	add.w	r2, r7, #8
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	4619      	mov	r1, r3
 80075ba:	480e      	ldr	r0, [pc, #56]	@ (80075f4 <USBH_ioctl+0xd4>)
 80075bc:	f000 fdc8 	bl	8008150 <USBH_MSC_GetLUNInfo>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80075c6:	8a3b      	ldrh	r3, [r7, #16]
 80075c8:	0a5b      	lsrs	r3, r3, #9
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80075d8:	e006      	b.n	80075e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80075e0:	e002      	b.n	80075e8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80075e2:	2304      	movs	r3, #4
 80075e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 80075e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3740      	adds	r7, #64	@ 0x40
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20001278 	.word	0x20001278

080075f8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80075f8:	b590      	push	{r4, r7, lr}
 80075fa:	b089      	sub	sp, #36	@ 0x24
 80075fc:	af04      	add	r7, sp, #16
 80075fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007606:	7919      	ldrb	r1, [r3, #4]
 8007608:	2350      	movs	r3, #80	@ 0x50
 800760a:	2206      	movs	r2, #6
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 fcd7 	bl	8008fc0 <USBH_FindInterface>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2bff      	cmp	r3, #255	@ 0xff
 800761a:	d002      	beq.n	8007622 <USBH_MSC_InterfaceInit+0x2a>
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d901      	bls.n	8007626 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007622:	2302      	movs	r3, #2
 8007624:	e106      	b.n	8007834 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 fcac 	bl	8008f88 <USBH_SelectInterface>
 8007630:	4603      	mov	r3, r0
 8007632:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800763a:	2302      	movs	r3, #2
 800763c:	e0fa      	b.n	8007834 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007644:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8007648:	f006 f82e 	bl	800d6a8 <malloc>
 800764c:	4603      	mov	r3, r0
 800764e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007660:	2302      	movs	r3, #2
 8007662:	e0e7      	b.n	8007834 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007664:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007668:	2100      	movs	r1, #0
 800766a:	68b8      	ldr	r0, [r7, #8]
 800766c:	f006 fae4 	bl	800dc38 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	211a      	movs	r1, #26
 8007676:	fb01 f303 	mul.w	r3, r1, r3
 800767a:	4413      	add	r3, r2
 800767c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	b25b      	sxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	da16      	bge.n	80076b6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	211a      	movs	r1, #26
 800768e:	fb01 f303 	mul.w	r3, r1, r3
 8007692:	4413      	add	r3, r2
 8007694:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	211a      	movs	r1, #26
 80076a4:	fb01 f303 	mul.w	r3, r1, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80076ae:	881a      	ldrh	r2, [r3, #0]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	815a      	strh	r2, [r3, #10]
 80076b4:	e015      	b.n	80076e2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	211a      	movs	r1, #26
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	4413      	add	r3, r2
 80076c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80076c6:	781a      	ldrb	r2, [r3, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	211a      	movs	r1, #26
 80076d2:	fb01 f303 	mul.w	r3, r1, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80076dc:	881a      	ldrh	r2, [r3, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	211a      	movs	r1, #26
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b25b      	sxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	da16      	bge.n	8007728 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	211a      	movs	r1, #26
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	4413      	add	r3, r2
 8007706:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	211a      	movs	r1, #26
 8007716:	fb01 f303 	mul.w	r3, r1, r3
 800771a:	4413      	add	r3, r2
 800771c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007720:	881a      	ldrh	r2, [r3, #0]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	815a      	strh	r2, [r3, #10]
 8007726:	e015      	b.n	8007754 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	211a      	movs	r1, #26
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007738:	781a      	ldrb	r2, [r3, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	211a      	movs	r1, #26
 8007744:	fb01 f303 	mul.w	r3, r1, r3
 8007748:	4413      	add	r3, r2
 800774a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800774e:	881a      	ldrh	r2, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	799b      	ldrb	r3, [r3, #6]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f002 ffb4 	bl	800a6da <USBH_AllocPipe>
 8007772:	4603      	mov	r3, r0
 8007774:	461a      	mov	r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	79db      	ldrb	r3, [r3, #7]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f002 ffaa 	bl	800a6da <USBH_AllocPipe>
 8007786:	4603      	mov	r3, r0
 8007788:	461a      	mov	r2, r3
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fe02 	bl	8008398 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	799b      	ldrb	r3, [r3, #6]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01e      	beq.n	80077da <USBH_MSC_InterfaceInit+0x1e2>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	891b      	ldrh	r3, [r3, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01a      	beq.n	80077da <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	7959      	ldrb	r1, [r3, #5]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	7998      	ldrb	r0, [r3, #6]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	8912      	ldrh	r2, [r2, #8]
 80077bc:	9202      	str	r2, [sp, #8]
 80077be:	2202      	movs	r2, #2
 80077c0:	9201      	str	r2, [sp, #4]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	4623      	mov	r3, r4
 80077c6:	4602      	mov	r2, r0
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f002 ff57 	bl	800a67c <USBH_OpenPipe>
 80077ce:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	79db      	ldrb	r3, [r3, #7]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d02c      	beq.n	8007832 <USBH_MSC_InterfaceInit+0x23a>
 80077d8:	e001      	b.n	80077de <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80077da:	2303      	movs	r3, #3
 80077dc:	e02a      	b.n	8007834 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	895b      	ldrh	r3, [r3, #10]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d025      	beq.n	8007832 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	7919      	ldrb	r1, [r3, #4]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	79d8      	ldrb	r0, [r3, #7]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	8952      	ldrh	r2, [r2, #10]
 80077fe:	9202      	str	r2, [sp, #8]
 8007800:	2202      	movs	r2, #2
 8007802:	9201      	str	r2, [sp, #4]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	4623      	mov	r3, r4
 8007808:	4602      	mov	r2, r0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f002 ff36 	bl	800a67c <USBH_OpenPipe>
 8007810:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	791b      	ldrb	r3, [r3, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f005 fea7 	bl	800d56e <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	795b      	ldrb	r3, [r3, #5]
 8007824:	2200      	movs	r2, #0
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f005 fea0 	bl	800d56e <USBH_LL_SetToggle>

  return USBH_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	e000      	b.n	8007834 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8007832:	2303      	movs	r3, #3
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	bd90      	pop	{r4, r7, pc}

0800783c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	795b      	ldrb	r3, [r3, #5]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00e      	beq.n	8007874 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	795b      	ldrb	r3, [r3, #5]
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f002 ff2c 	bl	800a6ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	795b      	ldrb	r3, [r3, #5]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f002 ff57 	bl	800a71c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	791b      	ldrb	r3, [r3, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00e      	beq.n	800789a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	791b      	ldrb	r3, [r3, #4]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f002 ff19 	bl	800a6ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	791b      	ldrb	r3, [r3, #4]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f002 ff44 	bl	800a71c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f005 ff02 	bl	800d6b8 <free>
    phost->pActiveClass->pData = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078ba:	2200      	movs	r2, #0
 80078bc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80078da:	2301      	movs	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	7b9b      	ldrb	r3, [r3, #14]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d041      	beq.n	800796a <USBH_MSC_ClassRequest+0xa2>
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	dc4b      	bgt.n	8007982 <USBH_MSC_ClassRequest+0xba>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USBH_MSC_ClassRequest+0x2a>
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d147      	bne.n	8007982 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fd30 	bl	800835c <USBH_MSC_BOT_REQ_GetMaxLUN>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	2b03      	cmp	r3, #3
 8007904:	d104      	bne.n	8007910 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d137      	bne.n	8007986 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b02      	cmp	r3, #2
 800791c:	d804      	bhi.n	8007928 <USBH_MSC_ClassRequest+0x60>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	b2da      	uxtb	r2, r3
 8007926:	e000      	b.n	800792a <USBH_MSC_ClassRequest+0x62>
 8007928:	2202      	movs	r2, #2
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800792e:	2300      	movs	r3, #0
 8007930:	73bb      	strb	r3, [r7, #14]
 8007932:	e014      	b.n	800795e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	2134      	movs	r1, #52	@ 0x34
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	3392      	adds	r3, #146	@ 0x92
 8007942:	2202      	movs	r2, #2
 8007944:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	2134      	movs	r1, #52	@ 0x34
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	4413      	add	r3, r2
 8007952:	33c1      	adds	r3, #193	@ 0xc1
 8007954:	2200      	movs	r2, #0
 8007956:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	3301      	adds	r3, #1
 800795c:	73bb      	strb	r3, [r7, #14]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	7bba      	ldrb	r2, [r7, #14]
 8007964:	429a      	cmp	r2, r3
 8007966:	d3e5      	bcc.n	8007934 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007968:	e00d      	b.n	8007986 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800796a:	2100      	movs	r1, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f002 f8ff 	bl	8009b70 <USBH_ClrFeature>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d108      	bne.n	800798a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	7bda      	ldrb	r2, [r3, #15]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007980:	e003      	b.n	800798a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8007982:	bf00      	nop
 8007984:	e002      	b.n	800798c <USBH_MSC_ClassRequest+0xc4>
      break;
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <USBH_MSC_ClassRequest+0xc4>
      break;
 800798a:	bf00      	nop
  }

  return status;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80079aa:	2301      	movs	r3, #1
 80079ac:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80079ae:	2301      	movs	r3, #1
 80079b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80079b2:	2301      	movs	r3, #1
 80079b4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	7b1b      	ldrb	r3, [r3, #12]
 80079ba:	2b0a      	cmp	r3, #10
 80079bc:	f000 8280 	beq.w	8007ec0 <USBH_MSC_Process+0x528>
 80079c0:	2b0a      	cmp	r3, #10
 80079c2:	f300 82b8 	bgt.w	8007f36 <USBH_MSC_Process+0x59e>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <USBH_MSC_Process+0x3a>
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	f000 82b0 	beq.w	8007f30 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80079d0:	e2b1      	b.n	8007f36 <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	7812      	ldrb	r2, [r2, #0]
 80079dc:	4293      	cmp	r3, r2
 80079de:	f080 825d 	bcs.w	8007e9c <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80079e8:	4619      	mov	r1, r3
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	2334      	movs	r3, #52	@ 0x34
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	4413      	add	r3, r2
 80079f4:	3391      	adds	r3, #145	@ 0x91
 80079f6:	2201      	movs	r2, #1
 80079f8:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a00:	4619      	mov	r1, r3
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	2334      	movs	r3, #52	@ 0x34
 8007a06:	fb01 f303 	mul.w	r3, r1, r3
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3390      	adds	r3, #144	@ 0x90
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	f200 824b 	bhi.w	8007eac <USBH_MSC_Process+0x514>
 8007a16:	a201      	add	r2, pc, #4	@ (adr r2, 8007a1c <USBH_MSC_Process+0x84>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a41 	.word	0x08007a41
 8007a20:	08007ead 	.word	0x08007ead
 8007a24:	08007b0b 	.word	0x08007b0b
 8007a28:	08007c91 	.word	0x08007c91
 8007a2c:	08007a67 	.word	0x08007a67
 8007a30:	08007d5d 	.word	0x08007d5d
 8007a34:	08007ead 	.word	0x08007ead
 8007a38:	08007ead 	.word	0x08007ead
 8007a3c:	08007e8b 	.word	0x08007e8b
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a46:	4619      	mov	r1, r3
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	2334      	movs	r3, #52	@ 0x34
 8007a4c:	fb01 f303 	mul.w	r3, r1, r3
 8007a50:	4413      	add	r3, r2
 8007a52:	3390      	adds	r3, #144	@ 0x90
 8007a54:	2204      	movs	r2, #4
 8007a56:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8007a64:	e22b      	b.n	8007ebe <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a6c:	b2d9      	uxtb	r1, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a74:	461a      	mov	r2, r3
 8007a76:	2334      	movs	r3, #52	@ 0x34
 8007a78:	fb02 f303 	mul.w	r3, r2, r3
 8007a7c:	3398      	adds	r3, #152	@ 0x98
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4413      	add	r3, r2
 8007a82:	3307      	adds	r3, #7
 8007a84:	461a      	mov	r2, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 ffa3 	bl	80089d2 <USBH_MSC_SCSI_Inquiry>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10c      	bne.n	8007ab0 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	2334      	movs	r3, #52	@ 0x34
 8007aa2:	fb01 f303 	mul.w	r3, r1, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	3390      	adds	r3, #144	@ 0x90
 8007aaa:	2202      	movs	r2, #2
 8007aac:	701a      	strb	r2, [r3, #0]
            break;
 8007aae:	e1ff      	b.n	8007eb0 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d10c      	bne.n	8007ad0 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007abc:	4619      	mov	r1, r3
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	2334      	movs	r3, #52	@ 0x34
 8007ac2:	fb01 f303 	mul.w	r3, r1, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	3390      	adds	r3, #144	@ 0x90
 8007aca:	2205      	movs	r2, #5
 8007acc:	701a      	strb	r2, [r3, #0]
            break;
 8007ace:	e1ef      	b.n	8007eb0 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	f040 81ec 	bne.w	8007eb0 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ade:	4619      	mov	r1, r3
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	2334      	movs	r3, #52	@ 0x34
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	4413      	add	r3, r2
 8007aea:	3390      	adds	r3, #144	@ 0x90
 8007aec:	2208      	movs	r2, #8
 8007aee:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007af6:	4619      	mov	r1, r3
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	2334      	movs	r3, #52	@ 0x34
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	4413      	add	r3, r2
 8007b02:	3391      	adds	r3, #145	@ 0x91
 8007b04:	2202      	movs	r2, #2
 8007b06:	701a      	strb	r2, [r3, #0]
            break;
 8007b08:	e1d2      	b.n	8007eb0 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fe9f 	bl	8008858 <USBH_MSC_SCSI_TestUnitReady>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d14a      	bne.n	8007bba <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	2334      	movs	r3, #52	@ 0x34
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	3392      	adds	r3, #146	@ 0x92
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00c      	beq.n	8007b58 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b44:	4619      	mov	r1, r3
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	2334      	movs	r3, #52	@ 0x34
 8007b4a:	fb01 f303 	mul.w	r3, r1, r3
 8007b4e:	4413      	add	r3, r2
 8007b50:	33c1      	adds	r3, #193	@ 0xc1
 8007b52:	2201      	movs	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e00b      	b.n	8007b70 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b5e:	4619      	mov	r1, r3
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	2334      	movs	r3, #52	@ 0x34
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	33c1      	adds	r3, #193	@ 0xc1
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b76:	4619      	mov	r1, r3
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	2334      	movs	r3, #52	@ 0x34
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	4413      	add	r3, r2
 8007b82:	3390      	adds	r3, #144	@ 0x90
 8007b84:	2203      	movs	r2, #3
 8007b86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007b8e:	4619      	mov	r1, r3
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	2334      	movs	r3, #52	@ 0x34
 8007b94:	fb01 f303 	mul.w	r3, r1, r3
 8007b98:	4413      	add	r3, r2
 8007b9a:	3391      	adds	r3, #145	@ 0x91
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	2334      	movs	r3, #52	@ 0x34
 8007bac:	fb01 f303 	mul.w	r3, r1, r3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	3392      	adds	r3, #146	@ 0x92
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
            break;
 8007bb8:	e17c      	b.n	8007eb4 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d14a      	bne.n	8007c56 <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	2334      	movs	r3, #52	@ 0x34
 8007bcc:	fb01 f303 	mul.w	r3, r1, r3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3392      	adds	r3, #146	@ 0x92
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d00c      	beq.n	8007bf4 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007be0:	4619      	mov	r1, r3
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	2334      	movs	r3, #52	@ 0x34
 8007be6:	fb01 f303 	mul.w	r3, r1, r3
 8007bea:	4413      	add	r3, r2
 8007bec:	33c1      	adds	r3, #193	@ 0xc1
 8007bee:	2201      	movs	r2, #1
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e00b      	b.n	8007c0c <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	2334      	movs	r3, #52	@ 0x34
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	4413      	add	r3, r2
 8007c06:	33c1      	adds	r3, #193	@ 0xc1
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c12:	4619      	mov	r1, r3
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	2334      	movs	r3, #52	@ 0x34
 8007c18:	fb01 f303 	mul.w	r3, r1, r3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3390      	adds	r3, #144	@ 0x90
 8007c20:	2205      	movs	r2, #5
 8007c22:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	2334      	movs	r3, #52	@ 0x34
 8007c30:	fb01 f303 	mul.w	r3, r1, r3
 8007c34:	4413      	add	r3, r2
 8007c36:	3391      	adds	r3, #145	@ 0x91
 8007c38:	2201      	movs	r2, #1
 8007c3a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c42:	4619      	mov	r1, r3
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	2334      	movs	r3, #52	@ 0x34
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	4413      	add	r3, r2
 8007c4e:	3392      	adds	r3, #146	@ 0x92
 8007c50:	2202      	movs	r2, #2
 8007c52:	701a      	strb	r2, [r3, #0]
            break;
 8007c54:	e12e      	b.n	8007eb4 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	f040 812b 	bne.w	8007eb4 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c64:	4619      	mov	r1, r3
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	2334      	movs	r3, #52	@ 0x34
 8007c6a:	fb01 f303 	mul.w	r3, r1, r3
 8007c6e:	4413      	add	r3, r2
 8007c70:	3390      	adds	r3, #144	@ 0x90
 8007c72:	2208      	movs	r2, #8
 8007c74:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	2334      	movs	r3, #52	@ 0x34
 8007c82:	fb01 f303 	mul.w	r3, r1, r3
 8007c86:	4413      	add	r3, r2
 8007c88:	3391      	adds	r3, #145	@ 0x91
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	701a      	strb	r2, [r3, #0]
            break;
 8007c8e:	e111      	b.n	8007eb4 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c96:	b2d9      	uxtb	r1, r3
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	2334      	movs	r3, #52	@ 0x34
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	3390      	adds	r3, #144	@ 0x90
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4413      	add	r3, r2
 8007cac:	3304      	adds	r3, #4
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fe14 	bl	80088de <USBH_MSC_SCSI_ReadCapacity>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d120      	bne.n	8007d02 <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	2334      	movs	r3, #52	@ 0x34
 8007ccc:	fb01 f303 	mul.w	r3, r1, r3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3390      	adds	r3, #144	@ 0x90
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007cde:	4619      	mov	r1, r3
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	2334      	movs	r3, #52	@ 0x34
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	4413      	add	r3, r2
 8007cea:	3391      	adds	r3, #145	@ 0x91
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007d00:	e0da      	b.n	8007eb8 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d10c      	bne.n	8007d22 <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007d0e:	4619      	mov	r1, r3
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	2334      	movs	r3, #52	@ 0x34
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	4413      	add	r3, r2
 8007d1a:	3390      	adds	r3, #144	@ 0x90
 8007d1c:	2205      	movs	r2, #5
 8007d1e:	701a      	strb	r2, [r3, #0]
            break;
 8007d20:	e0ca      	b.n	8007eb8 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	f040 80c7 	bne.w	8007eb8 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007d30:	4619      	mov	r1, r3
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	2334      	movs	r3, #52	@ 0x34
 8007d36:	fb01 f303 	mul.w	r3, r1, r3
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3390      	adds	r3, #144	@ 0x90
 8007d3e:	2208      	movs	r2, #8
 8007d40:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007d48:	4619      	mov	r1, r3
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	2334      	movs	r3, #52	@ 0x34
 8007d4e:	fb01 f303 	mul.w	r3, r1, r3
 8007d52:	4413      	add	r3, r2
 8007d54:	3391      	adds	r3, #145	@ 0x91
 8007d56:	2202      	movs	r2, #2
 8007d58:	701a      	strb	r2, [r3, #0]
            break;
 8007d5a:	e0ad      	b.n	8007eb8 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007d62:	b2d9      	uxtb	r1, r3
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	2334      	movs	r3, #52	@ 0x34
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
 8007d72:	3398      	adds	r3, #152	@ 0x98
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	3304      	adds	r3, #4
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fecd 	bl	8008b1c <USBH_MSC_SCSI_RequestSense>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d146      	bne.n	8007e1a <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007d92:	4619      	mov	r1, r3
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	2334      	movs	r3, #52	@ 0x34
 8007d98:	fb01 f303 	mul.w	r3, r1, r3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	339c      	adds	r3, #156	@ 0x9c
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b06      	cmp	r3, #6
 8007da4:	d00c      	beq.n	8007dc0 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007dac:	4619      	mov	r1, r3
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	2334      	movs	r3, #52	@ 0x34
 8007db2:	fb01 f303 	mul.w	r3, r1, r3
 8007db6:	4413      	add	r3, r2
 8007db8:	339c      	adds	r3, #156	@ 0x9c
 8007dba:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d117      	bne.n	8007df0 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d80c      	bhi.n	8007df0 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ddc:	4619      	mov	r1, r3
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	2334      	movs	r3, #52	@ 0x34
 8007de2:	fb01 f303 	mul.w	r3, r1, r3
 8007de6:	4413      	add	r3, r2
 8007de8:	3390      	adds	r3, #144	@ 0x90
 8007dea:	2202      	movs	r2, #2
 8007dec:	701a      	strb	r2, [r3, #0]
                  break;
 8007dee:	e066      	b.n	8007ebe <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007df6:	4619      	mov	r1, r3
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	2334      	movs	r3, #52	@ 0x34
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	4413      	add	r3, r2
 8007e02:	3390      	adds	r3, #144	@ 0x90
 8007e04:	2201      	movs	r2, #1
 8007e06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007e0e:	3301      	adds	r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007e18:	e050      	b.n	8007ebc <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d118      	bne.n	8007e52 <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007e26:	4619      	mov	r1, r3
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	2334      	movs	r3, #52	@ 0x34
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	4413      	add	r3, r2
 8007e32:	3390      	adds	r3, #144	@ 0x90
 8007e34:	2208      	movs	r2, #8
 8007e36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007e3e:	4619      	mov	r1, r3
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	2334      	movs	r3, #52	@ 0x34
 8007e44:	fb01 f303 	mul.w	r3, r1, r3
 8007e48:	4413      	add	r3, r2
 8007e4a:	3391      	adds	r3, #145	@ 0x91
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	701a      	strb	r2, [r3, #0]
            break;
 8007e50:	e034      	b.n	8007ebc <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d131      	bne.n	8007ebc <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007e5e:	4619      	mov	r1, r3
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	2334      	movs	r3, #52	@ 0x34
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	4413      	add	r3, r2
 8007e6a:	3390      	adds	r3, #144	@ 0x90
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007e76:	4619      	mov	r1, r3
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	2334      	movs	r3, #52	@ 0x34
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	4413      	add	r3, r2
 8007e82:	3391      	adds	r3, #145	@ 0x91
 8007e84:	2202      	movs	r2, #2
 8007e86:	701a      	strb	r2, [r3, #0]
            break;
 8007e88:	e018      	b.n	8007ebc <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007e90:	3301      	adds	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007e9a:	e010      	b.n	8007ebe <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	220a      	movs	r2, #10
 8007ea8:	731a      	strb	r2, [r3, #12]
      break;
 8007eaa:	e045      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
            break;
 8007eac:	bf00      	nop
 8007eae:	e043      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
            break;
 8007eb0:	bf00      	nop
 8007eb2:	e041      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
            break;
 8007eb4:	bf00      	nop
 8007eb6:	e03f      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
            break;
 8007eb8:	bf00      	nop
 8007eba:	e03d      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
            break;
 8007ebc:	bf00      	nop
      break;
 8007ebe:	e03b      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	7812      	ldrb	r2, [r2, #0]
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d228      	bcs.n	8007f20 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	2334      	movs	r3, #52	@ 0x34
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	4413      	add	r3, r2
 8007eec:	3391      	adds	r3, #145	@ 0x91
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007efa:	2102      	movs	r1, #2
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
 8007f00:	e005      	b.n	8007f0e <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f08:	2106      	movs	r1, #6
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
        MSC_Handle->lun++;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8007f14:	3301      	adds	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8007f1e:	e00b      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	731a      	strb	r2, [r3, #12]
      break;
 8007f2e:	e003      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	75fb      	strb	r3, [r7, #23]
      break;
 8007f34:	e000      	b.n	8007f38 <USBH_MSC_Process+0x5a0>
      break;
 8007f36:	bf00      	nop
  }
  return error;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop

08007f44 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b088      	sub	sp, #32
 8007f5e:	af02      	add	r7, sp, #8
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007f74:	2301      	movs	r3, #1
 8007f76:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	2134      	movs	r1, #52	@ 0x34
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	3390      	adds	r3, #144	@ 0x90
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b07      	cmp	r3, #7
 8007f8a:	d03c      	beq.n	8008006 <USBH_MSC_RdWrProcess+0xac>
 8007f8c:	2b07      	cmp	r3, #7
 8007f8e:	f300 80a8 	bgt.w	80080e2 <USBH_MSC_RdWrProcess+0x188>
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d06c      	beq.n	8008070 <USBH_MSC_RdWrProcess+0x116>
 8007f96:	2b06      	cmp	r3, #6
 8007f98:	f040 80a3 	bne.w	80080e2 <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007f9c:	78f9      	ldrb	r1, [r7, #3]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fea7 	bl	8008cfa <USBH_MSC_SCSI_Read>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	2134      	movs	r1, #52	@ 0x34
 8007fbc:	fb01 f303 	mul.w	r3, r1, r3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3390      	adds	r3, #144	@ 0x90
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fcc:	e08b      	b.n	80080e6 <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d109      	bne.n	8007fe8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	2134      	movs	r1, #52	@ 0x34
 8007fda:	fb01 f303 	mul.w	r3, r1, r3
 8007fde:	4413      	add	r3, r2
 8007fe0:	3390      	adds	r3, #144	@ 0x90
 8007fe2:	2205      	movs	r2, #5
 8007fe4:	701a      	strb	r2, [r3, #0]
      break;
 8007fe6:	e07e      	b.n	80080e6 <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d17b      	bne.n	80080e6 <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	2134      	movs	r1, #52	@ 0x34
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	3390      	adds	r3, #144	@ 0x90
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008000:	2302      	movs	r3, #2
 8008002:	75fb      	strb	r3, [r7, #23]
      break;
 8008004:	e06f      	b.n	80080e6 <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008006:	78f9      	ldrb	r1, [r7, #3]
 8008008:	2300      	movs	r3, #0
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	2200      	movs	r2, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fe02 	bl	8008c1a <USBH_MSC_SCSI_Write>
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	2134      	movs	r1, #52	@ 0x34
 8008026:	fb01 f303 	mul.w	r3, r1, r3
 800802a:	4413      	add	r3, r2
 800802c:	3390      	adds	r3, #144	@ 0x90
 800802e:	2201      	movs	r2, #1
 8008030:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008036:	e058      	b.n	80080ea <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2b02      	cmp	r3, #2
 800803c:	d109      	bne.n	8008052 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	2134      	movs	r1, #52	@ 0x34
 8008044:	fb01 f303 	mul.w	r3, r1, r3
 8008048:	4413      	add	r3, r2
 800804a:	3390      	adds	r3, #144	@ 0x90
 800804c:	2205      	movs	r2, #5
 800804e:	701a      	strb	r2, [r3, #0]
      break;
 8008050:	e04b      	b.n	80080ea <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	2b04      	cmp	r3, #4
 8008056:	d148      	bne.n	80080ea <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	2134      	movs	r1, #52	@ 0x34
 800805e:	fb01 f303 	mul.w	r3, r1, r3
 8008062:	4413      	add	r3, r2
 8008064:	3390      	adds	r3, #144	@ 0x90
 8008066:	2208      	movs	r2, #8
 8008068:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800806a:	2302      	movs	r3, #2
 800806c:	75fb      	strb	r3, [r7, #23]
      break;
 800806e:	e03c      	b.n	80080ea <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	2234      	movs	r2, #52	@ 0x34
 8008074:	fb02 f303 	mul.w	r3, r2, r3
 8008078:	3398      	adds	r3, #152	@ 0x98
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4413      	add	r3, r2
 800807e:	1d1a      	adds	r2, r3, #4
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fd49 	bl	8008b1c <USBH_MSC_SCSI_RequestSense>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d114      	bne.n	80080be <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	2134      	movs	r1, #52	@ 0x34
 800809a:	fb01 f303 	mul.w	r3, r1, r3
 800809e:	4413      	add	r3, r2
 80080a0:	3390      	adds	r3, #144	@ 0x90
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	2134      	movs	r1, #52	@ 0x34
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	4413      	add	r3, r2
 80080b2:	3391      	adds	r3, #145	@ 0x91
 80080b4:	2202      	movs	r2, #2
 80080b6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80080b8:	2302      	movs	r3, #2
 80080ba:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080bc:	e017      	b.n	80080ee <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d014      	beq.n	80080ee <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d111      	bne.n	80080ee <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	2134      	movs	r1, #52	@ 0x34
 80080d0:	fb01 f303 	mul.w	r3, r1, r3
 80080d4:	4413      	add	r3, r2
 80080d6:	3390      	adds	r3, #144	@ 0x90
 80080d8:	2208      	movs	r2, #8
 80080da:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80080dc:	2302      	movs	r3, #2
 80080de:	75fb      	strb	r3, [r7, #23]
      break;
 80080e0:	e005      	b.n	80080ee <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 80080e2:	bf00      	nop
 80080e4:	e004      	b.n	80080f0 <USBH_MSC_RdWrProcess+0x196>
      break;
 80080e6:	bf00      	nop
 80080e8:	e002      	b.n	80080f0 <USBH_MSC_RdWrProcess+0x196>
      break;
 80080ea:	bf00      	nop
 80080ec:	e000      	b.n	80080f0 <USBH_MSC_RdWrProcess+0x196>
      break;
 80080ee:	bf00      	nop

  }
  return error;
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	b29a      	uxth	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b0b      	cmp	r3, #11
 8008122:	d10c      	bne.n	800813e <USBH_MSC_UnitIsReady+0x44>
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	2134      	movs	r1, #52	@ 0x34
 800812a:	fb01 f303 	mul.w	r3, r1, r3
 800812e:	4413      	add	r3, r2
 8008130:	3391      	adds	r3, #145	@ 0x91
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d102      	bne.n	800813e <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
 800813c:	e001      	b.n	8008142 <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008142:	7bfb      	ldrb	r3, [r7, #15]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	460b      	mov	r3, r1
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	b29a      	uxth	r2, r3
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b0b      	cmp	r3, #11
 800817a:	d10d      	bne.n	8008198 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	2234      	movs	r2, #52	@ 0x34
 8008180:	fb02 f303 	mul.w	r3, r2, r3
 8008184:	3390      	adds	r3, #144	@ 0x90
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	2234      	movs	r2, #52	@ 0x34
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f005 fddd 	bl	800dd4e <memcpy>
    return USBH_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	e000      	b.n	800819a <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 8008198:	2302      	movs	r3, #2
  }
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b088      	sub	sp, #32
 80081a6:	af02      	add	r7, sp, #8
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
 80081ae:	460b      	mov	r3, r1
 80081b0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	b29a      	uxth	r2, r3
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80081d8:	2b0b      	cmp	r3, #11
 80081da:	d109      	bne.n	80081f0 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	2134      	movs	r1, #52	@ 0x34
 80081e2:	fb01 f303 	mul.w	r3, r1, r3
 80081e6:	4413      	add	r3, r2
 80081e8:	3390      	adds	r3, #144	@ 0x90
 80081ea:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d001      	beq.n	80081f4 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 80081f0:	2302      	movs	r3, #2
 80081f2:	e032      	b.n	800825a <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 80081f4:	7afb      	ldrb	r3, [r7, #11]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	2134      	movs	r1, #52	@ 0x34
 80081fa:	fb01 f303 	mul.w	r3, r1, r3
 80081fe:	4413      	add	r3, r2
 8008200:	3390      	adds	r3, #144	@ 0x90
 8008202:	2206      	movs	r2, #6
 8008204:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008206:	7af9      	ldrb	r1, [r7, #11]
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 fd72 	bl	8008cfa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800821c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800821e:	e013      	b.n	8008248 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	1ad2      	subs	r2, r2, r3
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	429a      	cmp	r2, r3
 8008236:	d805      	bhi.n	8008244 <USBH_MSC_Read+0xa2>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 8008244:	2302      	movs	r3, #2
 8008246:	e008      	b.n	800825a <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008248:	7afb      	ldrb	r3, [r7, #11]
 800824a:	4619      	mov	r1, r3
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7ff fe84 	bl	8007f5a <USBH_MSC_RdWrProcess>
 8008252:	4603      	mov	r3, r0
 8008254:	2b01      	cmp	r3, #1
 8008256:	d0e3      	beq.n	8008220 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b088      	sub	sp, #32
 8008266:	af02      	add	r7, sp, #8
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
 800826e:	460b      	mov	r3, r1
 8008270:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	b29a      	uxth	r2, r3
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00e      	beq.n	80082b0 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008298:	2b0b      	cmp	r3, #11
 800829a:	d109      	bne.n	80082b0 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800829c:	7afb      	ldrb	r3, [r7, #11]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	2134      	movs	r1, #52	@ 0x34
 80082a2:	fb01 f303 	mul.w	r3, r1, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	3390      	adds	r3, #144	@ 0x90
 80082aa:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d001      	beq.n	80082b4 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 80082b0:	2302      	movs	r3, #2
 80082b2:	e032      	b.n	800831a <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 80082b4:	7afb      	ldrb	r3, [r7, #11]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	2134      	movs	r1, #52	@ 0x34
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	4413      	add	r3, r2
 80082c0:	3390      	adds	r3, #144	@ 0x90
 80082c2:	2207      	movs	r2, #7
 80082c4:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80082c6:	7af9      	ldrb	r1, [r7, #11]
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 fca2 	bl	8008c1a <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80082dc:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80082de:	e013      	b.n	8008308 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	1ad2      	subs	r2, r2, r3
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	f242 7110 	movw	r1, #10000	@ 0x2710
 80082f0:	fb01 f303 	mul.w	r3, r1, r3
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d805      	bhi.n	8008304 <USBH_MSC_Write+0xa2>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 8008304:	2302      	movs	r3, #2
 8008306:	e008      	b.n	800831a <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	4619      	mov	r1, r3
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7ff fe24 	bl	8007f5a <USBH_MSC_RdWrProcess>
 8008312:	4603      	mov	r3, r0
 8008314:	2b01      	cmp	r3, #1
 8008316:	d0e3      	beq.n	80082e0 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2221      	movs	r2, #33	@ 0x21
 800832e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	22ff      	movs	r2, #255	@ 0xff
 8008334:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 ff44 	bl	800a1da <USBH_CtlReq>
 8008352:	4603      	mov	r3, r0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	22a1      	movs	r2, #161	@ 0xa1
 800836a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	22fe      	movs	r2, #254	@ 0xfe
 8008370:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008384:	2201      	movs	r2, #1
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 ff26 	bl	800a1da <USBH_CtlReq>
 800838e:	4603      	mov	r3, r0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4a09      	ldr	r2, [pc, #36]	@ (80083d4 <USBH_MSC_BOT_Init+0x3c>)
 80083ae:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a09      	ldr	r2, [pc, #36]	@ (80083d8 <USBH_MSC_BOT_Init+0x40>)
 80083b4:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	43425355 	.word	0x43425355
 80083d8:	20304050 	.word	0x20304050

080083dc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80083e8:	2301      	movs	r3, #1
 80083ea:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80083ec:	2301      	movs	r3, #1
 80083ee:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80083f0:	2301      	movs	r3, #1
 80083f2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800840c:	3b01      	subs	r3, #1
 800840e:	2b0a      	cmp	r3, #10
 8008410:	f200 819e 	bhi.w	8008750 <USBH_MSC_BOT_Process+0x374>
 8008414:	a201      	add	r2, pc, #4	@ (adr r2, 800841c <USBH_MSC_BOT_Process+0x40>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008449 	.word	0x08008449
 8008420:	08008471 	.word	0x08008471
 8008424:	080084db 	.word	0x080084db
 8008428:	080084f9 	.word	0x080084f9
 800842c:	0800857d 	.word	0x0800857d
 8008430:	0800859f 	.word	0x0800859f
 8008434:	08008637 	.word	0x08008637
 8008438:	08008653 	.word	0x08008653
 800843c:	080086a5 	.word	0x080086a5
 8008440:	080086d5 	.word	0x080086d5
 8008444:	08008737 	.word	0x08008737
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	78fa      	ldrb	r2, [r7, #3]
 800844c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	795b      	ldrb	r3, [r3, #5]
 8008462:	2201      	movs	r2, #1
 8008464:	9200      	str	r2, [sp, #0]
 8008466:	221f      	movs	r2, #31
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f002 f8c4 	bl	800a5f6 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800846e:	e17e      	b.n	800876e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	795b      	ldrb	r3, [r3, #5]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f005 f858 	bl	800d52c <USBH_LL_GetURBState>
 800847c:	4603      	mov	r3, r0
 800847e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008480:	7d3b      	ldrb	r3, [r7, #20]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d118      	bne.n	80084b8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00f      	beq.n	80084ae <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8008494:	b25b      	sxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	da04      	bge.n	80084a4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2203      	movs	r2, #3
 800849e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084a2:	e157      	b.n	8008754 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2205      	movs	r2, #5
 80084a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80084ac:	e152      	b.n	8008754 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2207      	movs	r2, #7
 80084b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80084b6:	e14d      	b.n	8008754 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084b8:	7d3b      	ldrb	r3, [r7, #20]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d104      	bne.n	80084c8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80084c6:	e145      	b.n	8008754 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80084c8:	7d3b      	ldrb	r3, [r7, #20]
 80084ca:	2b05      	cmp	r3, #5
 80084cc:	f040 8142 	bne.w	8008754 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	220a      	movs	r2, #10
 80084d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80084d8:	e13c      	b.n	8008754 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	895a      	ldrh	r2, [r3, #10]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	791b      	ldrb	r3, [r3, #4]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f002 f8a9 	bl	800a640 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2204      	movs	r2, #4
 80084f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 80084f6:	e13a      	b.n	800876e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	791b      	ldrb	r3, [r3, #4]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f005 f814 	bl	800d52c <USBH_LL_GetURBState>
 8008504:	4603      	mov	r3, r0
 8008506:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008508:	7d3b      	ldrb	r3, [r7, #20]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d12d      	bne.n	800856a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	8952      	ldrh	r2, [r2, #10]
 8008516:	4293      	cmp	r3, r2
 8008518:	d910      	bls.n	800853c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	8952      	ldrh	r2, [r2, #10]
 8008524:	441a      	add	r2, r3
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	8952      	ldrh	r2, [r2, #10]
 8008534:	1a9a      	subs	r2, r3, r2
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	65da      	str	r2, [r3, #92]	@ 0x5c
 800853a:	e002      	b.n	8008542 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2200      	movs	r2, #0
 8008540:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	895a      	ldrh	r2, [r3, #10]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	791b      	ldrb	r3, [r3, #4]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f002 f871 	bl	800a640 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800855e:	e0fb      	b.n	8008758 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	2207      	movs	r2, #7
 8008564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008568:	e0f6      	b.n	8008758 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800856a:	7d3b      	ldrb	r3, [r7, #20]
 800856c:	2b05      	cmp	r3, #5
 800856e:	f040 80f3 	bne.w	8008758 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2209      	movs	r2, #9
 8008576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800857a:	e0ed      	b.n	8008758 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	891a      	ldrh	r2, [r3, #8]
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	795b      	ldrb	r3, [r3, #5]
 800858a:	2001      	movs	r0, #1
 800858c:	9000      	str	r0, [sp, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f002 f831 	bl	800a5f6 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2206      	movs	r2, #6
 8008598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800859c:	e0e7      	b.n	800876e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	795b      	ldrb	r3, [r3, #5]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f004 ffc1 	bl	800d52c <USBH_LL_GetURBState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80085ae:	7d3b      	ldrb	r3, [r7, #20]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d12f      	bne.n	8008614 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	8912      	ldrh	r2, [r2, #8]
 80085bc:	4293      	cmp	r3, r2
 80085be:	d910      	bls.n	80085e2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	8912      	ldrh	r2, [r2, #8]
 80085ca:	441a      	add	r2, r3
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	8912      	ldrh	r2, [r2, #8]
 80085da:	1a9a      	subs	r2, r3, r2
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80085e0:	e002      	b.n	80085e8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2200      	movs	r2, #0
 80085e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	891a      	ldrh	r2, [r3, #8]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	795b      	ldrb	r3, [r3, #5]
 80085fe:	2001      	movs	r0, #1
 8008600:	9000      	str	r0, [sp, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 fff7 	bl	800a5f6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008608:	e0a8      	b.n	800875c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2207      	movs	r2, #7
 800860e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008612:	e0a3      	b.n	800875c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008614:	7d3b      	ldrb	r3, [r7, #20]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d104      	bne.n	8008624 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	2205      	movs	r2, #5
 800861e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008622:	e09b      	b.n	800875c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8008624:	7d3b      	ldrb	r3, [r7, #20]
 8008626:	2b05      	cmp	r3, #5
 8008628:	f040 8098 	bne.w	800875c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	220a      	movs	r2, #10
 8008630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008634:	e092      	b.n	800875c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	791b      	ldrb	r3, [r3, #4]
 8008640:	220d      	movs	r2, #13
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f001 fffc 	bl	800a640 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2208      	movs	r2, #8
 800864c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008650:	e08d      	b.n	800876e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	791b      	ldrb	r3, [r3, #4]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f004 ff67 	bl	800d52c <USBH_LL_GetURBState>
 800865e:	4603      	mov	r3, r0
 8008660:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008662:	7d3b      	ldrb	r3, [r7, #20]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d115      	bne.n	8008694 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f8a9 	bl	80087d0 <USBH_MSC_DecodeCSW>
 800867e:	4603      	mov	r3, r0
 8008680:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008682:	7d7b      	ldrb	r3, [r7, #21]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800868c:	e068      	b.n	8008760 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800868e:	2302      	movs	r3, #2
 8008690:	75fb      	strb	r3, [r7, #23]
      break;
 8008692:	e065      	b.n	8008760 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008694:	7d3b      	ldrb	r3, [r7, #20]
 8008696:	2b05      	cmp	r3, #5
 8008698:	d162      	bne.n	8008760 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2209      	movs	r2, #9
 800869e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80086a2:	e05d      	b.n	8008760 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	2200      	movs	r2, #0
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f864 	bl	8008778 <USBH_MSC_BOT_Abort>
 80086b0:	4603      	mov	r3, r0
 80086b2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80086b4:	7dbb      	ldrb	r3, [r7, #22]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2207      	movs	r2, #7
 80086be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80086c2:	e04f      	b.n	8008764 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80086c4:	7dbb      	ldrb	r3, [r7, #22]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d14c      	bne.n	8008764 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	220b      	movs	r2, #11
 80086ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80086d2:	e047      	b.n	8008764 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	2201      	movs	r2, #1
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f84c 	bl	8008778 <USBH_MSC_BOT_Abort>
 80086e0:	4603      	mov	r3, r0
 80086e2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80086e4:	7dbb      	ldrb	r3, [r7, #22]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d11d      	bne.n	8008726 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	795b      	ldrb	r3, [r3, #5]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f004 ff6f 	bl	800d5d4 <USBH_LL_GetToggle>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	7959      	ldrb	r1, [r3, #5]
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	f1c3 0301 	rsb	r3, r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f004 ff30 	bl	800d56e <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	791b      	ldrb	r3, [r3, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f004 ff29 	bl	800d56e <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	2209      	movs	r2, #9
 8008720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008724:	e020      	b.n	8008768 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8008726:	7dbb      	ldrb	r3, [r7, #22]
 8008728:	2b04      	cmp	r3, #4
 800872a:	d11d      	bne.n	8008768 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	220b      	movs	r2, #11
 8008730:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008734:	e018      	b.n	8008768 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fdf3 	bl	8008322 <USBH_MSC_BOT_REQ_Reset>
 800873c:	4603      	mov	r3, r0
 800873e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d112      	bne.n	800876c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800874e:	e00d      	b.n	800876c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008750:	bf00      	nop
 8008752:	e00c      	b.n	800876e <USBH_MSC_BOT_Process+0x392>
      break;
 8008754:	bf00      	nop
 8008756:	e00a      	b.n	800876e <USBH_MSC_BOT_Process+0x392>
      break;
 8008758:	bf00      	nop
 800875a:	e008      	b.n	800876e <USBH_MSC_BOT_Process+0x392>
      break;
 800875c:	bf00      	nop
 800875e:	e006      	b.n	800876e <USBH_MSC_BOT_Process+0x392>
      break;
 8008760:	bf00      	nop
 8008762:	e004      	b.n	800876e <USBH_MSC_BOT_Process+0x392>
      break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <USBH_MSC_BOT_Process+0x392>
      break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <USBH_MSC_BOT_Process+0x392>
      break;
 800876c:	bf00      	nop
  }
  return status;
 800876e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
 8008784:	4613      	mov	r3, r2
 8008786:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008788:	2302      	movs	r3, #2
 800878a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008796:	78bb      	ldrb	r3, [r7, #2]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <USBH_MSC_BOT_Abort+0x2a>
 800879c:	2b01      	cmp	r3, #1
 800879e:	d009      	beq.n	80087b4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80087a0:	e011      	b.n	80087c6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	79db      	ldrb	r3, [r3, #7]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 f9e1 	bl	8009b70 <USBH_ClrFeature>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
      break;
 80087b2:	e008      	b.n	80087c6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	799b      	ldrb	r3, [r3, #6]
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 f9d8 	bl	8009b70 <USBH_ClrFeature>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]
      break;
 80087c4:	bf00      	nop
  }
  return status;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80087e2:	2301      	movs	r3, #1
 80087e4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	791b      	ldrb	r3, [r3, #4]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f004 fe0b 	bl	800d408 <USBH_LL_GetLastXferSize>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b0d      	cmp	r3, #13
 80087f6:	d002      	beq.n	80087fe <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 80087f8:	2302      	movs	r3, #2
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e024      	b.n	8008848 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008802:	4a14      	ldr	r2, [pc, #80]	@ (8008854 <USBH_MSC_DecodeCSW+0x84>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d11d      	bne.n	8008844 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008810:	429a      	cmp	r2, r3
 8008812:	d119      	bne.n	8008848 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800881a:	2b00      	cmp	r3, #0
 800881c:	d102      	bne.n	8008824 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
 8008822:	e011      	b.n	8008848 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800882a:	2b01      	cmp	r3, #1
 800882c:	d102      	bne.n	8008834 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800882e:	2301      	movs	r3, #1
 8008830:	73fb      	strb	r3, [r7, #15]
 8008832:	e009      	b.n	8008848 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800883a:	2b02      	cmp	r3, #2
 800883c:	d104      	bne.n	8008848 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800883e:	2302      	movs	r3, #2
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	e001      	b.n	8008848 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008844:	2302      	movs	r3, #2
 8008846:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	53425355 	.word	0x53425355

08008858 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008864:	2302      	movs	r3, #2
 8008866:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008878:	2b01      	cmp	r3, #1
 800887a:	d002      	beq.n	8008882 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800887c:	2b02      	cmp	r3, #2
 800887e:	d021      	beq.n	80088c4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008880:	e028      	b.n	80088d4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2200      	movs	r2, #0
 8008886:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	220a      	movs	r2, #10
 8008894:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	3363      	adds	r3, #99	@ 0x63
 800889c:	2210      	movs	r2, #16
 800889e:	2100      	movs	r1, #0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f005 f9c9 	bl	800dc38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 80088be:	2301      	movs	r3, #1
 80088c0:	73fb      	strb	r3, [r7, #15]
      break;
 80088c2:	e007      	b.n	80088d4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff fd87 	bl	80083dc <USBH_MSC_BOT_Process>
 80088ce:	4603      	mov	r3, r0
 80088d0:	73fb      	strb	r3, [r7, #15]
      break;
 80088d2:	bf00      	nop
  }

  return error;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b086      	sub	sp, #24
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	460b      	mov	r3, r1
 80088e8:	607a      	str	r2, [r7, #4]
 80088ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 80088ec:	2301      	movs	r3, #1
 80088ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008900:	2b01      	cmp	r3, #1
 8008902:	d002      	beq.n	800890a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008904:	2b02      	cmp	r3, #2
 8008906:	d027      	beq.n	8008958 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008908:	e05e      	b.n	80089c8 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2208      	movs	r2, #8
 800890e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	2280      	movs	r2, #128	@ 0x80
 8008914:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	220a      	movs	r2, #10
 800891c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	3363      	adds	r3, #99	@ 0x63
 8008924:	2210      	movs	r2, #16
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f005 f985 	bl	800dc38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2225      	movs	r2, #37	@ 0x25
 8008932:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2202      	movs	r2, #2
 8008942:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f103 0210 	add.w	r2, r3, #16
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008952:	2301      	movs	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
      break;
 8008956:	e037      	b.n	80089c8 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	4619      	mov	r1, r3
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7ff fd3d 	bl	80083dc <USBH_MSC_BOT_Process>
 8008962:	4603      	mov	r3, r0
 8008964:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d12c      	bne.n	80089c6 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008972:	3303      	adds	r3, #3
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800897e:	3302      	adds	r3, #2
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	021b      	lsls	r3, r3, #8
 8008984:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800898c:	3301      	adds	r3, #1
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008992:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	061b      	lsls	r3, r3, #24
 800899e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089aa:	3307      	adds	r3, #7
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089b6:	3306      	adds	r3, #6
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	b29b      	uxth	r3, r3
 80089be:	4313      	orrs	r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	809a      	strh	r2, [r3, #4]
      break;
 80089c6:	bf00      	nop
  }

  return error;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	460b      	mov	r3, r1
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80089e0:	2302      	movs	r3, #2
 80089e2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d002      	beq.n	80089fe <USBH_MSC_SCSI_Inquiry+0x2c>
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d03d      	beq.n	8008a78 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80089fc:	e089      	b.n	8008b12 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2224      	movs	r2, #36	@ 0x24
 8008a02:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2280      	movs	r2, #128	@ 0x80
 8008a08:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	220a      	movs	r2, #10
 8008a10:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	3363      	adds	r3, #99	@ 0x63
 8008a18:	220a      	movs	r2, #10
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f005 f90b 	bl	800dc38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2212      	movs	r2, #18
 8008a26:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	015b      	lsls	r3, r3, #5
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2224      	movs	r2, #36	@ 0x24
 8008a4a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2202      	movs	r2, #2
 8008a62:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f103 0210 	add.w	r2, r3, #16
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
      break;
 8008a76:	e04c      	b.n	8008b12 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff fcad 	bl	80083dc <USBH_MSC_BOT_Process>
 8008a82:	4603      	mov	r3, r0
 8008a84:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d141      	bne.n	8008b10 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008a8c:	2222      	movs	r2, #34	@ 0x22
 8008a8e:	2100      	movs	r1, #0
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f005 f8d1 	bl	800dc38 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	f003 031f 	and.w	r3, r3, #31
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	095b      	lsrs	r3, r3, #5
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008abe:	3301      	adds	r3, #1
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	b25b      	sxtb	r3, r3
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da03      	bge.n	8008ad0 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	709a      	strb	r2, [r3, #2]
 8008ace:	e002      	b.n	8008ad6 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	1cd8      	adds	r0, r3, #3
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	2208      	movs	r2, #8
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	f005 f932 	bl	800dd4e <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f103 000c 	add.w	r0, r3, #12
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008af6:	3310      	adds	r3, #16
 8008af8:	2210      	movs	r2, #16
 8008afa:	4619      	mov	r1, r3
 8008afc:	f005 f927 	bl	800dd4e <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	331d      	adds	r3, #29
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8008b0a:	3220      	adds	r2, #32
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	601a      	str	r2, [r3, #0]
      break;
 8008b10:	bf00      	nop
  }

  return error;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	460b      	mov	r3, r1
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d002      	beq.n	8008b48 <USBH_MSC_SCSI_RequestSense+0x2c>
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d03d      	beq.n	8008bc2 <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 8008b46:	e063      	b.n	8008c10 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	220e      	movs	r2, #14
 8008b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2280      	movs	r2, #128	@ 0x80
 8008b52:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	220a      	movs	r2, #10
 8008b5a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	3363      	adds	r3, #99	@ 0x63
 8008b62:	2210      	movs	r2, #16
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f005 f866 	bl	800dc38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2203      	movs	r2, #3
 8008b70:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8008b74:	7afb      	ldrb	r3, [r7, #11]
 8008b76:	015b      	lsls	r3, r3, #5
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	220e      	movs	r2, #14
 8008b94:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f103 0210 	add.w	r2, r3, #16
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc0:	e026      	b.n	8008c10 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008bc2:	7afb      	ldrb	r3, [r7, #11]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff fc08 	bl	80083dc <USBH_MSC_BOT_Process>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d11b      	bne.n	8008c0e <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bdc:	3302      	adds	r3, #2
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bf0:	7b1a      	ldrb	r2, [r3, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bfc:	7b5a      	ldrb	r2, [r3, #13]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c08:	d101      	bne.n	8008c0e <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 8008c0a:	2304      	movs	r3, #4
 8008c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0e:	bf00      	nop
  }

  return error;
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b086      	sub	sp, #24
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
 8008c26:	460b      	mov	r3, r1
 8008c28:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d002      	beq.n	8008c48 <USBH_MSC_SCSI_Write+0x2e>
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d04c      	beq.n	8008ce0 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008c46:	e053      	b.n	8008cf0 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	2134      	movs	r1, #52	@ 0x34
 8008c4e:	fb01 f303 	mul.w	r3, r1, r3
 8008c52:	4413      	add	r3, r2
 8008c54:	3398      	adds	r3, #152	@ 0x98
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	fb03 f202 	mul.w	r2, r3, r2
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	220a      	movs	r2, #10
 8008c70:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	3363      	adds	r3, #99	@ 0x63
 8008c78:	2210      	movs	r2, #16
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f004 ffdb 	bl	800dc38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	222a      	movs	r2, #42	@ 0x2a
 8008c86:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8008c8a:	79fa      	ldrb	r2, [r7, #7]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8008c92:	79ba      	ldrb	r2, [r7, #6]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8008c9a:	797a      	ldrb	r2, [r7, #5]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8008ca2:	1d3b      	adds	r3, r7, #4
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8008cac:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8008cb6:	f107 0320 	add.w	r3, r7, #32
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008cde:	e007      	b.n	8008cf0 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008ce0:	7afb      	ldrb	r3, [r7, #11]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7ff fb79 	bl	80083dc <USBH_MSC_BOT_Process>
 8008cea:	4603      	mov	r3, r0
 8008cec:	75fb      	strb	r3, [r7, #23]
      break;
 8008cee:	bf00      	nop
  }

  return error;
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b086      	sub	sp, #24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	460b      	mov	r3, r1
 8008d08:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d002      	beq.n	8008d28 <USBH_MSC_SCSI_Read+0x2e>
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d04c      	beq.n	8008dc0 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008d26:	e053      	b.n	8008dd0 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	2134      	movs	r1, #52	@ 0x34
 8008d2e:	fb01 f303 	mul.w	r3, r1, r3
 8008d32:	4413      	add	r3, r2
 8008d34:	3398      	adds	r3, #152	@ 0x98
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	fb03 f202 	mul.w	r2, r3, r2
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	2280      	movs	r2, #128	@ 0x80
 8008d48:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	220a      	movs	r2, #10
 8008d50:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	3363      	adds	r3, #99	@ 0x63
 8008d58:	2210      	movs	r2, #16
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f004 ff6b 	bl	800dc38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2228      	movs	r2, #40	@ 0x28
 8008d66:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8008d6a:	79fa      	ldrb	r2, [r7, #7]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8008d72:	79ba      	ldrb	r2, [r7, #6]
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8008d7a:	797a      	ldrb	r2, [r7, #5]
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8008d82:	1d3b      	adds	r3, r7, #4
 8008d84:	781a      	ldrb	r2, [r3, #0]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8008d8c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8008d96:	f107 0320 	add.w	r3, r7, #32
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2202      	movs	r2, #2
 8008dae:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dbe:	e007      	b.n	8008dd0 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008dc0:	7afb      	ldrb	r3, [r7, #11]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7ff fb09 	bl	80083dc <USBH_MSC_BOT_Process>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dce:	bf00      	nop
  }

  return error;
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	4613      	mov	r3, r2
 8008de6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008dee:	2302      	movs	r3, #2
 8008df0:	e029      	b.n	8008e46 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	79fa      	ldrb	r2, [r7, #7]
 8008df6:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f81f 	bl	8008e4e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f004 fa2e 	bl	800d2a0 <USBH_LL_Init>

  return USBH_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	e009      	b.n	8008e74 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	33e0      	adds	r3, #224	@ 0xe0
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b0f      	cmp	r3, #15
 8008e78:	d9f2      	bls.n	8008e60 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	e009      	b.n	8008e94 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e9a:	d3f1      	bcc.n	8008e80 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2240      	movs	r2, #64	@ 0x40
 8008ec0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	331c      	adds	r3, #28
 8008eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f004 fea0 	bl	800dc38 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f02:	2100      	movs	r1, #0
 8008f04:	4618      	mov	r0, r3
 8008f06:	f004 fe97 	bl	800dc38 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008f10:	2212      	movs	r2, #18
 8008f12:	2100      	movs	r1, #0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f004 fe8f 	bl	800dc38 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f20:	223e      	movs	r2, #62	@ 0x3e
 8008f22:	2100      	movs	r1, #0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f004 fe87 	bl	800dc38 <memset>

  return USBH_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d016      	beq.n	8008f76 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10e      	bne.n	8008f70 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f58:	1c59      	adds	r1, r3, #1
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	33de      	adds	r3, #222	@ 0xde
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]
 8008f6e:	e004      	b.n	8008f7a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008f70:	2302      	movs	r3, #2
 8008f72:	73fb      	strb	r3, [r7, #15]
 8008f74:	e001      	b.n	8008f7a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008f76:	2302      	movs	r3, #2
 8008f78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d204      	bcs.n	8008fae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008fac:	e001      	b.n	8008fb2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	4608      	mov	r0, r1
 8008fca:	4611      	mov	r1, r2
 8008fcc:	461a      	mov	r2, r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	70fb      	strb	r3, [r7, #3]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	70bb      	strb	r3, [r7, #2]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008fe8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fea:	e025      	b.n	8009038 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	221a      	movs	r2, #26
 8008ff0:	fb02 f303 	mul.w	r3, r2, r3
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3302      	adds	r3, #2
 8008ffc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	795b      	ldrb	r3, [r3, #5]
 8009002:	78fa      	ldrb	r2, [r7, #3]
 8009004:	429a      	cmp	r2, r3
 8009006:	d002      	beq.n	800900e <USBH_FindInterface+0x4e>
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	2bff      	cmp	r3, #255	@ 0xff
 800900c:	d111      	bne.n	8009032 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009012:	78ba      	ldrb	r2, [r7, #2]
 8009014:	429a      	cmp	r2, r3
 8009016:	d002      	beq.n	800901e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009018:	78bb      	ldrb	r3, [r7, #2]
 800901a:	2bff      	cmp	r3, #255	@ 0xff
 800901c:	d109      	bne.n	8009032 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009022:	787a      	ldrb	r2, [r7, #1]
 8009024:	429a      	cmp	r2, r3
 8009026:	d002      	beq.n	800902e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009028:	787b      	ldrb	r3, [r7, #1]
 800902a:	2bff      	cmp	r3, #255	@ 0xff
 800902c:	d101      	bne.n	8009032 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	e006      	b.n	8009040 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	3301      	adds	r3, #1
 8009036:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d9d6      	bls.n	8008fec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800903e:	23ff      	movs	r3, #255	@ 0xff
}
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f004 f95f 	bl	800d318 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800905a:	2101      	movs	r1, #1
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f004 fa78 	bl	800d552 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af04      	add	r7, sp, #16
 8009072:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009074:	2302      	movs	r3, #2
 8009076:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b01      	cmp	r3, #1
 8009086:	d102      	bne.n	800908e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2203      	movs	r2, #3
 800908c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b0b      	cmp	r3, #11
 8009096:	f200 81bb 	bhi.w	8009410 <USBH_Process+0x3a4>
 800909a:	a201      	add	r2, pc, #4	@ (adr r2, 80090a0 <USBH_Process+0x34>)
 800909c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a0:	080090d1 	.word	0x080090d1
 80090a4:	08009103 	.word	0x08009103
 80090a8:	0800916b 	.word	0x0800916b
 80090ac:	080093ab 	.word	0x080093ab
 80090b0:	08009411 	.word	0x08009411
 80090b4:	0800920b 	.word	0x0800920b
 80090b8:	08009351 	.word	0x08009351
 80090bc:	08009241 	.word	0x08009241
 80090c0:	08009261 	.word	0x08009261
 80090c4:	0800927f 	.word	0x0800927f
 80090c8:	080092c3 	.word	0x080092c3
 80090cc:	08009393 	.word	0x08009393
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 819b 	beq.w	8009414 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80090e4:	20c8      	movs	r0, #200	@ 0xc8
 80090e6:	f004 faa8 	bl	800d63a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f004 f971 	bl	800d3d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009100:	e188      	b.n	8009414 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009108:	2b01      	cmp	r3, #1
 800910a:	d107      	bne.n	800911c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800911a:	e18a      	b.n	8009432 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009122:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009126:	d914      	bls.n	8009152 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800912e:	3301      	adds	r3, #1
 8009130:	b2da      	uxtb	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800913e:	2b03      	cmp	r3, #3
 8009140:	d903      	bls.n	800914a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	220d      	movs	r2, #13
 8009146:	701a      	strb	r2, [r3, #0]
      break;
 8009148:	e173      	b.n	8009432 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
      break;
 8009150:	e16f      	b.n	8009432 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009158:	f103 020a 	add.w	r2, r3, #10
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009162:	200a      	movs	r0, #10
 8009164:	f004 fa69 	bl	800d63a <USBH_Delay>
      break;
 8009168:	e163      	b.n	8009432 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800917a:	2104      	movs	r1, #4
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009180:	2064      	movs	r0, #100	@ 0x64
 8009182:	f004 fa5a 	bl	800d63a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f004 f8fc 	bl	800d384 <USBH_LL_GetSpeed>
 800918c:	4603      	mov	r3, r0
 800918e:	461a      	mov	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2205      	movs	r2, #5
 800919a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800919c:	2100      	movs	r1, #0
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 fa9b 	bl	800a6da <USBH_AllocPipe>
 80091a4:	4603      	mov	r3, r0
 80091a6:	461a      	mov	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80091ac:	2180      	movs	r1, #128	@ 0x80
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 fa93 	bl	800a6da <USBH_AllocPipe>
 80091b4:	4603      	mov	r3, r0
 80091b6:	461a      	mov	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	7919      	ldrb	r1, [r3, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80091d0:	9202      	str	r2, [sp, #8]
 80091d2:	2200      	movs	r2, #0
 80091d4:	9201      	str	r2, [sp, #4]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4603      	mov	r3, r0
 80091da:	2280      	movs	r2, #128	@ 0x80
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 fa4d 	bl	800a67c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7959      	ldrb	r1, [r3, #5]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091f6:	9202      	str	r2, [sp, #8]
 80091f8:	2200      	movs	r2, #0
 80091fa:	9201      	str	r2, [sp, #4]
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	4603      	mov	r3, r0
 8009200:	2200      	movs	r2, #0
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 fa3a 	bl	800a67c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009208:	e113      	b.n	8009432 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f916 	bl	800943c <USBH_HandleEnum>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	f040 80fd 	bne.w	8009418 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800922c:	2b01      	cmp	r3, #1
 800922e:	d103      	bne.n	8009238 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2208      	movs	r2, #8
 8009234:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009236:	e0ef      	b.n	8009418 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2207      	movs	r2, #7
 800923c:	701a      	strb	r2, [r3, #0]
      break;
 800923e:	e0eb      	b.n	8009418 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 80e8 	beq.w	800941c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009252:	2101      	movs	r1, #1
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2208      	movs	r2, #8
 800925c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800925e:	e0dd      	b.n	800941c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fc3a 	bl	8009ae2 <USBH_SetCfg>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	f040 80d5 	bne.w	8009420 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2209      	movs	r2, #9
 800927a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800927c:	e0d0      	b.n	8009420 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d016      	beq.n	80092ba <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800928c:	2101      	movs	r1, #1
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fc4a 	bl	8009b28 <USBH_SetFeature>
 8009294:	4603      	mov	r3, r0
 8009296:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	220a      	movs	r2, #10
 80092a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092a6:	e0bd      	b.n	8009424 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	f040 80b9 	bne.w	8009424 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	220a      	movs	r2, #10
 80092b6:	701a      	strb	r2, [r3, #0]
      break;
 80092b8:	e0b4      	b.n	8009424 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	220a      	movs	r2, #10
 80092be:	701a      	strb	r2, [r3, #0]
      break;
 80092c0:	e0b0      	b.n	8009424 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 80ad 	beq.w	8009428 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092d6:	2300      	movs	r3, #0
 80092d8:	73fb      	strb	r3, [r7, #15]
 80092da:	e016      	b.n	800930a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80092dc:	7bfa      	ldrb	r2, [r7, #15]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	32de      	adds	r2, #222	@ 0xde
 80092e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e6:	791a      	ldrb	r2, [r3, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d108      	bne.n	8009304 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80092f2:	7bfa      	ldrb	r2, [r7, #15]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	32de      	adds	r2, #222	@ 0xde
 80092f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009302:	e005      	b.n	8009310 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009304:	7bfb      	ldrb	r3, [r7, #15]
 8009306:	3301      	adds	r3, #1
 8009308:	73fb      	strb	r3, [r7, #15]
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0e5      	beq.n	80092dc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d016      	beq.n	8009348 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4798      	blx	r3
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d109      	bne.n	8009340 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2206      	movs	r2, #6
 8009330:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009338:	2103      	movs	r1, #3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800933e:	e073      	b.n	8009428 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	220d      	movs	r2, #13
 8009344:	701a      	strb	r2, [r3, #0]
      break;
 8009346:	e06f      	b.n	8009428 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	220d      	movs	r2, #13
 800934c:	701a      	strb	r2, [r3, #0]
      break;
 800934e:	e06b      	b.n	8009428 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d017      	beq.n	800938a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
 8009366:	4603      	mov	r3, r0
 8009368:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800936a:	7bbb      	ldrb	r3, [r7, #14]
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	220b      	movs	r2, #11
 8009376:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009378:	e058      	b.n	800942c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d154      	bne.n	800942c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	220d      	movs	r2, #13
 8009386:	701a      	strb	r2, [r3, #0]
      break;
 8009388:	e050      	b.n	800942c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	220d      	movs	r2, #13
 800938e:	701a      	strb	r2, [r3, #0]
      break;
 8009390:	e04c      	b.n	800942c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d049      	beq.n	8009430 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	4798      	blx	r3
      }
      break;
 80093a8:	e042      	b.n	8009430 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff fd4b 	bl	8008e4e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093e6:	2105      	movs	r1, #5
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d107      	bne.n	8009408 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff fe23 	bl	800904c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009406:	e014      	b.n	8009432 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f003 ff85 	bl	800d318 <USBH_LL_Start>
      break;
 800940e:	e010      	b.n	8009432 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009410:	bf00      	nop
 8009412:	e00e      	b.n	8009432 <USBH_Process+0x3c6>
      break;
 8009414:	bf00      	nop
 8009416:	e00c      	b.n	8009432 <USBH_Process+0x3c6>
      break;
 8009418:	bf00      	nop
 800941a:	e00a      	b.n	8009432 <USBH_Process+0x3c6>
    break;
 800941c:	bf00      	nop
 800941e:	e008      	b.n	8009432 <USBH_Process+0x3c6>
      break;
 8009420:	bf00      	nop
 8009422:	e006      	b.n	8009432 <USBH_Process+0x3c6>
      break;
 8009424:	bf00      	nop
 8009426:	e004      	b.n	8009432 <USBH_Process+0x3c6>
      break;
 8009428:	bf00      	nop
 800942a:	e002      	b.n	8009432 <USBH_Process+0x3c6>
      break;
 800942c:	bf00      	nop
 800942e:	e000      	b.n	8009432 <USBH_Process+0x3c6>
      break;
 8009430:	bf00      	nop
  }
  return USBH_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af04      	add	r7, sp, #16
 8009442:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009444:	2301      	movs	r3, #1
 8009446:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009448:	2301      	movs	r3, #1
 800944a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	2b07      	cmp	r3, #7
 8009452:	f200 81bd 	bhi.w	80097d0 <USBH_HandleEnum+0x394>
 8009456:	a201      	add	r2, pc, #4	@ (adr r2, 800945c <USBH_HandleEnum+0x20>)
 8009458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945c:	0800947d 	.word	0x0800947d
 8009460:	08009537 	.word	0x08009537
 8009464:	080095a1 	.word	0x080095a1
 8009468:	0800962b 	.word	0x0800962b
 800946c:	08009695 	.word	0x08009695
 8009470:	08009705 	.word	0x08009705
 8009474:	0800974b 	.word	0x0800974b
 8009478:	08009791 	.word	0x08009791
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800947c:	2108      	movs	r1, #8
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa4c 	bl	800991c <USBH_Get_DevDesc>
 8009484:	4603      	mov	r3, r0
 8009486:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d12e      	bne.n	80094ec <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7919      	ldrb	r1, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80094b2:	9202      	str	r2, [sp, #8]
 80094b4:	2200      	movs	r2, #0
 80094b6:	9201      	str	r2, [sp, #4]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	4603      	mov	r3, r0
 80094bc:	2280      	movs	r2, #128	@ 0x80
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 f8dc 	bl	800a67c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7959      	ldrb	r1, [r3, #5]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094d8:	9202      	str	r2, [sp, #8]
 80094da:	2200      	movs	r2, #0
 80094dc:	9201      	str	r2, [sp, #4]
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	4603      	mov	r3, r0
 80094e2:	2200      	movs	r2, #0
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 f8c9 	bl	800a67c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80094ea:	e173      	b.n	80097d4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	f040 8170 	bne.w	80097d4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094fa:	3301      	adds	r3, #1
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800950a:	2b03      	cmp	r3, #3
 800950c:	d903      	bls.n	8009516 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	220d      	movs	r2, #13
 8009512:	701a      	strb	r2, [r3, #0]
      break;
 8009514:	e15e      	b.n	80097d4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	795b      	ldrb	r3, [r3, #5]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 f8fd 	bl	800a71c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	791b      	ldrb	r3, [r3, #4]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 f8f7 	bl	800a71c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	701a      	strb	r2, [r3, #0]
      break;
 8009534:	e14e      	b.n	80097d4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009536:	2112      	movs	r1, #18
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9ef 	bl	800991c <USBH_Get_DevDesc>
 800953e:	4603      	mov	r3, r0
 8009540:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d103      	bne.n	8009550 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800954e:	e143      	b.n	80097d8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b03      	cmp	r3, #3
 8009554:	f040 8140 	bne.w	80097d8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800955e:	3301      	adds	r3, #1
 8009560:	b2da      	uxtb	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800956e:	2b03      	cmp	r3, #3
 8009570:	d903      	bls.n	800957a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	220d      	movs	r2, #13
 8009576:	701a      	strb	r2, [r3, #0]
      break;
 8009578:	e12e      	b.n	80097d8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	795b      	ldrb	r3, [r3, #5]
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 f8cb 	bl	800a71c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	791b      	ldrb	r3, [r3, #4]
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 f8c5 	bl	800a71c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
      break;
 800959e:	e11b      	b.n	80097d8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80095a0:	2101      	movs	r1, #1
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa79 	bl	8009a9a <USBH_SetAddress>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d130      	bne.n	8009614 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80095b2:	2002      	movs	r0, #2
 80095b4:	f004 f841 	bl	800d63a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2203      	movs	r2, #3
 80095c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	7919      	ldrb	r1, [r3, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095da:	9202      	str	r2, [sp, #8]
 80095dc:	2200      	movs	r2, #0
 80095de:	9201      	str	r2, [sp, #4]
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	4603      	mov	r3, r0
 80095e4:	2280      	movs	r2, #128	@ 0x80
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f001 f848 	bl	800a67c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	7959      	ldrb	r1, [r3, #5]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009600:	9202      	str	r2, [sp, #8]
 8009602:	2200      	movs	r2, #0
 8009604:	9201      	str	r2, [sp, #4]
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	4603      	mov	r3, r0
 800960a:	2200      	movs	r2, #0
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f001 f835 	bl	800a67c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009612:	e0e3      	b.n	80097dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b03      	cmp	r3, #3
 8009618:	f040 80e0 	bne.w	80097dc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	220d      	movs	r2, #13
 8009620:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	705a      	strb	r2, [r3, #1]
      break;
 8009628:	e0d8      	b.n	80097dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800962a:	2109      	movs	r1, #9
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9a1 	bl	8009974 <USBH_Get_CfgDesc>
 8009632:	4603      	mov	r3, r0
 8009634:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d103      	bne.n	8009644 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2204      	movs	r2, #4
 8009640:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009642:	e0cd      	b.n	80097e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	2b03      	cmp	r3, #3
 8009648:	f040 80ca 	bne.w	80097e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009652:	3301      	adds	r3, #1
 8009654:	b2da      	uxtb	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009662:	2b03      	cmp	r3, #3
 8009664:	d903      	bls.n	800966e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	220d      	movs	r2, #13
 800966a:	701a      	strb	r2, [r3, #0]
      break;
 800966c:	e0b8      	b.n	80097e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	795b      	ldrb	r3, [r3, #5]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f001 f851 	bl	800a71c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	791b      	ldrb	r3, [r3, #4]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 f84b 	bl	800a71c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	701a      	strb	r2, [r3, #0]
      break;
 8009692:	e0a5      	b.n	80097e0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f969 	bl	8009974 <USBH_Get_CfgDesc>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2205      	movs	r2, #5
 80096b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80096b2:	e097      	b.n	80097e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	f040 8094 	bne.w	80097e4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096c2:	3301      	adds	r3, #1
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d903      	bls.n	80096de <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	220d      	movs	r2, #13
 80096da:	701a      	strb	r2, [r3, #0]
      break;
 80096dc:	e082      	b.n	80097e4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	795b      	ldrb	r3, [r3, #5]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f001 f819 	bl	800a71c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	791b      	ldrb	r3, [r3, #4]
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 f813 	bl	800a71c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	701a      	strb	r2, [r3, #0]
      break;
 8009702:	e06f      	b.n	80097e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800970a:	2b00      	cmp	r3, #0
 800970c:	d019      	beq.n	8009742 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800971a:	23ff      	movs	r3, #255	@ 0xff
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f953 	bl	80099c8 <USBH_Get_StringDesc>
 8009722:	4603      	mov	r3, r0
 8009724:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009726:	7bbb      	ldrb	r3, [r7, #14]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2206      	movs	r2, #6
 8009730:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009732:	e059      	b.n	80097e8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	2b03      	cmp	r3, #3
 8009738:	d156      	bne.n	80097e8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2206      	movs	r2, #6
 800973e:	705a      	strb	r2, [r3, #1]
      break;
 8009740:	e052      	b.n	80097e8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2206      	movs	r2, #6
 8009746:	705a      	strb	r2, [r3, #1]
      break;
 8009748:	e04e      	b.n	80097e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009750:	2b00      	cmp	r3, #0
 8009752:	d019      	beq.n	8009788 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009760:	23ff      	movs	r3, #255	@ 0xff
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f930 	bl	80099c8 <USBH_Get_StringDesc>
 8009768:	4603      	mov	r3, r0
 800976a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d103      	bne.n	800977a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2207      	movs	r2, #7
 8009776:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009778:	e038      	b.n	80097ec <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b03      	cmp	r3, #3
 800977e:	d135      	bne.n	80097ec <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2207      	movs	r2, #7
 8009784:	705a      	strb	r2, [r3, #1]
      break;
 8009786:	e031      	b.n	80097ec <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2207      	movs	r2, #7
 800978c:	705a      	strb	r2, [r3, #1]
      break;
 800978e:	e02d      	b.n	80097ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009796:	2b00      	cmp	r3, #0
 8009798:	d017      	beq.n	80097ca <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80097a6:	23ff      	movs	r3, #255	@ 0xff
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f90d 	bl	80099c8 <USBH_Get_StringDesc>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80097bc:	e018      	b.n	80097f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d115      	bne.n	80097f0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]
      break;
 80097c8:	e012      	b.n	80097f0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
      break;
 80097ce:	e00f      	b.n	80097f0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80097d0:	bf00      	nop
 80097d2:	e00e      	b.n	80097f2 <USBH_HandleEnum+0x3b6>
      break;
 80097d4:	bf00      	nop
 80097d6:	e00c      	b.n	80097f2 <USBH_HandleEnum+0x3b6>
      break;
 80097d8:	bf00      	nop
 80097da:	e00a      	b.n	80097f2 <USBH_HandleEnum+0x3b6>
      break;
 80097dc:	bf00      	nop
 80097de:	e008      	b.n	80097f2 <USBH_HandleEnum+0x3b6>
      break;
 80097e0:	bf00      	nop
 80097e2:	e006      	b.n	80097f2 <USBH_HandleEnum+0x3b6>
      break;
 80097e4:	bf00      	nop
 80097e6:	e004      	b.n	80097f2 <USBH_HandleEnum+0x3b6>
      break;
 80097e8:	bf00      	nop
 80097ea:	e002      	b.n	80097f2 <USBH_HandleEnum+0x3b6>
      break;
 80097ec:	bf00      	nop
 80097ee:	e000      	b.n	80097f2 <USBH_HandleEnum+0x3b6>
      break;
 80097f0:	bf00      	nop
  }
  return Status;
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800980e:	bf00      	nop
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f804 	bl	800983e <USBH_HandleSof>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b0b      	cmp	r3, #11
 800984e:	d10a      	bne.n	8009866 <USBH_HandleSof+0x28>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d005      	beq.n	8009866 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	4798      	blx	r3
  }
}
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800987e:	bf00      	nop
}
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800989a:	bf00      	nop
}
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b083      	sub	sp, #12
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f003 fd2a 	bl	800d34e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	791b      	ldrb	r3, [r3, #4]
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 ff0b 	bl	800a71c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	795b      	ldrb	r3, [r3, #5]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 ff05 	bl	800a71c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af02      	add	r7, sp, #8
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009928:	887b      	ldrh	r3, [r7, #2]
 800992a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800992e:	d901      	bls.n	8009934 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009930:	2303      	movs	r3, #3
 8009932:	e01b      	b.n	800996c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800993a:	887b      	ldrh	r3, [r7, #2]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4613      	mov	r3, r2
 8009940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009944:	2100      	movs	r1, #0
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f872 	bl	8009a30 <USBH_GetDescriptor>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d109      	bne.n	800996a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800995c:	887a      	ldrh	r2, [r7, #2]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f929 	bl	8009bb8 <USBH_ParseDevDesc>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af02      	add	r7, sp, #8
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	331c      	adds	r3, #28
 8009984:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009986:	887b      	ldrh	r3, [r7, #2]
 8009988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800998c:	d901      	bls.n	8009992 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800998e:	2303      	movs	r3, #3
 8009990:	e016      	b.n	80099c0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009992:	887b      	ldrh	r3, [r7, #2]
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800999c:	2100      	movs	r1, #0
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f846 	bl	8009a30 <USBH_GetDescriptor>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d107      	bne.n	80099be <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80099ae:	887b      	ldrh	r3, [r7, #2]
 80099b0:	461a      	mov	r2, r3
 80099b2:	68b9      	ldr	r1, [r7, #8]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f9af 	bl	8009d18 <USBH_ParseCfgDesc>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099be:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	461a      	mov	r2, r3
 80099d4:	460b      	mov	r3, r1
 80099d6:	72fb      	strb	r3, [r7, #11]
 80099d8:	4613      	mov	r3, r2
 80099da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80099dc:	893b      	ldrh	r3, [r7, #8]
 80099de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099e2:	d802      	bhi.n	80099ea <USBH_Get_StringDesc+0x22>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e01c      	b.n	8009a28 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80099ee:	7afb      	ldrb	r3, [r7, #11]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80099f6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80099fe:	893b      	ldrh	r3, [r7, #8]
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	460b      	mov	r3, r1
 8009a04:	2100      	movs	r1, #0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 f812 	bl	8009a30 <USBH_GetDescriptor>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d107      	bne.n	8009a26 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a1c:	893a      	ldrh	r2, [r7, #8]
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fb8d 	bl	800a140 <USBH_ParseStringDesc>
  }

  return status;
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	607b      	str	r3, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	72fb      	strb	r3, [r7, #11]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	789b      	ldrb	r3, [r3, #2]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d11c      	bne.n	8009a84 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009a4a:	7afb      	ldrb	r3, [r7, #11]
 8009a4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2206      	movs	r2, #6
 8009a5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	893a      	ldrh	r2, [r7, #8]
 8009a60:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009a62:	893b      	ldrh	r3, [r7, #8]
 8009a64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a6c:	d104      	bne.n	8009a78 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f240 4209 	movw	r2, #1033	@ 0x409
 8009a74:	829a      	strh	r2, [r3, #20]
 8009a76:	e002      	b.n	8009a7e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8b3a      	ldrh	r2, [r7, #24]
 8009a82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009a84:	8b3b      	ldrh	r3, [r7, #24]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 fba5 	bl	800a1da <USBH_CtlReq>
 8009a90:	4603      	mov	r3, r0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	789b      	ldrb	r3, [r3, #2]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d10f      	bne.n	8009ace <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ace:	2200      	movs	r2, #0
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fb81 	bl	800a1da <USBH_CtlReq>
 8009ad8:	4603      	mov	r3, r0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b082      	sub	sp, #8
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	789b      	ldrb	r3, [r3, #2]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d10e      	bne.n	8009b14 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2209      	movs	r2, #9
 8009b00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	887a      	ldrh	r2, [r7, #2]
 8009b06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b14:	2200      	movs	r2, #0
 8009b16:	2100      	movs	r1, #0
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fb5e 	bl	800a1da <USBH_CtlReq>
 8009b1e:	4603      	mov	r3, r0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	789b      	ldrb	r3, [r3, #2]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d10f      	bne.n	8009b5c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2203      	movs	r2, #3
 8009b46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2100      	movs	r1, #0
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fb3a 	bl	800a1da <USBH_CtlReq>
 8009b66:	4603      	mov	r3, r0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	789b      	ldrb	r3, [r3, #2]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d10f      	bne.n	8009ba4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fb16 	bl	800a1da <USBH_CtlReq>
 8009bae:	4603      	mov	r3, r0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009bcc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009bd8:	2302      	movs	r3, #2
 8009bda:	e094      	b.n	8009d06 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	781a      	ldrb	r2, [r3, #0]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	785a      	ldrb	r2, [r3, #1]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	3302      	adds	r3, #2
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	3303      	adds	r3, #3
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	791a      	ldrb	r2, [r3, #4]
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	795a      	ldrb	r2, [r3, #5]
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	799a      	ldrb	r2, [r3, #6]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	79da      	ldrb	r2, [r3, #7]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d11b      	bne.n	8009c72 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	79db      	ldrb	r3, [r3, #7]
 8009c3e:	2b20      	cmp	r3, #32
 8009c40:	dc0f      	bgt.n	8009c62 <USBH_ParseDevDesc+0xaa>
 8009c42:	2b08      	cmp	r3, #8
 8009c44:	db0f      	blt.n	8009c66 <USBH_ParseDevDesc+0xae>
 8009c46:	3b08      	subs	r3, #8
 8009c48:	4a32      	ldr	r2, [pc, #200]	@ (8009d14 <USBH_ParseDevDesc+0x15c>)
 8009c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bf14      	ite	ne
 8009c56:	2301      	movne	r3, #1
 8009c58:	2300      	moveq	r3, #0
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d106      	bne.n	8009c6e <USBH_ParseDevDesc+0xb6>
 8009c60:	e001      	b.n	8009c66 <USBH_ParseDevDesc+0xae>
 8009c62:	2b40      	cmp	r3, #64	@ 0x40
 8009c64:	d003      	beq.n	8009c6e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2208      	movs	r2, #8
 8009c6a:	71da      	strb	r2, [r3, #7]
        break;
 8009c6c:	e000      	b.n	8009c70 <USBH_ParseDevDesc+0xb8>
        break;
 8009c6e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009c70:	e00e      	b.n	8009c90 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d107      	bne.n	8009c8c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	79db      	ldrb	r3, [r3, #7]
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d005      	beq.n	8009c90 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2208      	movs	r2, #8
 8009c88:	71da      	strb	r2, [r3, #7]
 8009c8a:	e001      	b.n	8009c90 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009c90:	88fb      	ldrh	r3, [r7, #6]
 8009c92:	2b08      	cmp	r3, #8
 8009c94:	d936      	bls.n	8009d04 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	3308      	adds	r3, #8
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	3309      	adds	r3, #9
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	330a      	adds	r3, #10
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	330b      	adds	r3, #11
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	330c      	adds	r3, #12
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	330d      	adds	r3, #13
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	021b      	lsls	r3, r3, #8
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	7b9a      	ldrb	r2, [r3, #14]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	7bda      	ldrb	r2, [r3, #15]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	7c1a      	ldrb	r2, [r3, #16]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	7c5a      	ldrb	r2, [r3, #17]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	371c      	adds	r7, #28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	01000101 	.word	0x01000101

08009d18 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08c      	sub	sp, #48	@ 0x30
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d2c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009d46:	2302      	movs	r3, #2
 8009d48:	e0da      	b.n	8009f00 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b09      	cmp	r3, #9
 8009d54:	d002      	beq.n	8009d5c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d58:	2209      	movs	r2, #9
 8009d5a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	781a      	ldrb	r2, [r3, #0]
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	785a      	ldrb	r2, [r3, #1]
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	3302      	adds	r3, #2
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	3303      	adds	r3, #3
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d86:	bf28      	it	cs
 8009d88:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	791a      	ldrb	r2, [r3, #4]
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	795a      	ldrb	r2, [r3, #5]
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	799a      	ldrb	r2, [r3, #6]
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	79da      	ldrb	r2, [r3, #7]
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	7a1a      	ldrb	r2, [r3, #8]
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009dba:	88fb      	ldrh	r3, [r7, #6]
 8009dbc:	2b09      	cmp	r3, #9
 8009dbe:	f240 809d 	bls.w	8009efc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009dc2:	2309      	movs	r3, #9
 8009dc4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009dca:	e081      	b.n	8009ed0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009dcc:	f107 0316 	add.w	r3, r7, #22
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dd4:	f000 f9e7 	bl	800a1a6 <USBH_GetNextDesc>
 8009dd8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d176      	bne.n	8009ed0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b09      	cmp	r3, #9
 8009de8:	d002      	beq.n	8009df0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dec:	2209      	movs	r2, #9
 8009dee:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009df4:	221a      	movs	r2, #26
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	6a3a      	ldr	r2, [r7, #32]
 8009dfe:	4413      	add	r3, r2
 8009e00:	3302      	adds	r3, #2
 8009e02:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e06:	69f8      	ldr	r0, [r7, #28]
 8009e08:	f000 f87e 	bl	8009f08 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e16:	e043      	b.n	8009ea0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e18:	f107 0316 	add.w	r3, r7, #22
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e20:	f000 f9c1 	bl	800a1a6 <USBH_GetNextDesc>
 8009e24:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2b05      	cmp	r3, #5
 8009e2c:	d138      	bne.n	8009ea0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	795b      	ldrb	r3, [r3, #5]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d113      	bne.n	8009e5e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d003      	beq.n	8009e46 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	799b      	ldrb	r3, [r3, #6]
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d10b      	bne.n	8009e5e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	79db      	ldrb	r3, [r3, #7]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10b      	bne.n	8009e66 <USBH_ParseCfgDesc+0x14e>
 8009e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	2b09      	cmp	r3, #9
 8009e54:	d007      	beq.n	8009e66 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e58:	2209      	movs	r2, #9
 8009e5a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e5c:	e003      	b.n	8009e66 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e60:	2207      	movs	r2, #7
 8009e62:	701a      	strb	r2, [r3, #0]
 8009e64:	e000      	b.n	8009e68 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e66:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e6c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e70:	3201      	adds	r2, #1
 8009e72:	00d2      	lsls	r2, r2, #3
 8009e74:	211a      	movs	r1, #26
 8009e76:	fb01 f303 	mul.w	r3, r1, r3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	6a3a      	ldr	r2, [r7, #32]
 8009e80:	4413      	add	r3, r2
 8009e82:	3304      	adds	r3, #4
 8009e84:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e88:	69b9      	ldr	r1, [r7, #24]
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 f870 	bl	8009f70 <USBH_ParseEPDesc>
 8009e90:	4603      	mov	r3, r0
 8009e92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009e96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	791b      	ldrb	r3, [r3, #4]
 8009ea4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d204      	bcs.n	8009eb6 <USBH_ParseCfgDesc+0x19e>
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	885a      	ldrh	r2, [r3, #2]
 8009eb0:	8afb      	ldrh	r3, [r7, #22]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d8b0      	bhi.n	8009e18 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	791b      	ldrb	r3, [r3, #4]
 8009eba:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d201      	bcs.n	8009ec6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e01c      	b.n	8009f00 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eca:	3301      	adds	r3, #1
 8009ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d805      	bhi.n	8009ee4 <USBH_ParseCfgDesc+0x1cc>
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	885a      	ldrh	r2, [r3, #2]
 8009edc:	8afb      	ldrh	r3, [r7, #22]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	f63f af74 	bhi.w	8009dcc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	791b      	ldrb	r3, [r3, #4]
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	bf28      	it	cs
 8009eec:	2302      	movcs	r3, #2
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d201      	bcs.n	8009efc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e001      	b.n	8009f00 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009efc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3730      	adds	r7, #48	@ 0x30
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781a      	ldrb	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	785a      	ldrb	r2, [r3, #1]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	789a      	ldrb	r2, [r3, #2]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	78da      	ldrb	r2, [r3, #3]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	3304      	adds	r3, #4
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	bf28      	it	cs
 8009f3c:	2302      	movcs	r3, #2
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	795a      	ldrb	r2, [r3, #5]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	799a      	ldrb	r2, [r3, #6]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	79da      	ldrb	r2, [r3, #7]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	7a1a      	ldrb	r2, [r3, #8]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	721a      	strb	r2, [r3, #8]
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	781a      	ldrb	r2, [r3, #0]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	785a      	ldrb	r2, [r3, #1]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	789a      	ldrb	r2, [r3, #2]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	78da      	ldrb	r2, [r3, #3]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3305      	adds	r3, #5
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	021b      	lsls	r3, r3, #8
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	799a      	ldrb	r2, [r3, #6]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	889b      	ldrh	r3, [r3, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d009      	beq.n	8009fde <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fd2:	d804      	bhi.n	8009fde <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fdc:	d901      	bls.n	8009fe2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d136      	bne.n	800a05a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	78db      	ldrb	r3, [r3, #3]
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d108      	bne.n	800a00a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	889b      	ldrh	r3, [r3, #4]
 8009ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a000:	f240 8097 	bls.w	800a132 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a004:	2303      	movs	r3, #3
 800a006:	75fb      	strb	r3, [r7, #23]
 800a008:	e093      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	78db      	ldrb	r3, [r3, #3]
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d107      	bne.n	800a026 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	889b      	ldrh	r3, [r3, #4]
 800a01a:	2b40      	cmp	r3, #64	@ 0x40
 800a01c:	f240 8089 	bls.w	800a132 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a020:	2303      	movs	r3, #3
 800a022:	75fb      	strb	r3, [r7, #23]
 800a024:	e085      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	78db      	ldrb	r3, [r3, #3]
 800a02a:	f003 0303 	and.w	r3, r3, #3
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d005      	beq.n	800a03e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	78db      	ldrb	r3, [r3, #3]
 800a036:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d10a      	bne.n	800a054 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	799b      	ldrb	r3, [r3, #6]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <USBH_ParseEPDesc+0xde>
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	799b      	ldrb	r3, [r3, #6]
 800a04a:	2b10      	cmp	r3, #16
 800a04c:	d970      	bls.n	800a130 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a04e:	2303      	movs	r3, #3
 800a050:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a052:	e06d      	b.n	800a130 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a054:	2303      	movs	r3, #3
 800a056:	75fb      	strb	r3, [r7, #23]
 800a058:	e06b      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a060:	2b01      	cmp	r3, #1
 800a062:	d13c      	bne.n	800a0de <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	78db      	ldrb	r3, [r3, #3]
 800a068:	f003 0303 	and.w	r3, r3, #3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d005      	beq.n	800a07c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	78db      	ldrb	r3, [r3, #3]
 800a074:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d106      	bne.n	800a08a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	889b      	ldrh	r3, [r3, #4]
 800a080:	2b40      	cmp	r3, #64	@ 0x40
 800a082:	d956      	bls.n	800a132 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a084:	2303      	movs	r3, #3
 800a086:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a088:	e053      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	78db      	ldrb	r3, [r3, #3]
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	2b01      	cmp	r3, #1
 800a094:	d10e      	bne.n	800a0b4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	799b      	ldrb	r3, [r3, #6]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d007      	beq.n	800a0ae <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a0a2:	2b10      	cmp	r3, #16
 800a0a4:	d803      	bhi.n	800a0ae <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a0aa:	2b40      	cmp	r3, #64	@ 0x40
 800a0ac:	d941      	bls.n	800a132 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	75fb      	strb	r3, [r7, #23]
 800a0b2:	e03e      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	78db      	ldrb	r3, [r3, #3]
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d10b      	bne.n	800a0d8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	799b      	ldrb	r3, [r3, #6]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d004      	beq.n	800a0d2 <USBH_ParseEPDesc+0x162>
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	889b      	ldrh	r3, [r3, #4]
 800a0cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0d0:	d32f      	bcc.n	800a132 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	75fb      	strb	r3, [r7, #23]
 800a0d6:	e02c      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	75fb      	strb	r3, [r7, #23]
 800a0dc:	e029      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d120      	bne.n	800a12a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	78db      	ldrb	r3, [r3, #3]
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d106      	bne.n	800a102 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	889b      	ldrh	r3, [r3, #4]
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	d01a      	beq.n	800a132 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	75fb      	strb	r3, [r7, #23]
 800a100:	e017      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	78db      	ldrb	r3, [r3, #3]
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d10a      	bne.n	800a124 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	799b      	ldrb	r3, [r3, #6]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <USBH_ParseEPDesc+0x1ae>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	889b      	ldrh	r3, [r3, #4]
 800a11a:	2b08      	cmp	r3, #8
 800a11c:	d909      	bls.n	800a132 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a11e:	2303      	movs	r3, #3
 800a120:	75fb      	strb	r3, [r7, #23]
 800a122:	e006      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a124:	2303      	movs	r3, #3
 800a126:	75fb      	strb	r3, [r7, #23]
 800a128:	e003      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a12a:	2303      	movs	r3, #3
 800a12c:	75fb      	strb	r3, [r7, #23]
 800a12e:	e000      	b.n	800a132 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a130:	bf00      	nop
  }

  return status;
 800a132:	7dfb      	ldrb	r3, [r7, #23]
}
 800a134:	4618      	mov	r0, r3
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3301      	adds	r3, #1
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b03      	cmp	r3, #3
 800a156:	d120      	bne.n	800a19a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	1e9a      	subs	r2, r3, #2
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	4293      	cmp	r3, r2
 800a162:	bf28      	it	cs
 800a164:	4613      	movcs	r3, r2
 800a166:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3302      	adds	r3, #2
 800a16c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a16e:	2300      	movs	r3, #0
 800a170:	82fb      	strh	r3, [r7, #22]
 800a172:	e00b      	b.n	800a18c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a174:	8afb      	ldrh	r3, [r7, #22]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	781a      	ldrb	r2, [r3, #0]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	3301      	adds	r3, #1
 800a184:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a186:	8afb      	ldrh	r3, [r7, #22]
 800a188:	3302      	adds	r3, #2
 800a18a:	82fb      	strh	r3, [r7, #22]
 800a18c:	8afa      	ldrh	r2, [r7, #22]
 800a18e:	8abb      	ldrh	r3, [r7, #20]
 800a190:	429a      	cmp	r2, r3
 800a192:	d3ef      	bcc.n	800a174 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
  }
}
 800a19a:	bf00      	nop
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b085      	sub	sp, #20
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	7812      	ldrb	r2, [r2, #0]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b086      	sub	sp, #24
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	789b      	ldrb	r3, [r3, #2]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d002      	beq.n	800a1fa <USBH_CtlReq+0x20>
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d00f      	beq.n	800a218 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a1f8:	e027      	b.n	800a24a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	88fa      	ldrh	r2, [r7, #6]
 800a204:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2201      	movs	r2, #1
 800a20a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2202      	movs	r2, #2
 800a210:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a212:	2301      	movs	r3, #1
 800a214:	75fb      	strb	r3, [r7, #23]
      break;
 800a216:	e018      	b.n	800a24a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f81b 	bl	800a254 <USBH_HandleControl>
 800a21e:	4603      	mov	r3, r0
 800a220:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <USBH_CtlReq+0x54>
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	2b03      	cmp	r3, #3
 800a22c:	d106      	bne.n	800a23c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	761a      	strb	r2, [r3, #24]
      break;
 800a23a:	e005      	b.n	800a248 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d102      	bne.n	800a248 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	709a      	strb	r2, [r3, #2]
      break;
 800a248:	bf00      	nop
  }
  return status;
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af02      	add	r7, sp, #8
 800a25a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a25c:	2301      	movs	r3, #1
 800a25e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a260:	2300      	movs	r3, #0
 800a262:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	7e1b      	ldrb	r3, [r3, #24]
 800a268:	3b01      	subs	r3, #1
 800a26a:	2b0a      	cmp	r3, #10
 800a26c:	f200 8156 	bhi.w	800a51c <USBH_HandleControl+0x2c8>
 800a270:	a201      	add	r2, pc, #4	@ (adr r2, 800a278 <USBH_HandleControl+0x24>)
 800a272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a276:	bf00      	nop
 800a278:	0800a2a5 	.word	0x0800a2a5
 800a27c:	0800a2bf 	.word	0x0800a2bf
 800a280:	0800a329 	.word	0x0800a329
 800a284:	0800a34f 	.word	0x0800a34f
 800a288:	0800a387 	.word	0x0800a387
 800a28c:	0800a3b1 	.word	0x0800a3b1
 800a290:	0800a403 	.word	0x0800a403
 800a294:	0800a425 	.word	0x0800a425
 800a298:	0800a461 	.word	0x0800a461
 800a29c:	0800a487 	.word	0x0800a487
 800a2a0:	0800a4c5 	.word	0x0800a4c5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f103 0110 	add.w	r1, r3, #16
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	795b      	ldrb	r3, [r3, #5]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f943 	bl	800a53c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	761a      	strb	r2, [r3, #24]
      break;
 800a2bc:	e139      	b.n	800a532 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	795b      	ldrb	r3, [r3, #5]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f003 f931 	bl	800d52c <USBH_LL_GetURBState>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a2ce:	7bbb      	ldrb	r3, [r7, #14]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d11e      	bne.n	800a312 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	7c1b      	ldrb	r3, [r3, #16]
 800a2d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	8adb      	ldrh	r3, [r3, #22]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00a      	beq.n	800a2fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a2e6:	7b7b      	ldrb	r3, [r7, #13]
 800a2e8:	2b80      	cmp	r3, #128	@ 0x80
 800a2ea:	d103      	bne.n	800a2f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2203      	movs	r2, #3
 800a2f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2f2:	e115      	b.n	800a520 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2205      	movs	r2, #5
 800a2f8:	761a      	strb	r2, [r3, #24]
      break;
 800a2fa:	e111      	b.n	800a520 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a2fc:	7b7b      	ldrb	r3, [r7, #13]
 800a2fe:	2b80      	cmp	r3, #128	@ 0x80
 800a300:	d103      	bne.n	800a30a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2209      	movs	r2, #9
 800a306:	761a      	strb	r2, [r3, #24]
      break;
 800a308:	e10a      	b.n	800a520 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2207      	movs	r2, #7
 800a30e:	761a      	strb	r2, [r3, #24]
      break;
 800a310:	e106      	b.n	800a520 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b04      	cmp	r3, #4
 800a316:	d003      	beq.n	800a320 <USBH_HandleControl+0xcc>
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	f040 8100 	bne.w	800a520 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	220b      	movs	r2, #11
 800a324:	761a      	strb	r2, [r3, #24]
      break;
 800a326:	e0fb      	b.n	800a520 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a32e:	b29a      	uxth	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6899      	ldr	r1, [r3, #8]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	899a      	ldrh	r2, [r3, #12]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	791b      	ldrb	r3, [r3, #4]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f93a 	bl	800a5ba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2204      	movs	r2, #4
 800a34a:	761a      	strb	r2, [r3, #24]
      break;
 800a34c:	e0f1      	b.n	800a532 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	791b      	ldrb	r3, [r3, #4]
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f003 f8e9 	bl	800d52c <USBH_LL_GetURBState>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a35e:	7bbb      	ldrb	r3, [r7, #14]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d102      	bne.n	800a36a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2209      	movs	r2, #9
 800a368:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b05      	cmp	r3, #5
 800a36e:	d102      	bne.n	800a376 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a370:	2303      	movs	r3, #3
 800a372:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a374:	e0d6      	b.n	800a524 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a376:	7bbb      	ldrb	r3, [r7, #14]
 800a378:	2b04      	cmp	r3, #4
 800a37a:	f040 80d3 	bne.w	800a524 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	220b      	movs	r2, #11
 800a382:	761a      	strb	r2, [r3, #24]
      break;
 800a384:	e0ce      	b.n	800a524 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6899      	ldr	r1, [r3, #8]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	899a      	ldrh	r2, [r3, #12]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	795b      	ldrb	r3, [r3, #5]
 800a392:	2001      	movs	r0, #1
 800a394:	9000      	str	r0, [sp, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f8ea 	bl	800a570 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2206      	movs	r2, #6
 800a3ac:	761a      	strb	r2, [r3, #24]
      break;
 800a3ae:	e0c0      	b.n	800a532 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	795b      	ldrb	r3, [r3, #5]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f003 f8b8 	bl	800d52c <USBH_LL_GetURBState>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d103      	bne.n	800a3ce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2207      	movs	r2, #7
 800a3ca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3cc:	e0ac      	b.n	800a528 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	2b05      	cmp	r3, #5
 800a3d2:	d105      	bne.n	800a3e0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	220c      	movs	r2, #12
 800a3d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3de:	e0a3      	b.n	800a528 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d103      	bne.n	800a3ee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2205      	movs	r2, #5
 800a3ea:	761a      	strb	r2, [r3, #24]
      break;
 800a3ec:	e09c      	b.n	800a528 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	f040 8099 	bne.w	800a528 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	220b      	movs	r2, #11
 800a3fa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a400:	e092      	b.n	800a528 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	791b      	ldrb	r3, [r3, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	2100      	movs	r1, #0
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f8d5 	bl	800a5ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a416:	b29a      	uxth	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2208      	movs	r2, #8
 800a420:	761a      	strb	r2, [r3, #24]

      break;
 800a422:	e086      	b.n	800a532 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	791b      	ldrb	r3, [r3, #4]
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f003 f87e 	bl	800d52c <USBH_LL_GetURBState>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d105      	bne.n	800a446 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	220d      	movs	r2, #13
 800a43e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a444:	e072      	b.n	800a52c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	2b04      	cmp	r3, #4
 800a44a:	d103      	bne.n	800a454 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	220b      	movs	r2, #11
 800a450:	761a      	strb	r2, [r3, #24]
      break;
 800a452:	e06b      	b.n	800a52c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	2b05      	cmp	r3, #5
 800a458:	d168      	bne.n	800a52c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a45a:	2303      	movs	r3, #3
 800a45c:	73fb      	strb	r3, [r7, #15]
      break;
 800a45e:	e065      	b.n	800a52c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	795b      	ldrb	r3, [r3, #5]
 800a464:	2201      	movs	r2, #1
 800a466:	9200      	str	r2, [sp, #0]
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f87f 	bl	800a570 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a478:	b29a      	uxth	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	220a      	movs	r2, #10
 800a482:	761a      	strb	r2, [r3, #24]
      break;
 800a484:	e055      	b.n	800a532 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	795b      	ldrb	r3, [r3, #5]
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f003 f84d 	bl	800d52c <USBH_LL_GetURBState>
 800a492:	4603      	mov	r3, r0
 800a494:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a496:	7bbb      	ldrb	r3, [r7, #14]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d105      	bne.n	800a4a8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	220d      	movs	r2, #13
 800a4a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4a6:	e043      	b.n	800a530 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d103      	bne.n	800a4b6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2209      	movs	r2, #9
 800a4b2:	761a      	strb	r2, [r3, #24]
      break;
 800a4b4:	e03c      	b.n	800a530 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	d139      	bne.n	800a530 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	220b      	movs	r2, #11
 800a4c0:	761a      	strb	r2, [r3, #24]
      break;
 800a4c2:	e035      	b.n	800a530 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	7e5b      	ldrb	r3, [r3, #25]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	765a      	strb	r2, [r3, #25]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	7e5b      	ldrb	r3, [r3, #25]
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d806      	bhi.n	800a4e6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a4e4:	e025      	b.n	800a532 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4ec:	2106      	movs	r1, #6
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	795b      	ldrb	r3, [r3, #5]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f90c 	bl	800a71c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	791b      	ldrb	r3, [r3, #4]
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f906 	bl	800a71c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a516:	2302      	movs	r3, #2
 800a518:	73fb      	strb	r3, [r7, #15]
      break;
 800a51a:	e00a      	b.n	800a532 <USBH_HandleControl+0x2de>

    default:
      break;
 800a51c:	bf00      	nop
 800a51e:	e008      	b.n	800a532 <USBH_HandleControl+0x2de>
      break;
 800a520:	bf00      	nop
 800a522:	e006      	b.n	800a532 <USBH_HandleControl+0x2de>
      break;
 800a524:	bf00      	nop
 800a526:	e004      	b.n	800a532 <USBH_HandleControl+0x2de>
      break;
 800a528:	bf00      	nop
 800a52a:	e002      	b.n	800a532 <USBH_HandleControl+0x2de>
      break;
 800a52c:	bf00      	nop
 800a52e:	e000      	b.n	800a532 <USBH_HandleControl+0x2de>
      break;
 800a530:	bf00      	nop
  }

  return status;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af04      	add	r7, sp, #16
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	4613      	mov	r3, r2
 800a548:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a54a:	79f9      	ldrb	r1, [r7, #7]
 800a54c:	2300      	movs	r3, #0
 800a54e:	9303      	str	r3, [sp, #12]
 800a550:	2308      	movs	r3, #8
 800a552:	9302      	str	r3, [sp, #8]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	2300      	movs	r3, #0
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	2300      	movs	r3, #0
 800a55e:	2200      	movs	r2, #0
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f002 ffb2 	bl	800d4ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af04      	add	r7, sp, #16
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4611      	mov	r1, r2
 800a57c:	461a      	mov	r2, r3
 800a57e:	460b      	mov	r3, r1
 800a580:	80fb      	strh	r3, [r7, #6]
 800a582:	4613      	mov	r3, r2
 800a584:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a590:	2300      	movs	r3, #0
 800a592:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a594:	7979      	ldrb	r1, [r7, #5]
 800a596:	7e3b      	ldrb	r3, [r7, #24]
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	88fb      	ldrh	r3, [r7, #6]
 800a59c:	9302      	str	r3, [sp, #8]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f002 ff8d 	bl	800d4ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b088      	sub	sp, #32
 800a5be:	af04      	add	r7, sp, #16
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	80fb      	strh	r3, [r7, #6]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5d0:	7979      	ldrb	r1, [r7, #5]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9303      	str	r3, [sp, #12]
 800a5d6:	88fb      	ldrh	r3, [r7, #6]
 800a5d8:	9302      	str	r3, [sp, #8]
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	2301      	movs	r3, #1
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f002 ff6f 	bl	800d4ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a5ec:	2300      	movs	r3, #0

}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b088      	sub	sp, #32
 800a5fa:	af04      	add	r7, sp, #16
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	4611      	mov	r1, r2
 800a602:	461a      	mov	r2, r3
 800a604:	460b      	mov	r3, r1
 800a606:	80fb      	strh	r3, [r7, #6]
 800a608:	4613      	mov	r3, r2
 800a60a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a61a:	7979      	ldrb	r1, [r7, #5]
 800a61c:	7e3b      	ldrb	r3, [r7, #24]
 800a61e:	9303      	str	r3, [sp, #12]
 800a620:	88fb      	ldrh	r3, [r7, #6]
 800a622:	9302      	str	r3, [sp, #8]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	2301      	movs	r3, #1
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	2302      	movs	r3, #2
 800a62e:	2200      	movs	r2, #0
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f002 ff4a 	bl	800d4ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af04      	add	r7, sp, #16
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	4611      	mov	r1, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	460b      	mov	r3, r1
 800a650:	80fb      	strh	r3, [r7, #6]
 800a652:	4613      	mov	r3, r2
 800a654:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a656:	7979      	ldrb	r1, [r7, #5]
 800a658:	2300      	movs	r3, #0
 800a65a:	9303      	str	r3, [sp, #12]
 800a65c:	88fb      	ldrh	r3, [r7, #6]
 800a65e:	9302      	str	r3, [sp, #8]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	2301      	movs	r3, #1
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	2302      	movs	r3, #2
 800a66a:	2201      	movs	r2, #1
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f002 ff2c 	bl	800d4ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af04      	add	r7, sp, #16
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	4608      	mov	r0, r1
 800a686:	4611      	mov	r1, r2
 800a688:	461a      	mov	r2, r3
 800a68a:	4603      	mov	r3, r0
 800a68c:	70fb      	strb	r3, [r7, #3]
 800a68e:	460b      	mov	r3, r1
 800a690:	70bb      	strb	r3, [r7, #2]
 800a692:	4613      	mov	r3, r2
 800a694:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a696:	7878      	ldrb	r0, [r7, #1]
 800a698:	78ba      	ldrb	r2, [r7, #2]
 800a69a:	78f9      	ldrb	r1, [r7, #3]
 800a69c:	8b3b      	ldrh	r3, [r7, #24]
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	7d3b      	ldrb	r3, [r7, #20]
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	7c3b      	ldrb	r3, [r7, #16]
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f002 febf 	bl	800d42e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f002 fede 	bl	800d48c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f836 	bl	800a758 <USBH_GetFreePipe>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a6f0:	89fb      	ldrh	r3, [r7, #14]
 800a6f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d00a      	beq.n	800a710 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	89fb      	ldrh	r3, [r7, #14]
 800a6fe:	f003 030f 	and.w	r3, r3, #15
 800a702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	33e0      	adds	r3, #224	@ 0xe0
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	440b      	add	r3, r1
 800a70e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a710:	89fb      	ldrh	r3, [r7, #14]
 800a712:	b2db      	uxtb	r3, r3
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	2b0f      	cmp	r3, #15
 800a72c:	d80d      	bhi.n	800a74a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	33e0      	adds	r3, #224	@ 0xe0
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	78fb      	ldrb	r3, [r7, #3]
 800a73c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a740:	6879      	ldr	r1, [r7, #4]
 800a742:	33e0      	adds	r3, #224	@ 0xe0
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	440b      	add	r3, r1
 800a748:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
 800a768:	e00f      	b.n	800a78a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	33e0      	adds	r3, #224	@ 0xe0
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	b29b      	uxth	r3, r3
 800a782:	e007      	b.n	800a794 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	3301      	adds	r3, #1
 800a788:	73fb      	strb	r3, [r7, #15]
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	2b0f      	cmp	r3, #15
 800a78e:	d9ec      	bls.n	800a76a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a794:	4618      	mov	r0, r3
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	4a08      	ldr	r2, [pc, #32]	@ (800a7d0 <disk_status+0x30>)
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	79fa      	ldrb	r2, [r7, #7]
 800a7b8:	4905      	ldr	r1, [pc, #20]	@ (800a7d0 <disk_status+0x30>)
 800a7ba:	440a      	add	r2, r1
 800a7bc:	7a12      	ldrb	r2, [r2, #8]
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4798      	blx	r3
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	2000126c 	.word	0x2000126c

0800a7d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	4a0e      	ldr	r2, [pc, #56]	@ (800a820 <disk_initialize+0x4c>)
 800a7e6:	5cd3      	ldrb	r3, [r2, r3]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d114      	bne.n	800a816 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a7ec:	79fb      	ldrb	r3, [r7, #7]
 800a7ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a820 <disk_initialize+0x4c>)
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	79fa      	ldrb	r2, [r7, #7]
 800a7fa:	4909      	ldr	r1, [pc, #36]	@ (800a820 <disk_initialize+0x4c>)
 800a7fc:	440a      	add	r2, r1
 800a7fe:	7a12      	ldrb	r2, [r2, #8]
 800a800:	4610      	mov	r0, r2
 800a802:	4798      	blx	r3
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	4a03      	ldr	r2, [pc, #12]	@ (800a820 <disk_initialize+0x4c>)
 800a812:	2101      	movs	r1, #1
 800a814:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	2000126c 	.word	0x2000126c

0800a824 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a824:	b590      	push	{r4, r7, lr}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	607a      	str	r2, [r7, #4]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	4a0a      	ldr	r2, [pc, #40]	@ (800a860 <disk_read+0x3c>)
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	689c      	ldr	r4, [r3, #8]
 800a840:	7bfb      	ldrb	r3, [r7, #15]
 800a842:	4a07      	ldr	r2, [pc, #28]	@ (800a860 <disk_read+0x3c>)
 800a844:	4413      	add	r3, r2
 800a846:	7a18      	ldrb	r0, [r3, #8]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	68b9      	ldr	r1, [r7, #8]
 800a84e:	47a0      	blx	r4
 800a850:	4603      	mov	r3, r0
 800a852:	75fb      	strb	r3, [r7, #23]
  return res;
 800a854:	7dfb      	ldrb	r3, [r7, #23]
}
 800a856:	4618      	mov	r0, r3
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd90      	pop	{r4, r7, pc}
 800a85e:	bf00      	nop
 800a860:	2000126c 	.word	0x2000126c

0800a864 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a864:	b590      	push	{r4, r7, lr}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	607a      	str	r2, [r7, #4]
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	4a0a      	ldr	r2, [pc, #40]	@ (800a8a0 <disk_write+0x3c>)
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	68dc      	ldr	r4, [r3, #12]
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	4a07      	ldr	r2, [pc, #28]	@ (800a8a0 <disk_write+0x3c>)
 800a884:	4413      	add	r3, r2
 800a886:	7a18      	ldrb	r0, [r3, #8]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	68b9      	ldr	r1, [r7, #8]
 800a88e:	47a0      	blx	r4
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]
  return res;
 800a894:	7dfb      	ldrb	r3, [r7, #23]
}
 800a896:	4618      	mov	r0, r3
 800a898:	371c      	adds	r7, #28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd90      	pop	{r4, r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	2000126c 	.word	0x2000126c

0800a8a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	603a      	str	r2, [r7, #0]
 800a8ae:	71fb      	strb	r3, [r7, #7]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	4a09      	ldr	r2, [pc, #36]	@ (800a8dc <disk_ioctl+0x38>)
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	79fa      	ldrb	r2, [r7, #7]
 800a8c2:	4906      	ldr	r1, [pc, #24]	@ (800a8dc <disk_ioctl+0x38>)
 800a8c4:	440a      	add	r2, r1
 800a8c6:	7a10      	ldrb	r0, [r2, #8]
 800a8c8:	79b9      	ldrb	r1, [r7, #6]
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	4798      	blx	r3
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  return res;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	2000126c 	.word	0x2000126c

0800a8e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a8f0:	89fb      	ldrh	r3, [r7, #14]
 800a8f2:	021b      	lsls	r3, r3, #8
 800a8f4:	b21a      	sxth	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	b21b      	sxth	r3, r3
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	b21b      	sxth	r3, r3
 800a900:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a902:	89fb      	ldrh	r3, [r7, #14]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3303      	adds	r3, #3
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	3202      	adds	r2, #2
 800a928:	7812      	ldrb	r2, [r2, #0]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	021b      	lsls	r3, r3, #8
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	3201      	adds	r2, #1
 800a936:	7812      	ldrb	r2, [r2, #0]
 800a938:	4313      	orrs	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	021b      	lsls	r3, r3, #8
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	7812      	ldrb	r2, [r2, #0]
 800a944:	4313      	orrs	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]
	return rv;
 800a948:	68fb      	ldr	r3, [r7, #12]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	887a      	ldrh	r2, [r7, #2]
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	701a      	strb	r2, [r3, #0]
 800a96e:	887b      	ldrh	r3, [r7, #2]
 800a970:	0a1b      	lsrs	r3, r3, #8
 800a972:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	607a      	str	r2, [r7, #4]
 800a97a:	887a      	ldrh	r2, [r7, #2]
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	701a      	strb	r2, [r3, #0]
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	0a1b      	lsrs	r3, r3, #8
 800a9a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	b2d2      	uxtb	r2, r2
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	0a1b      	lsrs	r3, r3, #8
 800a9b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	b2d2      	uxtb	r2, r2
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	0a1b      	lsrs	r3, r3, #8
 800a9ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	b2d2      	uxtb	r2, r2
 800a9d6:	701a      	strb	r2, [r3, #0]
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00d      	beq.n	800aa1a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	1c53      	adds	r3, r2, #1
 800aa02:	613b      	str	r3, [r7, #16]
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	1c59      	adds	r1, r3, #1
 800aa08:	6179      	str	r1, [r7, #20]
 800aa0a:	7812      	ldrb	r2, [r2, #0]
 800aa0c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	607b      	str	r3, [r7, #4]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1f1      	bne.n	800a9fe <mem_cpy+0x1a>
	}
}
 800aa1a:	bf00      	nop
 800aa1c:	371c      	adds	r7, #28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aa26:	b480      	push	{r7}
 800aa28:	b087      	sub	sp, #28
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	617a      	str	r2, [r7, #20]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	607b      	str	r3, [r7, #4]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1f3      	bne.n	800aa36 <mem_set+0x10>
}
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
 800aa52:	371c      	adds	r7, #28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aa5c:	b480      	push	{r7}
 800aa5e:	b089      	sub	sp, #36	@ 0x24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	61fb      	str	r3, [r7, #28]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	61fa      	str	r2, [r7, #28]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	61ba      	str	r2, [r7, #24]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	1acb      	subs	r3, r1, r3
 800aa88:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	607b      	str	r3, [r7, #4]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <mem_cmp+0x40>
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0eb      	beq.n	800aa74 <mem_cmp+0x18>

	return r;
 800aa9c:	697b      	ldr	r3, [r7, #20]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3724      	adds	r7, #36	@ 0x24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aab4:	e002      	b.n	800aabc <chk_chr+0x12>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3301      	adds	r3, #1
 800aaba:	607b      	str	r3, [r7, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <chk_chr+0x26>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	461a      	mov	r2, r3
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	4293      	cmp	r3, r2
 800aace:	d1f2      	bne.n	800aab6 <chk_chr+0xc>
	return *str;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	781b      	ldrb	r3, [r3, #0]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aaea:	2300      	movs	r3, #0
 800aaec:	60bb      	str	r3, [r7, #8]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	60fb      	str	r3, [r7, #12]
 800aaf2:	e029      	b.n	800ab48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aaf4:	4a27      	ldr	r2, [pc, #156]	@ (800ab94 <chk_lock+0xb4>)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	4413      	add	r3, r2
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01d      	beq.n	800ab3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab02:	4a24      	ldr	r2, [pc, #144]	@ (800ab94 <chk_lock+0xb4>)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	4413      	add	r3, r2
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d116      	bne.n	800ab42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ab14:	4a1f      	ldr	r2, [pc, #124]	@ (800ab94 <chk_lock+0xb4>)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	011b      	lsls	r3, r3, #4
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d10c      	bne.n	800ab42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab28:	4a1a      	ldr	r2, [pc, #104]	@ (800ab94 <chk_lock+0xb4>)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	011b      	lsls	r3, r3, #4
 800ab2e:	4413      	add	r3, r2
 800ab30:	3308      	adds	r3, #8
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d102      	bne.n	800ab42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab3c:	e007      	b.n	800ab4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3301      	adds	r3, #1
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d9d2      	bls.n	800aaf4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d109      	bne.n	800ab68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d102      	bne.n	800ab60 <chk_lock+0x80>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d101      	bne.n	800ab64 <chk_lock+0x84>
 800ab60:	2300      	movs	r3, #0
 800ab62:	e010      	b.n	800ab86 <chk_lock+0xa6>
 800ab64:	2312      	movs	r3, #18
 800ab66:	e00e      	b.n	800ab86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d108      	bne.n	800ab80 <chk_lock+0xa0>
 800ab6e:	4a09      	ldr	r2, [pc, #36]	@ (800ab94 <chk_lock+0xb4>)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	011b      	lsls	r3, r3, #4
 800ab74:	4413      	add	r3, r2
 800ab76:	330c      	adds	r3, #12
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab7e:	d101      	bne.n	800ab84 <chk_lock+0xa4>
 800ab80:	2310      	movs	r3, #16
 800ab82:	e000      	b.n	800ab86 <chk_lock+0xa6>
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	2000124c 	.word	0x2000124c

0800ab98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	607b      	str	r3, [r7, #4]
 800aba2:	e002      	b.n	800abaa <enq_lock+0x12>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3301      	adds	r3, #1
 800aba8:	607b      	str	r3, [r7, #4]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d806      	bhi.n	800abbe <enq_lock+0x26>
 800abb0:	4a09      	ldr	r2, [pc, #36]	@ (800abd8 <enq_lock+0x40>)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	011b      	lsls	r3, r3, #4
 800abb6:	4413      	add	r3, r2
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1f2      	bne.n	800aba4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	bf14      	ite	ne
 800abc4:	2301      	movne	r3, #1
 800abc6:	2300      	moveq	r3, #0
 800abc8:	b2db      	uxtb	r3, r3
}
 800abca:	4618      	mov	r0, r3
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	2000124c 	.word	0x2000124c

0800abdc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	e01f      	b.n	800ac2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800abec:	4a41      	ldr	r2, [pc, #260]	@ (800acf4 <inc_lock+0x118>)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	011b      	lsls	r3, r3, #4
 800abf2:	4413      	add	r3, r2
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d113      	bne.n	800ac26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800abfe:	4a3d      	ldr	r2, [pc, #244]	@ (800acf4 <inc_lock+0x118>)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	011b      	lsls	r3, r3, #4
 800ac04:	4413      	add	r3, r2
 800ac06:	3304      	adds	r3, #4
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d109      	bne.n	800ac26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ac12:	4a38      	ldr	r2, [pc, #224]	@ (800acf4 <inc_lock+0x118>)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	4413      	add	r3, r2
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d006      	beq.n	800ac34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d9dc      	bls.n	800abec <inc_lock+0x10>
 800ac32:	e000      	b.n	800ac36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ac34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d132      	bne.n	800aca2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e002      	b.n	800ac48 <inc_lock+0x6c>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3301      	adds	r3, #1
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d806      	bhi.n	800ac5c <inc_lock+0x80>
 800ac4e:	4a29      	ldr	r2, [pc, #164]	@ (800acf4 <inc_lock+0x118>)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	4413      	add	r3, r2
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1f2      	bne.n	800ac42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d101      	bne.n	800ac66 <inc_lock+0x8a>
 800ac62:	2300      	movs	r3, #0
 800ac64:	e040      	b.n	800ace8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	4922      	ldr	r1, [pc, #136]	@ (800acf4 <inc_lock+0x118>)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	011b      	lsls	r3, r3, #4
 800ac70:	440b      	add	r3, r1
 800ac72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689a      	ldr	r2, [r3, #8]
 800ac78:	491e      	ldr	r1, [pc, #120]	@ (800acf4 <inc_lock+0x118>)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	440b      	add	r3, r1
 800ac80:	3304      	adds	r3, #4
 800ac82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	695a      	ldr	r2, [r3, #20]
 800ac88:	491a      	ldr	r1, [pc, #104]	@ (800acf4 <inc_lock+0x118>)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	440b      	add	r3, r1
 800ac90:	3308      	adds	r3, #8
 800ac92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ac94:	4a17      	ldr	r2, [pc, #92]	@ (800acf4 <inc_lock+0x118>)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	4413      	add	r3, r2
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	2200      	movs	r2, #0
 800aca0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d009      	beq.n	800acbc <inc_lock+0xe0>
 800aca8:	4a12      	ldr	r2, [pc, #72]	@ (800acf4 <inc_lock+0x118>)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	011b      	lsls	r3, r3, #4
 800acae:	4413      	add	r3, r2
 800acb0:	330c      	adds	r3, #12
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <inc_lock+0xe0>
 800acb8:	2300      	movs	r3, #0
 800acba:	e015      	b.n	800ace8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d108      	bne.n	800acd4 <inc_lock+0xf8>
 800acc2:	4a0c      	ldr	r2, [pc, #48]	@ (800acf4 <inc_lock+0x118>)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	4413      	add	r3, r2
 800acca:	330c      	adds	r3, #12
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	3301      	adds	r3, #1
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	e001      	b.n	800acd8 <inc_lock+0xfc>
 800acd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800acd8:	4906      	ldr	r1, [pc, #24]	@ (800acf4 <inc_lock+0x118>)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	011b      	lsls	r3, r3, #4
 800acde:	440b      	add	r3, r1
 800ace0:	330c      	adds	r3, #12
 800ace2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	3301      	adds	r3, #1
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	2000124c 	.word	0x2000124c

0800acf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	607b      	str	r3, [r7, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d825      	bhi.n	800ad58 <dec_lock+0x60>
		n = Files[i].ctr;
 800ad0c:	4a17      	ldr	r2, [pc, #92]	@ (800ad6c <dec_lock+0x74>)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	4413      	add	r3, r2
 800ad14:	330c      	adds	r3, #12
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ad1a:	89fb      	ldrh	r3, [r7, #14]
 800ad1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad20:	d101      	bne.n	800ad26 <dec_lock+0x2e>
 800ad22:	2300      	movs	r3, #0
 800ad24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ad26:	89fb      	ldrh	r3, [r7, #14]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <dec_lock+0x3a>
 800ad2c:	89fb      	ldrh	r3, [r7, #14]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ad32:	4a0e      	ldr	r2, [pc, #56]	@ (800ad6c <dec_lock+0x74>)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	011b      	lsls	r3, r3, #4
 800ad38:	4413      	add	r3, r2
 800ad3a:	330c      	adds	r3, #12
 800ad3c:	89fa      	ldrh	r2, [r7, #14]
 800ad3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ad40:	89fb      	ldrh	r3, [r7, #14]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <dec_lock+0x5a>
 800ad46:	4a09      	ldr	r2, [pc, #36]	@ (800ad6c <dec_lock+0x74>)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	011b      	lsls	r3, r3, #4
 800ad4c:	4413      	add	r3, r2
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	737b      	strb	r3, [r7, #13]
 800ad56:	e001      	b.n	800ad5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ad58:	2302      	movs	r3, #2
 800ad5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ad5c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	2000124c 	.word	0x2000124c

0800ad70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	e010      	b.n	800ada0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ad7e:	4a0d      	ldr	r2, [pc, #52]	@ (800adb4 <clear_lock+0x44>)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	4413      	add	r3, r2
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d105      	bne.n	800ad9a <clear_lock+0x2a>
 800ad8e:	4a09      	ldr	r2, [pc, #36]	@ (800adb4 <clear_lock+0x44>)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	4413      	add	r3, r2
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d9eb      	bls.n	800ad7e <clear_lock+0xe>
	}
}
 800ada6:	bf00      	nop
 800ada8:	bf00      	nop
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	2000124c 	.word	0x2000124c

0800adb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	78db      	ldrb	r3, [r3, #3]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d034      	beq.n	800ae36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	7858      	ldrb	r0, [r3, #1]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800addc:	2301      	movs	r3, #1
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	f7ff fd40 	bl	800a864 <disk_write>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800adea:	2301      	movs	r3, #1
 800adec:	73fb      	strb	r3, [r7, #15]
 800adee:	e022      	b.n	800ae36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	1ad2      	subs	r2, r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d217      	bcs.n	800ae36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	789b      	ldrb	r3, [r3, #2]
 800ae0a:	613b      	str	r3, [r7, #16]
 800ae0c:	e010      	b.n	800ae30 <sync_window+0x78>
					wsect += fs->fsize;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	4413      	add	r3, r2
 800ae16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	7858      	ldrb	r0, [r3, #1]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae22:	2301      	movs	r3, #1
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	f7ff fd1d 	bl	800a864 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d8eb      	bhi.n	800ae0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d01b      	beq.n	800ae90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff ffad 	bl	800adb8 <sync_window>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d113      	bne.n	800ae90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	7858      	ldrb	r0, [r3, #1]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae72:	2301      	movs	r3, #1
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	f7ff fcd5 	bl	800a824 <disk_read>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d004      	beq.n	800ae8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295
 800ae84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
	...

0800ae9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff ff87 	bl	800adb8 <sync_window>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d159      	bne.n	800af68 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d149      	bne.n	800af50 <sync_fs+0xb4>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	791b      	ldrb	r3, [r3, #4]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d145      	bne.n	800af50 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	899b      	ldrh	r3, [r3, #12]
 800aece:	461a      	mov	r2, r3
 800aed0:	2100      	movs	r1, #0
 800aed2:	f7ff fda8 	bl	800aa26 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3338      	adds	r3, #56	@ 0x38
 800aeda:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aede:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7ff fd37 	bl	800a956 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3338      	adds	r3, #56	@ 0x38
 800aeec:	4921      	ldr	r1, [pc, #132]	@ (800af74 <sync_fs+0xd8>)
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7ff fd4c 	bl	800a98c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3338      	adds	r3, #56	@ 0x38
 800aef8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800aefc:	491e      	ldr	r1, [pc, #120]	@ (800af78 <sync_fs+0xdc>)
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff fd44 	bl	800a98c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3338      	adds	r3, #56	@ 0x38
 800af08:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f7ff fd3a 	bl	800a98c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3338      	adds	r3, #56	@ 0x38
 800af1c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	4619      	mov	r1, r3
 800af26:	4610      	mov	r0, r2
 800af28:	f7ff fd30 	bl	800a98c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	7858      	ldrb	r0, [r3, #1]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af44:	2301      	movs	r3, #1
 800af46:	f7ff fc8d 	bl	800a864 <disk_write>
			fs->fsi_flag = 0;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	785b      	ldrb	r3, [r3, #1]
 800af54:	2200      	movs	r2, #0
 800af56:	2100      	movs	r1, #0
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fca3 	bl	800a8a4 <disk_ioctl>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <sync_fs+0xcc>
 800af64:	2301      	movs	r3, #1
 800af66:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	41615252 	.word	0x41615252
 800af78:	61417272 	.word	0x61417272

0800af7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	3b02      	subs	r3, #2
 800af8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	69db      	ldr	r3, [r3, #28]
 800af90:	3b02      	subs	r3, #2
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	429a      	cmp	r2, r3
 800af96:	d301      	bcc.n	800af9c <clust2sect+0x20>
 800af98:	2300      	movs	r3, #0
 800af9a:	e008      	b.n	800afae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	895b      	ldrh	r3, [r3, #10]
 800afa0:	461a      	mov	r2, r3
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	fb03 f202 	mul.w	r2, r3, r2
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afac:	4413      	add	r3, r2
}
 800afae:	4618      	mov	r0, r3
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b086      	sub	sp, #24
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d904      	bls.n	800afda <get_fat+0x20>
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d302      	bcc.n	800afe0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800afda:	2301      	movs	r3, #1
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	e0ba      	b.n	800b156 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800afe0:	f04f 33ff 	mov.w	r3, #4294967295
 800afe4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b03      	cmp	r3, #3
 800afec:	f000 8082 	beq.w	800b0f4 <get_fat+0x13a>
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	f300 80a6 	bgt.w	800b142 <get_fat+0x188>
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d002      	beq.n	800b000 <get_fat+0x46>
 800affa:	2b02      	cmp	r3, #2
 800affc:	d055      	beq.n	800b0aa <get_fat+0xf0>
 800affe:	e0a0      	b.n	800b142 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	085b      	lsrs	r3, r3, #1
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	899b      	ldrh	r3, [r3, #12]
 800b016:	4619      	mov	r1, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b01e:	4413      	add	r3, r2
 800b020:	4619      	mov	r1, r3
 800b022:	6938      	ldr	r0, [r7, #16]
 800b024:	f7ff ff0c 	bl	800ae40 <move_window>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f040 808c 	bne.w	800b148 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	60fa      	str	r2, [r7, #12]
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	8992      	ldrh	r2, [r2, #12]
 800b03a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b03e:	fb01 f202 	mul.w	r2, r1, r2
 800b042:	1a9b      	subs	r3, r3, r2
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	4413      	add	r3, r2
 800b048:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b04c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	899b      	ldrh	r3, [r3, #12]
 800b056:	4619      	mov	r1, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b05e:	4413      	add	r3, r2
 800b060:	4619      	mov	r1, r3
 800b062:	6938      	ldr	r0, [r7, #16]
 800b064:	f7ff feec 	bl	800ae40 <move_window>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d16e      	bne.n	800b14c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	899b      	ldrh	r3, [r3, #12]
 800b072:	461a      	mov	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	fbb3 f1f2 	udiv	r1, r3, r2
 800b07a:	fb01 f202 	mul.w	r2, r1, r2
 800b07e:	1a9b      	subs	r3, r3, r2
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	4413      	add	r3, r2
 800b084:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b088:	021b      	lsls	r3, r3, #8
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d002      	beq.n	800b0a0 <get_fat+0xe6>
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	091b      	lsrs	r3, r3, #4
 800b09e:	e002      	b.n	800b0a6 <get_fat+0xec>
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0a6:	617b      	str	r3, [r7, #20]
			break;
 800b0a8:	e055      	b.n	800b156 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	899b      	ldrh	r3, [r3, #12]
 800b0b2:	085b      	lsrs	r3, r3, #1
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0be:	4413      	add	r3, r2
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6938      	ldr	r0, [r7, #16]
 800b0c4:	f7ff febc 	bl	800ae40 <move_window>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d140      	bne.n	800b150 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	8992      	ldrh	r2, [r2, #12]
 800b0dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0e0:	fb00 f202 	mul.w	r2, r0, r2
 800b0e4:	1a9b      	subs	r3, r3, r2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7ff fbf9 	bl	800a8e0 <ld_word>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	617b      	str	r3, [r7, #20]
			break;
 800b0f2:	e030      	b.n	800b156 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	899b      	ldrh	r3, [r3, #12]
 800b0fc:	089b      	lsrs	r3, r3, #2
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	4619      	mov	r1, r3
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	fbb3 f3f1 	udiv	r3, r3, r1
 800b108:	4413      	add	r3, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	6938      	ldr	r0, [r7, #16]
 800b10e:	f7ff fe97 	bl	800ae40 <move_window>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d11d      	bne.n	800b154 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	8992      	ldrh	r2, [r2, #12]
 800b126:	fbb3 f0f2 	udiv	r0, r3, r2
 800b12a:	fb00 f202 	mul.w	r2, r0, r2
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	440b      	add	r3, r1
 800b132:	4618      	mov	r0, r3
 800b134:	f7ff fbec 	bl	800a910 <ld_dword>
 800b138:	4603      	mov	r3, r0
 800b13a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b13e:	617b      	str	r3, [r7, #20]
			break;
 800b140:	e009      	b.n	800b156 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b142:	2301      	movs	r3, #1
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	e006      	b.n	800b156 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b148:	bf00      	nop
 800b14a:	e004      	b.n	800b156 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b14c:	bf00      	nop
 800b14e:	e002      	b.n	800b156 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b150:	bf00      	nop
 800b152:	e000      	b.n	800b156 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b154:	bf00      	nop
		}
	}

	return val;
 800b156:	697b      	ldr	r3, [r7, #20]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b160:	b590      	push	{r4, r7, lr}
 800b162:	b089      	sub	sp, #36	@ 0x24
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b16c:	2302      	movs	r3, #2
 800b16e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2b01      	cmp	r3, #1
 800b174:	f240 8109 	bls.w	800b38a <put_fat+0x22a>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	69db      	ldr	r3, [r3, #28]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	429a      	cmp	r2, r3
 800b180:	f080 8103 	bcs.w	800b38a <put_fat+0x22a>
		switch (fs->fs_type) {
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	2b03      	cmp	r3, #3
 800b18a:	f000 80b6 	beq.w	800b2fa <put_fat+0x19a>
 800b18e:	2b03      	cmp	r3, #3
 800b190:	f300 80fb 	bgt.w	800b38a <put_fat+0x22a>
 800b194:	2b01      	cmp	r3, #1
 800b196:	d003      	beq.n	800b1a0 <put_fat+0x40>
 800b198:	2b02      	cmp	r3, #2
 800b19a:	f000 8083 	beq.w	800b2a4 <put_fat+0x144>
 800b19e:	e0f4      	b.n	800b38a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	61bb      	str	r3, [r7, #24]
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	085b      	lsrs	r3, r3, #1
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	899b      	ldrh	r3, [r3, #12]
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1be:	4413      	add	r3, r2
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff fe3c 	bl	800ae40 <move_window>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1cc:	7ffb      	ldrb	r3, [r7, #31]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f040 80d4 	bne.w	800b37c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	61ba      	str	r2, [r7, #24]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	8992      	ldrh	r2, [r2, #12]
 800b1e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1e8:	fb00 f202 	mul.w	r2, r0, r2
 800b1ec:	1a9b      	subs	r3, r3, r2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f003 0301 	and.w	r3, r3, #1
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00d      	beq.n	800b218 <put_fat+0xb8>
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	b25b      	sxtb	r3, r3
 800b202:	f003 030f 	and.w	r3, r3, #15
 800b206:	b25a      	sxtb	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	011b      	lsls	r3, r3, #4
 800b20e:	b25b      	sxtb	r3, r3
 800b210:	4313      	orrs	r3, r2
 800b212:	b25b      	sxtb	r3, r3
 800b214:	b2db      	uxtb	r3, r3
 800b216:	e001      	b.n	800b21c <put_fat+0xbc>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2201      	movs	r2, #1
 800b224:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	899b      	ldrh	r3, [r3, #12]
 800b22e:	4619      	mov	r1, r3
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	fbb3 f3f1 	udiv	r3, r3, r1
 800b236:	4413      	add	r3, r2
 800b238:	4619      	mov	r1, r3
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f7ff fe00 	bl	800ae40 <move_window>
 800b240:	4603      	mov	r3, r0
 800b242:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b244:	7ffb      	ldrb	r3, [r7, #31]
 800b246:	2b00      	cmp	r3, #0
 800b248:	f040 809a 	bne.w	800b380 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	899b      	ldrh	r3, [r3, #12]
 800b256:	461a      	mov	r2, r3
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b25e:	fb00 f202 	mul.w	r2, r0, r2
 800b262:	1a9b      	subs	r3, r3, r2
 800b264:	440b      	add	r3, r1
 800b266:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <put_fat+0x11a>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	091b      	lsrs	r3, r3, #4
 800b276:	b2db      	uxtb	r3, r3
 800b278:	e00e      	b.n	800b298 <put_fat+0x138>
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b25b      	sxtb	r3, r3
 800b280:	f023 030f 	bic.w	r3, r3, #15
 800b284:	b25a      	sxtb	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	0a1b      	lsrs	r3, r3, #8
 800b28a:	b25b      	sxtb	r3, r3
 800b28c:	f003 030f 	and.w	r3, r3, #15
 800b290:	b25b      	sxtb	r3, r3
 800b292:	4313      	orrs	r3, r2
 800b294:	b25b      	sxtb	r3, r3
 800b296:	b2db      	uxtb	r3, r3
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	70da      	strb	r2, [r3, #3]
			break;
 800b2a2:	e072      	b.n	800b38a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	899b      	ldrh	r3, [r3, #12]
 800b2ac:	085b      	lsrs	r3, r3, #1
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2b8:	4413      	add	r3, r2
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7ff fdbf 	bl	800ae40 <move_window>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2c6:	7ffb      	ldrb	r3, [r7, #31]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d15b      	bne.n	800b384 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	8992      	ldrh	r2, [r2, #12]
 800b2da:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2de:	fb00 f202 	mul.w	r2, r0, r2
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	440b      	add	r3, r1
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	b292      	uxth	r2, r2
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fb32 	bl	800a956 <st_word>
			fs->wflag = 1;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	70da      	strb	r2, [r3, #3]
			break;
 800b2f8:	e047      	b.n	800b38a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	899b      	ldrh	r3, [r3, #12]
 800b302:	089b      	lsrs	r3, r3, #2
 800b304:	b29b      	uxth	r3, r3
 800b306:	4619      	mov	r1, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b30e:	4413      	add	r3, r2
 800b310:	4619      	mov	r1, r3
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f7ff fd94 	bl	800ae40 <move_window>
 800b318:	4603      	mov	r3, r0
 800b31a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b31c:	7ffb      	ldrb	r3, [r7, #31]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d132      	bne.n	800b388 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	8992      	ldrh	r2, [r2, #12]
 800b336:	fbb3 f0f2 	udiv	r0, r3, r2
 800b33a:	fb00 f202 	mul.w	r2, r0, r2
 800b33e:	1a9b      	subs	r3, r3, r2
 800b340:	440b      	add	r3, r1
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff fae4 	bl	800a910 <ld_dword>
 800b348:	4603      	mov	r3, r0
 800b34a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b34e:	4323      	orrs	r3, r4
 800b350:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	8992      	ldrh	r2, [r2, #12]
 800b360:	fbb3 f0f2 	udiv	r0, r3, r2
 800b364:	fb00 f202 	mul.w	r2, r0, r2
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	440b      	add	r3, r1
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7ff fb0c 	bl	800a98c <st_dword>
			fs->wflag = 1;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2201      	movs	r2, #1
 800b378:	70da      	strb	r2, [r3, #3]
			break;
 800b37a:	e006      	b.n	800b38a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b37c:	bf00      	nop
 800b37e:	e004      	b.n	800b38a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b380:	bf00      	nop
 800b382:	e002      	b.n	800b38a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b384:	bf00      	nop
 800b386:	e000      	b.n	800b38a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b388:	bf00      	nop
		}
	}
	return res;
 800b38a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3724      	adds	r7, #36	@ 0x24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd90      	pop	{r4, r7, pc}

0800b394 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d904      	bls.n	800b3ba <remove_chain+0x26>
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d301      	bcc.n	800b3be <remove_chain+0x2a>
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	e04b      	b.n	800b456 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00c      	beq.n	800b3de <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	69b8      	ldr	r0, [r7, #24]
 800b3cc:	f7ff fec8 	bl	800b160 <put_fat>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b3d4:	7ffb      	ldrb	r3, [r7, #31]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <remove_chain+0x4a>
 800b3da:	7ffb      	ldrb	r3, [r7, #31]
 800b3dc:	e03b      	b.n	800b456 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fdea 	bl	800afba <get_fat>
 800b3e6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d031      	beq.n	800b452 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d101      	bne.n	800b3f8 <remove_chain+0x64>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	e02e      	b.n	800b456 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fe:	d101      	bne.n	800b404 <remove_chain+0x70>
 800b400:	2301      	movs	r3, #1
 800b402:	e028      	b.n	800b456 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b404:	2200      	movs	r2, #0
 800b406:	68b9      	ldr	r1, [r7, #8]
 800b408:	69b8      	ldr	r0, [r7, #24]
 800b40a:	f7ff fea9 	bl	800b160 <put_fat>
 800b40e:	4603      	mov	r3, r0
 800b410:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b412:	7ffb      	ldrb	r3, [r7, #31]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <remove_chain+0x88>
 800b418:	7ffb      	ldrb	r3, [r7, #31]
 800b41a:	e01c      	b.n	800b456 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	695a      	ldr	r2, [r3, #20]
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	69db      	ldr	r3, [r3, #28]
 800b424:	3b02      	subs	r3, #2
 800b426:	429a      	cmp	r2, r3
 800b428:	d20b      	bcs.n	800b442 <remove_chain+0xae>
			fs->free_clst++;
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	791b      	ldrb	r3, [r3, #4]
 800b438:	f043 0301 	orr.w	r3, r3, #1
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	69db      	ldr	r3, [r3, #28]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d3c6      	bcc.n	800b3de <remove_chain+0x4a>
 800b450:	e000      	b.n	800b454 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b452:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b088      	sub	sp, #32
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10d      	bne.n	800b490 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d004      	beq.n	800b48a <create_chain+0x2c>
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	69db      	ldr	r3, [r3, #28]
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	429a      	cmp	r2, r3
 800b488:	d31b      	bcc.n	800b4c2 <create_chain+0x64>
 800b48a:	2301      	movs	r3, #1
 800b48c:	61bb      	str	r3, [r7, #24]
 800b48e:	e018      	b.n	800b4c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff fd91 	bl	800afba <get_fat>
 800b498:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d801      	bhi.n	800b4a4 <create_chain+0x46>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e070      	b.n	800b586 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4aa:	d101      	bne.n	800b4b0 <create_chain+0x52>
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	e06a      	b.n	800b586 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d201      	bcs.n	800b4be <create_chain+0x60>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	e063      	b.n	800b586 <create_chain+0x128>
		scl = clst;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	69fa      	ldr	r2, [r7, #28]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d307      	bcc.n	800b4e6 <create_chain+0x88>
				ncl = 2;
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b4da:	69fa      	ldr	r2, [r7, #28]
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d901      	bls.n	800b4e6 <create_chain+0x88>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	e04f      	b.n	800b586 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b4e6:	69f9      	ldr	r1, [r7, #28]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff fd66 	bl	800afba <get_fat>
 800b4ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00e      	beq.n	800b514 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d003      	beq.n	800b504 <create_chain+0xa6>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b502:	d101      	bne.n	800b508 <create_chain+0xaa>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	e03e      	b.n	800b586 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b508:	69fa      	ldr	r2, [r7, #28]
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d1da      	bne.n	800b4c6 <create_chain+0x68>
 800b510:	2300      	movs	r3, #0
 800b512:	e038      	b.n	800b586 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b514:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b516:	f04f 32ff 	mov.w	r2, #4294967295
 800b51a:	69f9      	ldr	r1, [r7, #28]
 800b51c:	6938      	ldr	r0, [r7, #16]
 800b51e:	f7ff fe1f 	bl	800b160 <put_fat>
 800b522:	4603      	mov	r3, r0
 800b524:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d109      	bne.n	800b540 <create_chain+0xe2>
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d006      	beq.n	800b540 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b532:	69fa      	ldr	r2, [r7, #28]
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6938      	ldr	r0, [r7, #16]
 800b538:	f7ff fe12 	bl	800b160 <put_fat>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d116      	bne.n	800b574 <create_chain+0x116>
		fs->last_clst = ncl;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	69fa      	ldr	r2, [r7, #28]
 800b54a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	695a      	ldr	r2, [r3, #20]
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	69db      	ldr	r3, [r3, #28]
 800b554:	3b02      	subs	r3, #2
 800b556:	429a      	cmp	r2, r3
 800b558:	d804      	bhi.n	800b564 <create_chain+0x106>
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	1e5a      	subs	r2, r3, #1
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	791b      	ldrb	r3, [r3, #4]
 800b568:	f043 0301 	orr.w	r3, r3, #1
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	711a      	strb	r2, [r3, #4]
 800b572:	e007      	b.n	800b584 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d102      	bne.n	800b580 <create_chain+0x122>
 800b57a:	f04f 33ff 	mov.w	r3, #4294967295
 800b57e:	e000      	b.n	800b582 <create_chain+0x124>
 800b580:	2301      	movs	r3, #1
 800b582:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b584:	69fb      	ldr	r3, [r7, #28]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3720      	adds	r7, #32
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b58e:	b480      	push	{r7}
 800b590:	b087      	sub	sp, #28
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	899b      	ldrh	r3, [r3, #12]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	8952      	ldrh	r2, [r2, #10]
 800b5b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	1d1a      	adds	r2, r3, #4
 800b5c0:	613a      	str	r2, [r7, #16]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <clmt_clust+0x42>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e010      	b.n	800b5f2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d307      	bcc.n	800b5e8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	617b      	str	r3, [r7, #20]
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b5e6:	e7e9      	b.n	800b5bc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b5e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	4413      	add	r3, r2
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	371c      	adds	r7, #28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b086      	sub	sp, #24
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b614:	d204      	bcs.n	800b620 <dir_sdi+0x22>
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	f003 031f 	and.w	r3, r3, #31
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b620:	2302      	movs	r3, #2
 800b622:	e071      	b.n	800b708 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	683a      	ldr	r2, [r7, #0]
 800b628:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d106      	bne.n	800b644 <dir_sdi+0x46>
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d902      	bls.n	800b644 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b642:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10c      	bne.n	800b664 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	095b      	lsrs	r3, r3, #5
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	8912      	ldrh	r2, [r2, #8]
 800b652:	4293      	cmp	r3, r2
 800b654:	d301      	bcc.n	800b65a <dir_sdi+0x5c>
 800b656:	2302      	movs	r3, #2
 800b658:	e056      	b.n	800b708 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	61da      	str	r2, [r3, #28]
 800b662:	e02d      	b.n	800b6c0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	895b      	ldrh	r3, [r3, #10]
 800b668:	461a      	mov	r2, r3
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	899b      	ldrh	r3, [r3, #12]
 800b66e:	fb02 f303 	mul.w	r3, r2, r3
 800b672:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b674:	e019      	b.n	800b6aa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6979      	ldr	r1, [r7, #20]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff fc9d 	bl	800afba <get_fat>
 800b680:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b688:	d101      	bne.n	800b68e <dir_sdi+0x90>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e03c      	b.n	800b708 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d904      	bls.n	800b69e <dir_sdi+0xa0>
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d301      	bcc.n	800b6a2 <dir_sdi+0xa4>
 800b69e:	2302      	movs	r3, #2
 800b6a0:	e032      	b.n	800b708 <dir_sdi+0x10a>
			ofs -= csz;
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d2e1      	bcs.n	800b676 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b6b2:	6979      	ldr	r1, [r7, #20]
 800b6b4:	6938      	ldr	r0, [r7, #16]
 800b6b6:	f7ff fc61 	bl	800af7c <clust2sect>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	69db      	ldr	r3, [r3, #28]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <dir_sdi+0xd4>
 800b6ce:	2302      	movs	r3, #2
 800b6d0:	e01a      	b.n	800b708 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	69da      	ldr	r2, [r3, #28]
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	899b      	ldrh	r3, [r3, #12]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6e2:	441a      	add	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	899b      	ldrh	r3, [r3, #12]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6fa:	fb00 f202 	mul.w	r2, r0, r2
 800b6fe:	1a9b      	subs	r3, r3, r2
 800b700:	18ca      	adds	r2, r1, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	3320      	adds	r3, #32
 800b726:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	69db      	ldr	r3, [r3, #28]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d003      	beq.n	800b738 <dir_next+0x28>
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b736:	d301      	bcc.n	800b73c <dir_next+0x2c>
 800b738:	2304      	movs	r3, #4
 800b73a:	e0bb      	b.n	800b8b4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	899b      	ldrh	r3, [r3, #12]
 800b740:	461a      	mov	r2, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	fbb3 f1f2 	udiv	r1, r3, r2
 800b748:	fb01 f202 	mul.w	r2, r1, r2
 800b74c:	1a9b      	subs	r3, r3, r2
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f040 809d 	bne.w	800b88e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	69db      	ldr	r3, [r3, #28]
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10b      	bne.n	800b77e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	095b      	lsrs	r3, r3, #5
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	8912      	ldrh	r2, [r2, #8]
 800b76e:	4293      	cmp	r3, r2
 800b770:	f0c0 808d 	bcc.w	800b88e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	61da      	str	r2, [r3, #28]
 800b77a:	2304      	movs	r3, #4
 800b77c:	e09a      	b.n	800b8b4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	899b      	ldrh	r3, [r3, #12]
 800b782:	461a      	mov	r2, r3
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	fbb3 f3f2 	udiv	r3, r3, r2
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	8952      	ldrh	r2, [r2, #10]
 800b78e:	3a01      	subs	r2, #1
 800b790:	4013      	ands	r3, r2
 800b792:	2b00      	cmp	r3, #0
 800b794:	d17b      	bne.n	800b88e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	f7ff fc0b 	bl	800afba <get_fat>
 800b7a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d801      	bhi.n	800b7b0 <dir_next+0xa0>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e081      	b.n	800b8b4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b6:	d101      	bne.n	800b7bc <dir_next+0xac>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e07b      	b.n	800b8b4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	69db      	ldr	r3, [r3, #28]
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d359      	bcc.n	800b87a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d104      	bne.n	800b7d6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	61da      	str	r2, [r3, #28]
 800b7d2:	2304      	movs	r3, #4
 800b7d4:	e06e      	b.n	800b8b4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4610      	mov	r0, r2
 800b7e0:	f7ff fe3d 	bl	800b45e <create_chain>
 800b7e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <dir_next+0xe0>
 800b7ec:	2307      	movs	r3, #7
 800b7ee:	e061      	b.n	800b8b4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d101      	bne.n	800b7fa <dir_next+0xea>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e05c      	b.n	800b8b4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b800:	d101      	bne.n	800b806 <dir_next+0xf6>
 800b802:	2301      	movs	r3, #1
 800b804:	e056      	b.n	800b8b4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f7ff fad6 	bl	800adb8 <sync_window>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <dir_next+0x106>
 800b812:	2301      	movs	r3, #1
 800b814:	e04e      	b.n	800b8b4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	899b      	ldrh	r3, [r3, #12]
 800b820:	461a      	mov	r2, r3
 800b822:	2100      	movs	r1, #0
 800b824:	f7ff f8ff 	bl	800aa26 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b828:	2300      	movs	r3, #0
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	6979      	ldr	r1, [r7, #20]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fba4 	bl	800af7c <clust2sect>
 800b834:	4602      	mov	r2, r0
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	635a      	str	r2, [r3, #52]	@ 0x34
 800b83a:	e012      	b.n	800b862 <dir_next+0x152>
						fs->wflag = 1;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2201      	movs	r2, #1
 800b840:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff fab8 	bl	800adb8 <sync_window>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <dir_next+0x142>
 800b84e:	2301      	movs	r3, #1
 800b850:	e030      	b.n	800b8b4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	3301      	adds	r3, #1
 800b856:	613b      	str	r3, [r7, #16]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	635a      	str	r2, [r3, #52]	@ 0x34
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	895b      	ldrh	r3, [r3, #10]
 800b866:	461a      	mov	r2, r3
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d3e6      	bcc.n	800b83c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	1ad2      	subs	r2, r2, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b880:	6979      	ldr	r1, [r7, #20]
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7ff fb7a 	bl	800af7c <clust2sect>
 800b888:	4602      	mov	r2, r0
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	899b      	ldrh	r3, [r3, #12]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8a6:	fb00 f202 	mul.w	r2, r0, r2
 800b8aa:	1a9b      	subs	r3, r3, r2
 800b8ac:	18ca      	adds	r2, r1, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff fe95 	bl	800b5fe <dir_sdi>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d12b      	bne.n	800b936 <dir_alloc+0x7a>
		n = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7ff faa9 	bl	800ae40 <move_window>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d11d      	bne.n	800b934 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a1b      	ldr	r3, [r3, #32]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2be5      	cmp	r3, #229	@ 0xe5
 800b900:	d004      	beq.n	800b90c <dir_alloc+0x50>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d107      	bne.n	800b91c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	3301      	adds	r3, #1
 800b910:	613b      	str	r3, [r7, #16]
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	429a      	cmp	r2, r3
 800b918:	d102      	bne.n	800b920 <dir_alloc+0x64>
 800b91a:	e00c      	b.n	800b936 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b91c:	2300      	movs	r3, #0
 800b91e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b920:	2101      	movs	r1, #1
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7ff fef4 	bl	800b710 <dir_next>
 800b928:	4603      	mov	r3, r0
 800b92a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d0d7      	beq.n	800b8e2 <dir_alloc+0x26>
 800b932:	e000      	b.n	800b936 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b934:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b936:	7dfb      	ldrb	r3, [r7, #23]
 800b938:	2b04      	cmp	r3, #4
 800b93a:	d101      	bne.n	800b940 <dir_alloc+0x84>
 800b93c:	2307      	movs	r3, #7
 800b93e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	331a      	adds	r3, #26
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe ffc1 	bl	800a8e0 <ld_word>
 800b95e:	4603      	mov	r3, r0
 800b960:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b03      	cmp	r3, #3
 800b968:	d109      	bne.n	800b97e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	3314      	adds	r3, #20
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe ffb6 	bl	800a8e0 <ld_word>
 800b974:	4603      	mov	r3, r0
 800b976:	041b      	lsls	r3, r3, #16
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b97e:	68fb      	ldr	r3, [r7, #12]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	331a      	adds	r3, #26
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	b292      	uxth	r2, r2
 800b99c:	4611      	mov	r1, r2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe ffd9 	bl	800a956 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d109      	bne.n	800b9c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f103 0214 	add.w	r2, r3, #20
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	0c1b      	lsrs	r3, r3, #16
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	f7fe ffcb 	bl	800a956 <st_word>
	}
}
 800b9c0:	bf00      	nop
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff fe10 	bl	800b5fe <dir_sdi>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <dir_find+0x24>
 800b9e8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ea:	e03e      	b.n	800ba6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	69db      	ldr	r3, [r3, #28]
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6938      	ldr	r0, [r7, #16]
 800b9f4:	f7ff fa24 	bl	800ae40 <move_window>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b9fc:	7dfb      	ldrb	r3, [r7, #23]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d12f      	bne.n	800ba62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a1b      	ldr	r3, [r3, #32]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d102      	bne.n	800ba16 <dir_find+0x4e>
 800ba10:	2304      	movs	r3, #4
 800ba12:	75fb      	strb	r3, [r7, #23]
 800ba14:	e028      	b.n	800ba68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	330b      	adds	r3, #11
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	330b      	adds	r3, #11
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	f003 0308 	and.w	r3, r3, #8
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <dir_find+0x86>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a18      	ldr	r0, [r3, #32]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	3324      	adds	r3, #36	@ 0x24
 800ba40:	220b      	movs	r2, #11
 800ba42:	4619      	mov	r1, r3
 800ba44:	f7ff f80a 	bl	800aa5c <mem_cmp>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00b      	beq.n	800ba66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ba4e:	2100      	movs	r1, #0
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7ff fe5d 	bl	800b710 <dir_next>
 800ba56:	4603      	mov	r3, r0
 800ba58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d0c5      	beq.n	800b9ec <dir_find+0x24>
 800ba60:	e002      	b.n	800ba68 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ba62:	bf00      	nop
 800ba64:	e000      	b.n	800ba68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba66:	bf00      	nop

	return res;
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ba80:	2101      	movs	r1, #1
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff ff1a 	bl	800b8bc <dir_alloc>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d11c      	bne.n	800bacc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	4619      	mov	r1, r3
 800ba98:	68b8      	ldr	r0, [r7, #8]
 800ba9a:	f7ff f9d1 	bl	800ae40 <move_window>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d111      	bne.n	800bacc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6a1b      	ldr	r3, [r3, #32]
 800baac:	2220      	movs	r2, #32
 800baae:	2100      	movs	r1, #0
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fe ffb8 	bl	800aa26 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a18      	ldr	r0, [r3, #32]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3324      	adds	r3, #36	@ 0x24
 800babe:	220b      	movs	r2, #11
 800bac0:	4619      	mov	r1, r3
 800bac2:	f7fe ff8f 	bl	800a9e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	2201      	movs	r2, #1
 800baca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
	...

0800bad8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	3324      	adds	r3, #36	@ 0x24
 800baec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800baee:	220b      	movs	r2, #11
 800baf0:	2120      	movs	r1, #32
 800baf2:	68b8      	ldr	r0, [r7, #8]
 800baf4:	f7fe ff97 	bl	800aa26 <mem_set>
	si = i = 0; ni = 8;
 800baf8:	2300      	movs	r3, #0
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	61fb      	str	r3, [r7, #28]
 800bb00:	2308      	movs	r3, #8
 800bb02:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	4413      	add	r3, r2
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb0e:	d12f      	bne.n	800bb70 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	61fa      	str	r2, [r7, #28]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4413      	add	r3, r2
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 800bb1e:	7efb      	ldrb	r3, [r7, #27]
 800bb20:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb22:	d10a      	bne.n	800bb3a <create_name+0x62>
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d807      	bhi.n	800bb3a <create_name+0x62>
			sfn[i++] = c;
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	1c5a      	adds	r2, r3, #1
 800bb2e:	613a      	str	r2, [r7, #16]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	4413      	add	r3, r2
 800bb34:	7efa      	ldrb	r2, [r7, #27]
 800bb36:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800bb38:	e7ea      	b.n	800bb10 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800bb3a:	7efb      	ldrb	r3, [r7, #27]
 800bb3c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb3e:	d007      	beq.n	800bb50 <create_name+0x78>
 800bb40:	7efb      	ldrb	r3, [r7, #27]
 800bb42:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb44:	d004      	beq.n	800bb50 <create_name+0x78>
 800bb46:	7efb      	ldrb	r3, [r7, #27]
 800bb48:	2b20      	cmp	r3, #32
 800bb4a:	d901      	bls.n	800bb50 <create_name+0x78>
 800bb4c:	2306      	movs	r3, #6
 800bb4e:	e084      	b.n	800bc5a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	441a      	add	r2, r3
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800bb5a:	7efb      	ldrb	r3, [r7, #27]
 800bb5c:	2b20      	cmp	r3, #32
 800bb5e:	d801      	bhi.n	800bb64 <create_name+0x8c>
 800bb60:	2224      	movs	r2, #36	@ 0x24
 800bb62:	e000      	b.n	800bb66 <create_name+0x8e>
 800bb64:	2220      	movs	r2, #32
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	330b      	adds	r3, #11
 800bb6a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e074      	b.n	800bc5a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	61fa      	str	r2, [r7, #28]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	4413      	add	r3, r2
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bb7e:	7efb      	ldrb	r3, [r7, #27]
 800bb80:	2b20      	cmp	r3, #32
 800bb82:	d94e      	bls.n	800bc22 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bb84:	7efb      	ldrb	r3, [r7, #27]
 800bb86:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb88:	d006      	beq.n	800bb98 <create_name+0xc0>
 800bb8a:	7efb      	ldrb	r3, [r7, #27]
 800bb8c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb8e:	d110      	bne.n	800bbb2 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bb90:	e002      	b.n	800bb98 <create_name+0xc0>
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	3301      	adds	r3, #1
 800bb96:	61fb      	str	r3, [r7, #28]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b2f      	cmp	r3, #47	@ 0x2f
 800bba2:	d0f6      	beq.n	800bb92 <create_name+0xba>
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	4413      	add	r3, r2
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b5c      	cmp	r3, #92	@ 0x5c
 800bbae:	d0f0      	beq.n	800bb92 <create_name+0xba>
			break;
 800bbb0:	e038      	b.n	800bc24 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bbb2:	7efb      	ldrb	r3, [r7, #27]
 800bbb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbb6:	d003      	beq.n	800bbc0 <create_name+0xe8>
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d30c      	bcc.n	800bbda <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2b0b      	cmp	r3, #11
 800bbc4:	d002      	beq.n	800bbcc <create_name+0xf4>
 800bbc6:	7efb      	ldrb	r3, [r7, #27]
 800bbc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbca:	d001      	beq.n	800bbd0 <create_name+0xf8>
 800bbcc:	2306      	movs	r3, #6
 800bbce:	e044      	b.n	800bc5a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	613b      	str	r3, [r7, #16]
 800bbd4:	230b      	movs	r3, #11
 800bbd6:	617b      	str	r3, [r7, #20]
			continue;
 800bbd8:	e022      	b.n	800bc20 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bbda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	da04      	bge.n	800bbec <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bbe2:	7efb      	ldrb	r3, [r7, #27]
 800bbe4:	3b80      	subs	r3, #128	@ 0x80
 800bbe6:	4a1f      	ldr	r2, [pc, #124]	@ (800bc64 <create_name+0x18c>)
 800bbe8:	5cd3      	ldrb	r3, [r2, r3]
 800bbea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bbec:	7efb      	ldrb	r3, [r7, #27]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	481d      	ldr	r0, [pc, #116]	@ (800bc68 <create_name+0x190>)
 800bbf2:	f7fe ff5a 	bl	800aaaa <chk_chr>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <create_name+0x128>
 800bbfc:	2306      	movs	r3, #6
 800bbfe:	e02c      	b.n	800bc5a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bc00:	7efb      	ldrb	r3, [r7, #27]
 800bc02:	2b60      	cmp	r3, #96	@ 0x60
 800bc04:	d905      	bls.n	800bc12 <create_name+0x13a>
 800bc06:	7efb      	ldrb	r3, [r7, #27]
 800bc08:	2b7a      	cmp	r3, #122	@ 0x7a
 800bc0a:	d802      	bhi.n	800bc12 <create_name+0x13a>
 800bc0c:	7efb      	ldrb	r3, [r7, #27]
 800bc0e:	3b20      	subs	r3, #32
 800bc10:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	1c5a      	adds	r2, r3, #1
 800bc16:	613a      	str	r2, [r7, #16]
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	7efa      	ldrb	r2, [r7, #27]
 800bc1e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bc20:	e7a6      	b.n	800bb70 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bc22:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	441a      	add	r2, r3
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <create_name+0x160>
 800bc34:	2306      	movs	r3, #6
 800bc36:	e010      	b.n	800bc5a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2be5      	cmp	r3, #229	@ 0xe5
 800bc3e:	d102      	bne.n	800bc46 <create_name+0x16e>
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2205      	movs	r2, #5
 800bc44:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bc46:	7efb      	ldrb	r3, [r7, #27]
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d801      	bhi.n	800bc50 <create_name+0x178>
 800bc4c:	2204      	movs	r2, #4
 800bc4e:	e000      	b.n	800bc52 <create_name+0x17a>
 800bc50:	2200      	movs	r2, #0
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	330b      	adds	r3, #11
 800bc56:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bc58:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3720      	adds	r7, #32
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	0800e900 	.word	0x0800e900
 800bc68:	0800e850 	.word	0x0800e850

0800bc6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc86:	d00b      	beq.n	800bca0 <follow_path+0x34>
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc8e:	d007      	beq.n	800bca0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	699a      	ldr	r2, [r3, #24]
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	609a      	str	r2, [r3, #8]
 800bc98:	e00d      	b.n	800bcb6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	603b      	str	r3, [r7, #0]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b2f      	cmp	r3, #47	@ 0x2f
 800bca6:	d0f8      	beq.n	800bc9a <follow_path+0x2e>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	2b5c      	cmp	r3, #92	@ 0x5c
 800bcae:	d0f4      	beq.n	800bc9a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	2b1f      	cmp	r3, #31
 800bcbc:	d80a      	bhi.n	800bcd4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2280      	movs	r2, #128	@ 0x80
 800bcc2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff fc98 	bl	800b5fe <dir_sdi>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]
 800bcd2:	e05b      	b.n	800bd8c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff fefd 	bl	800bad8 <create_name>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d14c      	bne.n	800bd82 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7ff fe6d 	bl	800b9c8 <dir_find>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bcf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d01b      	beq.n	800bd38 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d13f      	bne.n	800bd86 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800bd06:	7afb      	ldrb	r3, [r7, #11]
 800bd08:	f003 0320 	and.w	r3, r3, #32
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00b      	beq.n	800bd28 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800bd10:	7afb      	ldrb	r3, [r7, #11]
 800bd12:	f003 0304 	and.w	r3, r3, #4
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d031      	beq.n	800bd7e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2280      	movs	r2, #128	@ 0x80
 800bd1e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800bd26:	e02e      	b.n	800bd86 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	f003 0304 	and.w	r3, r3, #4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d129      	bne.n	800bd86 <follow_path+0x11a>
 800bd32:	2305      	movs	r3, #5
 800bd34:	75fb      	strb	r3, [r7, #23]
				break;
 800bd36:	e026      	b.n	800bd86 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd38:	7afb      	ldrb	r3, [r7, #11]
 800bd3a:	f003 0304 	and.w	r3, r3, #4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d123      	bne.n	800bd8a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	799b      	ldrb	r3, [r3, #6]
 800bd46:	f003 0310 	and.w	r3, r3, #16
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d102      	bne.n	800bd54 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800bd4e:	2305      	movs	r3, #5
 800bd50:	75fb      	strb	r3, [r7, #23]
 800bd52:	e01b      	b.n	800bd8c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	8992      	ldrh	r2, [r2, #12]
 800bd62:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd66:	fb00 f202 	mul.w	r2, r0, r2
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	440b      	add	r3, r1
 800bd6e:	4619      	mov	r1, r3
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f7ff fdea 	bl	800b94a <ld_clust>
 800bd76:	4602      	mov	r2, r0
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	609a      	str	r2, [r3, #8]
 800bd7c:	e7aa      	b.n	800bcd4 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800bd7e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd80:	e7a8      	b.n	800bcd4 <follow_path+0x68>
			if (res != FR_OK) break;
 800bd82:	bf00      	nop
 800bd84:	e002      	b.n	800bd8c <follow_path+0x120>
				break;
 800bd86:	bf00      	nop
 800bd88:	e000      	b.n	800bd8c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd8a:	bf00      	nop
			}
		}
	}

	return res;
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b087      	sub	sp, #28
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bd9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bda2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d031      	beq.n	800be10 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	617b      	str	r3, [r7, #20]
 800bdb2:	e002      	b.n	800bdba <get_ldnumber+0x24>
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d903      	bls.n	800bdca <get_ldnumber+0x34>
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b3a      	cmp	r3, #58	@ 0x3a
 800bdc8:	d1f4      	bne.n	800bdb4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b3a      	cmp	r3, #58	@ 0x3a
 800bdd0:	d11c      	bne.n	800be0c <get_ldnumber+0x76>
			tp = *path;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	60fa      	str	r2, [r7, #12]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	3b30      	subs	r3, #48	@ 0x30
 800bde2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2b09      	cmp	r3, #9
 800bde8:	d80e      	bhi.n	800be08 <get_ldnumber+0x72>
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d10a      	bne.n	800be08 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d107      	bne.n	800be08 <get_ldnumber+0x72>
					vol = (int)i;
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	3301      	adds	r3, #1
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	e002      	b.n	800be12 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800be0c:	2300      	movs	r3, #0
 800be0e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800be10:	693b      	ldr	r3, [r7, #16]
}
 800be12:	4618      	mov	r0, r3
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
	...

0800be20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	70da      	strb	r2, [r3, #3]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f04f 32ff 	mov.w	r2, #4294967295
 800be36:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7ff f800 	bl	800ae40 <move_window>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <check_fs+0x2a>
 800be46:	2304      	movs	r3, #4
 800be48:	e038      	b.n	800bebc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	3338      	adds	r3, #56	@ 0x38
 800be4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800be52:	4618      	mov	r0, r3
 800be54:	f7fe fd44 	bl	800a8e0 <ld_word>
 800be58:	4603      	mov	r3, r0
 800be5a:	461a      	mov	r2, r3
 800be5c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800be60:	429a      	cmp	r2, r3
 800be62:	d001      	beq.n	800be68 <check_fs+0x48>
 800be64:	2303      	movs	r3, #3
 800be66:	e029      	b.n	800bebc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800be6e:	2be9      	cmp	r3, #233	@ 0xe9
 800be70:	d009      	beq.n	800be86 <check_fs+0x66>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800be78:	2beb      	cmp	r3, #235	@ 0xeb
 800be7a:	d11e      	bne.n	800beba <check_fs+0x9a>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800be82:	2b90      	cmp	r3, #144	@ 0x90
 800be84:	d119      	bne.n	800beba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3338      	adds	r3, #56	@ 0x38
 800be8a:	3336      	adds	r3, #54	@ 0x36
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fe fd3f 	bl	800a910 <ld_dword>
 800be92:	4603      	mov	r3, r0
 800be94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800be98:	4a0a      	ldr	r2, [pc, #40]	@ (800bec4 <check_fs+0xa4>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d101      	bne.n	800bea2 <check_fs+0x82>
 800be9e:	2300      	movs	r3, #0
 800bea0:	e00c      	b.n	800bebc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3338      	adds	r3, #56	@ 0x38
 800bea6:	3352      	adds	r3, #82	@ 0x52
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe fd31 	bl	800a910 <ld_dword>
 800beae:	4603      	mov	r3, r0
 800beb0:	4a05      	ldr	r2, [pc, #20]	@ (800bec8 <check_fs+0xa8>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d101      	bne.n	800beba <check_fs+0x9a>
 800beb6:	2300      	movs	r3, #0
 800beb8:	e000      	b.n	800bebc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800beba:	2302      	movs	r3, #2
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	00544146 	.word	0x00544146
 800bec8:	33544146 	.word	0x33544146

0800becc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b096      	sub	sp, #88	@ 0x58
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	4613      	mov	r3, r2
 800bed8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2200      	movs	r2, #0
 800bede:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f7ff ff58 	bl	800bd96 <get_ldnumber>
 800bee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beea:	2b00      	cmp	r3, #0
 800beec:	da01      	bge.n	800bef2 <find_volume+0x26>
 800beee:	230b      	movs	r3, #11
 800bef0:	e265      	b.n	800c3be <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bef2:	4a9f      	ldr	r2, [pc, #636]	@ (800c170 <find_volume+0x2a4>)
 800bef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800befa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800befc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d101      	bne.n	800bf06 <find_volume+0x3a>
 800bf02:	230c      	movs	r3, #12
 800bf04:	e25b      	b.n	800c3be <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bf0c:	79fb      	ldrb	r3, [r7, #7]
 800bf0e:	f023 0301 	bic.w	r3, r3, #1
 800bf12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d01a      	beq.n	800bf52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fe fc3d 	bl	800a7a0 <disk_status>
 800bf26:	4603      	mov	r3, r0
 800bf28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bf2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10c      	bne.n	800bf52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bf38:	79fb      	ldrb	r3, [r7, #7]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d007      	beq.n	800bf4e <find_volume+0x82>
 800bf3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf42:	f003 0304 	and.w	r3, r3, #4
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bf4a:	230a      	movs	r3, #10
 800bf4c:	e237      	b.n	800c3be <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e235      	b.n	800c3be <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf62:	785b      	ldrb	r3, [r3, #1]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe fc35 	bl	800a7d4 <disk_initialize>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d001      	beq.n	800bf80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	e21e      	b.n	800c3be <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf80:	79fb      	ldrb	r3, [r7, #7]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d007      	beq.n	800bf96 <find_volume+0xca>
 800bf86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bf92:	230a      	movs	r3, #10
 800bf94:	e213      	b.n	800c3be <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bf96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf98:	7858      	ldrb	r0, [r3, #1]
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	2102      	movs	r1, #2
 800bfa2:	f7fe fc7f 	bl	800a8a4 <disk_ioctl>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <find_volume+0xe4>
 800bfac:	2301      	movs	r3, #1
 800bfae:	e206      	b.n	800c3be <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb2:	899b      	ldrh	r3, [r3, #12]
 800bfb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfb8:	d80d      	bhi.n	800bfd6 <find_volume+0x10a>
 800bfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbc:	899b      	ldrh	r3, [r3, #12]
 800bfbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfc2:	d308      	bcc.n	800bfd6 <find_volume+0x10a>
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc6:	899b      	ldrh	r3, [r3, #12]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	899b      	ldrh	r3, [r3, #12]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <find_volume+0x10e>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e1f1      	b.n	800c3be <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bfde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bfe0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bfe2:	f7ff ff1d 	bl	800be20 <check_fs>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bfec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d149      	bne.n	800c088 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bff4:	2300      	movs	r3, #0
 800bff6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bff8:	e01e      	b.n	800c038 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c002:	011b      	lsls	r3, r3, #4
 800c004:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c008:	4413      	add	r3, r2
 800c00a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00e:	3304      	adds	r3, #4
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d006      	beq.n	800c024 <find_volume+0x158>
 800c016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c018:	3308      	adds	r3, #8
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fc78 	bl	800a910 <ld_dword>
 800c020:	4602      	mov	r2, r0
 800c022:	e000      	b.n	800c026 <find_volume+0x15a>
 800c024:	2200      	movs	r2, #0
 800c026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	3358      	adds	r3, #88	@ 0x58
 800c02c:	443b      	add	r3, r7
 800c02e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c034:	3301      	adds	r3, #1
 800c036:	643b      	str	r3, [r7, #64]	@ 0x40
 800c038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c03a:	2b03      	cmp	r3, #3
 800c03c:	d9dd      	bls.n	800bffa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c03e:	2300      	movs	r3, #0
 800c040:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <find_volume+0x182>
 800c048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c04a:	3b01      	subs	r3, #1
 800c04c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c04e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	3358      	adds	r3, #88	@ 0x58
 800c054:	443b      	add	r3, r7
 800c056:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c05a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c05c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d005      	beq.n	800c06e <find_volume+0x1a2>
 800c062:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c064:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c066:	f7ff fedb 	bl	800be20 <check_fs>
 800c06a:	4603      	mov	r3, r0
 800c06c:	e000      	b.n	800c070 <find_volume+0x1a4>
 800c06e:	2303      	movs	r3, #3
 800c070:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c074:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d905      	bls.n	800c088 <find_volume+0x1bc>
 800c07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c07e:	3301      	adds	r3, #1
 800c080:	643b      	str	r3, [r7, #64]	@ 0x40
 800c082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c084:	2b03      	cmp	r3, #3
 800c086:	d9e2      	bls.n	800c04e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d101      	bne.n	800c094 <find_volume+0x1c8>
 800c090:	2301      	movs	r3, #1
 800c092:	e194      	b.n	800c3be <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c094:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d901      	bls.n	800c0a0 <find_volume+0x1d4>
 800c09c:	230d      	movs	r3, #13
 800c09e:	e18e      	b.n	800c3be <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a2:	3338      	adds	r3, #56	@ 0x38
 800c0a4:	330b      	adds	r3, #11
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fe fc1a 	bl	800a8e0 <ld_word>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b2:	899b      	ldrh	r3, [r3, #12]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d001      	beq.n	800c0bc <find_volume+0x1f0>
 800c0b8:	230d      	movs	r3, #13
 800c0ba:	e180      	b.n	800c3be <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0be:	3338      	adds	r3, #56	@ 0x38
 800c0c0:	3316      	adds	r3, #22
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fe fc0c 	bl	800a8e0 <ld_word>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d106      	bne.n	800c0e0 <find_volume+0x214>
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d4:	3338      	adds	r3, #56	@ 0x38
 800c0d6:	3324      	adds	r3, #36	@ 0x24
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe fc19 	bl	800a910 <ld_dword>
 800c0de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0e4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f2:	789b      	ldrb	r3, [r3, #2]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d005      	beq.n	800c104 <find_volume+0x238>
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fa:	789b      	ldrb	r3, [r3, #2]
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d001      	beq.n	800c104 <find_volume+0x238>
 800c100:	230d      	movs	r3, #13
 800c102:	e15c      	b.n	800c3be <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c106:	789b      	ldrb	r3, [r3, #2]
 800c108:	461a      	mov	r2, r3
 800c10a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10c:	fb02 f303 	mul.w	r3, r2, r3
 800c110:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c118:	461a      	mov	r2, r3
 800c11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c120:	895b      	ldrh	r3, [r3, #10]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d008      	beq.n	800c138 <find_volume+0x26c>
 800c126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c128:	895b      	ldrh	r3, [r3, #10]
 800c12a:	461a      	mov	r2, r3
 800c12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12e:	895b      	ldrh	r3, [r3, #10]
 800c130:	3b01      	subs	r3, #1
 800c132:	4013      	ands	r3, r2
 800c134:	2b00      	cmp	r3, #0
 800c136:	d001      	beq.n	800c13c <find_volume+0x270>
 800c138:	230d      	movs	r3, #13
 800c13a:	e140      	b.n	800c3be <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13e:	3338      	adds	r3, #56	@ 0x38
 800c140:	3311      	adds	r3, #17
 800c142:	4618      	mov	r0, r3
 800c144:	f7fe fbcc 	bl	800a8e0 <ld_word>
 800c148:	4603      	mov	r3, r0
 800c14a:	461a      	mov	r2, r3
 800c14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c14e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c152:	891b      	ldrh	r3, [r3, #8]
 800c154:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c156:	8992      	ldrh	r2, [r2, #12]
 800c158:	0952      	lsrs	r2, r2, #5
 800c15a:	b292      	uxth	r2, r2
 800c15c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c160:	fb01 f202 	mul.w	r2, r1, r2
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	b29b      	uxth	r3, r3
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <find_volume+0x2a8>
 800c16c:	230d      	movs	r3, #13
 800c16e:	e126      	b.n	800c3be <find_volume+0x4f2>
 800c170:	20001244 	.word	0x20001244

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c176:	3338      	adds	r3, #56	@ 0x38
 800c178:	3313      	adds	r3, #19
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fbb0 	bl	800a8e0 <ld_word>
 800c180:	4603      	mov	r3, r0
 800c182:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <find_volume+0x2cc>
 800c18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18c:	3338      	adds	r3, #56	@ 0x38
 800c18e:	3320      	adds	r3, #32
 800c190:	4618      	mov	r0, r3
 800c192:	f7fe fbbd 	bl	800a910 <ld_dword>
 800c196:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19a:	3338      	adds	r3, #56	@ 0x38
 800c19c:	330e      	adds	r3, #14
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe fb9e 	bl	800a8e0 <ld_word>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c1a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <find_volume+0x2e6>
 800c1ae:	230d      	movs	r3, #13
 800c1b0:	e105      	b.n	800c3be <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c1b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1b6:	4413      	add	r3, r2
 800c1b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1ba:	8911      	ldrh	r1, [r2, #8]
 800c1bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1be:	8992      	ldrh	r2, [r2, #12]
 800c1c0:	0952      	lsrs	r2, r2, #5
 800c1c2:	b292      	uxth	r2, r2
 800c1c4:	fbb1 f2f2 	udiv	r2, r1, r2
 800c1c8:	b292      	uxth	r2, r2
 800c1ca:	4413      	add	r3, r2
 800c1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c1ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d201      	bcs.n	800c1da <find_volume+0x30e>
 800c1d6:	230d      	movs	r3, #13
 800c1d8:	e0f1      	b.n	800c3be <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c1da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1e2:	8952      	ldrh	r2, [r2, #10]
 800c1e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <find_volume+0x328>
 800c1f0:	230d      	movs	r3, #13
 800c1f2:	e0e4      	b.n	800c3be <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c200:	4293      	cmp	r3, r2
 800c202:	d802      	bhi.n	800c20a <find_volume+0x33e>
 800c204:	2302      	movs	r3, #2
 800c206:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c210:	4293      	cmp	r3, r2
 800c212:	d802      	bhi.n	800c21a <find_volume+0x34e>
 800c214:	2301      	movs	r3, #1
 800c216:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21c:	1c9a      	adds	r2, r3, #2
 800c21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c220:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c224:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c226:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c228:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c22a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c22c:	441a      	add	r2, r3
 800c22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c230:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c232:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c236:	441a      	add	r2, r3
 800c238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c23c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c240:	2b03      	cmp	r3, #3
 800c242:	d11e      	bne.n	800c282 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c246:	3338      	adds	r3, #56	@ 0x38
 800c248:	332a      	adds	r3, #42	@ 0x2a
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fe fb48 	bl	800a8e0 <ld_word>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <find_volume+0x38e>
 800c256:	230d      	movs	r3, #13
 800c258:	e0b1      	b.n	800c3be <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25c:	891b      	ldrh	r3, [r3, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d001      	beq.n	800c266 <find_volume+0x39a>
 800c262:	230d      	movs	r3, #13
 800c264:	e0ab      	b.n	800c3be <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c268:	3338      	adds	r3, #56	@ 0x38
 800c26a:	332c      	adds	r3, #44	@ 0x2c
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe fb4f 	bl	800a910 <ld_dword>
 800c272:	4602      	mov	r2, r0
 800c274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c276:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27a:	69db      	ldr	r3, [r3, #28]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c280:	e01f      	b.n	800c2c2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c284:	891b      	ldrh	r3, [r3, #8]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d101      	bne.n	800c28e <find_volume+0x3c2>
 800c28a:	230d      	movs	r3, #13
 800c28c:	e097      	b.n	800c3be <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c290:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c294:	441a      	add	r2, r3
 800c296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c298:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c29a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d103      	bne.n	800c2aa <find_volume+0x3de>
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a4:	69db      	ldr	r3, [r3, #28]
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	e00a      	b.n	800c2c0 <find_volume+0x3f4>
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ac:	69da      	ldr	r2, [r3, #28]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	005b      	lsls	r3, r3, #1
 800c2b2:	4413      	add	r3, r2
 800c2b4:	085a      	lsrs	r2, r3, #1
 800c2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b8:	69db      	ldr	r3, [r3, #28]
 800c2ba:	f003 0301 	and.w	r3, r3, #1
 800c2be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c2c0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c4:	6a1a      	ldr	r2, [r3, #32]
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c8:	899b      	ldrh	r3, [r3, #12]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2ce:	440b      	add	r3, r1
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c2d4:	8989      	ldrh	r1, [r1, #12]
 800c2d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d201      	bcs.n	800c2e2 <find_volume+0x416>
 800c2de:	230d      	movs	r3, #13
 800c2e0:	e06d      	b.n	800c3be <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e8:	615a      	str	r2, [r3, #20]
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ec:	695a      	ldr	r2, [r3, #20]
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f4:	2280      	movs	r2, #128	@ 0x80
 800c2f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c2f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d149      	bne.n	800c394 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c302:	3338      	adds	r3, #56	@ 0x38
 800c304:	3330      	adds	r3, #48	@ 0x30
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe faea 	bl	800a8e0 <ld_word>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d140      	bne.n	800c394 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c314:	3301      	adds	r3, #1
 800c316:	4619      	mov	r1, r3
 800c318:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c31a:	f7fe fd91 	bl	800ae40 <move_window>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d137      	bne.n	800c394 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	2200      	movs	r2, #0
 800c328:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32c:	3338      	adds	r3, #56	@ 0x38
 800c32e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe fad4 	bl	800a8e0 <ld_word>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c340:	429a      	cmp	r2, r3
 800c342:	d127      	bne.n	800c394 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c346:	3338      	adds	r3, #56	@ 0x38
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe fae1 	bl	800a910 <ld_dword>
 800c34e:	4603      	mov	r3, r0
 800c350:	4a1d      	ldr	r2, [pc, #116]	@ (800c3c8 <find_volume+0x4fc>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d11e      	bne.n	800c394 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c358:	3338      	adds	r3, #56	@ 0x38
 800c35a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe fad6 	bl	800a910 <ld_dword>
 800c364:	4603      	mov	r3, r0
 800c366:	4a19      	ldr	r2, [pc, #100]	@ (800c3cc <find_volume+0x500>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d113      	bne.n	800c394 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36e:	3338      	adds	r3, #56	@ 0x38
 800c370:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c374:	4618      	mov	r0, r3
 800c376:	f7fe facb 	bl	800a910 <ld_dword>
 800c37a:	4602      	mov	r2, r0
 800c37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c382:	3338      	adds	r3, #56	@ 0x38
 800c384:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fe fac1 	bl	800a910 <ld_dword>
 800c38e:	4602      	mov	r2, r0
 800c390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c392:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c396:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c39a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c39c:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d0 <find_volume+0x504>)
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d0 <find_volume+0x504>)
 800c3a6:	801a      	strh	r2, [r3, #0]
 800c3a8:	4b09      	ldr	r3, [pc, #36]	@ (800c3d0 <find_volume+0x504>)
 800c3aa:	881a      	ldrh	r2, [r3, #0]
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ae:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c3b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c3b8:	f7fe fcda 	bl	800ad70 <clear_lock>
#endif
	return FR_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3758      	adds	r7, #88	@ 0x58
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	41615252 	.word	0x41615252
 800c3cc:	61417272 	.word	0x61417272
 800c3d0:	20001248 	.word	0x20001248

0800c3d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c3de:	2309      	movs	r3, #9
 800c3e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d01c      	beq.n	800c422 <validate+0x4e>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d018      	beq.n	800c422 <validate+0x4e>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d013      	beq.n	800c422 <validate+0x4e>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	889a      	ldrh	r2, [r3, #4]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	88db      	ldrh	r3, [r3, #6]
 800c404:	429a      	cmp	r2, r3
 800c406:	d10c      	bne.n	800c422 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	785b      	ldrb	r3, [r3, #1]
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe f9c6 	bl	800a7a0 <disk_status>
 800c414:	4603      	mov	r3, r0
 800c416:	f003 0301 	and.w	r3, r3, #1
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <validate+0x4e>
			res = FR_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d102      	bne.n	800c42e <validate+0x5a>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	e000      	b.n	800c430 <validate+0x5c>
 800c42e:	2300      	movs	r3, #0
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	6013      	str	r3, [r2, #0]
	return res;
 800c434:	7bfb      	ldrb	r3, [r7, #15]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
	...

0800c440 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b088      	sub	sp, #32
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	4613      	mov	r3, r2
 800c44c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c452:	f107 0310 	add.w	r3, r7, #16
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff fc9d 	bl	800bd96 <get_ldnumber>
 800c45c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	2b00      	cmp	r3, #0
 800c462:	da01      	bge.n	800c468 <f_mount+0x28>
 800c464:	230b      	movs	r3, #11
 800c466:	e02b      	b.n	800c4c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c468:	4a17      	ldr	r2, [pc, #92]	@ (800c4c8 <f_mount+0x88>)
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c470:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d005      	beq.n	800c484 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c478:	69b8      	ldr	r0, [r7, #24]
 800c47a:	f7fe fc79 	bl	800ad70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	2200      	movs	r2, #0
 800c482:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d002      	beq.n	800c490 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2200      	movs	r2, #0
 800c48e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	490d      	ldr	r1, [pc, #52]	@ (800c4c8 <f_mount+0x88>)
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <f_mount+0x66>
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d001      	beq.n	800c4aa <f_mount+0x6a>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	e00a      	b.n	800c4c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c4aa:	f107 010c 	add.w	r1, r7, #12
 800c4ae:	f107 0308 	add.w	r3, r7, #8
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7ff fd09 	bl	800becc <find_volume>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3720      	adds	r7, #32
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20001244 	.word	0x20001244

0800c4cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b098      	sub	sp, #96	@ 0x60
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <f_open+0x18>
 800c4e0:	2309      	movs	r3, #9
 800c4e2:	e1b7      	b.n	800c854 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c4e4:	79fb      	ldrb	r3, [r7, #7]
 800c4e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c4ec:	79fa      	ldrb	r2, [r7, #7]
 800c4ee:	f107 0110 	add.w	r1, r7, #16
 800c4f2:	f107 0308 	add.w	r3, r7, #8
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff fce8 	bl	800becc <find_volume>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c502:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c506:	2b00      	cmp	r3, #0
 800c508:	f040 819b 	bne.w	800c842 <f_open+0x376>
		dj.obj.fs = fs;
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	f107 0314 	add.w	r3, r7, #20
 800c516:	4611      	mov	r1, r2
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff fba7 	bl	800bc6c <follow_path>
 800c51e:	4603      	mov	r3, r0
 800c520:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c524:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d118      	bne.n	800c55e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c52c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c530:	b25b      	sxtb	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	da03      	bge.n	800c53e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c536:	2306      	movs	r3, #6
 800c538:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c53c:	e00f      	b.n	800c55e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c53e:	79fb      	ldrb	r3, [r7, #7]
 800c540:	2b01      	cmp	r3, #1
 800c542:	bf8c      	ite	hi
 800c544:	2301      	movhi	r3, #1
 800c546:	2300      	movls	r3, #0
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	461a      	mov	r2, r3
 800c54c:	f107 0314 	add.w	r3, r7, #20
 800c550:	4611      	mov	r1, r2
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fac4 	bl	800aae0 <chk_lock>
 800c558:	4603      	mov	r3, r0
 800c55a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	f003 031c 	and.w	r3, r3, #28
 800c564:	2b00      	cmp	r3, #0
 800c566:	d07f      	beq.n	800c668 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c568:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d017      	beq.n	800c5a0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c570:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c574:	2b04      	cmp	r3, #4
 800c576:	d10e      	bne.n	800c596 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c578:	f7fe fb0e 	bl	800ab98 <enq_lock>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d006      	beq.n	800c590 <f_open+0xc4>
 800c582:	f107 0314 	add.w	r3, r7, #20
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fa73 	bl	800ba72 <dir_register>
 800c58c:	4603      	mov	r3, r0
 800c58e:	e000      	b.n	800c592 <f_open+0xc6>
 800c590:	2312      	movs	r3, #18
 800c592:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	f043 0308 	orr.w	r3, r3, #8
 800c59c:	71fb      	strb	r3, [r7, #7]
 800c59e:	e010      	b.n	800c5c2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c5a0:	7ebb      	ldrb	r3, [r7, #26]
 800c5a2:	f003 0311 	and.w	r3, r3, #17
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d003      	beq.n	800c5b2 <f_open+0xe6>
					res = FR_DENIED;
 800c5aa:	2307      	movs	r3, #7
 800c5ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c5b0:	e007      	b.n	800c5c2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c5b2:	79fb      	ldrb	r3, [r7, #7]
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <f_open+0xf6>
 800c5bc:	2308      	movs	r3, #8
 800c5be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c5c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d168      	bne.n	800c69c <f_open+0x1d0>
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	f003 0308 	and.w	r3, r3, #8
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d063      	beq.n	800c69c <f_open+0x1d0>
				dw = GET_FATTIME();
 800c5d4:	f7fa fef8 	bl	80073c8 <get_fattime>
 800c5d8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c5da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5dc:	330e      	adds	r3, #14
 800c5de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe f9d3 	bl	800a98c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e8:	3316      	adds	r3, #22
 800c5ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fe f9cd 	bl	800a98c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c5f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5f4:	330b      	adds	r3, #11
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5fe:	4611      	mov	r1, r2
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff f9a2 	bl	800b94a <ld_clust>
 800c606:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c60c:	2200      	movs	r2, #0
 800c60e:	4618      	mov	r0, r3
 800c610:	f7ff f9ba 	bl	800b988 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c616:	331c      	adds	r3, #28
 800c618:	2100      	movs	r1, #0
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe f9b6 	bl	800a98c <st_dword>
					fs->wflag = 1;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	2201      	movs	r2, #1
 800c624:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d037      	beq.n	800c69c <f_open+0x1d0>
						dw = fs->winsect;
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c630:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c632:	f107 0314 	add.w	r3, r7, #20
 800c636:	2200      	movs	r2, #0
 800c638:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fe feaa 	bl	800b394 <remove_chain>
 800c640:	4603      	mov	r3, r0
 800c642:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c646:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d126      	bne.n	800c69c <f_open+0x1d0>
							res = move_window(fs, dw);
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fbf4 	bl	800ae40 <move_window>
 800c658:	4603      	mov	r3, r0
 800c65a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c662:	3a01      	subs	r2, #1
 800c664:	611a      	str	r2, [r3, #16]
 800c666:	e019      	b.n	800c69c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c668:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d115      	bne.n	800c69c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c670:	7ebb      	ldrb	r3, [r7, #26]
 800c672:	f003 0310 	and.w	r3, r3, #16
 800c676:	2b00      	cmp	r3, #0
 800c678:	d003      	beq.n	800c682 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c67a:	2304      	movs	r3, #4
 800c67c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c680:	e00c      	b.n	800c69c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	f003 0302 	and.w	r3, r3, #2
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d007      	beq.n	800c69c <f_open+0x1d0>
 800c68c:	7ebb      	ldrb	r3, [r7, #26]
 800c68e:	f003 0301 	and.w	r3, r3, #1
 800c692:	2b00      	cmp	r3, #0
 800c694:	d002      	beq.n	800c69c <f_open+0x1d0>
						res = FR_DENIED;
 800c696:	2307      	movs	r3, #7
 800c698:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c69c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d126      	bne.n	800c6f2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c6a4:	79fb      	ldrb	r3, [r7, #7]
 800c6a6:	f003 0308 	and.w	r3, r3, #8
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c6ae:	79fb      	ldrb	r3, [r7, #7]
 800c6b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c6be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6c4:	79fb      	ldrb	r3, [r7, #7]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	bf8c      	ite	hi
 800c6ca:	2301      	movhi	r3, #1
 800c6cc:	2300      	movls	r3, #0
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	f107 0314 	add.w	r3, r7, #20
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fe fa7f 	bl	800abdc <inc_lock>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d102      	bne.n	800c6f2 <f_open+0x226>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f040 80a3 	bne.w	800c842 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c700:	4611      	mov	r1, r2
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff f921 	bl	800b94a <ld_clust>
 800c708:	4602      	mov	r2, r0
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c710:	331c      	adds	r3, #28
 800c712:	4618      	mov	r0, r3
 800c714:	f7fe f8fc 	bl	800a910 <ld_dword>
 800c718:	4602      	mov	r2, r0
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2200      	movs	r2, #0
 800c722:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	88da      	ldrh	r2, [r3, #6]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	79fa      	ldrb	r2, [r7, #7]
 800c736:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3330      	adds	r3, #48	@ 0x30
 800c74e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c752:	2100      	movs	r1, #0
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe f966 	bl	800aa26 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	f003 0320 	and.w	r3, r3, #32
 800c760:	2b00      	cmp	r3, #0
 800c762:	d06e      	beq.n	800c842 <f_open+0x376>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d06a      	beq.n	800c842 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68da      	ldr	r2, [r3, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	895b      	ldrh	r3, [r3, #10]
 800c778:	461a      	mov	r2, r3
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	899b      	ldrh	r3, [r3, #12]
 800c77e:	fb02 f303 	mul.w	r3, r2, r3
 800c782:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c790:	e016      	b.n	800c7c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c796:	4618      	mov	r0, r3
 800c798:	f7fe fc0f 	bl	800afba <get_fat>
 800c79c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c79e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d802      	bhi.n	800c7aa <f_open+0x2de>
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c7aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b0:	d102      	bne.n	800c7b8 <f_open+0x2ec>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c7b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c7ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d103      	bne.n	800c7d0 <f_open+0x304>
 800c7c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c7ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d8e0      	bhi.n	800c792 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c7d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c7d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d131      	bne.n	800c842 <f_open+0x376>
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	899b      	ldrh	r3, [r3, #12]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7ea:	fb01 f202 	mul.w	r2, r1, r2
 800c7ee:	1a9b      	subs	r3, r3, r2
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d026      	beq.n	800c842 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fe fbbf 	bl	800af7c <clust2sect>
 800c7fe:	6478      	str	r0, [r7, #68]	@ 0x44
 800c800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c802:	2b00      	cmp	r3, #0
 800c804:	d103      	bne.n	800c80e <f_open+0x342>
						res = FR_INT_ERR;
 800c806:	2302      	movs	r3, #2
 800c808:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c80c:	e019      	b.n	800c842 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	899b      	ldrh	r3, [r3, #12]
 800c812:	461a      	mov	r2, r3
 800c814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c816:	fbb3 f2f2 	udiv	r2, r3, r2
 800c81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c81c:	441a      	add	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	7858      	ldrb	r0, [r3, #1]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6a1a      	ldr	r2, [r3, #32]
 800c830:	2301      	movs	r3, #1
 800c832:	f7fd fff7 	bl	800a824 <disk_read>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <f_open+0x376>
 800c83c:	2301      	movs	r3, #1
 800c83e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c842:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c846:	2b00      	cmp	r3, #0
 800c848:	d002      	beq.n	800c850 <f_open+0x384>
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c850:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c854:	4618      	mov	r0, r3
 800c856:	3760      	adds	r7, #96	@ 0x60
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08e      	sub	sp, #56	@ 0x38
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	2200      	movs	r2, #0
 800c872:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f107 0214 	add.w	r2, r7, #20
 800c87a:	4611      	mov	r1, r2
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff fda9 	bl	800c3d4 <validate>
 800c882:	4603      	mov	r3, r0
 800c884:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c888:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d107      	bne.n	800c8a0 <f_read+0x44>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	7d5b      	ldrb	r3, [r3, #21]
 800c894:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c898:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <f_read+0x4a>
 800c8a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8a4:	e135      	b.n	800cb12 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	7d1b      	ldrb	r3, [r3, #20]
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <f_read+0x5a>
 800c8b2:	2307      	movs	r3, #7
 800c8b4:	e12d      	b.n	800cb12 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	68da      	ldr	r2, [r3, #12]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	f240 811e 	bls.w	800cb08 <f_read+0x2ac>
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c8d0:	e11a      	b.n	800cb08 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	8992      	ldrh	r2, [r2, #12]
 800c8da:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8de:	fb01 f202 	mul.w	r2, r1, r2
 800c8e2:	1a9b      	subs	r3, r3, r2
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f040 80d5 	bne.w	800ca94 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	8992      	ldrh	r2, [r2, #12]
 800c8f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	8952      	ldrh	r2, [r2, #10]
 800c8fa:	3a01      	subs	r2, #1
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d12f      	bne.n	800c966 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d103      	bne.n	800c916 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	633b      	str	r3, [r7, #48]	@ 0x30
 800c914:	e013      	b.n	800c93e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d007      	beq.n	800c92e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	4619      	mov	r1, r3
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7fe fe32 	bl	800b58e <clmt_clust>
 800c92a:	6338      	str	r0, [r7, #48]	@ 0x30
 800c92c:	e007      	b.n	800c93e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	69db      	ldr	r3, [r3, #28]
 800c934:	4619      	mov	r1, r3
 800c936:	4610      	mov	r0, r2
 800c938:	f7fe fb3f 	bl	800afba <get_fat>
 800c93c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	2b01      	cmp	r3, #1
 800c942:	d804      	bhi.n	800c94e <f_read+0xf2>
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2202      	movs	r2, #2
 800c948:	755a      	strb	r2, [r3, #21]
 800c94a:	2302      	movs	r3, #2
 800c94c:	e0e1      	b.n	800cb12 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c954:	d104      	bne.n	800c960 <f_read+0x104>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2201      	movs	r2, #1
 800c95a:	755a      	strb	r2, [r3, #21]
 800c95c:	2301      	movs	r3, #1
 800c95e:	e0d8      	b.n	800cb12 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c964:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	69db      	ldr	r3, [r3, #28]
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f7fe fb04 	bl	800af7c <clust2sect>
 800c974:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d104      	bne.n	800c986 <f_read+0x12a>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2202      	movs	r2, #2
 800c980:	755a      	strb	r2, [r3, #21]
 800c982:	2302      	movs	r3, #2
 800c984:	e0c5      	b.n	800cb12 <f_read+0x2b6>
			sect += csect;
 800c986:	69ba      	ldr	r2, [r7, #24]
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	4413      	add	r3, r2
 800c98c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	899b      	ldrh	r3, [r3, #12]
 800c992:	461a      	mov	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	fbb3 f3f2 	udiv	r3, r3, r2
 800c99a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d041      	beq.n	800ca26 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c9a2:	69fa      	ldr	r2, [r7, #28]
 800c9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a6:	4413      	add	r3, r2
 800c9a8:	697a      	ldr	r2, [r7, #20]
 800c9aa:	8952      	ldrh	r2, [r2, #10]
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d905      	bls.n	800c9bc <f_read+0x160>
					cc = fs->csize - csect;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	895b      	ldrh	r3, [r3, #10]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	7858      	ldrb	r0, [r3, #1]
 800c9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c2:	69ba      	ldr	r2, [r7, #24]
 800c9c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9c6:	f7fd ff2d 	bl	800a824 <disk_read>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d004      	beq.n	800c9da <f_read+0x17e>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	755a      	strb	r2, [r3, #21]
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e09b      	b.n	800cb12 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	7d1b      	ldrb	r3, [r3, #20]
 800c9de:	b25b      	sxtb	r3, r3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	da18      	bge.n	800ca16 <f_read+0x1ba>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6a1a      	ldr	r2, [r3, #32]
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d911      	bls.n	800ca16 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6a1a      	ldr	r2, [r3, #32]
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	8992      	ldrh	r2, [r2, #12]
 800c9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ca02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca04:	18d0      	adds	r0, r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	899b      	ldrh	r3, [r3, #12]
 800ca10:	461a      	mov	r2, r3
 800ca12:	f7fd ffe7 	bl	800a9e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	899b      	ldrh	r3, [r3, #12]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1e:	fb02 f303 	mul.w	r3, r2, r3
 800ca22:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ca24:	e05c      	b.n	800cae0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	69ba      	ldr	r2, [r7, #24]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d02e      	beq.n	800ca8e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	7d1b      	ldrb	r3, [r3, #20]
 800ca34:	b25b      	sxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	da18      	bge.n	800ca6c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	7858      	ldrb	r0, [r3, #1]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6a1a      	ldr	r2, [r3, #32]
 800ca48:	2301      	movs	r3, #1
 800ca4a:	f7fd ff0b 	bl	800a864 <disk_write>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d004      	beq.n	800ca5e <f_read+0x202>
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2201      	movs	r2, #1
 800ca58:	755a      	strb	r2, [r3, #21]
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e059      	b.n	800cb12 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	7d1b      	ldrb	r3, [r3, #20]
 800ca62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	7858      	ldrb	r0, [r3, #1]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca76:	2301      	movs	r3, #1
 800ca78:	69ba      	ldr	r2, [r7, #24]
 800ca7a:	f7fd fed3 	bl	800a824 <disk_read>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d004      	beq.n	800ca8e <f_read+0x232>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2201      	movs	r2, #1
 800ca88:	755a      	strb	r2, [r3, #21]
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e041      	b.n	800cb12 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	69ba      	ldr	r2, [r7, #24]
 800ca92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	899b      	ldrh	r3, [r3, #12]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	8992      	ldrh	r2, [r2, #12]
 800caa2:	fbb3 f1f2 	udiv	r1, r3, r2
 800caa6:	fb01 f202 	mul.w	r2, r1, r2
 800caaa:	1a9b      	subs	r3, r3, r2
 800caac:	1ac3      	subs	r3, r0, r3
 800caae:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d901      	bls.n	800cabc <f_read+0x260>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	8992      	ldrh	r2, [r2, #12]
 800caca:	fbb3 f0f2 	udiv	r0, r3, r2
 800cace:	fb00 f202 	mul.w	r2, r0, r2
 800cad2:	1a9b      	subs	r3, r3, r2
 800cad4:	440b      	add	r3, r1
 800cad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cad8:	4619      	mov	r1, r3
 800cada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cadc:	f7fd ff82 	bl	800a9e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae4:	4413      	add	r3, r2
 800cae6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	699a      	ldr	r2, [r3, #24]
 800caec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caee:	441a      	add	r2, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	619a      	str	r2, [r3, #24]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafa:	441a      	add	r2, r3
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f47f aee1 	bne.w	800c8d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3738      	adds	r7, #56	@ 0x38
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b08c      	sub	sp, #48	@ 0x30
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	60f8      	str	r0, [r7, #12]
 800cb22:	60b9      	str	r1, [r7, #8]
 800cb24:	607a      	str	r2, [r7, #4]
 800cb26:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f107 0210 	add.w	r2, r7, #16
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff fc4a 	bl	800c3d4 <validate>
 800cb40:	4603      	mov	r3, r0
 800cb42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d107      	bne.n	800cb5e <f_write+0x44>
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	7d5b      	ldrb	r3, [r3, #21]
 800cb52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cb56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <f_write+0x4a>
 800cb5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb62:	e16a      	b.n	800ce3a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	7d1b      	ldrb	r3, [r3, #20]
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <f_write+0x5a>
 800cb70:	2307      	movs	r3, #7
 800cb72:	e162      	b.n	800ce3a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	699a      	ldr	r2, [r3, #24]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	441a      	add	r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	f080 814c 	bcs.w	800ce1e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	699b      	ldr	r3, [r3, #24]
 800cb8a:	43db      	mvns	r3, r3
 800cb8c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cb8e:	e146      	b.n	800ce1e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	8992      	ldrh	r2, [r2, #12]
 800cb98:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb9c:	fb01 f202 	mul.w	r2, r1, r2
 800cba0:	1a9b      	subs	r3, r3, r2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f040 80f1 	bne.w	800cd8a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	8992      	ldrh	r2, [r2, #12]
 800cbb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	8952      	ldrh	r2, [r2, #10]
 800cbb8:	3a01      	subs	r2, #1
 800cbba:	4013      	ands	r3, r2
 800cbbc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d143      	bne.n	800cc4c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10c      	bne.n	800cbe6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d11a      	bne.n	800cc0e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2100      	movs	r1, #0
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fe fc3e 	bl	800b45e <create_chain>
 800cbe2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cbe4:	e013      	b.n	800cc0e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d007      	beq.n	800cbfe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f7fe fcca 	bl	800b58e <clmt_clust>
 800cbfa:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cbfc:	e007      	b.n	800cc0e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	69db      	ldr	r3, [r3, #28]
 800cc04:	4619      	mov	r1, r3
 800cc06:	4610      	mov	r0, r2
 800cc08:	f7fe fc29 	bl	800b45e <create_chain>
 800cc0c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f000 8109 	beq.w	800ce28 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d104      	bne.n	800cc26 <f_write+0x10c>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2202      	movs	r2, #2
 800cc20:	755a      	strb	r2, [r3, #21]
 800cc22:	2302      	movs	r3, #2
 800cc24:	e109      	b.n	800ce3a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2c:	d104      	bne.n	800cc38 <f_write+0x11e>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2201      	movs	r2, #1
 800cc32:	755a      	strb	r2, [r3, #21]
 800cc34:	2301      	movs	r3, #1
 800cc36:	e100      	b.n	800ce3a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc3c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d102      	bne.n	800cc4c <f_write+0x132>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc4a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	7d1b      	ldrb	r3, [r3, #20]
 800cc50:	b25b      	sxtb	r3, r3
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	da18      	bge.n	800cc88 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	7858      	ldrb	r0, [r3, #1]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6a1a      	ldr	r2, [r3, #32]
 800cc64:	2301      	movs	r3, #1
 800cc66:	f7fd fdfd 	bl	800a864 <disk_write>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d004      	beq.n	800cc7a <f_write+0x160>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2201      	movs	r2, #1
 800cc74:	755a      	strb	r2, [r3, #21]
 800cc76:	2301      	movs	r3, #1
 800cc78:	e0df      	b.n	800ce3a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	7d1b      	ldrb	r3, [r3, #20]
 800cc7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4610      	mov	r0, r2
 800cc92:	f7fe f973 	bl	800af7c <clust2sect>
 800cc96:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d104      	bne.n	800cca8 <f_write+0x18e>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2202      	movs	r2, #2
 800cca2:	755a      	strb	r2, [r3, #21]
 800cca4:	2302      	movs	r3, #2
 800cca6:	e0c8      	b.n	800ce3a <f_write+0x320>
			sect += csect;
 800cca8:	697a      	ldr	r2, [r7, #20]
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	4413      	add	r3, r2
 800ccae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	899b      	ldrh	r3, [r3, #12]
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccbc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ccbe:	6a3b      	ldr	r3, [r7, #32]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d043      	beq.n	800cd4c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	4413      	add	r3, r2
 800ccca:	693a      	ldr	r2, [r7, #16]
 800cccc:	8952      	ldrh	r2, [r2, #10]
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d905      	bls.n	800ccde <f_write+0x1c4>
					cc = fs->csize - csect;
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	895b      	ldrh	r3, [r3, #10]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	7858      	ldrb	r0, [r3, #1]
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	697a      	ldr	r2, [r7, #20]
 800cce6:	69f9      	ldr	r1, [r7, #28]
 800cce8:	f7fd fdbc 	bl	800a864 <disk_write>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d004      	beq.n	800ccfc <f_write+0x1e2>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	755a      	strb	r2, [r3, #21]
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e09e      	b.n	800ce3a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6a1a      	ldr	r2, [r3, #32]
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	6a3a      	ldr	r2, [r7, #32]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d918      	bls.n	800cd3c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6a1a      	ldr	r2, [r3, #32]
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	8992      	ldrh	r2, [r2, #12]
 800cd1c:	fb02 f303 	mul.w	r3, r2, r3
 800cd20:	69fa      	ldr	r2, [r7, #28]
 800cd22:	18d1      	adds	r1, r2, r3
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	899b      	ldrh	r3, [r3, #12]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	f7fd fe5b 	bl	800a9e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	7d1b      	ldrb	r3, [r3, #20]
 800cd32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	899b      	ldrh	r3, [r3, #12]
 800cd40:	461a      	mov	r2, r3
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	fb02 f303 	mul.w	r3, r2, r3
 800cd48:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cd4a:	e04b      	b.n	800cde4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6a1b      	ldr	r3, [r3, #32]
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d016      	beq.n	800cd84 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	699a      	ldr	r2, [r3, #24]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d210      	bcs.n	800cd84 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	7858      	ldrb	r0, [r3, #1]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	f7fd fd58 	bl	800a824 <disk_read>
 800cd74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d004      	beq.n	800cd84 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	755a      	strb	r2, [r3, #21]
 800cd80:	2301      	movs	r3, #1
 800cd82:	e05a      	b.n	800ce3a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	899b      	ldrh	r3, [r3, #12]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	699b      	ldr	r3, [r3, #24]
 800cd94:	693a      	ldr	r2, [r7, #16]
 800cd96:	8992      	ldrh	r2, [r2, #12]
 800cd98:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd9c:	fb01 f202 	mul.w	r2, r1, r2
 800cda0:	1a9b      	subs	r3, r3, r2
 800cda2:	1ac3      	subs	r3, r0, r3
 800cda4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cda6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d901      	bls.n	800cdb2 <f_write+0x298>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	8992      	ldrh	r2, [r2, #12]
 800cdc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdc4:	fb00 f202 	mul.w	r2, r0, r2
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	440b      	add	r3, r1
 800cdcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdce:	69f9      	ldr	r1, [r7, #28]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fd fe07 	bl	800a9e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	7d1b      	ldrb	r3, [r3, #20]
 800cdda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cde4:	69fa      	ldr	r2, [r7, #28]
 800cde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde8:	4413      	add	r3, r2
 800cdea:	61fb      	str	r3, [r7, #28]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	699a      	ldr	r2, [r3, #24]
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf2:	441a      	add	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	619a      	str	r2, [r3, #24]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	68da      	ldr	r2, [r3, #12]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	699b      	ldr	r3, [r3, #24]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	bf38      	it	cc
 800ce04:	461a      	movcc	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	60da      	str	r2, [r3, #12]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce10:	441a      	add	r2, r3
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	601a      	str	r2, [r3, #0]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f47f aeb5 	bne.w	800cb90 <f_write+0x76>
 800ce26:	e000      	b.n	800ce2a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	7d1b      	ldrb	r3, [r3, #20]
 800ce2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce32:	b2da      	uxtb	r2, r3
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3730      	adds	r7, #48	@ 0x30
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b086      	sub	sp, #24
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f107 0208 	add.w	r2, r7, #8
 800ce50:	4611      	mov	r1, r2
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7ff fabe 	bl	800c3d4 <validate>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce5c:	7dfb      	ldrb	r3, [r7, #23]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d168      	bne.n	800cf34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	7d1b      	ldrb	r3, [r3, #20]
 800ce66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d062      	beq.n	800cf34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	7d1b      	ldrb	r3, [r3, #20]
 800ce72:	b25b      	sxtb	r3, r3
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	da15      	bge.n	800cea4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	7858      	ldrb	r0, [r3, #1]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1a      	ldr	r2, [r3, #32]
 800ce86:	2301      	movs	r3, #1
 800ce88:	f7fd fcec 	bl	800a864 <disk_write>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <f_sync+0x54>
 800ce92:	2301      	movs	r3, #1
 800ce94:	e04f      	b.n	800cf36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	7d1b      	ldrb	r3, [r3, #20]
 800ce9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cea4:	f7fa fa90 	bl	80073c8 <get_fattime>
 800cea8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	f7fd ffc4 	bl	800ae40 <move_window>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cebc:	7dfb      	ldrb	r3, [r7, #23]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d138      	bne.n	800cf34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	330b      	adds	r3, #11
 800cecc:	781a      	ldrb	r2, [r3, #0]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	330b      	adds	r3, #11
 800ced2:	f042 0220 	orr.w	r2, r2, #32
 800ced6:	b2d2      	uxtb	r2, r2
 800ced8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6818      	ldr	r0, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	461a      	mov	r2, r3
 800cee4:	68f9      	ldr	r1, [r7, #12]
 800cee6:	f7fe fd4f 	bl	800b988 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f103 021c 	add.w	r2, r3, #28
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	4619      	mov	r1, r3
 800cef6:	4610      	mov	r0, r2
 800cef8:	f7fd fd48 	bl	800a98c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	3316      	adds	r3, #22
 800cf00:	6939      	ldr	r1, [r7, #16]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fd fd42 	bl	800a98c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3312      	adds	r3, #18
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fd fd21 	bl	800a956 <st_word>
					fs->wflag = 1;
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2201      	movs	r2, #1
 800cf18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fd ffbd 	bl	800ae9c <sync_fs>
 800cf22:	4603      	mov	r3, r0
 800cf24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	7d1b      	ldrb	r3, [r3, #20]
 800cf2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cf34:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b084      	sub	sp, #16
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff ff7b 	bl	800ce42 <f_sync>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d118      	bne.n	800cf88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f107 0208 	add.w	r2, r7, #8
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff fa38 	bl	800c3d4 <validate>
 800cf64:	4603      	mov	r3, r0
 800cf66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10c      	bne.n	800cf88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fd fec0 	bl	800acf8 <dec_lock>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d102      	bne.n	800cf88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cf88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
	...

0800cf94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cfaa:	4b1f      	ldr	r3, [pc, #124]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfac:	7a5b      	ldrb	r3, [r3, #9]
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d131      	bne.n	800d018 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cfb4:	4b1c      	ldr	r3, [pc, #112]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfb6:	7a5b      	ldrb	r3, [r3, #9]
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	461a      	mov	r2, r3
 800cfbc:	4b1a      	ldr	r3, [pc, #104]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cfc2:	4b19      	ldr	r3, [pc, #100]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfc4:	7a5b      	ldrb	r3, [r3, #9]
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	4a17      	ldr	r2, [pc, #92]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cfd2:	4b15      	ldr	r3, [pc, #84]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfd4:	7a5b      	ldrb	r3, [r3, #9]
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	461a      	mov	r2, r3
 800cfda:	4b13      	ldr	r3, [pc, #76]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfdc:	4413      	add	r3, r2
 800cfde:	79fa      	ldrb	r2, [r7, #7]
 800cfe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cfe2:	4b11      	ldr	r3, [pc, #68]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfe4:	7a5b      	ldrb	r3, [r3, #9]
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	b2d1      	uxtb	r1, r2
 800cfec:	4a0e      	ldr	r2, [pc, #56]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfee:	7251      	strb	r1, [r2, #9]
 800cff0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cff2:	7dbb      	ldrb	r3, [r7, #22]
 800cff4:	3330      	adds	r3, #48	@ 0x30
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	3301      	adds	r3, #1
 800d000:	223a      	movs	r2, #58	@ 0x3a
 800d002:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	3302      	adds	r3, #2
 800d008:	222f      	movs	r2, #47	@ 0x2f
 800d00a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	3303      	adds	r3, #3
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d018:	7dfb      	ldrb	r3, [r7, #23]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	371c      	adds	r7, #28
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	2000126c 	.word	0x2000126c

0800d02c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d036:	2200      	movs	r2, #0
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff ffaa 	bl	800cf94 <FATFS_LinkDriverEx>
 800d040:	4603      	mov	r3, r0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <MX_USB_HOST_App_state>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
uint8_t MX_USB_HOST_App_state(void)
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
  return Appli_state;
 800d050:	4b03      	ldr	r3, [pc, #12]	@ (800d060 <MX_USB_HOST_App_state+0x14>)
 800d052:	781b      	ldrb	r3, [r3, #0]
}
 800d054:	4618      	mov	r0, r3
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	20001650 	.word	0x20001650

0800d064 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d068:	2201      	movs	r2, #1
 800d06a:	490e      	ldr	r1, [pc, #56]	@ (800d0a4 <MX_USB_HOST_Init+0x40>)
 800d06c:	480e      	ldr	r0, [pc, #56]	@ (800d0a8 <MX_USB_HOST_Init+0x44>)
 800d06e:	f7fb feb4 	bl	8008dda <USBH_Init>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d078:	f7f3 fec2 	bl	8000e00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d07c:	490b      	ldr	r1, [pc, #44]	@ (800d0ac <MX_USB_HOST_Init+0x48>)
 800d07e:	480a      	ldr	r0, [pc, #40]	@ (800d0a8 <MX_USB_HOST_Init+0x44>)
 800d080:	f7fb ff58 	bl	8008f34 <USBH_RegisterClass>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d001      	beq.n	800d08e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d08a:	f7f3 feb9 	bl	8000e00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d08e:	4806      	ldr	r0, [pc, #24]	@ (800d0a8 <MX_USB_HOST_Init+0x44>)
 800d090:	f7fb ffdc 	bl	800904c <USBH_Start>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d09a:	f7f3 feb1 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d09e:	bf00      	nop
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	0800d0c5 	.word	0x0800d0c5
 800d0a8:	20001278 	.word	0x20001278
 800d0ac:	20000010 	.word	0x20000010

0800d0b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d0b4:	4802      	ldr	r0, [pc, #8]	@ (800d0c0 <MX_USB_HOST_Process+0x10>)
 800d0b6:	f7fb ffd9 	bl	800906c <USBH_Process>
}
 800d0ba:	bf00      	nop
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20001278 	.word	0x20001278

0800d0c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	2b04      	cmp	r3, #4
 800d0d6:	d829      	bhi.n	800d12c <USBH_UserProcess+0x68>
 800d0d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e0 <USBH_UserProcess+0x1c>)
 800d0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0de:	bf00      	nop
 800d0e0:	0800d0f5 	.word	0x0800d0f5
 800d0e4:	0800d111 	.word	0x0800d111
 800d0e8:	0800d12d 	.word	0x0800d12d
 800d0ec:	0800d11f 	.word	0x0800d11f
 800d0f0:	0800d0fd 	.word	0x0800d0fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
	  printf("\n USB Config");
 800d0f4:	4810      	ldr	r0, [pc, #64]	@ (800d138 <USBH_UserProcess+0x74>)
 800d0f6:	f000 fc57 	bl	800d9a8 <iprintf>
  break;
 800d0fa:	e018      	b.n	800d12e <USBH_UserProcess+0x6a>

  case HOST_USER_DISCONNECTION:
	  printf("\n USB Disconnected");
 800d0fc:	480f      	ldr	r0, [pc, #60]	@ (800d13c <USBH_UserProcess+0x78>)
 800d0fe:	f000 fc53 	bl	800d9a8 <iprintf>
	  usb_exp_disk = 1;
 800d102:	4b0f      	ldr	r3, [pc, #60]	@ (800d140 <USBH_UserProcess+0x7c>)
 800d104:	2201      	movs	r2, #1
 800d106:	701a      	strb	r2, [r3, #0]
	  Appli_state = APPLICATION_DISCONNECT;
 800d108:	4b0e      	ldr	r3, [pc, #56]	@ (800d144 <USBH_UserProcess+0x80>)
 800d10a:	2203      	movs	r2, #3
 800d10c:	701a      	strb	r2, [r3, #0]
  break;
 800d10e:	e00e      	b.n	800d12e <USBH_UserProcess+0x6a>

  case HOST_USER_CLASS_ACTIVE:
	  printf("\n USB READY");
 800d110:	480d      	ldr	r0, [pc, #52]	@ (800d148 <USBH_UserProcess+0x84>)
 800d112:	f000 fc49 	bl	800d9a8 <iprintf>
  Appli_state = APPLICATION_READY;
 800d116:	4b0b      	ldr	r3, [pc, #44]	@ (800d144 <USBH_UserProcess+0x80>)
 800d118:	2202      	movs	r2, #2
 800d11a:	701a      	strb	r2, [r3, #0]
  break;
 800d11c:	e007      	b.n	800d12e <USBH_UserProcess+0x6a>

  case HOST_USER_CONNECTION:
	  printf("\n USB Connected");
 800d11e:	480b      	ldr	r0, [pc, #44]	@ (800d14c <USBH_UserProcess+0x88>)
 800d120:	f000 fc42 	bl	800d9a8 <iprintf>
  Appli_state = APPLICATION_START;
 800d124:	4b07      	ldr	r3, [pc, #28]	@ (800d144 <USBH_UserProcess+0x80>)
 800d126:	2201      	movs	r2, #1
 800d128:	701a      	strb	r2, [r3, #0]
  break;
 800d12a:	e000      	b.n	800d12e <USBH_UserProcess+0x6a>

  default:
  break;
 800d12c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d12e:	bf00      	nop
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	0800e894 	.word	0x0800e894
 800d13c:	0800e8a4 	.word	0x0800e8a4
 800d140:	20000001 	.word	0x20000001
 800d144:	20001650 	.word	0x20001650
 800d148:	0800e8b8 	.word	0x0800e8b8
 800d14c:	0800e8c4 	.word	0x0800e8c4

0800d150 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08a      	sub	sp, #40	@ 0x28
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d158:	f107 0314 	add.w	r3, r7, #20
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	605a      	str	r2, [r3, #4]
 800d162:	609a      	str	r2, [r3, #8]
 800d164:	60da      	str	r2, [r3, #12]
 800d166:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d170:	d13a      	bne.n	800d1e8 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d172:	2300      	movs	r3, #0
 800d174:	613b      	str	r3, [r7, #16]
 800d176:	4b1e      	ldr	r3, [pc, #120]	@ (800d1f0 <HAL_HCD_MspInit+0xa0>)
 800d178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d17a:	4a1d      	ldr	r2, [pc, #116]	@ (800d1f0 <HAL_HCD_MspInit+0xa0>)
 800d17c:	f043 0301 	orr.w	r3, r3, #1
 800d180:	6313      	str	r3, [r2, #48]	@ 0x30
 800d182:	4b1b      	ldr	r3, [pc, #108]	@ (800d1f0 <HAL_HCD_MspInit+0xa0>)
 800d184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	613b      	str	r3, [r7, #16]
 800d18c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d18e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d194:	2302      	movs	r3, #2
 800d196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d198:	2300      	movs	r3, #0
 800d19a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d19c:	2303      	movs	r3, #3
 800d19e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d1a0:	230a      	movs	r3, #10
 800d1a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1a4:	f107 0314 	add.w	r3, r7, #20
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4812      	ldr	r0, [pc, #72]	@ (800d1f4 <HAL_HCD_MspInit+0xa4>)
 800d1ac:	f7f4 fa98 	bl	80016e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d1b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f0 <HAL_HCD_MspInit+0xa0>)
 800d1b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1b4:	4a0e      	ldr	r2, [pc, #56]	@ (800d1f0 <HAL_HCD_MspInit+0xa0>)
 800d1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1ba:	6353      	str	r3, [r2, #52]	@ 0x34
 800d1bc:	2300      	movs	r3, #0
 800d1be:	60fb      	str	r3, [r7, #12]
 800d1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f0 <HAL_HCD_MspInit+0xa0>)
 800d1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d1f0 <HAL_HCD_MspInit+0xa0>)
 800d1c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d1ca:	6453      	str	r3, [r2, #68]	@ 0x44
 800d1cc:	4b08      	ldr	r3, [pc, #32]	@ (800d1f0 <HAL_HCD_MspInit+0xa0>)
 800d1ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1d4:	60fb      	str	r3, [r7, #12]
 800d1d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2100      	movs	r1, #0
 800d1dc:	2043      	movs	r0, #67	@ 0x43
 800d1de:	f7f4 f9b6 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d1e2:	2043      	movs	r0, #67	@ 0x43
 800d1e4:	f7f4 f9cf 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d1e8:	bf00      	nop
 800d1ea:	3728      	adds	r7, #40	@ 0x28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	40023800 	.word	0x40023800
 800d1f4:	40020000 	.word	0x40020000

0800d1f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d206:	4618      	mov	r0, r3
 800d208:	f7fc fb07 	bl	800981a <USBH_LL_IncTimer>
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d222:	4618      	mov	r0, r3
 800d224:	f7fc fb3f 	bl	80098a6 <USBH_LL_Connect>
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fc fb48 	bl	80098d4 <USBH_LL_Disconnect>
}
 800d244:	bf00      	nop
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	460b      	mov	r3, r1
 800d256:	70fb      	strb	r3, [r7, #3]
 800d258:	4613      	mov	r3, r2
 800d25a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d276:	4618      	mov	r0, r3
 800d278:	f7fc faf9 	bl	800986e <USBH_LL_PortEnabled>
}
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d292:	4618      	mov	r0, r3
 800d294:	f7fc faf9 	bl	800988a <USBH_LL_PortDisabled>
}
 800d298:	bf00      	nop
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d12a      	bne.n	800d308 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d2b2:	4a18      	ldr	r2, [pc, #96]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4a15      	ldr	r2, [pc, #84]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2be:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2c2:	4b14      	ldr	r3, [pc, #80]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d2c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d2ca:	4b12      	ldr	r3, [pc, #72]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2cc:	2208      	movs	r2, #8
 800d2ce:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d2d0:	4b10      	ldr	r3, [pc, #64]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d2dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2de:	2202      	movs	r2, #2
 800d2e0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d2e8:	480a      	ldr	r0, [pc, #40]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2ea:	f7f4 fbe1 	bl	8001ab0 <HAL_HCD_Init>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d2f4:	f7f3 fd84 	bl	8000e00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d2f8:	4806      	ldr	r0, [pc, #24]	@ (800d314 <USBH_LL_Init+0x74>)
 800d2fa:	f7f5 f841 	bl	8002380 <HAL_HCD_GetCurrentFrame>
 800d2fe:	4603      	mov	r3, r0
 800d300:	4619      	mov	r1, r3
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7fc fa7a 	bl	80097fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	20001654 	.word	0x20001654

0800d318 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d32e:	4618      	mov	r0, r3
 800d330:	f7f4 ffae 	bl	8002290 <HAL_HCD_Start>
 800d334:	4603      	mov	r3, r0
 800d336:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 f988 	bl	800d650 <USBH_Get_USB_Status>
 800d340:	4603      	mov	r3, r0
 800d342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d344:	7bbb      	ldrb	r3, [r7, #14]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d364:	4618      	mov	r0, r3
 800d366:	f7f4 ffb6 	bl	80022d6 <HAL_HCD_Stop>
 800d36a:	4603      	mov	r3, r0
 800d36c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d36e:	7bfb      	ldrb	r3, [r7, #15]
 800d370:	4618      	mov	r0, r3
 800d372:	f000 f96d 	bl	800d650 <USBH_Get_USB_Status>
 800d376:	4603      	mov	r3, r0
 800d378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d37a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d38c:	2301      	movs	r3, #1
 800d38e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d396:	4618      	mov	r0, r3
 800d398:	f7f5 f800 	bl	800239c <HAL_HCD_GetCurrentSpeed>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d00c      	beq.n	800d3bc <USBH_LL_GetSpeed+0x38>
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d80d      	bhi.n	800d3c2 <USBH_LL_GetSpeed+0x3e>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d002      	beq.n	800d3b0 <USBH_LL_GetSpeed+0x2c>
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d003      	beq.n	800d3b6 <USBH_LL_GetSpeed+0x32>
 800d3ae:	e008      	b.n	800d3c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b4:	e008      	b.n	800d3c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ba:	e005      	b.n	800d3c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d3bc:	2302      	movs	r3, #2
 800d3be:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c0:	e002      	b.n	800d3c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c6:	bf00      	nop
  }
  return  speed;
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7f4 ff91 	bl	8002310 <HAL_HCD_ResetPort>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 f92b 	bl	800d650 <USBH_Get_USB_Status>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	460b      	mov	r3, r1
 800d412:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d41a:	78fa      	ldrb	r2, [r7, #3]
 800d41c:	4611      	mov	r1, r2
 800d41e:	4618      	mov	r0, r3
 800d420:	f7f4 ff99 	bl	8002356 <HAL_HCD_HC_GetXferCount>
 800d424:	4603      	mov	r3, r0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3708      	adds	r7, #8
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d42e:	b590      	push	{r4, r7, lr}
 800d430:	b089      	sub	sp, #36	@ 0x24
 800d432:	af04      	add	r7, sp, #16
 800d434:	6078      	str	r0, [r7, #4]
 800d436:	4608      	mov	r0, r1
 800d438:	4611      	mov	r1, r2
 800d43a:	461a      	mov	r2, r3
 800d43c:	4603      	mov	r3, r0
 800d43e:	70fb      	strb	r3, [r7, #3]
 800d440:	460b      	mov	r3, r1
 800d442:	70bb      	strb	r3, [r7, #2]
 800d444:	4613      	mov	r3, r2
 800d446:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d448:	2300      	movs	r3, #0
 800d44a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d456:	787c      	ldrb	r4, [r7, #1]
 800d458:	78ba      	ldrb	r2, [r7, #2]
 800d45a:	78f9      	ldrb	r1, [r7, #3]
 800d45c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d45e:	9302      	str	r3, [sp, #8]
 800d460:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d464:	9301      	str	r3, [sp, #4]
 800d466:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	4623      	mov	r3, r4
 800d46e:	f7f4 fb86 	bl	8001b7e <HAL_HCD_HC_Init>
 800d472:	4603      	mov	r3, r0
 800d474:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d476:	7bfb      	ldrb	r3, [r7, #15]
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 f8e9 	bl	800d650 <USBH_Get_USB_Status>
 800d47e:	4603      	mov	r3, r0
 800d480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d482:	7bbb      	ldrb	r3, [r7, #14]
}
 800d484:	4618      	mov	r0, r3
 800d486:	3714      	adds	r7, #20
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd90      	pop	{r4, r7, pc}

0800d48c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	460b      	mov	r3, r1
 800d496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d49c:	2300      	movs	r3, #0
 800d49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d4a6:	78fa      	ldrb	r2, [r7, #3]
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7f4 fc1f 	bl	8001cee <HAL_HCD_HC_Halt>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f000 f8ca 	bl	800d650 <USBH_Get_USB_Status>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d4ca:	b590      	push	{r4, r7, lr}
 800d4cc:	b089      	sub	sp, #36	@ 0x24
 800d4ce:	af04      	add	r7, sp, #16
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	4608      	mov	r0, r1
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	4603      	mov	r3, r0
 800d4da:	70fb      	strb	r3, [r7, #3]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	70bb      	strb	r3, [r7, #2]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d4f2:	787c      	ldrb	r4, [r7, #1]
 800d4f4:	78ba      	ldrb	r2, [r7, #2]
 800d4f6:	78f9      	ldrb	r1, [r7, #3]
 800d4f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d4fc:	9303      	str	r3, [sp, #12]
 800d4fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d500:	9302      	str	r3, [sp, #8]
 800d502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d504:	9301      	str	r3, [sp, #4]
 800d506:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	4623      	mov	r3, r4
 800d50e:	f7f4 fc11 	bl	8001d34 <HAL_HCD_HC_SubmitRequest>
 800d512:	4603      	mov	r3, r0
 800d514:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d516:	7bfb      	ldrb	r3, [r7, #15]
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 f899 	bl	800d650 <USBH_Get_USB_Status>
 800d51e:	4603      	mov	r3, r0
 800d520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d522:	7bbb      	ldrb	r3, [r7, #14]
}
 800d524:	4618      	mov	r0, r3
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd90      	pop	{r4, r7, pc}

0800d52c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	460b      	mov	r3, r1
 800d536:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d53e:	78fa      	ldrb	r2, [r7, #3]
 800d540:	4611      	mov	r1, r2
 800d542:	4618      	mov	r0, r3
 800d544:	f7f4 fef2 	bl	800232c <HAL_HCD_HC_GetURBState>
 800d548:	4603      	mov	r3, r0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	460b      	mov	r3, r1
 800d55c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d55e:	20c8      	movs	r0, #200	@ 0xc8
 800d560:	f7f3 fef6 	bl	8001350 <HAL_Delay>
  return USBH_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d56e:	b480      	push	{r7}
 800d570:	b085      	sub	sp, #20
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	460b      	mov	r3, r1
 800d578:	70fb      	strb	r3, [r7, #3]
 800d57a:	4613      	mov	r3, r2
 800d57c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d584:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d586:	78fa      	ldrb	r2, [r7, #3]
 800d588:	68f9      	ldr	r1, [r7, #12]
 800d58a:	4613      	mov	r3, r2
 800d58c:	011b      	lsls	r3, r3, #4
 800d58e:	1a9b      	subs	r3, r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	440b      	add	r3, r1
 800d594:	3317      	adds	r3, #23
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00a      	beq.n	800d5b2 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d59c:	78fa      	ldrb	r2, [r7, #3]
 800d59e:	68f9      	ldr	r1, [r7, #12]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	011b      	lsls	r3, r3, #4
 800d5a4:	1a9b      	subs	r3, r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	440b      	add	r3, r1
 800d5aa:	333c      	adds	r3, #60	@ 0x3c
 800d5ac:	78ba      	ldrb	r2, [r7, #2]
 800d5ae:	701a      	strb	r2, [r3, #0]
 800d5b0:	e009      	b.n	800d5c6 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d5b2:	78fa      	ldrb	r2, [r7, #3]
 800d5b4:	68f9      	ldr	r1, [r7, #12]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	011b      	lsls	r3, r3, #4
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	440b      	add	r3, r1
 800d5c0:	333d      	adds	r3, #61	@ 0x3d
 800d5c2:	78ba      	ldrb	r2, [r7, #2]
 800d5c4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3714      	adds	r7, #20
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d5ea:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d5ec:	78fa      	ldrb	r2, [r7, #3]
 800d5ee:	68b9      	ldr	r1, [r7, #8]
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	011b      	lsls	r3, r3, #4
 800d5f4:	1a9b      	subs	r3, r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	440b      	add	r3, r1
 800d5fa:	3317      	adds	r3, #23
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00a      	beq.n	800d618 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d602:	78fa      	ldrb	r2, [r7, #3]
 800d604:	68b9      	ldr	r1, [r7, #8]
 800d606:	4613      	mov	r3, r2
 800d608:	011b      	lsls	r3, r3, #4
 800d60a:	1a9b      	subs	r3, r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	440b      	add	r3, r1
 800d610:	333c      	adds	r3, #60	@ 0x3c
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	73fb      	strb	r3, [r7, #15]
 800d616:	e009      	b.n	800d62c <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d618:	78fa      	ldrb	r2, [r7, #3]
 800d61a:	68b9      	ldr	r1, [r7, #8]
 800d61c:	4613      	mov	r3, r2
 800d61e:	011b      	lsls	r3, r3, #4
 800d620:	1a9b      	subs	r3, r3, r2
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	440b      	add	r3, r1
 800d626:	333d      	adds	r3, #61	@ 0x3d
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3714      	adds	r7, #20
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b082      	sub	sp, #8
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7f3 fe84 	bl	8001350 <HAL_Delay>
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	4603      	mov	r3, r0
 800d658:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	2b03      	cmp	r3, #3
 800d662:	d817      	bhi.n	800d694 <USBH_Get_USB_Status+0x44>
 800d664:	a201      	add	r2, pc, #4	@ (adr r2, 800d66c <USBH_Get_USB_Status+0x1c>)
 800d666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66a:	bf00      	nop
 800d66c:	0800d67d 	.word	0x0800d67d
 800d670:	0800d683 	.word	0x0800d683
 800d674:	0800d689 	.word	0x0800d689
 800d678:	0800d68f 	.word	0x0800d68f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	73fb      	strb	r3, [r7, #15]
    break;
 800d680:	e00b      	b.n	800d69a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d682:	2302      	movs	r3, #2
 800d684:	73fb      	strb	r3, [r7, #15]
    break;
 800d686:	e008      	b.n	800d69a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d688:	2301      	movs	r3, #1
 800d68a:	73fb      	strb	r3, [r7, #15]
    break;
 800d68c:	e005      	b.n	800d69a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d68e:	2302      	movs	r3, #2
 800d690:	73fb      	strb	r3, [r7, #15]
    break;
 800d692:	e002      	b.n	800d69a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d694:	2302      	movs	r3, #2
 800d696:	73fb      	strb	r3, [r7, #15]
    break;
 800d698:	bf00      	nop
  }
  return usb_status;
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <malloc>:
 800d6a8:	4b02      	ldr	r3, [pc, #8]	@ (800d6b4 <malloc+0xc>)
 800d6aa:	4601      	mov	r1, r0
 800d6ac:	6818      	ldr	r0, [r3, #0]
 800d6ae:	f000 b82d 	b.w	800d70c <_malloc_r>
 800d6b2:	bf00      	nop
 800d6b4:	2000003c 	.word	0x2000003c

0800d6b8 <free>:
 800d6b8:	4b02      	ldr	r3, [pc, #8]	@ (800d6c4 <free+0xc>)
 800d6ba:	4601      	mov	r1, r0
 800d6bc:	6818      	ldr	r0, [r3, #0]
 800d6be:	f000 bb55 	b.w	800dd6c <_free_r>
 800d6c2:	bf00      	nop
 800d6c4:	2000003c 	.word	0x2000003c

0800d6c8 <sbrk_aligned>:
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	4e0f      	ldr	r6, [pc, #60]	@ (800d708 <sbrk_aligned+0x40>)
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	6831      	ldr	r1, [r6, #0]
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	b911      	cbnz	r1, 800d6da <sbrk_aligned+0x12>
 800d6d4:	f000 faec 	bl	800dcb0 <_sbrk_r>
 800d6d8:	6030      	str	r0, [r6, #0]
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f000 fae7 	bl	800dcb0 <_sbrk_r>
 800d6e2:	1c43      	adds	r3, r0, #1
 800d6e4:	d103      	bne.n	800d6ee <sbrk_aligned+0x26>
 800d6e6:	f04f 34ff 	mov.w	r4, #4294967295
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	bd70      	pop	{r4, r5, r6, pc}
 800d6ee:	1cc4      	adds	r4, r0, #3
 800d6f0:	f024 0403 	bic.w	r4, r4, #3
 800d6f4:	42a0      	cmp	r0, r4
 800d6f6:	d0f8      	beq.n	800d6ea <sbrk_aligned+0x22>
 800d6f8:	1a21      	subs	r1, r4, r0
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f000 fad8 	bl	800dcb0 <_sbrk_r>
 800d700:	3001      	adds	r0, #1
 800d702:	d1f2      	bne.n	800d6ea <sbrk_aligned+0x22>
 800d704:	e7ef      	b.n	800d6e6 <sbrk_aligned+0x1e>
 800d706:	bf00      	nop
 800d708:	20001a34 	.word	0x20001a34

0800d70c <_malloc_r>:
 800d70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d710:	1ccd      	adds	r5, r1, #3
 800d712:	f025 0503 	bic.w	r5, r5, #3
 800d716:	3508      	adds	r5, #8
 800d718:	2d0c      	cmp	r5, #12
 800d71a:	bf38      	it	cc
 800d71c:	250c      	movcc	r5, #12
 800d71e:	2d00      	cmp	r5, #0
 800d720:	4606      	mov	r6, r0
 800d722:	db01      	blt.n	800d728 <_malloc_r+0x1c>
 800d724:	42a9      	cmp	r1, r5
 800d726:	d904      	bls.n	800d732 <_malloc_r+0x26>
 800d728:	230c      	movs	r3, #12
 800d72a:	6033      	str	r3, [r6, #0]
 800d72c:	2000      	movs	r0, #0
 800d72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d732:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d808 <_malloc_r+0xfc>
 800d736:	f000 f869 	bl	800d80c <__malloc_lock>
 800d73a:	f8d8 3000 	ldr.w	r3, [r8]
 800d73e:	461c      	mov	r4, r3
 800d740:	bb44      	cbnz	r4, 800d794 <_malloc_r+0x88>
 800d742:	4629      	mov	r1, r5
 800d744:	4630      	mov	r0, r6
 800d746:	f7ff ffbf 	bl	800d6c8 <sbrk_aligned>
 800d74a:	1c43      	adds	r3, r0, #1
 800d74c:	4604      	mov	r4, r0
 800d74e:	d158      	bne.n	800d802 <_malloc_r+0xf6>
 800d750:	f8d8 4000 	ldr.w	r4, [r8]
 800d754:	4627      	mov	r7, r4
 800d756:	2f00      	cmp	r7, #0
 800d758:	d143      	bne.n	800d7e2 <_malloc_r+0xd6>
 800d75a:	2c00      	cmp	r4, #0
 800d75c:	d04b      	beq.n	800d7f6 <_malloc_r+0xea>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	4639      	mov	r1, r7
 800d762:	4630      	mov	r0, r6
 800d764:	eb04 0903 	add.w	r9, r4, r3
 800d768:	f000 faa2 	bl	800dcb0 <_sbrk_r>
 800d76c:	4581      	cmp	r9, r0
 800d76e:	d142      	bne.n	800d7f6 <_malloc_r+0xea>
 800d770:	6821      	ldr	r1, [r4, #0]
 800d772:	1a6d      	subs	r5, r5, r1
 800d774:	4629      	mov	r1, r5
 800d776:	4630      	mov	r0, r6
 800d778:	f7ff ffa6 	bl	800d6c8 <sbrk_aligned>
 800d77c:	3001      	adds	r0, #1
 800d77e:	d03a      	beq.n	800d7f6 <_malloc_r+0xea>
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	442b      	add	r3, r5
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	f8d8 3000 	ldr.w	r3, [r8]
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	bb62      	cbnz	r2, 800d7e8 <_malloc_r+0xdc>
 800d78e:	f8c8 7000 	str.w	r7, [r8]
 800d792:	e00f      	b.n	800d7b4 <_malloc_r+0xa8>
 800d794:	6822      	ldr	r2, [r4, #0]
 800d796:	1b52      	subs	r2, r2, r5
 800d798:	d420      	bmi.n	800d7dc <_malloc_r+0xd0>
 800d79a:	2a0b      	cmp	r2, #11
 800d79c:	d917      	bls.n	800d7ce <_malloc_r+0xc2>
 800d79e:	1961      	adds	r1, r4, r5
 800d7a0:	42a3      	cmp	r3, r4
 800d7a2:	6025      	str	r5, [r4, #0]
 800d7a4:	bf18      	it	ne
 800d7a6:	6059      	strne	r1, [r3, #4]
 800d7a8:	6863      	ldr	r3, [r4, #4]
 800d7aa:	bf08      	it	eq
 800d7ac:	f8c8 1000 	streq.w	r1, [r8]
 800d7b0:	5162      	str	r2, [r4, r5]
 800d7b2:	604b      	str	r3, [r1, #4]
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f000 f82f 	bl	800d818 <__malloc_unlock>
 800d7ba:	f104 000b 	add.w	r0, r4, #11
 800d7be:	1d23      	adds	r3, r4, #4
 800d7c0:	f020 0007 	bic.w	r0, r0, #7
 800d7c4:	1ac2      	subs	r2, r0, r3
 800d7c6:	bf1c      	itt	ne
 800d7c8:	1a1b      	subne	r3, r3, r0
 800d7ca:	50a3      	strne	r3, [r4, r2]
 800d7cc:	e7af      	b.n	800d72e <_malloc_r+0x22>
 800d7ce:	6862      	ldr	r2, [r4, #4]
 800d7d0:	42a3      	cmp	r3, r4
 800d7d2:	bf0c      	ite	eq
 800d7d4:	f8c8 2000 	streq.w	r2, [r8]
 800d7d8:	605a      	strne	r2, [r3, #4]
 800d7da:	e7eb      	b.n	800d7b4 <_malloc_r+0xa8>
 800d7dc:	4623      	mov	r3, r4
 800d7de:	6864      	ldr	r4, [r4, #4]
 800d7e0:	e7ae      	b.n	800d740 <_malloc_r+0x34>
 800d7e2:	463c      	mov	r4, r7
 800d7e4:	687f      	ldr	r7, [r7, #4]
 800d7e6:	e7b6      	b.n	800d756 <_malloc_r+0x4a>
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	42a3      	cmp	r3, r4
 800d7ee:	d1fb      	bne.n	800d7e8 <_malloc_r+0xdc>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	6053      	str	r3, [r2, #4]
 800d7f4:	e7de      	b.n	800d7b4 <_malloc_r+0xa8>
 800d7f6:	230c      	movs	r3, #12
 800d7f8:	6033      	str	r3, [r6, #0]
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f000 f80c 	bl	800d818 <__malloc_unlock>
 800d800:	e794      	b.n	800d72c <_malloc_r+0x20>
 800d802:	6005      	str	r5, [r0, #0]
 800d804:	e7d6      	b.n	800d7b4 <_malloc_r+0xa8>
 800d806:	bf00      	nop
 800d808:	20001a38 	.word	0x20001a38

0800d80c <__malloc_lock>:
 800d80c:	4801      	ldr	r0, [pc, #4]	@ (800d814 <__malloc_lock+0x8>)
 800d80e:	f000 ba9c 	b.w	800dd4a <__retarget_lock_acquire_recursive>
 800d812:	bf00      	nop
 800d814:	20001b7c 	.word	0x20001b7c

0800d818 <__malloc_unlock>:
 800d818:	4801      	ldr	r0, [pc, #4]	@ (800d820 <__malloc_unlock+0x8>)
 800d81a:	f000 ba97 	b.w	800dd4c <__retarget_lock_release_recursive>
 800d81e:	bf00      	nop
 800d820:	20001b7c 	.word	0x20001b7c

0800d824 <std>:
 800d824:	2300      	movs	r3, #0
 800d826:	b510      	push	{r4, lr}
 800d828:	4604      	mov	r4, r0
 800d82a:	e9c0 3300 	strd	r3, r3, [r0]
 800d82e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d832:	6083      	str	r3, [r0, #8]
 800d834:	8181      	strh	r1, [r0, #12]
 800d836:	6643      	str	r3, [r0, #100]	@ 0x64
 800d838:	81c2      	strh	r2, [r0, #14]
 800d83a:	6183      	str	r3, [r0, #24]
 800d83c:	4619      	mov	r1, r3
 800d83e:	2208      	movs	r2, #8
 800d840:	305c      	adds	r0, #92	@ 0x5c
 800d842:	f000 f9f9 	bl	800dc38 <memset>
 800d846:	4b0d      	ldr	r3, [pc, #52]	@ (800d87c <std+0x58>)
 800d848:	6263      	str	r3, [r4, #36]	@ 0x24
 800d84a:	4b0d      	ldr	r3, [pc, #52]	@ (800d880 <std+0x5c>)
 800d84c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d84e:	4b0d      	ldr	r3, [pc, #52]	@ (800d884 <std+0x60>)
 800d850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d852:	4b0d      	ldr	r3, [pc, #52]	@ (800d888 <std+0x64>)
 800d854:	6323      	str	r3, [r4, #48]	@ 0x30
 800d856:	4b0d      	ldr	r3, [pc, #52]	@ (800d88c <std+0x68>)
 800d858:	6224      	str	r4, [r4, #32]
 800d85a:	429c      	cmp	r4, r3
 800d85c:	d006      	beq.n	800d86c <std+0x48>
 800d85e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d862:	4294      	cmp	r4, r2
 800d864:	d002      	beq.n	800d86c <std+0x48>
 800d866:	33d0      	adds	r3, #208	@ 0xd0
 800d868:	429c      	cmp	r4, r3
 800d86a:	d105      	bne.n	800d878 <std+0x54>
 800d86c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d874:	f000 ba68 	b.w	800dd48 <__retarget_lock_init_recursive>
 800d878:	bd10      	pop	{r4, pc}
 800d87a:	bf00      	nop
 800d87c:	0800da89 	.word	0x0800da89
 800d880:	0800daab 	.word	0x0800daab
 800d884:	0800dae3 	.word	0x0800dae3
 800d888:	0800db07 	.word	0x0800db07
 800d88c:	20001a3c 	.word	0x20001a3c

0800d890 <stdio_exit_handler>:
 800d890:	4a02      	ldr	r2, [pc, #8]	@ (800d89c <stdio_exit_handler+0xc>)
 800d892:	4903      	ldr	r1, [pc, #12]	@ (800d8a0 <stdio_exit_handler+0x10>)
 800d894:	4803      	ldr	r0, [pc, #12]	@ (800d8a4 <stdio_exit_handler+0x14>)
 800d896:	f000 b869 	b.w	800d96c <_fwalk_sglue>
 800d89a:	bf00      	nop
 800d89c:	20000030 	.word	0x20000030
 800d8a0:	0800e4a9 	.word	0x0800e4a9
 800d8a4:	20000040 	.word	0x20000040

0800d8a8 <cleanup_stdio>:
 800d8a8:	6841      	ldr	r1, [r0, #4]
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d8dc <cleanup_stdio+0x34>)
 800d8ac:	4299      	cmp	r1, r3
 800d8ae:	b510      	push	{r4, lr}
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	d001      	beq.n	800d8b8 <cleanup_stdio+0x10>
 800d8b4:	f000 fdf8 	bl	800e4a8 <_fflush_r>
 800d8b8:	68a1      	ldr	r1, [r4, #8]
 800d8ba:	4b09      	ldr	r3, [pc, #36]	@ (800d8e0 <cleanup_stdio+0x38>)
 800d8bc:	4299      	cmp	r1, r3
 800d8be:	d002      	beq.n	800d8c6 <cleanup_stdio+0x1e>
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f000 fdf1 	bl	800e4a8 <_fflush_r>
 800d8c6:	68e1      	ldr	r1, [r4, #12]
 800d8c8:	4b06      	ldr	r3, [pc, #24]	@ (800d8e4 <cleanup_stdio+0x3c>)
 800d8ca:	4299      	cmp	r1, r3
 800d8cc:	d004      	beq.n	800d8d8 <cleanup_stdio+0x30>
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8d4:	f000 bde8 	b.w	800e4a8 <_fflush_r>
 800d8d8:	bd10      	pop	{r4, pc}
 800d8da:	bf00      	nop
 800d8dc:	20001a3c 	.word	0x20001a3c
 800d8e0:	20001aa4 	.word	0x20001aa4
 800d8e4:	20001b0c 	.word	0x20001b0c

0800d8e8 <global_stdio_init.part.0>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800d918 <global_stdio_init.part.0+0x30>)
 800d8ec:	4c0b      	ldr	r4, [pc, #44]	@ (800d91c <global_stdio_init.part.0+0x34>)
 800d8ee:	4a0c      	ldr	r2, [pc, #48]	@ (800d920 <global_stdio_init.part.0+0x38>)
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	2104      	movs	r1, #4
 800d8f8:	f7ff ff94 	bl	800d824 <std>
 800d8fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d900:	2201      	movs	r2, #1
 800d902:	2109      	movs	r1, #9
 800d904:	f7ff ff8e 	bl	800d824 <std>
 800d908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d90c:	2202      	movs	r2, #2
 800d90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d912:	2112      	movs	r1, #18
 800d914:	f7ff bf86 	b.w	800d824 <std>
 800d918:	20001b74 	.word	0x20001b74
 800d91c:	20001a3c 	.word	0x20001a3c
 800d920:	0800d891 	.word	0x0800d891

0800d924 <__sfp_lock_acquire>:
 800d924:	4801      	ldr	r0, [pc, #4]	@ (800d92c <__sfp_lock_acquire+0x8>)
 800d926:	f000 ba10 	b.w	800dd4a <__retarget_lock_acquire_recursive>
 800d92a:	bf00      	nop
 800d92c:	20001b7d 	.word	0x20001b7d

0800d930 <__sfp_lock_release>:
 800d930:	4801      	ldr	r0, [pc, #4]	@ (800d938 <__sfp_lock_release+0x8>)
 800d932:	f000 ba0b 	b.w	800dd4c <__retarget_lock_release_recursive>
 800d936:	bf00      	nop
 800d938:	20001b7d 	.word	0x20001b7d

0800d93c <__sinit>:
 800d93c:	b510      	push	{r4, lr}
 800d93e:	4604      	mov	r4, r0
 800d940:	f7ff fff0 	bl	800d924 <__sfp_lock_acquire>
 800d944:	6a23      	ldr	r3, [r4, #32]
 800d946:	b11b      	cbz	r3, 800d950 <__sinit+0x14>
 800d948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d94c:	f7ff bff0 	b.w	800d930 <__sfp_lock_release>
 800d950:	4b04      	ldr	r3, [pc, #16]	@ (800d964 <__sinit+0x28>)
 800d952:	6223      	str	r3, [r4, #32]
 800d954:	4b04      	ldr	r3, [pc, #16]	@ (800d968 <__sinit+0x2c>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1f5      	bne.n	800d948 <__sinit+0xc>
 800d95c:	f7ff ffc4 	bl	800d8e8 <global_stdio_init.part.0>
 800d960:	e7f2      	b.n	800d948 <__sinit+0xc>
 800d962:	bf00      	nop
 800d964:	0800d8a9 	.word	0x0800d8a9
 800d968:	20001b74 	.word	0x20001b74

0800d96c <_fwalk_sglue>:
 800d96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d970:	4607      	mov	r7, r0
 800d972:	4688      	mov	r8, r1
 800d974:	4614      	mov	r4, r2
 800d976:	2600      	movs	r6, #0
 800d978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d97c:	f1b9 0901 	subs.w	r9, r9, #1
 800d980:	d505      	bpl.n	800d98e <_fwalk_sglue+0x22>
 800d982:	6824      	ldr	r4, [r4, #0]
 800d984:	2c00      	cmp	r4, #0
 800d986:	d1f7      	bne.n	800d978 <_fwalk_sglue+0xc>
 800d988:	4630      	mov	r0, r6
 800d98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d98e:	89ab      	ldrh	r3, [r5, #12]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d907      	bls.n	800d9a4 <_fwalk_sglue+0x38>
 800d994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d998:	3301      	adds	r3, #1
 800d99a:	d003      	beq.n	800d9a4 <_fwalk_sglue+0x38>
 800d99c:	4629      	mov	r1, r5
 800d99e:	4638      	mov	r0, r7
 800d9a0:	47c0      	blx	r8
 800d9a2:	4306      	orrs	r6, r0
 800d9a4:	3568      	adds	r5, #104	@ 0x68
 800d9a6:	e7e9      	b.n	800d97c <_fwalk_sglue+0x10>

0800d9a8 <iprintf>:
 800d9a8:	b40f      	push	{r0, r1, r2, r3}
 800d9aa:	b507      	push	{r0, r1, r2, lr}
 800d9ac:	4906      	ldr	r1, [pc, #24]	@ (800d9c8 <iprintf+0x20>)
 800d9ae:	ab04      	add	r3, sp, #16
 800d9b0:	6808      	ldr	r0, [r1, #0]
 800d9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9b6:	6881      	ldr	r1, [r0, #8]
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	f000 fa4b 	bl	800de54 <_vfiprintf_r>
 800d9be:	b003      	add	sp, #12
 800d9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9c4:	b004      	add	sp, #16
 800d9c6:	4770      	bx	lr
 800d9c8:	2000003c 	.word	0x2000003c

0800d9cc <_puts_r>:
 800d9cc:	6a03      	ldr	r3, [r0, #32]
 800d9ce:	b570      	push	{r4, r5, r6, lr}
 800d9d0:	6884      	ldr	r4, [r0, #8]
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	460e      	mov	r6, r1
 800d9d6:	b90b      	cbnz	r3, 800d9dc <_puts_r+0x10>
 800d9d8:	f7ff ffb0 	bl	800d93c <__sinit>
 800d9dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9de:	07db      	lsls	r3, r3, #31
 800d9e0:	d405      	bmi.n	800d9ee <_puts_r+0x22>
 800d9e2:	89a3      	ldrh	r3, [r4, #12]
 800d9e4:	0598      	lsls	r0, r3, #22
 800d9e6:	d402      	bmi.n	800d9ee <_puts_r+0x22>
 800d9e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ea:	f000 f9ae 	bl	800dd4a <__retarget_lock_acquire_recursive>
 800d9ee:	89a3      	ldrh	r3, [r4, #12]
 800d9f0:	0719      	lsls	r1, r3, #28
 800d9f2:	d502      	bpl.n	800d9fa <_puts_r+0x2e>
 800d9f4:	6923      	ldr	r3, [r4, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d135      	bne.n	800da66 <_puts_r+0x9a>
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	f000 f8c5 	bl	800db8c <__swsetup_r>
 800da02:	b380      	cbz	r0, 800da66 <_puts_r+0x9a>
 800da04:	f04f 35ff 	mov.w	r5, #4294967295
 800da08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da0a:	07da      	lsls	r2, r3, #31
 800da0c:	d405      	bmi.n	800da1a <_puts_r+0x4e>
 800da0e:	89a3      	ldrh	r3, [r4, #12]
 800da10:	059b      	lsls	r3, r3, #22
 800da12:	d402      	bmi.n	800da1a <_puts_r+0x4e>
 800da14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da16:	f000 f999 	bl	800dd4c <__retarget_lock_release_recursive>
 800da1a:	4628      	mov	r0, r5
 800da1c:	bd70      	pop	{r4, r5, r6, pc}
 800da1e:	2b00      	cmp	r3, #0
 800da20:	da04      	bge.n	800da2c <_puts_r+0x60>
 800da22:	69a2      	ldr	r2, [r4, #24]
 800da24:	429a      	cmp	r2, r3
 800da26:	dc17      	bgt.n	800da58 <_puts_r+0x8c>
 800da28:	290a      	cmp	r1, #10
 800da2a:	d015      	beq.n	800da58 <_puts_r+0x8c>
 800da2c:	6823      	ldr	r3, [r4, #0]
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	6022      	str	r2, [r4, #0]
 800da32:	7019      	strb	r1, [r3, #0]
 800da34:	68a3      	ldr	r3, [r4, #8]
 800da36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da3a:	3b01      	subs	r3, #1
 800da3c:	60a3      	str	r3, [r4, #8]
 800da3e:	2900      	cmp	r1, #0
 800da40:	d1ed      	bne.n	800da1e <_puts_r+0x52>
 800da42:	2b00      	cmp	r3, #0
 800da44:	da11      	bge.n	800da6a <_puts_r+0x9e>
 800da46:	4622      	mov	r2, r4
 800da48:	210a      	movs	r1, #10
 800da4a:	4628      	mov	r0, r5
 800da4c:	f000 f85f 	bl	800db0e <__swbuf_r>
 800da50:	3001      	adds	r0, #1
 800da52:	d0d7      	beq.n	800da04 <_puts_r+0x38>
 800da54:	250a      	movs	r5, #10
 800da56:	e7d7      	b.n	800da08 <_puts_r+0x3c>
 800da58:	4622      	mov	r2, r4
 800da5a:	4628      	mov	r0, r5
 800da5c:	f000 f857 	bl	800db0e <__swbuf_r>
 800da60:	3001      	adds	r0, #1
 800da62:	d1e7      	bne.n	800da34 <_puts_r+0x68>
 800da64:	e7ce      	b.n	800da04 <_puts_r+0x38>
 800da66:	3e01      	subs	r6, #1
 800da68:	e7e4      	b.n	800da34 <_puts_r+0x68>
 800da6a:	6823      	ldr	r3, [r4, #0]
 800da6c:	1c5a      	adds	r2, r3, #1
 800da6e:	6022      	str	r2, [r4, #0]
 800da70:	220a      	movs	r2, #10
 800da72:	701a      	strb	r2, [r3, #0]
 800da74:	e7ee      	b.n	800da54 <_puts_r+0x88>
	...

0800da78 <puts>:
 800da78:	4b02      	ldr	r3, [pc, #8]	@ (800da84 <puts+0xc>)
 800da7a:	4601      	mov	r1, r0
 800da7c:	6818      	ldr	r0, [r3, #0]
 800da7e:	f7ff bfa5 	b.w	800d9cc <_puts_r>
 800da82:	bf00      	nop
 800da84:	2000003c 	.word	0x2000003c

0800da88 <__sread>:
 800da88:	b510      	push	{r4, lr}
 800da8a:	460c      	mov	r4, r1
 800da8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da90:	f000 f8fc 	bl	800dc8c <_read_r>
 800da94:	2800      	cmp	r0, #0
 800da96:	bfab      	itete	ge
 800da98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da9a:	89a3      	ldrhlt	r3, [r4, #12]
 800da9c:	181b      	addge	r3, r3, r0
 800da9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800daa2:	bfac      	ite	ge
 800daa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800daa6:	81a3      	strhlt	r3, [r4, #12]
 800daa8:	bd10      	pop	{r4, pc}

0800daaa <__swrite>:
 800daaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daae:	461f      	mov	r7, r3
 800dab0:	898b      	ldrh	r3, [r1, #12]
 800dab2:	05db      	lsls	r3, r3, #23
 800dab4:	4605      	mov	r5, r0
 800dab6:	460c      	mov	r4, r1
 800dab8:	4616      	mov	r6, r2
 800daba:	d505      	bpl.n	800dac8 <__swrite+0x1e>
 800dabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac0:	2302      	movs	r3, #2
 800dac2:	2200      	movs	r2, #0
 800dac4:	f000 f8d0 	bl	800dc68 <_lseek_r>
 800dac8:	89a3      	ldrh	r3, [r4, #12]
 800daca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dace:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dad2:	81a3      	strh	r3, [r4, #12]
 800dad4:	4632      	mov	r2, r6
 800dad6:	463b      	mov	r3, r7
 800dad8:	4628      	mov	r0, r5
 800dada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dade:	f000 b8f7 	b.w	800dcd0 <_write_r>

0800dae2 <__sseek>:
 800dae2:	b510      	push	{r4, lr}
 800dae4:	460c      	mov	r4, r1
 800dae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daea:	f000 f8bd 	bl	800dc68 <_lseek_r>
 800daee:	1c43      	adds	r3, r0, #1
 800daf0:	89a3      	ldrh	r3, [r4, #12]
 800daf2:	bf15      	itete	ne
 800daf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800daf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dafa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dafe:	81a3      	strheq	r3, [r4, #12]
 800db00:	bf18      	it	ne
 800db02:	81a3      	strhne	r3, [r4, #12]
 800db04:	bd10      	pop	{r4, pc}

0800db06 <__sclose>:
 800db06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0a:	f000 b89d 	b.w	800dc48 <_close_r>

0800db0e <__swbuf_r>:
 800db0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db10:	460e      	mov	r6, r1
 800db12:	4614      	mov	r4, r2
 800db14:	4605      	mov	r5, r0
 800db16:	b118      	cbz	r0, 800db20 <__swbuf_r+0x12>
 800db18:	6a03      	ldr	r3, [r0, #32]
 800db1a:	b90b      	cbnz	r3, 800db20 <__swbuf_r+0x12>
 800db1c:	f7ff ff0e 	bl	800d93c <__sinit>
 800db20:	69a3      	ldr	r3, [r4, #24]
 800db22:	60a3      	str	r3, [r4, #8]
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	071a      	lsls	r2, r3, #28
 800db28:	d501      	bpl.n	800db2e <__swbuf_r+0x20>
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	b943      	cbnz	r3, 800db40 <__swbuf_r+0x32>
 800db2e:	4621      	mov	r1, r4
 800db30:	4628      	mov	r0, r5
 800db32:	f000 f82b 	bl	800db8c <__swsetup_r>
 800db36:	b118      	cbz	r0, 800db40 <__swbuf_r+0x32>
 800db38:	f04f 37ff 	mov.w	r7, #4294967295
 800db3c:	4638      	mov	r0, r7
 800db3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db40:	6823      	ldr	r3, [r4, #0]
 800db42:	6922      	ldr	r2, [r4, #16]
 800db44:	1a98      	subs	r0, r3, r2
 800db46:	6963      	ldr	r3, [r4, #20]
 800db48:	b2f6      	uxtb	r6, r6
 800db4a:	4283      	cmp	r3, r0
 800db4c:	4637      	mov	r7, r6
 800db4e:	dc05      	bgt.n	800db5c <__swbuf_r+0x4e>
 800db50:	4621      	mov	r1, r4
 800db52:	4628      	mov	r0, r5
 800db54:	f000 fca8 	bl	800e4a8 <_fflush_r>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d1ed      	bne.n	800db38 <__swbuf_r+0x2a>
 800db5c:	68a3      	ldr	r3, [r4, #8]
 800db5e:	3b01      	subs	r3, #1
 800db60:	60a3      	str	r3, [r4, #8]
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	6022      	str	r2, [r4, #0]
 800db68:	701e      	strb	r6, [r3, #0]
 800db6a:	6962      	ldr	r2, [r4, #20]
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	429a      	cmp	r2, r3
 800db70:	d004      	beq.n	800db7c <__swbuf_r+0x6e>
 800db72:	89a3      	ldrh	r3, [r4, #12]
 800db74:	07db      	lsls	r3, r3, #31
 800db76:	d5e1      	bpl.n	800db3c <__swbuf_r+0x2e>
 800db78:	2e0a      	cmp	r6, #10
 800db7a:	d1df      	bne.n	800db3c <__swbuf_r+0x2e>
 800db7c:	4621      	mov	r1, r4
 800db7e:	4628      	mov	r0, r5
 800db80:	f000 fc92 	bl	800e4a8 <_fflush_r>
 800db84:	2800      	cmp	r0, #0
 800db86:	d0d9      	beq.n	800db3c <__swbuf_r+0x2e>
 800db88:	e7d6      	b.n	800db38 <__swbuf_r+0x2a>
	...

0800db8c <__swsetup_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4b29      	ldr	r3, [pc, #164]	@ (800dc34 <__swsetup_r+0xa8>)
 800db90:	4605      	mov	r5, r0
 800db92:	6818      	ldr	r0, [r3, #0]
 800db94:	460c      	mov	r4, r1
 800db96:	b118      	cbz	r0, 800dba0 <__swsetup_r+0x14>
 800db98:	6a03      	ldr	r3, [r0, #32]
 800db9a:	b90b      	cbnz	r3, 800dba0 <__swsetup_r+0x14>
 800db9c:	f7ff fece 	bl	800d93c <__sinit>
 800dba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dba4:	0719      	lsls	r1, r3, #28
 800dba6:	d422      	bmi.n	800dbee <__swsetup_r+0x62>
 800dba8:	06da      	lsls	r2, r3, #27
 800dbaa:	d407      	bmi.n	800dbbc <__swsetup_r+0x30>
 800dbac:	2209      	movs	r2, #9
 800dbae:	602a      	str	r2, [r5, #0]
 800dbb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbb4:	81a3      	strh	r3, [r4, #12]
 800dbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbba:	e033      	b.n	800dc24 <__swsetup_r+0x98>
 800dbbc:	0758      	lsls	r0, r3, #29
 800dbbe:	d512      	bpl.n	800dbe6 <__swsetup_r+0x5a>
 800dbc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbc2:	b141      	cbz	r1, 800dbd6 <__swsetup_r+0x4a>
 800dbc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	d002      	beq.n	800dbd2 <__swsetup_r+0x46>
 800dbcc:	4628      	mov	r0, r5
 800dbce:	f000 f8cd 	bl	800dd6c <_free_r>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbdc:	81a3      	strh	r3, [r4, #12]
 800dbde:	2300      	movs	r3, #0
 800dbe0:	6063      	str	r3, [r4, #4]
 800dbe2:	6923      	ldr	r3, [r4, #16]
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	89a3      	ldrh	r3, [r4, #12]
 800dbe8:	f043 0308 	orr.w	r3, r3, #8
 800dbec:	81a3      	strh	r3, [r4, #12]
 800dbee:	6923      	ldr	r3, [r4, #16]
 800dbf0:	b94b      	cbnz	r3, 800dc06 <__swsetup_r+0x7a>
 800dbf2:	89a3      	ldrh	r3, [r4, #12]
 800dbf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dbf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbfc:	d003      	beq.n	800dc06 <__swsetup_r+0x7a>
 800dbfe:	4621      	mov	r1, r4
 800dc00:	4628      	mov	r0, r5
 800dc02:	f000 fc9f 	bl	800e544 <__smakebuf_r>
 800dc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc0a:	f013 0201 	ands.w	r2, r3, #1
 800dc0e:	d00a      	beq.n	800dc26 <__swsetup_r+0x9a>
 800dc10:	2200      	movs	r2, #0
 800dc12:	60a2      	str	r2, [r4, #8]
 800dc14:	6962      	ldr	r2, [r4, #20]
 800dc16:	4252      	negs	r2, r2
 800dc18:	61a2      	str	r2, [r4, #24]
 800dc1a:	6922      	ldr	r2, [r4, #16]
 800dc1c:	b942      	cbnz	r2, 800dc30 <__swsetup_r+0xa4>
 800dc1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc22:	d1c5      	bne.n	800dbb0 <__swsetup_r+0x24>
 800dc24:	bd38      	pop	{r3, r4, r5, pc}
 800dc26:	0799      	lsls	r1, r3, #30
 800dc28:	bf58      	it	pl
 800dc2a:	6962      	ldrpl	r2, [r4, #20]
 800dc2c:	60a2      	str	r2, [r4, #8]
 800dc2e:	e7f4      	b.n	800dc1a <__swsetup_r+0x8e>
 800dc30:	2000      	movs	r0, #0
 800dc32:	e7f7      	b.n	800dc24 <__swsetup_r+0x98>
 800dc34:	2000003c 	.word	0x2000003c

0800dc38 <memset>:
 800dc38:	4402      	add	r2, r0
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d100      	bne.n	800dc42 <memset+0xa>
 800dc40:	4770      	bx	lr
 800dc42:	f803 1b01 	strb.w	r1, [r3], #1
 800dc46:	e7f9      	b.n	800dc3c <memset+0x4>

0800dc48 <_close_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4d06      	ldr	r5, [pc, #24]	@ (800dc64 <_close_r+0x1c>)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4604      	mov	r4, r0
 800dc50:	4608      	mov	r0, r1
 800dc52:	602b      	str	r3, [r5, #0]
 800dc54:	f7f3 fa64 	bl	8001120 <_close>
 800dc58:	1c43      	adds	r3, r0, #1
 800dc5a:	d102      	bne.n	800dc62 <_close_r+0x1a>
 800dc5c:	682b      	ldr	r3, [r5, #0]
 800dc5e:	b103      	cbz	r3, 800dc62 <_close_r+0x1a>
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	bd38      	pop	{r3, r4, r5, pc}
 800dc64:	20001b78 	.word	0x20001b78

0800dc68 <_lseek_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4d07      	ldr	r5, [pc, #28]	@ (800dc88 <_lseek_r+0x20>)
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	4608      	mov	r0, r1
 800dc70:	4611      	mov	r1, r2
 800dc72:	2200      	movs	r2, #0
 800dc74:	602a      	str	r2, [r5, #0]
 800dc76:	461a      	mov	r2, r3
 800dc78:	f7f3 fa79 	bl	800116e <_lseek>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_lseek_r+0x1e>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_lseek_r+0x1e>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	20001b78 	.word	0x20001b78

0800dc8c <_read_r>:
 800dc8c:	b538      	push	{r3, r4, r5, lr}
 800dc8e:	4d07      	ldr	r5, [pc, #28]	@ (800dcac <_read_r+0x20>)
 800dc90:	4604      	mov	r4, r0
 800dc92:	4608      	mov	r0, r1
 800dc94:	4611      	mov	r1, r2
 800dc96:	2200      	movs	r2, #0
 800dc98:	602a      	str	r2, [r5, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	f7f3 fa07 	bl	80010ae <_read>
 800dca0:	1c43      	adds	r3, r0, #1
 800dca2:	d102      	bne.n	800dcaa <_read_r+0x1e>
 800dca4:	682b      	ldr	r3, [r5, #0]
 800dca6:	b103      	cbz	r3, 800dcaa <_read_r+0x1e>
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}
 800dcac:	20001b78 	.word	0x20001b78

0800dcb0 <_sbrk_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4d06      	ldr	r5, [pc, #24]	@ (800dccc <_sbrk_r+0x1c>)
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	4608      	mov	r0, r1
 800dcba:	602b      	str	r3, [r5, #0]
 800dcbc:	f7f3 fa64 	bl	8001188 <_sbrk>
 800dcc0:	1c43      	adds	r3, r0, #1
 800dcc2:	d102      	bne.n	800dcca <_sbrk_r+0x1a>
 800dcc4:	682b      	ldr	r3, [r5, #0]
 800dcc6:	b103      	cbz	r3, 800dcca <_sbrk_r+0x1a>
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	20001b78 	.word	0x20001b78

0800dcd0 <_write_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4d07      	ldr	r5, [pc, #28]	@ (800dcf0 <_write_r+0x20>)
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	4608      	mov	r0, r1
 800dcd8:	4611      	mov	r1, r2
 800dcda:	2200      	movs	r2, #0
 800dcdc:	602a      	str	r2, [r5, #0]
 800dcde:	461a      	mov	r2, r3
 800dce0:	f7f3 fa02 	bl	80010e8 <_write>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d102      	bne.n	800dcee <_write_r+0x1e>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	b103      	cbz	r3, 800dcee <_write_r+0x1e>
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	20001b78 	.word	0x20001b78

0800dcf4 <__errno>:
 800dcf4:	4b01      	ldr	r3, [pc, #4]	@ (800dcfc <__errno+0x8>)
 800dcf6:	6818      	ldr	r0, [r3, #0]
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	2000003c 	.word	0x2000003c

0800dd00 <__libc_init_array>:
 800dd00:	b570      	push	{r4, r5, r6, lr}
 800dd02:	4d0d      	ldr	r5, [pc, #52]	@ (800dd38 <__libc_init_array+0x38>)
 800dd04:	4c0d      	ldr	r4, [pc, #52]	@ (800dd3c <__libc_init_array+0x3c>)
 800dd06:	1b64      	subs	r4, r4, r5
 800dd08:	10a4      	asrs	r4, r4, #2
 800dd0a:	2600      	movs	r6, #0
 800dd0c:	42a6      	cmp	r6, r4
 800dd0e:	d109      	bne.n	800dd24 <__libc_init_array+0x24>
 800dd10:	4d0b      	ldr	r5, [pc, #44]	@ (800dd40 <__libc_init_array+0x40>)
 800dd12:	4c0c      	ldr	r4, [pc, #48]	@ (800dd44 <__libc_init_array+0x44>)
 800dd14:	f000 fc74 	bl	800e600 <_init>
 800dd18:	1b64      	subs	r4, r4, r5
 800dd1a:	10a4      	asrs	r4, r4, #2
 800dd1c:	2600      	movs	r6, #0
 800dd1e:	42a6      	cmp	r6, r4
 800dd20:	d105      	bne.n	800dd2e <__libc_init_array+0x2e>
 800dd22:	bd70      	pop	{r4, r5, r6, pc}
 800dd24:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd28:	4798      	blx	r3
 800dd2a:	3601      	adds	r6, #1
 800dd2c:	e7ee      	b.n	800dd0c <__libc_init_array+0xc>
 800dd2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd32:	4798      	blx	r3
 800dd34:	3601      	adds	r6, #1
 800dd36:	e7f2      	b.n	800dd1e <__libc_init_array+0x1e>
 800dd38:	0800e9bc 	.word	0x0800e9bc
 800dd3c:	0800e9bc 	.word	0x0800e9bc
 800dd40:	0800e9bc 	.word	0x0800e9bc
 800dd44:	0800e9c0 	.word	0x0800e9c0

0800dd48 <__retarget_lock_init_recursive>:
 800dd48:	4770      	bx	lr

0800dd4a <__retarget_lock_acquire_recursive>:
 800dd4a:	4770      	bx	lr

0800dd4c <__retarget_lock_release_recursive>:
 800dd4c:	4770      	bx	lr

0800dd4e <memcpy>:
 800dd4e:	440a      	add	r2, r1
 800dd50:	4291      	cmp	r1, r2
 800dd52:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd56:	d100      	bne.n	800dd5a <memcpy+0xc>
 800dd58:	4770      	bx	lr
 800dd5a:	b510      	push	{r4, lr}
 800dd5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd64:	4291      	cmp	r1, r2
 800dd66:	d1f9      	bne.n	800dd5c <memcpy+0xe>
 800dd68:	bd10      	pop	{r4, pc}
	...

0800dd6c <_free_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4605      	mov	r5, r0
 800dd70:	2900      	cmp	r1, #0
 800dd72:	d041      	beq.n	800ddf8 <_free_r+0x8c>
 800dd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd78:	1f0c      	subs	r4, r1, #4
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	bfb8      	it	lt
 800dd7e:	18e4      	addlt	r4, r4, r3
 800dd80:	f7ff fd44 	bl	800d80c <__malloc_lock>
 800dd84:	4a1d      	ldr	r2, [pc, #116]	@ (800ddfc <_free_r+0x90>)
 800dd86:	6813      	ldr	r3, [r2, #0]
 800dd88:	b933      	cbnz	r3, 800dd98 <_free_r+0x2c>
 800dd8a:	6063      	str	r3, [r4, #4]
 800dd8c:	6014      	str	r4, [r2, #0]
 800dd8e:	4628      	mov	r0, r5
 800dd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd94:	f7ff bd40 	b.w	800d818 <__malloc_unlock>
 800dd98:	42a3      	cmp	r3, r4
 800dd9a:	d908      	bls.n	800ddae <_free_r+0x42>
 800dd9c:	6820      	ldr	r0, [r4, #0]
 800dd9e:	1821      	adds	r1, r4, r0
 800dda0:	428b      	cmp	r3, r1
 800dda2:	bf01      	itttt	eq
 800dda4:	6819      	ldreq	r1, [r3, #0]
 800dda6:	685b      	ldreq	r3, [r3, #4]
 800dda8:	1809      	addeq	r1, r1, r0
 800ddaa:	6021      	streq	r1, [r4, #0]
 800ddac:	e7ed      	b.n	800dd8a <_free_r+0x1e>
 800ddae:	461a      	mov	r2, r3
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	b10b      	cbz	r3, 800ddb8 <_free_r+0x4c>
 800ddb4:	42a3      	cmp	r3, r4
 800ddb6:	d9fa      	bls.n	800ddae <_free_r+0x42>
 800ddb8:	6811      	ldr	r1, [r2, #0]
 800ddba:	1850      	adds	r0, r2, r1
 800ddbc:	42a0      	cmp	r0, r4
 800ddbe:	d10b      	bne.n	800ddd8 <_free_r+0x6c>
 800ddc0:	6820      	ldr	r0, [r4, #0]
 800ddc2:	4401      	add	r1, r0
 800ddc4:	1850      	adds	r0, r2, r1
 800ddc6:	4283      	cmp	r3, r0
 800ddc8:	6011      	str	r1, [r2, #0]
 800ddca:	d1e0      	bne.n	800dd8e <_free_r+0x22>
 800ddcc:	6818      	ldr	r0, [r3, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	6053      	str	r3, [r2, #4]
 800ddd2:	4408      	add	r0, r1
 800ddd4:	6010      	str	r0, [r2, #0]
 800ddd6:	e7da      	b.n	800dd8e <_free_r+0x22>
 800ddd8:	d902      	bls.n	800dde0 <_free_r+0x74>
 800ddda:	230c      	movs	r3, #12
 800dddc:	602b      	str	r3, [r5, #0]
 800ddde:	e7d6      	b.n	800dd8e <_free_r+0x22>
 800dde0:	6820      	ldr	r0, [r4, #0]
 800dde2:	1821      	adds	r1, r4, r0
 800dde4:	428b      	cmp	r3, r1
 800dde6:	bf04      	itt	eq
 800dde8:	6819      	ldreq	r1, [r3, #0]
 800ddea:	685b      	ldreq	r3, [r3, #4]
 800ddec:	6063      	str	r3, [r4, #4]
 800ddee:	bf04      	itt	eq
 800ddf0:	1809      	addeq	r1, r1, r0
 800ddf2:	6021      	streq	r1, [r4, #0]
 800ddf4:	6054      	str	r4, [r2, #4]
 800ddf6:	e7ca      	b.n	800dd8e <_free_r+0x22>
 800ddf8:	bd38      	pop	{r3, r4, r5, pc}
 800ddfa:	bf00      	nop
 800ddfc:	20001a38 	.word	0x20001a38

0800de00 <__sfputc_r>:
 800de00:	6893      	ldr	r3, [r2, #8]
 800de02:	3b01      	subs	r3, #1
 800de04:	2b00      	cmp	r3, #0
 800de06:	b410      	push	{r4}
 800de08:	6093      	str	r3, [r2, #8]
 800de0a:	da08      	bge.n	800de1e <__sfputc_r+0x1e>
 800de0c:	6994      	ldr	r4, [r2, #24]
 800de0e:	42a3      	cmp	r3, r4
 800de10:	db01      	blt.n	800de16 <__sfputc_r+0x16>
 800de12:	290a      	cmp	r1, #10
 800de14:	d103      	bne.n	800de1e <__sfputc_r+0x1e>
 800de16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1a:	f7ff be78 	b.w	800db0e <__swbuf_r>
 800de1e:	6813      	ldr	r3, [r2, #0]
 800de20:	1c58      	adds	r0, r3, #1
 800de22:	6010      	str	r0, [r2, #0]
 800de24:	7019      	strb	r1, [r3, #0]
 800de26:	4608      	mov	r0, r1
 800de28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <__sfputs_r>:
 800de2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de30:	4606      	mov	r6, r0
 800de32:	460f      	mov	r7, r1
 800de34:	4614      	mov	r4, r2
 800de36:	18d5      	adds	r5, r2, r3
 800de38:	42ac      	cmp	r4, r5
 800de3a:	d101      	bne.n	800de40 <__sfputs_r+0x12>
 800de3c:	2000      	movs	r0, #0
 800de3e:	e007      	b.n	800de50 <__sfputs_r+0x22>
 800de40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de44:	463a      	mov	r2, r7
 800de46:	4630      	mov	r0, r6
 800de48:	f7ff ffda 	bl	800de00 <__sfputc_r>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d1f3      	bne.n	800de38 <__sfputs_r+0xa>
 800de50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de54 <_vfiprintf_r>:
 800de54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de58:	460d      	mov	r5, r1
 800de5a:	b09d      	sub	sp, #116	@ 0x74
 800de5c:	4614      	mov	r4, r2
 800de5e:	4698      	mov	r8, r3
 800de60:	4606      	mov	r6, r0
 800de62:	b118      	cbz	r0, 800de6c <_vfiprintf_r+0x18>
 800de64:	6a03      	ldr	r3, [r0, #32]
 800de66:	b90b      	cbnz	r3, 800de6c <_vfiprintf_r+0x18>
 800de68:	f7ff fd68 	bl	800d93c <__sinit>
 800de6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de6e:	07d9      	lsls	r1, r3, #31
 800de70:	d405      	bmi.n	800de7e <_vfiprintf_r+0x2a>
 800de72:	89ab      	ldrh	r3, [r5, #12]
 800de74:	059a      	lsls	r2, r3, #22
 800de76:	d402      	bmi.n	800de7e <_vfiprintf_r+0x2a>
 800de78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de7a:	f7ff ff66 	bl	800dd4a <__retarget_lock_acquire_recursive>
 800de7e:	89ab      	ldrh	r3, [r5, #12]
 800de80:	071b      	lsls	r3, r3, #28
 800de82:	d501      	bpl.n	800de88 <_vfiprintf_r+0x34>
 800de84:	692b      	ldr	r3, [r5, #16]
 800de86:	b99b      	cbnz	r3, 800deb0 <_vfiprintf_r+0x5c>
 800de88:	4629      	mov	r1, r5
 800de8a:	4630      	mov	r0, r6
 800de8c:	f7ff fe7e 	bl	800db8c <__swsetup_r>
 800de90:	b170      	cbz	r0, 800deb0 <_vfiprintf_r+0x5c>
 800de92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de94:	07dc      	lsls	r4, r3, #31
 800de96:	d504      	bpl.n	800dea2 <_vfiprintf_r+0x4e>
 800de98:	f04f 30ff 	mov.w	r0, #4294967295
 800de9c:	b01d      	add	sp, #116	@ 0x74
 800de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea2:	89ab      	ldrh	r3, [r5, #12]
 800dea4:	0598      	lsls	r0, r3, #22
 800dea6:	d4f7      	bmi.n	800de98 <_vfiprintf_r+0x44>
 800dea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deaa:	f7ff ff4f 	bl	800dd4c <__retarget_lock_release_recursive>
 800deae:	e7f3      	b.n	800de98 <_vfiprintf_r+0x44>
 800deb0:	2300      	movs	r3, #0
 800deb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb4:	2320      	movs	r3, #32
 800deb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800deba:	f8cd 800c 	str.w	r8, [sp, #12]
 800debe:	2330      	movs	r3, #48	@ 0x30
 800dec0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e070 <_vfiprintf_r+0x21c>
 800dec4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dec8:	f04f 0901 	mov.w	r9, #1
 800decc:	4623      	mov	r3, r4
 800dece:	469a      	mov	sl, r3
 800ded0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ded4:	b10a      	cbz	r2, 800deda <_vfiprintf_r+0x86>
 800ded6:	2a25      	cmp	r2, #37	@ 0x25
 800ded8:	d1f9      	bne.n	800dece <_vfiprintf_r+0x7a>
 800deda:	ebba 0b04 	subs.w	fp, sl, r4
 800dede:	d00b      	beq.n	800def8 <_vfiprintf_r+0xa4>
 800dee0:	465b      	mov	r3, fp
 800dee2:	4622      	mov	r2, r4
 800dee4:	4629      	mov	r1, r5
 800dee6:	4630      	mov	r0, r6
 800dee8:	f7ff ffa1 	bl	800de2e <__sfputs_r>
 800deec:	3001      	adds	r0, #1
 800deee:	f000 80a7 	beq.w	800e040 <_vfiprintf_r+0x1ec>
 800def2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800def4:	445a      	add	r2, fp
 800def6:	9209      	str	r2, [sp, #36]	@ 0x24
 800def8:	f89a 3000 	ldrb.w	r3, [sl]
 800defc:	2b00      	cmp	r3, #0
 800defe:	f000 809f 	beq.w	800e040 <_vfiprintf_r+0x1ec>
 800df02:	2300      	movs	r3, #0
 800df04:	f04f 32ff 	mov.w	r2, #4294967295
 800df08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df0c:	f10a 0a01 	add.w	sl, sl, #1
 800df10:	9304      	str	r3, [sp, #16]
 800df12:	9307      	str	r3, [sp, #28]
 800df14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df18:	931a      	str	r3, [sp, #104]	@ 0x68
 800df1a:	4654      	mov	r4, sl
 800df1c:	2205      	movs	r2, #5
 800df1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df22:	4853      	ldr	r0, [pc, #332]	@ (800e070 <_vfiprintf_r+0x21c>)
 800df24:	f7f2 f964 	bl	80001f0 <memchr>
 800df28:	9a04      	ldr	r2, [sp, #16]
 800df2a:	b9d8      	cbnz	r0, 800df64 <_vfiprintf_r+0x110>
 800df2c:	06d1      	lsls	r1, r2, #27
 800df2e:	bf44      	itt	mi
 800df30:	2320      	movmi	r3, #32
 800df32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df36:	0713      	lsls	r3, r2, #28
 800df38:	bf44      	itt	mi
 800df3a:	232b      	movmi	r3, #43	@ 0x2b
 800df3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df40:	f89a 3000 	ldrb.w	r3, [sl]
 800df44:	2b2a      	cmp	r3, #42	@ 0x2a
 800df46:	d015      	beq.n	800df74 <_vfiprintf_r+0x120>
 800df48:	9a07      	ldr	r2, [sp, #28]
 800df4a:	4654      	mov	r4, sl
 800df4c:	2000      	movs	r0, #0
 800df4e:	f04f 0c0a 	mov.w	ip, #10
 800df52:	4621      	mov	r1, r4
 800df54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df58:	3b30      	subs	r3, #48	@ 0x30
 800df5a:	2b09      	cmp	r3, #9
 800df5c:	d94b      	bls.n	800dff6 <_vfiprintf_r+0x1a2>
 800df5e:	b1b0      	cbz	r0, 800df8e <_vfiprintf_r+0x13a>
 800df60:	9207      	str	r2, [sp, #28]
 800df62:	e014      	b.n	800df8e <_vfiprintf_r+0x13a>
 800df64:	eba0 0308 	sub.w	r3, r0, r8
 800df68:	fa09 f303 	lsl.w	r3, r9, r3
 800df6c:	4313      	orrs	r3, r2
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	46a2      	mov	sl, r4
 800df72:	e7d2      	b.n	800df1a <_vfiprintf_r+0xc6>
 800df74:	9b03      	ldr	r3, [sp, #12]
 800df76:	1d19      	adds	r1, r3, #4
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	9103      	str	r1, [sp, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bfbb      	ittet	lt
 800df80:	425b      	neglt	r3, r3
 800df82:	f042 0202 	orrlt.w	r2, r2, #2
 800df86:	9307      	strge	r3, [sp, #28]
 800df88:	9307      	strlt	r3, [sp, #28]
 800df8a:	bfb8      	it	lt
 800df8c:	9204      	strlt	r2, [sp, #16]
 800df8e:	7823      	ldrb	r3, [r4, #0]
 800df90:	2b2e      	cmp	r3, #46	@ 0x2e
 800df92:	d10a      	bne.n	800dfaa <_vfiprintf_r+0x156>
 800df94:	7863      	ldrb	r3, [r4, #1]
 800df96:	2b2a      	cmp	r3, #42	@ 0x2a
 800df98:	d132      	bne.n	800e000 <_vfiprintf_r+0x1ac>
 800df9a:	9b03      	ldr	r3, [sp, #12]
 800df9c:	1d1a      	adds	r2, r3, #4
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	9203      	str	r2, [sp, #12]
 800dfa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfa6:	3402      	adds	r4, #2
 800dfa8:	9305      	str	r3, [sp, #20]
 800dfaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e080 <_vfiprintf_r+0x22c>
 800dfae:	7821      	ldrb	r1, [r4, #0]
 800dfb0:	2203      	movs	r2, #3
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	f7f2 f91c 	bl	80001f0 <memchr>
 800dfb8:	b138      	cbz	r0, 800dfca <_vfiprintf_r+0x176>
 800dfba:	9b04      	ldr	r3, [sp, #16]
 800dfbc:	eba0 000a 	sub.w	r0, r0, sl
 800dfc0:	2240      	movs	r2, #64	@ 0x40
 800dfc2:	4082      	lsls	r2, r0
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	3401      	adds	r4, #1
 800dfc8:	9304      	str	r3, [sp, #16]
 800dfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfce:	4829      	ldr	r0, [pc, #164]	@ (800e074 <_vfiprintf_r+0x220>)
 800dfd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfd4:	2206      	movs	r2, #6
 800dfd6:	f7f2 f90b 	bl	80001f0 <memchr>
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d03f      	beq.n	800e05e <_vfiprintf_r+0x20a>
 800dfde:	4b26      	ldr	r3, [pc, #152]	@ (800e078 <_vfiprintf_r+0x224>)
 800dfe0:	bb1b      	cbnz	r3, 800e02a <_vfiprintf_r+0x1d6>
 800dfe2:	9b03      	ldr	r3, [sp, #12]
 800dfe4:	3307      	adds	r3, #7
 800dfe6:	f023 0307 	bic.w	r3, r3, #7
 800dfea:	3308      	adds	r3, #8
 800dfec:	9303      	str	r3, [sp, #12]
 800dfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff0:	443b      	add	r3, r7
 800dff2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff4:	e76a      	b.n	800decc <_vfiprintf_r+0x78>
 800dff6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dffa:	460c      	mov	r4, r1
 800dffc:	2001      	movs	r0, #1
 800dffe:	e7a8      	b.n	800df52 <_vfiprintf_r+0xfe>
 800e000:	2300      	movs	r3, #0
 800e002:	3401      	adds	r4, #1
 800e004:	9305      	str	r3, [sp, #20]
 800e006:	4619      	mov	r1, r3
 800e008:	f04f 0c0a 	mov.w	ip, #10
 800e00c:	4620      	mov	r0, r4
 800e00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e012:	3a30      	subs	r2, #48	@ 0x30
 800e014:	2a09      	cmp	r2, #9
 800e016:	d903      	bls.n	800e020 <_vfiprintf_r+0x1cc>
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d0c6      	beq.n	800dfaa <_vfiprintf_r+0x156>
 800e01c:	9105      	str	r1, [sp, #20]
 800e01e:	e7c4      	b.n	800dfaa <_vfiprintf_r+0x156>
 800e020:	fb0c 2101 	mla	r1, ip, r1, r2
 800e024:	4604      	mov	r4, r0
 800e026:	2301      	movs	r3, #1
 800e028:	e7f0      	b.n	800e00c <_vfiprintf_r+0x1b8>
 800e02a:	ab03      	add	r3, sp, #12
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	462a      	mov	r2, r5
 800e030:	4b12      	ldr	r3, [pc, #72]	@ (800e07c <_vfiprintf_r+0x228>)
 800e032:	a904      	add	r1, sp, #16
 800e034:	4630      	mov	r0, r6
 800e036:	f3af 8000 	nop.w
 800e03a:	4607      	mov	r7, r0
 800e03c:	1c78      	adds	r0, r7, #1
 800e03e:	d1d6      	bne.n	800dfee <_vfiprintf_r+0x19a>
 800e040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e042:	07d9      	lsls	r1, r3, #31
 800e044:	d405      	bmi.n	800e052 <_vfiprintf_r+0x1fe>
 800e046:	89ab      	ldrh	r3, [r5, #12]
 800e048:	059a      	lsls	r2, r3, #22
 800e04a:	d402      	bmi.n	800e052 <_vfiprintf_r+0x1fe>
 800e04c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e04e:	f7ff fe7d 	bl	800dd4c <__retarget_lock_release_recursive>
 800e052:	89ab      	ldrh	r3, [r5, #12]
 800e054:	065b      	lsls	r3, r3, #25
 800e056:	f53f af1f 	bmi.w	800de98 <_vfiprintf_r+0x44>
 800e05a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e05c:	e71e      	b.n	800de9c <_vfiprintf_r+0x48>
 800e05e:	ab03      	add	r3, sp, #12
 800e060:	9300      	str	r3, [sp, #0]
 800e062:	462a      	mov	r2, r5
 800e064:	4b05      	ldr	r3, [pc, #20]	@ (800e07c <_vfiprintf_r+0x228>)
 800e066:	a904      	add	r1, sp, #16
 800e068:	4630      	mov	r0, r6
 800e06a:	f000 f879 	bl	800e160 <_printf_i>
 800e06e:	e7e4      	b.n	800e03a <_vfiprintf_r+0x1e6>
 800e070:	0800e980 	.word	0x0800e980
 800e074:	0800e98a 	.word	0x0800e98a
 800e078:	00000000 	.word	0x00000000
 800e07c:	0800de2f 	.word	0x0800de2f
 800e080:	0800e986 	.word	0x0800e986

0800e084 <_printf_common>:
 800e084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e088:	4616      	mov	r6, r2
 800e08a:	4698      	mov	r8, r3
 800e08c:	688a      	ldr	r2, [r1, #8]
 800e08e:	690b      	ldr	r3, [r1, #16]
 800e090:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e094:	4293      	cmp	r3, r2
 800e096:	bfb8      	it	lt
 800e098:	4613      	movlt	r3, r2
 800e09a:	6033      	str	r3, [r6, #0]
 800e09c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e0a0:	4607      	mov	r7, r0
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	b10a      	cbz	r2, 800e0aa <_printf_common+0x26>
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	6033      	str	r3, [r6, #0]
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	0699      	lsls	r1, r3, #26
 800e0ae:	bf42      	ittt	mi
 800e0b0:	6833      	ldrmi	r3, [r6, #0]
 800e0b2:	3302      	addmi	r3, #2
 800e0b4:	6033      	strmi	r3, [r6, #0]
 800e0b6:	6825      	ldr	r5, [r4, #0]
 800e0b8:	f015 0506 	ands.w	r5, r5, #6
 800e0bc:	d106      	bne.n	800e0cc <_printf_common+0x48>
 800e0be:	f104 0a19 	add.w	sl, r4, #25
 800e0c2:	68e3      	ldr	r3, [r4, #12]
 800e0c4:	6832      	ldr	r2, [r6, #0]
 800e0c6:	1a9b      	subs	r3, r3, r2
 800e0c8:	42ab      	cmp	r3, r5
 800e0ca:	dc26      	bgt.n	800e11a <_printf_common+0x96>
 800e0cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e0d0:	6822      	ldr	r2, [r4, #0]
 800e0d2:	3b00      	subs	r3, #0
 800e0d4:	bf18      	it	ne
 800e0d6:	2301      	movne	r3, #1
 800e0d8:	0692      	lsls	r2, r2, #26
 800e0da:	d42b      	bmi.n	800e134 <_printf_common+0xb0>
 800e0dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e0e0:	4641      	mov	r1, r8
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	47c8      	blx	r9
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	d01e      	beq.n	800e128 <_printf_common+0xa4>
 800e0ea:	6823      	ldr	r3, [r4, #0]
 800e0ec:	6922      	ldr	r2, [r4, #16]
 800e0ee:	f003 0306 	and.w	r3, r3, #6
 800e0f2:	2b04      	cmp	r3, #4
 800e0f4:	bf02      	ittt	eq
 800e0f6:	68e5      	ldreq	r5, [r4, #12]
 800e0f8:	6833      	ldreq	r3, [r6, #0]
 800e0fa:	1aed      	subeq	r5, r5, r3
 800e0fc:	68a3      	ldr	r3, [r4, #8]
 800e0fe:	bf0c      	ite	eq
 800e100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e104:	2500      	movne	r5, #0
 800e106:	4293      	cmp	r3, r2
 800e108:	bfc4      	itt	gt
 800e10a:	1a9b      	subgt	r3, r3, r2
 800e10c:	18ed      	addgt	r5, r5, r3
 800e10e:	2600      	movs	r6, #0
 800e110:	341a      	adds	r4, #26
 800e112:	42b5      	cmp	r5, r6
 800e114:	d11a      	bne.n	800e14c <_printf_common+0xc8>
 800e116:	2000      	movs	r0, #0
 800e118:	e008      	b.n	800e12c <_printf_common+0xa8>
 800e11a:	2301      	movs	r3, #1
 800e11c:	4652      	mov	r2, sl
 800e11e:	4641      	mov	r1, r8
 800e120:	4638      	mov	r0, r7
 800e122:	47c8      	blx	r9
 800e124:	3001      	adds	r0, #1
 800e126:	d103      	bne.n	800e130 <_printf_common+0xac>
 800e128:	f04f 30ff 	mov.w	r0, #4294967295
 800e12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e130:	3501      	adds	r5, #1
 800e132:	e7c6      	b.n	800e0c2 <_printf_common+0x3e>
 800e134:	18e1      	adds	r1, r4, r3
 800e136:	1c5a      	adds	r2, r3, #1
 800e138:	2030      	movs	r0, #48	@ 0x30
 800e13a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e13e:	4422      	add	r2, r4
 800e140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e144:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e148:	3302      	adds	r3, #2
 800e14a:	e7c7      	b.n	800e0dc <_printf_common+0x58>
 800e14c:	2301      	movs	r3, #1
 800e14e:	4622      	mov	r2, r4
 800e150:	4641      	mov	r1, r8
 800e152:	4638      	mov	r0, r7
 800e154:	47c8      	blx	r9
 800e156:	3001      	adds	r0, #1
 800e158:	d0e6      	beq.n	800e128 <_printf_common+0xa4>
 800e15a:	3601      	adds	r6, #1
 800e15c:	e7d9      	b.n	800e112 <_printf_common+0x8e>
	...

0800e160 <_printf_i>:
 800e160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e164:	7e0f      	ldrb	r7, [r1, #24]
 800e166:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e168:	2f78      	cmp	r7, #120	@ 0x78
 800e16a:	4691      	mov	r9, r2
 800e16c:	4680      	mov	r8, r0
 800e16e:	460c      	mov	r4, r1
 800e170:	469a      	mov	sl, r3
 800e172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e176:	d807      	bhi.n	800e188 <_printf_i+0x28>
 800e178:	2f62      	cmp	r7, #98	@ 0x62
 800e17a:	d80a      	bhi.n	800e192 <_printf_i+0x32>
 800e17c:	2f00      	cmp	r7, #0
 800e17e:	f000 80d2 	beq.w	800e326 <_printf_i+0x1c6>
 800e182:	2f58      	cmp	r7, #88	@ 0x58
 800e184:	f000 80b9 	beq.w	800e2fa <_printf_i+0x19a>
 800e188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e18c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e190:	e03a      	b.n	800e208 <_printf_i+0xa8>
 800e192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e196:	2b15      	cmp	r3, #21
 800e198:	d8f6      	bhi.n	800e188 <_printf_i+0x28>
 800e19a:	a101      	add	r1, pc, #4	@ (adr r1, 800e1a0 <_printf_i+0x40>)
 800e19c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e1a0:	0800e1f9 	.word	0x0800e1f9
 800e1a4:	0800e20d 	.word	0x0800e20d
 800e1a8:	0800e189 	.word	0x0800e189
 800e1ac:	0800e189 	.word	0x0800e189
 800e1b0:	0800e189 	.word	0x0800e189
 800e1b4:	0800e189 	.word	0x0800e189
 800e1b8:	0800e20d 	.word	0x0800e20d
 800e1bc:	0800e189 	.word	0x0800e189
 800e1c0:	0800e189 	.word	0x0800e189
 800e1c4:	0800e189 	.word	0x0800e189
 800e1c8:	0800e189 	.word	0x0800e189
 800e1cc:	0800e30d 	.word	0x0800e30d
 800e1d0:	0800e237 	.word	0x0800e237
 800e1d4:	0800e2c7 	.word	0x0800e2c7
 800e1d8:	0800e189 	.word	0x0800e189
 800e1dc:	0800e189 	.word	0x0800e189
 800e1e0:	0800e32f 	.word	0x0800e32f
 800e1e4:	0800e189 	.word	0x0800e189
 800e1e8:	0800e237 	.word	0x0800e237
 800e1ec:	0800e189 	.word	0x0800e189
 800e1f0:	0800e189 	.word	0x0800e189
 800e1f4:	0800e2cf 	.word	0x0800e2cf
 800e1f8:	6833      	ldr	r3, [r6, #0]
 800e1fa:	1d1a      	adds	r2, r3, #4
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	6032      	str	r2, [r6, #0]
 800e200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e208:	2301      	movs	r3, #1
 800e20a:	e09d      	b.n	800e348 <_printf_i+0x1e8>
 800e20c:	6833      	ldr	r3, [r6, #0]
 800e20e:	6820      	ldr	r0, [r4, #0]
 800e210:	1d19      	adds	r1, r3, #4
 800e212:	6031      	str	r1, [r6, #0]
 800e214:	0606      	lsls	r6, r0, #24
 800e216:	d501      	bpl.n	800e21c <_printf_i+0xbc>
 800e218:	681d      	ldr	r5, [r3, #0]
 800e21a:	e003      	b.n	800e224 <_printf_i+0xc4>
 800e21c:	0645      	lsls	r5, r0, #25
 800e21e:	d5fb      	bpl.n	800e218 <_printf_i+0xb8>
 800e220:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e224:	2d00      	cmp	r5, #0
 800e226:	da03      	bge.n	800e230 <_printf_i+0xd0>
 800e228:	232d      	movs	r3, #45	@ 0x2d
 800e22a:	426d      	negs	r5, r5
 800e22c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e230:	4859      	ldr	r0, [pc, #356]	@ (800e398 <_printf_i+0x238>)
 800e232:	230a      	movs	r3, #10
 800e234:	e011      	b.n	800e25a <_printf_i+0xfa>
 800e236:	6821      	ldr	r1, [r4, #0]
 800e238:	6833      	ldr	r3, [r6, #0]
 800e23a:	0608      	lsls	r0, r1, #24
 800e23c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e240:	d402      	bmi.n	800e248 <_printf_i+0xe8>
 800e242:	0649      	lsls	r1, r1, #25
 800e244:	bf48      	it	mi
 800e246:	b2ad      	uxthmi	r5, r5
 800e248:	2f6f      	cmp	r7, #111	@ 0x6f
 800e24a:	4853      	ldr	r0, [pc, #332]	@ (800e398 <_printf_i+0x238>)
 800e24c:	6033      	str	r3, [r6, #0]
 800e24e:	bf14      	ite	ne
 800e250:	230a      	movne	r3, #10
 800e252:	2308      	moveq	r3, #8
 800e254:	2100      	movs	r1, #0
 800e256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e25a:	6866      	ldr	r6, [r4, #4]
 800e25c:	60a6      	str	r6, [r4, #8]
 800e25e:	2e00      	cmp	r6, #0
 800e260:	bfa2      	ittt	ge
 800e262:	6821      	ldrge	r1, [r4, #0]
 800e264:	f021 0104 	bicge.w	r1, r1, #4
 800e268:	6021      	strge	r1, [r4, #0]
 800e26a:	b90d      	cbnz	r5, 800e270 <_printf_i+0x110>
 800e26c:	2e00      	cmp	r6, #0
 800e26e:	d04b      	beq.n	800e308 <_printf_i+0x1a8>
 800e270:	4616      	mov	r6, r2
 800e272:	fbb5 f1f3 	udiv	r1, r5, r3
 800e276:	fb03 5711 	mls	r7, r3, r1, r5
 800e27a:	5dc7      	ldrb	r7, [r0, r7]
 800e27c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e280:	462f      	mov	r7, r5
 800e282:	42bb      	cmp	r3, r7
 800e284:	460d      	mov	r5, r1
 800e286:	d9f4      	bls.n	800e272 <_printf_i+0x112>
 800e288:	2b08      	cmp	r3, #8
 800e28a:	d10b      	bne.n	800e2a4 <_printf_i+0x144>
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	07df      	lsls	r7, r3, #31
 800e290:	d508      	bpl.n	800e2a4 <_printf_i+0x144>
 800e292:	6923      	ldr	r3, [r4, #16]
 800e294:	6861      	ldr	r1, [r4, #4]
 800e296:	4299      	cmp	r1, r3
 800e298:	bfde      	ittt	le
 800e29a:	2330      	movle	r3, #48	@ 0x30
 800e29c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e2a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e2a4:	1b92      	subs	r2, r2, r6
 800e2a6:	6122      	str	r2, [r4, #16]
 800e2a8:	f8cd a000 	str.w	sl, [sp]
 800e2ac:	464b      	mov	r3, r9
 800e2ae:	aa03      	add	r2, sp, #12
 800e2b0:	4621      	mov	r1, r4
 800e2b2:	4640      	mov	r0, r8
 800e2b4:	f7ff fee6 	bl	800e084 <_printf_common>
 800e2b8:	3001      	adds	r0, #1
 800e2ba:	d14a      	bne.n	800e352 <_printf_i+0x1f2>
 800e2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c0:	b004      	add	sp, #16
 800e2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	f043 0320 	orr.w	r3, r3, #32
 800e2cc:	6023      	str	r3, [r4, #0]
 800e2ce:	4833      	ldr	r0, [pc, #204]	@ (800e39c <_printf_i+0x23c>)
 800e2d0:	2778      	movs	r7, #120	@ 0x78
 800e2d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e2d6:	6823      	ldr	r3, [r4, #0]
 800e2d8:	6831      	ldr	r1, [r6, #0]
 800e2da:	061f      	lsls	r7, r3, #24
 800e2dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800e2e0:	d402      	bmi.n	800e2e8 <_printf_i+0x188>
 800e2e2:	065f      	lsls	r7, r3, #25
 800e2e4:	bf48      	it	mi
 800e2e6:	b2ad      	uxthmi	r5, r5
 800e2e8:	6031      	str	r1, [r6, #0]
 800e2ea:	07d9      	lsls	r1, r3, #31
 800e2ec:	bf44      	itt	mi
 800e2ee:	f043 0320 	orrmi.w	r3, r3, #32
 800e2f2:	6023      	strmi	r3, [r4, #0]
 800e2f4:	b11d      	cbz	r5, 800e2fe <_printf_i+0x19e>
 800e2f6:	2310      	movs	r3, #16
 800e2f8:	e7ac      	b.n	800e254 <_printf_i+0xf4>
 800e2fa:	4827      	ldr	r0, [pc, #156]	@ (800e398 <_printf_i+0x238>)
 800e2fc:	e7e9      	b.n	800e2d2 <_printf_i+0x172>
 800e2fe:	6823      	ldr	r3, [r4, #0]
 800e300:	f023 0320 	bic.w	r3, r3, #32
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	e7f6      	b.n	800e2f6 <_printf_i+0x196>
 800e308:	4616      	mov	r6, r2
 800e30a:	e7bd      	b.n	800e288 <_printf_i+0x128>
 800e30c:	6833      	ldr	r3, [r6, #0]
 800e30e:	6825      	ldr	r5, [r4, #0]
 800e310:	6961      	ldr	r1, [r4, #20]
 800e312:	1d18      	adds	r0, r3, #4
 800e314:	6030      	str	r0, [r6, #0]
 800e316:	062e      	lsls	r6, r5, #24
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	d501      	bpl.n	800e320 <_printf_i+0x1c0>
 800e31c:	6019      	str	r1, [r3, #0]
 800e31e:	e002      	b.n	800e326 <_printf_i+0x1c6>
 800e320:	0668      	lsls	r0, r5, #25
 800e322:	d5fb      	bpl.n	800e31c <_printf_i+0x1bc>
 800e324:	8019      	strh	r1, [r3, #0]
 800e326:	2300      	movs	r3, #0
 800e328:	6123      	str	r3, [r4, #16]
 800e32a:	4616      	mov	r6, r2
 800e32c:	e7bc      	b.n	800e2a8 <_printf_i+0x148>
 800e32e:	6833      	ldr	r3, [r6, #0]
 800e330:	1d1a      	adds	r2, r3, #4
 800e332:	6032      	str	r2, [r6, #0]
 800e334:	681e      	ldr	r6, [r3, #0]
 800e336:	6862      	ldr	r2, [r4, #4]
 800e338:	2100      	movs	r1, #0
 800e33a:	4630      	mov	r0, r6
 800e33c:	f7f1 ff58 	bl	80001f0 <memchr>
 800e340:	b108      	cbz	r0, 800e346 <_printf_i+0x1e6>
 800e342:	1b80      	subs	r0, r0, r6
 800e344:	6060      	str	r0, [r4, #4]
 800e346:	6863      	ldr	r3, [r4, #4]
 800e348:	6123      	str	r3, [r4, #16]
 800e34a:	2300      	movs	r3, #0
 800e34c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e350:	e7aa      	b.n	800e2a8 <_printf_i+0x148>
 800e352:	6923      	ldr	r3, [r4, #16]
 800e354:	4632      	mov	r2, r6
 800e356:	4649      	mov	r1, r9
 800e358:	4640      	mov	r0, r8
 800e35a:	47d0      	blx	sl
 800e35c:	3001      	adds	r0, #1
 800e35e:	d0ad      	beq.n	800e2bc <_printf_i+0x15c>
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	079b      	lsls	r3, r3, #30
 800e364:	d413      	bmi.n	800e38e <_printf_i+0x22e>
 800e366:	68e0      	ldr	r0, [r4, #12]
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	4298      	cmp	r0, r3
 800e36c:	bfb8      	it	lt
 800e36e:	4618      	movlt	r0, r3
 800e370:	e7a6      	b.n	800e2c0 <_printf_i+0x160>
 800e372:	2301      	movs	r3, #1
 800e374:	4632      	mov	r2, r6
 800e376:	4649      	mov	r1, r9
 800e378:	4640      	mov	r0, r8
 800e37a:	47d0      	blx	sl
 800e37c:	3001      	adds	r0, #1
 800e37e:	d09d      	beq.n	800e2bc <_printf_i+0x15c>
 800e380:	3501      	adds	r5, #1
 800e382:	68e3      	ldr	r3, [r4, #12]
 800e384:	9903      	ldr	r1, [sp, #12]
 800e386:	1a5b      	subs	r3, r3, r1
 800e388:	42ab      	cmp	r3, r5
 800e38a:	dcf2      	bgt.n	800e372 <_printf_i+0x212>
 800e38c:	e7eb      	b.n	800e366 <_printf_i+0x206>
 800e38e:	2500      	movs	r5, #0
 800e390:	f104 0619 	add.w	r6, r4, #25
 800e394:	e7f5      	b.n	800e382 <_printf_i+0x222>
 800e396:	bf00      	nop
 800e398:	0800e991 	.word	0x0800e991
 800e39c:	0800e9a2 	.word	0x0800e9a2

0800e3a0 <__sflush_r>:
 800e3a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a8:	0716      	lsls	r6, r2, #28
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	d454      	bmi.n	800e45a <__sflush_r+0xba>
 800e3b0:	684b      	ldr	r3, [r1, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	dc02      	bgt.n	800e3bc <__sflush_r+0x1c>
 800e3b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	dd48      	ble.n	800e44e <__sflush_r+0xae>
 800e3bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e3be:	2e00      	cmp	r6, #0
 800e3c0:	d045      	beq.n	800e44e <__sflush_r+0xae>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e3c8:	682f      	ldr	r7, [r5, #0]
 800e3ca:	6a21      	ldr	r1, [r4, #32]
 800e3cc:	602b      	str	r3, [r5, #0]
 800e3ce:	d030      	beq.n	800e432 <__sflush_r+0x92>
 800e3d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	0759      	lsls	r1, r3, #29
 800e3d6:	d505      	bpl.n	800e3e4 <__sflush_r+0x44>
 800e3d8:	6863      	ldr	r3, [r4, #4]
 800e3da:	1ad2      	subs	r2, r2, r3
 800e3dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e3de:	b10b      	cbz	r3, 800e3e4 <__sflush_r+0x44>
 800e3e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e3e2:	1ad2      	subs	r2, r2, r3
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e3e8:	6a21      	ldr	r1, [r4, #32]
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	47b0      	blx	r6
 800e3ee:	1c43      	adds	r3, r0, #1
 800e3f0:	89a3      	ldrh	r3, [r4, #12]
 800e3f2:	d106      	bne.n	800e402 <__sflush_r+0x62>
 800e3f4:	6829      	ldr	r1, [r5, #0]
 800e3f6:	291d      	cmp	r1, #29
 800e3f8:	d82b      	bhi.n	800e452 <__sflush_r+0xb2>
 800e3fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e4a4 <__sflush_r+0x104>)
 800e3fc:	410a      	asrs	r2, r1
 800e3fe:	07d6      	lsls	r6, r2, #31
 800e400:	d427      	bmi.n	800e452 <__sflush_r+0xb2>
 800e402:	2200      	movs	r2, #0
 800e404:	6062      	str	r2, [r4, #4]
 800e406:	04d9      	lsls	r1, r3, #19
 800e408:	6922      	ldr	r2, [r4, #16]
 800e40a:	6022      	str	r2, [r4, #0]
 800e40c:	d504      	bpl.n	800e418 <__sflush_r+0x78>
 800e40e:	1c42      	adds	r2, r0, #1
 800e410:	d101      	bne.n	800e416 <__sflush_r+0x76>
 800e412:	682b      	ldr	r3, [r5, #0]
 800e414:	b903      	cbnz	r3, 800e418 <__sflush_r+0x78>
 800e416:	6560      	str	r0, [r4, #84]	@ 0x54
 800e418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e41a:	602f      	str	r7, [r5, #0]
 800e41c:	b1b9      	cbz	r1, 800e44e <__sflush_r+0xae>
 800e41e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e422:	4299      	cmp	r1, r3
 800e424:	d002      	beq.n	800e42c <__sflush_r+0x8c>
 800e426:	4628      	mov	r0, r5
 800e428:	f7ff fca0 	bl	800dd6c <_free_r>
 800e42c:	2300      	movs	r3, #0
 800e42e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e430:	e00d      	b.n	800e44e <__sflush_r+0xae>
 800e432:	2301      	movs	r3, #1
 800e434:	4628      	mov	r0, r5
 800e436:	47b0      	blx	r6
 800e438:	4602      	mov	r2, r0
 800e43a:	1c50      	adds	r0, r2, #1
 800e43c:	d1c9      	bne.n	800e3d2 <__sflush_r+0x32>
 800e43e:	682b      	ldr	r3, [r5, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d0c6      	beq.n	800e3d2 <__sflush_r+0x32>
 800e444:	2b1d      	cmp	r3, #29
 800e446:	d001      	beq.n	800e44c <__sflush_r+0xac>
 800e448:	2b16      	cmp	r3, #22
 800e44a:	d11e      	bne.n	800e48a <__sflush_r+0xea>
 800e44c:	602f      	str	r7, [r5, #0]
 800e44e:	2000      	movs	r0, #0
 800e450:	e022      	b.n	800e498 <__sflush_r+0xf8>
 800e452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e456:	b21b      	sxth	r3, r3
 800e458:	e01b      	b.n	800e492 <__sflush_r+0xf2>
 800e45a:	690f      	ldr	r7, [r1, #16]
 800e45c:	2f00      	cmp	r7, #0
 800e45e:	d0f6      	beq.n	800e44e <__sflush_r+0xae>
 800e460:	0793      	lsls	r3, r2, #30
 800e462:	680e      	ldr	r6, [r1, #0]
 800e464:	bf08      	it	eq
 800e466:	694b      	ldreq	r3, [r1, #20]
 800e468:	600f      	str	r7, [r1, #0]
 800e46a:	bf18      	it	ne
 800e46c:	2300      	movne	r3, #0
 800e46e:	eba6 0807 	sub.w	r8, r6, r7
 800e472:	608b      	str	r3, [r1, #8]
 800e474:	f1b8 0f00 	cmp.w	r8, #0
 800e478:	dde9      	ble.n	800e44e <__sflush_r+0xae>
 800e47a:	6a21      	ldr	r1, [r4, #32]
 800e47c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e47e:	4643      	mov	r3, r8
 800e480:	463a      	mov	r2, r7
 800e482:	4628      	mov	r0, r5
 800e484:	47b0      	blx	r6
 800e486:	2800      	cmp	r0, #0
 800e488:	dc08      	bgt.n	800e49c <__sflush_r+0xfc>
 800e48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	f04f 30ff 	mov.w	r0, #4294967295
 800e498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49c:	4407      	add	r7, r0
 800e49e:	eba8 0800 	sub.w	r8, r8, r0
 800e4a2:	e7e7      	b.n	800e474 <__sflush_r+0xd4>
 800e4a4:	dfbffffe 	.word	0xdfbffffe

0800e4a8 <_fflush_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	690b      	ldr	r3, [r1, #16]
 800e4ac:	4605      	mov	r5, r0
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	b913      	cbnz	r3, 800e4b8 <_fflush_r+0x10>
 800e4b2:	2500      	movs	r5, #0
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	b118      	cbz	r0, 800e4c2 <_fflush_r+0x1a>
 800e4ba:	6a03      	ldr	r3, [r0, #32]
 800e4bc:	b90b      	cbnz	r3, 800e4c2 <_fflush_r+0x1a>
 800e4be:	f7ff fa3d 	bl	800d93c <__sinit>
 800e4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d0f3      	beq.n	800e4b2 <_fflush_r+0xa>
 800e4ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e4cc:	07d0      	lsls	r0, r2, #31
 800e4ce:	d404      	bmi.n	800e4da <_fflush_r+0x32>
 800e4d0:	0599      	lsls	r1, r3, #22
 800e4d2:	d402      	bmi.n	800e4da <_fflush_r+0x32>
 800e4d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4d6:	f7ff fc38 	bl	800dd4a <__retarget_lock_acquire_recursive>
 800e4da:	4628      	mov	r0, r5
 800e4dc:	4621      	mov	r1, r4
 800e4de:	f7ff ff5f 	bl	800e3a0 <__sflush_r>
 800e4e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4e4:	07da      	lsls	r2, r3, #31
 800e4e6:	4605      	mov	r5, r0
 800e4e8:	d4e4      	bmi.n	800e4b4 <_fflush_r+0xc>
 800e4ea:	89a3      	ldrh	r3, [r4, #12]
 800e4ec:	059b      	lsls	r3, r3, #22
 800e4ee:	d4e1      	bmi.n	800e4b4 <_fflush_r+0xc>
 800e4f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4f2:	f7ff fc2b 	bl	800dd4c <__retarget_lock_release_recursive>
 800e4f6:	e7dd      	b.n	800e4b4 <_fflush_r+0xc>

0800e4f8 <__swhatbuf_r>:
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e500:	2900      	cmp	r1, #0
 800e502:	b096      	sub	sp, #88	@ 0x58
 800e504:	4615      	mov	r5, r2
 800e506:	461e      	mov	r6, r3
 800e508:	da0d      	bge.n	800e526 <__swhatbuf_r+0x2e>
 800e50a:	89a3      	ldrh	r3, [r4, #12]
 800e50c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e510:	f04f 0100 	mov.w	r1, #0
 800e514:	bf14      	ite	ne
 800e516:	2340      	movne	r3, #64	@ 0x40
 800e518:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e51c:	2000      	movs	r0, #0
 800e51e:	6031      	str	r1, [r6, #0]
 800e520:	602b      	str	r3, [r5, #0]
 800e522:	b016      	add	sp, #88	@ 0x58
 800e524:	bd70      	pop	{r4, r5, r6, pc}
 800e526:	466a      	mov	r2, sp
 800e528:	f000 f848 	bl	800e5bc <_fstat_r>
 800e52c:	2800      	cmp	r0, #0
 800e52e:	dbec      	blt.n	800e50a <__swhatbuf_r+0x12>
 800e530:	9901      	ldr	r1, [sp, #4]
 800e532:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e536:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e53a:	4259      	negs	r1, r3
 800e53c:	4159      	adcs	r1, r3
 800e53e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e542:	e7eb      	b.n	800e51c <__swhatbuf_r+0x24>

0800e544 <__smakebuf_r>:
 800e544:	898b      	ldrh	r3, [r1, #12]
 800e546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e548:	079d      	lsls	r5, r3, #30
 800e54a:	4606      	mov	r6, r0
 800e54c:	460c      	mov	r4, r1
 800e54e:	d507      	bpl.n	800e560 <__smakebuf_r+0x1c>
 800e550:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	6123      	str	r3, [r4, #16]
 800e558:	2301      	movs	r3, #1
 800e55a:	6163      	str	r3, [r4, #20]
 800e55c:	b003      	add	sp, #12
 800e55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e560:	ab01      	add	r3, sp, #4
 800e562:	466a      	mov	r2, sp
 800e564:	f7ff ffc8 	bl	800e4f8 <__swhatbuf_r>
 800e568:	9f00      	ldr	r7, [sp, #0]
 800e56a:	4605      	mov	r5, r0
 800e56c:	4639      	mov	r1, r7
 800e56e:	4630      	mov	r0, r6
 800e570:	f7ff f8cc 	bl	800d70c <_malloc_r>
 800e574:	b948      	cbnz	r0, 800e58a <__smakebuf_r+0x46>
 800e576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e57a:	059a      	lsls	r2, r3, #22
 800e57c:	d4ee      	bmi.n	800e55c <__smakebuf_r+0x18>
 800e57e:	f023 0303 	bic.w	r3, r3, #3
 800e582:	f043 0302 	orr.w	r3, r3, #2
 800e586:	81a3      	strh	r3, [r4, #12]
 800e588:	e7e2      	b.n	800e550 <__smakebuf_r+0xc>
 800e58a:	89a3      	ldrh	r3, [r4, #12]
 800e58c:	6020      	str	r0, [r4, #0]
 800e58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e592:	81a3      	strh	r3, [r4, #12]
 800e594:	9b01      	ldr	r3, [sp, #4]
 800e596:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e59a:	b15b      	cbz	r3, 800e5b4 <__smakebuf_r+0x70>
 800e59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f000 f81d 	bl	800e5e0 <_isatty_r>
 800e5a6:	b128      	cbz	r0, 800e5b4 <__smakebuf_r+0x70>
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	f023 0303 	bic.w	r3, r3, #3
 800e5ae:	f043 0301 	orr.w	r3, r3, #1
 800e5b2:	81a3      	strh	r3, [r4, #12]
 800e5b4:	89a3      	ldrh	r3, [r4, #12]
 800e5b6:	431d      	orrs	r5, r3
 800e5b8:	81a5      	strh	r5, [r4, #12]
 800e5ba:	e7cf      	b.n	800e55c <__smakebuf_r+0x18>

0800e5bc <_fstat_r>:
 800e5bc:	b538      	push	{r3, r4, r5, lr}
 800e5be:	4d07      	ldr	r5, [pc, #28]	@ (800e5dc <_fstat_r+0x20>)
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	4608      	mov	r0, r1
 800e5c6:	4611      	mov	r1, r2
 800e5c8:	602b      	str	r3, [r5, #0]
 800e5ca:	f7f2 fdb5 	bl	8001138 <_fstat>
 800e5ce:	1c43      	adds	r3, r0, #1
 800e5d0:	d102      	bne.n	800e5d8 <_fstat_r+0x1c>
 800e5d2:	682b      	ldr	r3, [r5, #0]
 800e5d4:	b103      	cbz	r3, 800e5d8 <_fstat_r+0x1c>
 800e5d6:	6023      	str	r3, [r4, #0]
 800e5d8:	bd38      	pop	{r3, r4, r5, pc}
 800e5da:	bf00      	nop
 800e5dc:	20001b78 	.word	0x20001b78

0800e5e0 <_isatty_r>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	4d06      	ldr	r5, [pc, #24]	@ (800e5fc <_isatty_r+0x1c>)
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	4608      	mov	r0, r1
 800e5ea:	602b      	str	r3, [r5, #0]
 800e5ec:	f7f2 fdb4 	bl	8001158 <_isatty>
 800e5f0:	1c43      	adds	r3, r0, #1
 800e5f2:	d102      	bne.n	800e5fa <_isatty_r+0x1a>
 800e5f4:	682b      	ldr	r3, [r5, #0]
 800e5f6:	b103      	cbz	r3, 800e5fa <_isatty_r+0x1a>
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	bd38      	pop	{r3, r4, r5, pc}
 800e5fc:	20001b78 	.word	0x20001b78

0800e600 <_init>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	bf00      	nop
 800e604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e606:	bc08      	pop	{r3}
 800e608:	469e      	mov	lr, r3
 800e60a:	4770      	bx	lr

0800e60c <_fini>:
 800e60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60e:	bf00      	nop
 800e610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e612:	bc08      	pop	{r3}
 800e614:	469e      	mov	lr, r3
 800e616:	4770      	bx	lr
