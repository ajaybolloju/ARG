
ARG_BAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003d44  08003d44  00004d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc4  08003dc4  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dcc  08003dcc  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00004dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003dd4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000006c  08003e40  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08003e40  000052d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ca8  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193e  00000000  00000000  0000dd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0000f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e0  00000000  00000000  0000fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016563  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bd4  00000000  00000000  0002698b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086dcb  00000000  00000000  0003055f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b732a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002628  00000000  00000000  000b7370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b9998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d2c 	.word	0x08003d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003d2c 	.word	0x08003d2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fbce 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f848 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f904 	bl	8000788 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000580:	f000 f8ae 	bl	80006e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f8d6 	bl	8000734 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	4917      	ldr	r1, [pc, #92]	@ (80005e8 <main+0x78>)
 800058c:	4817      	ldr	r0, [pc, #92]	@ (80005ec <main+0x7c>)
 800058e:	f001 fd16 	bl	8001fbe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	4914      	ldr	r1, [pc, #80]	@ (80005e8 <main+0x78>)
 8000596:	4816      	ldr	r0, [pc, #88]	@ (80005f0 <main+0x80>)
 8000598:	f001 fd11 	bl	8001fbe <HAL_UART_Receive_IT>
//	      HAL_Delay(1000); // Wait before sending the next command
////	  if(HAL_GPIO_ReadPin(OnBoardKey_GPIO_Port,OnBoardKey_Pin) == GPIO_PIN_SET)
////	  {
////	  if(ModemTxReady == SET)
//	  {
		  memset(g_buff,'\0',sizeof(g_buff));
 800059c:	2264      	movs	r2, #100	@ 0x64
 800059e:	2100      	movs	r1, #0
 80005a0:	4814      	ldr	r0, [pc, #80]	@ (80005f4 <main+0x84>)
 80005a2:	f002 fd94 	bl	80030ce <memset>
		  wr_ptr = 0;
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <main+0x88>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
//
		  if (HAL_UART_Transmit(&huart2, (uint8_t *) "AT+CGMM\r\n",strlen("AT+CGMM\r\n"),HAL_MAX_DELAY) != HAL_OK)
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	2209      	movs	r2, #9
 80005b2:	4912      	ldr	r1, [pc, #72]	@ (80005fc <main+0x8c>)
 80005b4:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <main+0x80>)
 80005b6:	f001 fc77 	bl	8001ea8 <HAL_UART_Transmit>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d002      	beq.n	80005c6 <main+0x56>
		  {
			  printf("\n Txn Failed");
 80005c0:	480f      	ldr	r0, [pc, #60]	@ (8000600 <main+0x90>)
 80005c2:	f002 fd2f 	bl	8003024 <iprintf>
		  }
		  HAL_Delay(5000);
 80005c6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005ca:	f000 fc15 	bl	8000df8 <HAL_Delay>
//
		  if (strstr((char *) g_buff, "OK"))
 80005ce:	490d      	ldr	r1, [pc, #52]	@ (8000604 <main+0x94>)
 80005d0:	4808      	ldr	r0, [pc, #32]	@ (80005f4 <main+0x84>)
 80005d2:	f002 fd84 	bl	80030de <strstr>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0df      	beq.n	800059c <main+0x2c>
		  {
			  printf("\n Response OK: %s",(char *)g_buff);
 80005dc:	4905      	ldr	r1, [pc, #20]	@ (80005f4 <main+0x84>)
 80005de:	480a      	ldr	r0, [pc, #40]	@ (8000608 <main+0x98>)
 80005e0:	f002 fd20 	bl	8003024 <iprintf>
		  memset(g_buff,'\0',sizeof(g_buff));
 80005e4:	e7da      	b.n	800059c <main+0x2c>
 80005e6:	bf00      	nop
 80005e8:	20000118 	.word	0x20000118
 80005ec:	20000088 	.word	0x20000088
 80005f0:	200000d0 	.word	0x200000d0
 80005f4:	2000011c 	.word	0x2000011c
 80005f8:	20000180 	.word	0x20000180
 80005fc:	08003d44 	.word	0x08003d44
 8000600:	08003d50 	.word	0x08003d50
 8000604:	08003d60 	.word	0x08003d60
 8000608:	08003d64 	.word	0x08003d64

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fd57 	bl	80030ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <SystemClock_Config+0xd0>)
 800065a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000680:	2319      	movs	r3, #25
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	@ 0xa8
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ff5f 	bl	8001558 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a0:	f000 f954 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f9c1 	bl	8001a48 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006cc:	f000 f93e 	bl	800094c <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	@ 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_USART1_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000718:	f001 fb76 	bl	8001e08 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f913 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000088 	.word	0x20000088
 8000730:	40011000 	.word	0x40011000

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_USART2_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800076c:	f001 fb4c 	bl	8001e08 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f8e9 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000d0 	.word	0x200000d0
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a23      	ldr	r2, [pc, #140]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_GPIO_Init+0xc8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f8:	4816      	ldr	r0, [pc, #88]	@ (8000854 <MX_GPIO_Init+0xcc>)
 80007fa:	f000 fe61 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OnBoardLED_Pin */
  GPIO_InitStruct.Pin = OnBoardLED_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OnBoardLED_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	480f      	ldr	r0, [pc, #60]	@ (8000854 <MX_GPIO_Init+0xcc>)
 8000818:	f000 fcb6 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : RainGuagePulseInput_Pin */
  GPIO_InitStruct.Pin = RainGuagePulseInput_Pin;
 800081c:	2302      	movs	r3, #2
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RainGuagePulseInput_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	4809      	ldr	r0, [pc, #36]	@ (8000858 <MX_GPIO_Init+0xd0>)
 8000832:	f000 fca9 	bl	8001188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2007      	movs	r0, #7
 800083c:	f000 fbdb 	bl	8000ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000840:	2007      	movs	r0, #7
 8000842:	f000 fbf4 	bl	800102e <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40020800 	.word	0x40020800
 8000858:	40020000 	.word	0x40020000

0800085c <HAL_UART_RxCpltCallback>:
   @param  UartHandle: UART handle.
   @note   This callback executes once defined bytes of reception completed
   @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
//	  if (UartHandle->Instance == USART1)
//	  {
////		    HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
//	  }
	  if (UartHandle->Instance == USART2)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <HAL_UART_RxCpltCallback+0x3c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10f      	bne.n	800088e <HAL_UART_RxCpltCallback+0x32>
	  {
		    HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	490a      	ldr	r1, [pc, #40]	@ (800089c <HAL_UART_RxCpltCallback+0x40>)
 8000872:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <HAL_UART_RxCpltCallback+0x44>)
 8000874:	f001 fba3 	bl	8001fbe <HAL_UART_Receive_IT>
		    g_buff[wr_ptr++] = aRxBuffer;
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_UART_RxCpltCallback+0x48>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	b2d1      	uxtb	r1, r2
 8000880:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <HAL_UART_RxCpltCallback+0x48>)
 8000882:	7011      	strb	r1, [r2, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_UART_RxCpltCallback+0x40>)
 8000888:	7819      	ldrb	r1, [r3, #0]
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <HAL_UART_RxCpltCallback+0x4c>)
 800088c:	5499      	strb	r1, [r3, r2]
//		    printf("%c", aRxBuffer);
	  }
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004400 	.word	0x40004400
 800089c:	20000118 	.word	0x20000118
 80008a0:	200000d0 	.word	0x200000d0
 80008a4:	20000180 	.word	0x20000180
 80008a8:	2000011c 	.word	0x2000011c

080008ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	  if (UartHandle->Instance == USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a09      	ldr	r2, [pc, #36]	@ (80008e0 <HAL_UART_TxCpltCallback+0x34>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d102      	bne.n	80008c4 <HAL_UART_TxCpltCallback+0x18>
	  {
	    /* Set transmission flag: transfer complete */
		  SerialTxReady = SET;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_UART_TxCpltCallback+0x38>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
	  }
	  if (UartHandle->Instance == USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	@ (80008e8 <HAL_UART_TxCpltCallback+0x3c>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d102      	bne.n	80008d4 <HAL_UART_TxCpltCallback+0x28>
	  {
	    /* Set transmission flag: transfer complete */
		  ModemTxReady = SET;
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <HAL_UART_TxCpltCallback+0x40>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
	  }
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40011000 	.word	0x40011000
 80008e4:	20000119 	.word	0x20000119
 80008e8:	40004400 	.word	0x40004400
 80008ec:	20000000 	.word	0x20000000

080008f0 <HAL_GPIO_EXTI_Callback>:
   @brief EXTI line detection callbacks
   @param GPIO_Pin: Specifies the pins connected EXTI line
   @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == RainGuagePulseInput_Pin)
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d10b      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x28>
  {
    if (HAL_GPIO_ReadPin(RainGuagePulseInput_GPIO_Port, RainGuagePulseInput_Pin)
 8000900:	2102      	movs	r1, #2
 8000902:	4807      	ldr	r0, [pc, #28]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x30>)
 8000904:	f000 fdc4 	bl	8001490 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d104      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x28>
         == GPIO_PIN_SET)
    {
    	HAL_GPIO_TogglePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin);
 800090e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000912:	4804      	ldr	r0, [pc, #16]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x34>)
 8000914:	f000 fded 	bl	80014f2 <HAL_GPIO_TogglePin>
    }
  }
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020000 	.word	0x40020000
 8000924:	40020800 	.word	0x40020800

08000928 <__io_putchar>:
   @brief  Retargets the C library APP_DEBUG_STR function to the USART.
   @param  None
   @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0XFFFF);
 8000930:	1d39      	adds	r1, r7, #4
 8000932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000936:	2201      	movs	r2, #1
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <__io_putchar+0x20>)
 800093a:	f001 fab5 	bl	8001ea8 <HAL_UART_Transmit>
  return ch;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000088 	.word	0x20000088

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	@ 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	@ 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ab0 <HAL_UART_MspInit+0x108>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d135      	bne.n	8000a36 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b39      	ldr	r3, [pc, #228]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a38      	ldr	r2, [pc, #224]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b36      	ldr	r3, [pc, #216]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b32      	ldr	r3, [pc, #200]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a31      	ldr	r2, [pc, #196]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_Tx_Pin|MODEM_Rx_Pin;
 8000a02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a14:	2307      	movs	r3, #7
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4826      	ldr	r0, [pc, #152]	@ (8000ab8 <HAL_UART_MspInit+0x110>)
 8000a20:	f000 fbb2 	bl	8001188 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2025      	movs	r0, #37	@ 0x25
 8000a2a:	f000 fae4 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a2e:	2025      	movs	r0, #37	@ 0x25
 8000a30:	f000 fafd 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a34:	e038      	b.n	8000aa8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a20      	ldr	r2, [pc, #128]	@ (8000abc <HAL_UART_MspInit+0x114>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d133      	bne.n	8000aa8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_UART_MspInit+0x10c>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERIAL_Tx_Pin|SERIAL_Rx_Pin;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <HAL_UART_MspInit+0x110>)
 8000a94:	f000 fb78 	bl	8001188 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2026      	movs	r0, #38	@ 0x26
 8000a9e:	f000 faaa 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa2:	2026      	movs	r0, #38	@ 0x26
 8000aa4:	f000 fac3 	bl	800102e <HAL_NVIC_EnableIRQ>
}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	@ 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40011000 	.word	0x40011000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40004400 	.word	0x40004400

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f000 f94f 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <USART1_IRQHandler+0x10>)
 8000b26:	f001 fa6f 	bl	8002008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000088 	.word	0x20000088

08000b34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <USART2_IRQHandler+0x10>)
 8000b3a:	f001 fa65 	bl	8002008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000d0 	.word	0x200000d0

08000b48 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f000 fceb 	bl	8001528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e00a      	b.n	8000b7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b68:	f3af 8000 	nop.w
 8000b6c:	4601      	mov	r1, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	60ba      	str	r2, [r7, #8]
 8000b74:	b2ca      	uxtb	r2, r1
 8000b76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dbf0      	blt.n	8000b68 <_read+0x12>
  }

  return len;
 8000b86:	687b      	ldr	r3, [r7, #4]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e009      	b.n	8000bb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	60ba      	str	r2, [r7, #8]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff febc 	bl	8000928 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dbf1      	blt.n	8000ba2 <_write+0x12>
  }
  return len;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_close>:

int _close(int file)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_isatty>:

int _isatty(int file)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f002 fa9a 	bl	8003198 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20010000 	.word	0x20010000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	20000184 	.word	0x20000184
 8000c98:	200002d8 	.word	0x200002d8

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 fa59 	bl	80031a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc3d 	bl	8000570 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d04:	08003dd4 	.word	0x08003dd4
  ldr r2, =_sbss
 8000d08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d0c:	200002d8 	.word	0x200002d8

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94f 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe06 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f967 	bl	800104a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000004 	.word	0x20000004
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	20000188 	.word	0x20000188

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000188 	.word	0x20000188

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000000c 	.word	0x2000000c

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff feb6 	bl	8000de0 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d008      	beq.n	8001094 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2280      	movs	r2, #128	@ 0x80
 8001086:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e052      	b.n	800113a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0216 	bic.w	r2, r2, #22
 80010a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d103      	bne.n	80010c4 <HAL_DMA_Abort+0x62>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0208 	bic.w	r2, r2, #8
 80010d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e4:	e013      	b.n	800110e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010e6:	f7ff fe7b 	bl	8000de0 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d90c      	bls.n	800110e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2220      	movs	r2, #32
 80010f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2203      	movs	r2, #3
 80010fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e015      	b.n	800113a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e4      	bne.n	80010e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001120:	223f      	movs	r2, #63	@ 0x3f
 8001122:	409a      	lsls	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d004      	beq.n	8001160 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2280      	movs	r2, #128	@ 0x80
 800115a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e00c      	b.n	800117a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2205      	movs	r2, #5
 8001164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	e159      	b.n	8001458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8148 	bne.w	8001452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d005      	beq.n	80011da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d130      	bne.n	800123c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 0201 	and.w	r2, r3, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d017      	beq.n	8001278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d123      	bne.n	80012cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0203 	and.w	r2, r3, #3
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a2 	beq.w	8001452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <HAL_GPIO_Init+0x2e8>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	4a56      	ldr	r2, [pc, #344]	@ (8001470 <HAL_GPIO_Init+0x2e8>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131c:	6453      	str	r3, [r2, #68]	@ 0x44
 800131e:	4b54      	ldr	r3, [pc, #336]	@ (8001470 <HAL_GPIO_Init+0x2e8>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132a:	4a52      	ldr	r2, [pc, #328]	@ (8001474 <HAL_GPIO_Init+0x2ec>)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a49      	ldr	r2, [pc, #292]	@ (8001478 <HAL_GPIO_Init+0x2f0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x202>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a48      	ldr	r2, [pc, #288]	@ (800147c <HAL_GPIO_Init+0x2f4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x1fe>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a47      	ldr	r2, [pc, #284]	@ (8001480 <HAL_GPIO_Init+0x2f8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x1fa>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a46      	ldr	r2, [pc, #280]	@ (8001484 <HAL_GPIO_Init+0x2fc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x1f6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a45      	ldr	r2, [pc, #276]	@ (8001488 <HAL_GPIO_Init+0x300>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x1f2>
 8001376:	2304      	movs	r3, #4
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x204>
 800137a:	2307      	movs	r3, #7
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x204>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x204>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x204>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x204>
 800138a:	2300      	movs	r3, #0
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	4935      	ldr	r1, [pc, #212]	@ (8001474 <HAL_GPIO_Init+0x2ec>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013aa:	4b38      	ldr	r3, [pc, #224]	@ (800148c <HAL_GPIO_Init+0x304>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ce:	4a2f      	ldr	r2, [pc, #188]	@ (800148c <HAL_GPIO_Init+0x304>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d4:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <HAL_GPIO_Init+0x304>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f8:	4a24      	ldr	r2, [pc, #144]	@ (800148c <HAL_GPIO_Init+0x304>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <HAL_GPIO_Init+0x304>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001422:	4a1a      	ldr	r2, [pc, #104]	@ (800148c <HAL_GPIO_Init+0x304>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001428:	4b18      	ldr	r3, [pc, #96]	@ (800148c <HAL_GPIO_Init+0x304>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800144c:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_GPIO_Init+0x304>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	f67f aea2 	bls.w	80011a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40013800 	.word	0x40013800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40021000 	.word	0x40021000
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	041a      	lsls	r2, r3, #16
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43d9      	mvns	r1, r3
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	400b      	ands	r3, r1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f9d2 	bl	80008f0 <HAL_GPIO_EXTI_Callback>
  }
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40013c00 	.word	0x40013c00

08001558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e267      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d075      	beq.n	8001662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001576:	4b88      	ldr	r3, [pc, #544]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b04      	cmp	r3, #4
 8001580:	d00c      	beq.n	800159c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4b85      	ldr	r3, [pc, #532]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800158a:	2b08      	cmp	r3, #8
 800158c:	d112      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158e:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800159a:	d10b      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	4b7e      	ldr	r3, [pc, #504]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d05b      	beq.n	8001660 <HAL_RCC_OscConfig+0x108>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d157      	bne.n	8001660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e242      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x74>
 80015be:	4b76      	ldr	r3, [pc, #472]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a75      	ldr	r2, [pc, #468]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e01d      	b.n	8001608 <HAL_RCC_OscConfig+0xb0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x98>
 80015d6:	4b70      	ldr	r3, [pc, #448]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6f      	ldr	r2, [pc, #444]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0xb0>
 80015f0:	4b69      	ldr	r3, [pc, #420]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a68      	ldr	r2, [pc, #416]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a65      	ldr	r2, [pc, #404]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d013      	beq.n	8001638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fbe6 	bl	8000de0 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fbe2 	bl	8000de0 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	@ 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e207      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b5b      	ldr	r3, [pc, #364]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0xc0>
 8001636:	e014      	b.n	8001662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fbd2 	bl	8000de0 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fbce 	bl	8000de0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	@ 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1f3      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	4b51      	ldr	r3, [pc, #324]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0xe8>
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d063      	beq.n	8001736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800166e:	4b4a      	ldr	r3, [pc, #296]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167a:	4b47      	ldr	r3, [pc, #284]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001682:	2b08      	cmp	r3, #8
 8001684:	d11c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001686:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d116      	bne.n	80016c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	4b41      	ldr	r3, [pc, #260]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_RCC_OscConfig+0x152>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e1c7      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4937      	ldr	r1, [pc, #220]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	e03a      	b.n	8001736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c8:	4b34      	ldr	r3, [pc, #208]	@ (800179c <HAL_RCC_OscConfig+0x244>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb87 	bl	8000de0 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb83 	bl	8000de0 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e1a8      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4925      	ldr	r1, [pc, #148]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <HAL_RCC_OscConfig+0x244>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fb66 	bl	8000de0 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fb62 	bl	8000de0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e187      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d036      	beq.n	80017b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d016      	beq.n	8001778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <HAL_RCC_OscConfig+0x248>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fb46 	bl	8000de0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff fb42 	bl	8000de0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e167      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_RCC_OscConfig+0x240>)
 800176c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x200>
 8001776:	e01b      	b.n	80017b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_RCC_OscConfig+0x248>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7ff fb2f 	bl	8000de0 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	e00e      	b.n	80017a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff fb2b 	bl	8000de0 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d907      	bls.n	80017a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e150      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
 8001798:	40023800 	.word	0x40023800
 800179c:	42470000 	.word	0x42470000
 80017a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	4b88      	ldr	r3, [pc, #544]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ea      	bne.n	8001786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8097 	beq.w	80018ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c2:	4b81      	ldr	r3, [pc, #516]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b7d      	ldr	r3, [pc, #500]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	4a7c      	ldr	r2, [pc, #496]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017de:	4b7a      	ldr	r3, [pc, #488]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	4b77      	ldr	r3, [pc, #476]	@ (80019cc <HAL_RCC_OscConfig+0x474>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	4b74      	ldr	r3, [pc, #464]	@ (80019cc <HAL_RCC_OscConfig+0x474>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a73      	ldr	r2, [pc, #460]	@ (80019cc <HAL_RCC_OscConfig+0x474>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001806:	f7ff faeb 	bl	8000de0 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff fae7 	bl	8000de0 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e10c      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	4b6a      	ldr	r3, [pc, #424]	@ (80019cc <HAL_RCC_OscConfig+0x474>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x2ea>
 8001834:	4b64      	ldr	r3, [pc, #400]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001838:	4a63      	ldr	r2, [pc, #396]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001840:	e01c      	b.n	800187c <HAL_RCC_OscConfig+0x324>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x30c>
 800184a:	4b5f      	ldr	r3, [pc, #380]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184e:	4a5e      	ldr	r2, [pc, #376]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6713      	str	r3, [r2, #112]	@ 0x70
 8001856:	4b5c      	ldr	r3, [pc, #368]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185a:	4a5b      	ldr	r2, [pc, #364]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6713      	str	r3, [r2, #112]	@ 0x70
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0x324>
 8001864:	4b58      	ldr	r3, [pc, #352]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001868:	4a57      	ldr	r2, [pc, #348]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001870:	4b55      	ldr	r3, [pc, #340]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001874:	4a54      	ldr	r2, [pc, #336]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 8001876:	f023 0304 	bic.w	r3, r3, #4
 800187a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d015      	beq.n	80018b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff faac 	bl	8000de0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff faa8 	bl	8000de0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e0cb      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a2:	4b49      	ldr	r3, [pc, #292]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0ee      	beq.n	800188c <HAL_RCC_OscConfig+0x334>
 80018ae:	e014      	b.n	80018da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa96 	bl	8000de0 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff fa92 	bl	8000de0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0b5      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	4b3e      	ldr	r3, [pc, #248]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ee      	bne.n	80018b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	4a38      	ldr	r2, [pc, #224]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80018e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80a1 	beq.w	8001a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018f6:	4b34      	ldr	r3, [pc, #208]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d05c      	beq.n	80019bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d141      	bne.n	800198e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <HAL_RCC_OscConfig+0x478>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fa66 	bl	8000de0 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff fa62 	bl	8000de0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e087      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	019b      	lsls	r3, r3, #6
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	3b01      	subs	r3, #1
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	491b      	ldr	r1, [pc, #108]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001960:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <HAL_RCC_OscConfig+0x478>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fa3b 	bl	8000de0 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff fa37 	bl	8000de0 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e05c      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x416>
 800198c:	e054      	b.n	8001a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <HAL_RCC_OscConfig+0x478>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fa24 	bl	8000de0 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fa20 	bl	8000de0 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e045      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_RCC_OscConfig+0x470>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x444>
 80019ba:	e03d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e038      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000
 80019d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <HAL_RCC_OscConfig+0x4ec>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d028      	beq.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d121      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d11a      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d111      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1a:	085b      	lsrs	r3, r3, #1
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0cc      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b68      	ldr	r3, [pc, #416]	@ (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d90c      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b65      	ldr	r3, [pc, #404]	@ (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	@ (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001aa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d044      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d119      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	4b3f      	ldr	r3, [pc, #252]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e06f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e067      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 0203 	bic.w	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4934      	ldr	r1, [pc, #208]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b38:	f7ff f952 	bl	8000de0 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7ff f94e 	bl	8000de0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e04f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 020c 	and.w	r2, r3, #12
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1eb      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b68:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d20c      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f821 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490a      	ldr	r1, [pc, #40]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f8b2 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08003d78 	.word	0x08003d78
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	20000008 	.word	0x20000008

08001c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c18:	b090      	sub	sp, #64	@ 0x40
 8001c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2c:	4b59      	ldr	r3, [pc, #356]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d00d      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x40>
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	f200 80a1 	bhi.w	8001d80 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x34>
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c46:	e09b      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c4c:	e09b      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c4e:	4b53      	ldr	r3, [pc, #332]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c52:	e098      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c54:	4b4f      	ldr	r3, [pc, #316]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d028      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	2200      	movs	r2, #0
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4b47      	ldr	r3, [pc, #284]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c80:	fb03 f201 	mul.w	r2, r3, r1
 8001c84:	2300      	movs	r3, #0
 8001c86:	fb00 f303 	mul.w	r3, r0, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a43      	ldr	r2, [pc, #268]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c8e:	fba0 1202 	umull	r1, r2, r0, r2
 8001c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c94:	460a      	mov	r2, r1
 8001c96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c9a:	4413      	add	r3, r2
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	61fa      	str	r2, [r7, #28]
 8001ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001caa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cae:	f7fe fae7 	bl	8000280 <__aeabi_uldivmod>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cba:	e053      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbc:	4b35      	ldr	r3, [pc, #212]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	617a      	str	r2, [r7, #20]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cce:	f04f 0b00 	mov.w	fp, #0
 8001cd2:	4652      	mov	r2, sl
 8001cd4:	465b      	mov	r3, fp
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	0159      	lsls	r1, r3, #5
 8001ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce4:	0150      	lsls	r0, r2, #5
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	ebb2 080a 	subs.w	r8, r2, sl
 8001cee:	eb63 090b 	sbc.w	r9, r3, fp
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d06:	ebb2 0408 	subs.w	r4, r2, r8
 8001d0a:	eb63 0509 	sbc.w	r5, r3, r9
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	00eb      	lsls	r3, r5, #3
 8001d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d1c:	00e2      	lsls	r2, r4, #3
 8001d1e:	4614      	mov	r4, r2
 8001d20:	461d      	mov	r5, r3
 8001d22:	eb14 030a 	adds.w	r3, r4, sl
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	eb45 030b 	adc.w	r3, r5, fp
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	028b      	lsls	r3, r1, #10
 8001d3e:	4621      	mov	r1, r4
 8001d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d44:	4621      	mov	r1, r4
 8001d46:	028a      	lsls	r2, r1, #10
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	60fa      	str	r2, [r7, #12]
 8001d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d58:	f7fe fa92 	bl	8000280 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4613      	mov	r3, r2
 8001d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001d74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d7e:	e002      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3740      	adds	r7, #64	@ 0x40
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	017d7840 	.word	0x017d7840

08001da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0a9b      	lsrs	r3, r3, #10
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	@ (8001ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	08003d88 	.word	0x08003d88

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001de4:	f7ff ffdc 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0b5b      	lsrs	r3, r3, #13
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	@ (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08003d88 	.word	0x08003d88

08001e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e042      	b.n	8001ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fdba 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	@ 0x24
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fdb3 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	@ 0x28
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d175      	bne.n	8001fb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_UART_Transmit+0x2c>
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e06e      	b.n	8001fb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	@ 0x21
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ee6:	f7fe ff7b 	bl	8000de0 <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f00:	d108      	bne.n	8001f14 <HAL_UART_Transmit+0x6c>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d104      	bne.n	8001f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	e003      	b.n	8001f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f1c:	e02e      	b.n	8001f7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	2180      	movs	r1, #128	@ 0x80
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fb15 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e03a      	b.n	8001fb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10b      	bne.n	8001f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e007      	b.n	8001f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1cb      	bne.n	8001f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2140      	movs	r1, #64	@ 0x40
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fae1 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e006      	b.n	8001fb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d112      	bne.n	8001ffe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_UART_Receive_IT+0x26>
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e00b      	b.n	8002000 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fb08 	bl	800260a <UART_Start_Receive_IT>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	e000      	b.n	8002000 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
  }
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0ba      	sub	sp, #232	@ 0xe8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800203a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800204e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_UART_IRQHandler+0x66>
 800205a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fbe8 	bl	800283c <UART_Receive_IT>
      return;
 800206c:	e25b      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800206e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80de 	beq.w	8002234 <HAL_UART_IRQHandler+0x22c>
 8002078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002088:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80d1 	beq.w	8002234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_UART_IRQHandler+0xae>
 800209e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <HAL_UART_IRQHandler+0xd2>
 80020c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f043 0202 	orr.w	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_UART_IRQHandler+0xf6>
 80020e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f043 0204 	orr.w	r2, r3, #4
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d011      	beq.n	800212e <HAL_UART_IRQHandler+0x126>
 800210a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f043 0208 	orr.w	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 81f2 	beq.w	800251c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_UART_IRQHandler+0x14e>
 8002144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fb73 	bl	800283c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002160:	2b40      	cmp	r3, #64	@ 0x40
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d103      	bne.n	8002182 <HAL_UART_IRQHandler+0x17a>
 800217a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d04f      	beq.n	8002222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa7b 	bl	800267e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002192:	2b40      	cmp	r3, #64	@ 0x40
 8002194:	d141      	bne.n	800221a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3314      	adds	r3, #20
 800219c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021a4:	e853 3f00 	ldrex	r3, [r3]
 80021a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80021ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3314      	adds	r3, #20
 80021be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80021c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80021c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80021ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80021d2:	e841 2300 	strex	r3, r2, [r1]
 80021d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80021da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1d9      	bne.n	8002196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d013      	beq.n	8002212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ee:	4a7e      	ldr	r2, [pc, #504]	@ (80023e8 <HAL_UART_IRQHandler+0x3e0>)
 80021f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe ffa3 	bl	8001142 <HAL_DMA_Abort_IT>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800220c:	4610      	mov	r0, r2
 800220e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002210:	e00e      	b.n	8002230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f98a 	bl	800252c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002218:	e00a      	b.n	8002230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f986 	bl	800252c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002220:	e006      	b.n	8002230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f982 	bl	800252c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800222e:	e175      	b.n	800251c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002230:	bf00      	nop
    return;
 8002232:	e173      	b.n	800251c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 814f 	bne.w	80024dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8148 	beq.w	80024dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800224c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8141 	beq.w	80024dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227a:	2b40      	cmp	r3, #64	@ 0x40
 800227c:	f040 80b6 	bne.w	80023ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800228c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8145 	beq.w	8002520 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800229a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800229e:	429a      	cmp	r2, r3
 80022a0:	f080 813e 	bcs.w	8002520 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80022aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b6:	f000 8088 	beq.w	80023ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80022d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	330c      	adds	r3, #12
 80022e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80022e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022f6:	e841 2300 	strex	r3, r2, [r1]
 80022fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1d9      	bne.n	80022ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3314      	adds	r3, #20
 800230c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002310:	e853 3f00 	ldrex	r3, [r3]
 8002314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3314      	adds	r3, #20
 8002326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800232a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800232e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002336:	e841 2300 	strex	r3, r2, [r1]
 800233a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800233c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1e1      	bne.n	8002306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3314      	adds	r3, #20
 8002362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800236c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800236e:	e841 2300 	strex	r3, r2, [r1]
 8002372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e3      	bne.n	8002342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002392:	e853 3f00 	ldrex	r3, [r3]
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800239a:	f023 0310 	bic.w	r3, r3, #16
 800239e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80023ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80023ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80023b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80023b4:	e841 2300 	strex	r3, r2, [r1]
 80023b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80023ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e3      	bne.n	8002388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fe4c 	bl	8001062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f8ad 	bl	8002540 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023e6:	e09b      	b.n	8002520 <HAL_UART_IRQHandler+0x518>
 80023e8:	08002745 	.word	0x08002745
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 808e 	beq.w	8002524 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8089 	beq.w	8002524 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002436:	647a      	str	r2, [r7, #68]	@ 0x44
 8002438:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800243c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1e3      	bne.n	8002412 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	623b      	str	r3, [r7, #32]
   return(result);
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3314      	adds	r3, #20
 800246a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800246e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e3      	bne.n	800244a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	60fb      	str	r3, [r7, #12]
   return(result);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80024b4:	61fa      	str	r2, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b8:	69b9      	ldr	r1, [r7, #24]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	e841 2300 	strex	r3, r2, [r1]
 80024c0:	617b      	str	r3, [r7, #20]
   return(result);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e3      	bne.n	8002490 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f833 	bl	8002540 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024da:	e023      	b.n	8002524 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_UART_IRQHandler+0x4f4>
 80024e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f939 	bl	800276c <UART_Transmit_IT>
    return;
 80024fa:	e014      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00e      	beq.n	8002526 <HAL_UART_IRQHandler+0x51e>
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800250c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f979 	bl	800280c <UART_EndTransmit_IT>
    return;
 800251a:	e004      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
    return;
 800251c:	bf00      	nop
 800251e:	e002      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
      return;
 8002520:	bf00      	nop
 8002522:	e000      	b.n	8002526 <HAL_UART_IRQHandler+0x51e>
      return;
 8002524:	bf00      	nop
  }
}
 8002526:	37e8      	adds	r7, #232	@ 0xe8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002568:	e03b      	b.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d037      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7fe fc35 	bl	8000de0 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	6a3a      	ldr	r2, [r7, #32]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <UART_WaitOnFlagUntilTimeout+0x30>
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e03a      	b.n	8002602 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d023      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b80      	cmp	r3, #128	@ 0x80
 800259e:	d020      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b40      	cmp	r3, #64	@ 0x40
 80025a4:	d01d      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d116      	bne.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f857 	bl	800267e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2208      	movs	r2, #8
 80025d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00f      	b.n	8002602 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d0b4      	beq.n	800256a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2222      	movs	r2, #34	@ 0x22
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800264e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800267e:	b480      	push	{r7}
 8002680:	b095      	sub	sp, #84	@ 0x54
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800269c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	330c      	adds	r3, #12
 80026a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80026a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026ae:	e841 2300 	strex	r3, r2, [r1]
 80026b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e5      	bne.n	8002686 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3314      	adds	r3, #20
 80026c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	e853 3f00 	ldrex	r3, [r3]
 80026c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3314      	adds	r3, #20
 80026d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e5      	bne.n	80026ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d119      	bne.n	800272a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	e853 3f00 	ldrex	r3, [r3]
 8002704:	60bb      	str	r3, [r7, #8]
   return(result);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f023 0310 	bic.w	r3, r3, #16
 800270c:	647b      	str	r3, [r7, #68]	@ 0x44
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002716:	61ba      	str	r2, [r7, #24]
 8002718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	613b      	str	r3, [r7, #16]
   return(result);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1e5      	bne.n	80026f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002738:	bf00      	nop
 800273a:	3754      	adds	r7, #84	@ 0x54
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff fee4 	bl	800252c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b21      	cmp	r3, #33	@ 0x21
 800277e:	d13e      	bne.n	80027fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002788:	d114      	bne.n	80027b4 <UART_Transmit_IT+0x48>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d110      	bne.n	80027b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	1c9a      	adds	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	621a      	str	r2, [r3, #32]
 80027b2:	e008      	b.n	80027c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	1c59      	adds	r1, r3, #1
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6211      	str	r1, [r2, #32]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4619      	mov	r1, r3
 80027d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002822:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7fe f83d 	bl	80008ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	@ 0x30
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b22      	cmp	r3, #34	@ 0x22
 800284e:	f040 80ae 	bne.w	80029ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800285a:	d117      	bne.n	800288c <UART_Receive_IT+0x50>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d113      	bne.n	800288c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287a:	b29a      	uxth	r2, r3
 800287c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	1c9a      	adds	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	629a      	str	r2, [r3, #40]	@ 0x28
 800288a:	e026      	b.n	80028da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289e:	d007      	beq.n	80028b0 <UART_Receive_IT+0x74>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <UART_Receive_IT+0x82>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e008      	b.n	80028d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4619      	mov	r1, r3
 80028e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d15d      	bne.n	80029aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0220 	bic.w	r2, r2, #32
 80028fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800290c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002930:	2b01      	cmp	r3, #1
 8002932:	d135      	bne.n	80029a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	613b      	str	r3, [r7, #16]
   return(result);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f023 0310 	bic.w	r3, r3, #16
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295a:	623a      	str	r2, [r7, #32]
 800295c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	69f9      	ldr	r1, [r7, #28]
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	61bb      	str	r3, [r7, #24]
   return(result);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	d10a      	bne.n	8002992 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fdd1 	bl	8002540 <HAL_UARTEx_RxEventCallback>
 800299e:	e002      	b.n	80029a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fd ff5b 	bl	800085c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e002      	b.n	80029b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3730      	adds	r7, #48	@ 0x30
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b0c0      	sub	sp, #256	@ 0x100
 80029be:	af00      	add	r7, sp, #0
 80029c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	ea40 0301 	orr.w	r3, r0, r1
 80029e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a10:	f021 010c 	bic.w	r1, r1, #12
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a32:	6999      	ldr	r1, [r3, #24]
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	ea40 0301 	orr.w	r3, r0, r1
 8002a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b8f      	ldr	r3, [pc, #572]	@ (8002c84 <UART_SetConfig+0x2cc>)
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d005      	beq.n	8002a58 <UART_SetConfig+0xa0>
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b8d      	ldr	r3, [pc, #564]	@ (8002c88 <UART_SetConfig+0x2d0>)
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d104      	bne.n	8002a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a58:	f7ff f9c2 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8002a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a60:	e003      	b.n	8002a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a62:	f7ff f9a9 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002a66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a74:	f040 810c 	bne.w	8002c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	1891      	adds	r1, r2, r2
 8002a90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a92:	415b      	adcs	r3, r3
 8002a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	eb12 0801 	adds.w	r8, r2, r1
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	eb43 0901 	adc.w	r9, r3, r1
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aba:	4690      	mov	r8, r2
 8002abc:	4699      	mov	r9, r3
 8002abe:	4623      	mov	r3, r4
 8002ac0:	eb18 0303 	adds.w	r3, r8, r3
 8002ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ac8:	462b      	mov	r3, r5
 8002aca:	eb49 0303 	adc.w	r3, r9, r3
 8002ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ade:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	18db      	adds	r3, r3, r3
 8002aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aec:	4613      	mov	r3, r2
 8002aee:	eb42 0303 	adc.w	r3, r2, r3
 8002af2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002afc:	f7fd fbc0 	bl	8000280 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4b61      	ldr	r3, [pc, #388]	@ (8002c8c <UART_SetConfig+0x2d4>)
 8002b06:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	011c      	lsls	r4, r3, #4
 8002b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b20:	4642      	mov	r2, r8
 8002b22:	464b      	mov	r3, r9
 8002b24:	1891      	adds	r1, r2, r2
 8002b26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b28:	415b      	adcs	r3, r3
 8002b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b30:	4641      	mov	r1, r8
 8002b32:	eb12 0a01 	adds.w	sl, r2, r1
 8002b36:	4649      	mov	r1, r9
 8002b38:	eb43 0b01 	adc.w	fp, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b50:	4692      	mov	sl, r2
 8002b52:	469b      	mov	fp, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	eb1a 0303 	adds.w	r3, sl, r3
 8002b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	eb4b 0303 	adc.w	r3, fp, r3
 8002b64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	18db      	adds	r3, r3, r3
 8002b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b82:	4613      	mov	r3, r2
 8002b84:	eb42 0303 	adc.w	r3, r2, r3
 8002b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b92:	f7fd fb75 	bl	8000280 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <UART_SetConfig+0x2d4>)
 8002b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2264      	movs	r2, #100	@ 0x64
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	1acb      	subs	r3, r1, r3
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bb2:	4b36      	ldr	r3, [pc, #216]	@ (8002c8c <UART_SetConfig+0x2d4>)
 8002bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002bc0:	441c      	add	r4, r3
 8002bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	1891      	adds	r1, r2, r2
 8002bda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bdc:	415b      	adcs	r3, r3
 8002bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002be4:	4641      	mov	r1, r8
 8002be6:	1851      	adds	r1, r2, r1
 8002be8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bea:	4649      	mov	r1, r9
 8002bec:	414b      	adcs	r3, r1
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	00cb      	lsls	r3, r1, #3
 8002c00:	4651      	mov	r1, sl
 8002c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c06:	4651      	mov	r1, sl
 8002c08:	00ca      	lsls	r2, r1, #3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4642      	mov	r2, r8
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c18:	464b      	mov	r3, r9
 8002c1a:	460a      	mov	r2, r1
 8002c1c:	eb42 0303 	adc.w	r3, r2, r3
 8002c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c38:	460b      	mov	r3, r1
 8002c3a:	18db      	adds	r3, r3, r3
 8002c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c3e:	4613      	mov	r3, r2
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c4e:	f7fd fb17 	bl	8000280 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <UART_SetConfig+0x2d4>)
 8002c58:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	2164      	movs	r1, #100	@ 0x64
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	3332      	adds	r3, #50	@ 0x32
 8002c6a:	4a08      	ldr	r2, [pc, #32]	@ (8002c8c <UART_SetConfig+0x2d4>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	f003 0207 	and.w	r2, r3, #7
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4422      	add	r2, r4
 8002c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c80:	e106      	b.n	8002e90 <UART_SetConfig+0x4d8>
 8002c82:	bf00      	nop
 8002c84:	40011000 	.word	0x40011000
 8002c88:	40011400 	.word	0x40011400
 8002c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	1891      	adds	r1, r2, r2
 8002ca8:	6239      	str	r1, [r7, #32]
 8002caa:	415b      	adcs	r3, r3
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	1854      	adds	r4, r2, r1
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	eb43 0501 	adc.w	r5, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	00eb      	lsls	r3, r5, #3
 8002cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cca:	00e2      	lsls	r2, r4, #3
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	18e3      	adds	r3, r4, r3
 8002cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cd8:	464b      	mov	r3, r9
 8002cda:	eb45 0303 	adc.w	r3, r5, r3
 8002cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cfe:	4629      	mov	r1, r5
 8002d00:	008b      	lsls	r3, r1, #2
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d08:	4621      	mov	r1, r4
 8002d0a:	008a      	lsls	r2, r1, #2
 8002d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d10:	f7fd fab6 	bl	8000280 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4b60      	ldr	r3, [pc, #384]	@ (8002e9c <UART_SetConfig+0x4e4>)
 8002d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	011c      	lsls	r4, r3, #4
 8002d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	61b9      	str	r1, [r7, #24]
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d44:	4641      	mov	r1, r8
 8002d46:	1851      	adds	r1, r2, r1
 8002d48:	6139      	str	r1, [r7, #16]
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	414b      	adcs	r3, r1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	00cb      	lsls	r3, r1, #3
 8002d60:	4651      	mov	r1, sl
 8002d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d66:	4651      	mov	r1, sl
 8002d68:	00ca      	lsls	r2, r1, #3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4642      	mov	r2, r8
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d78:	464b      	mov	r3, r9
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	008b      	lsls	r3, r1, #2
 8002da0:	4641      	mov	r1, r8
 8002da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da6:	4641      	mov	r1, r8
 8002da8:	008a      	lsls	r2, r1, #2
 8002daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002dae:	f7fd fa67 	bl	8000280 <__aeabi_uldivmod>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	4b38      	ldr	r3, [pc, #224]	@ (8002e9c <UART_SetConfig+0x4e4>)
 8002dba:	fba3 2301 	umull	r2, r3, r3, r1
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2264      	movs	r2, #100	@ 0x64
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	1acb      	subs	r3, r1, r3
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	3332      	adds	r3, #50	@ 0x32
 8002dcc:	4a33      	ldr	r2, [pc, #204]	@ (8002e9c <UART_SetConfig+0x4e4>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd8:	441c      	add	r4, r3
 8002dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dde:	2200      	movs	r2, #0
 8002de0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002de2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002de4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	415b      	adcs	r3, r3
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df8:	4641      	mov	r1, r8
 8002dfa:	1851      	adds	r1, r2, r1
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	4649      	mov	r1, r9
 8002e00:	414b      	adcs	r3, r1
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e10:	4659      	mov	r1, fp
 8002e12:	00cb      	lsls	r3, r1, #3
 8002e14:	4651      	mov	r1, sl
 8002e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	00ca      	lsls	r2, r1, #3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4642      	mov	r2, r8
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	eb42 0303 	adc.w	r3, r2, r3
 8002e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	008b      	lsls	r3, r1, #2
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e56:	4641      	mov	r1, r8
 8002e58:	008a      	lsls	r2, r1, #2
 8002e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e5e:	f7fd fa0f 	bl	8000280 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <UART_SetConfig+0x4e4>)
 8002e68:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	2164      	movs	r1, #100	@ 0x64
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	3332      	adds	r3, #50	@ 0x32
 8002e7a:	4a08      	ldr	r2, [pc, #32]	@ (8002e9c <UART_SetConfig+0x4e4>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4422      	add	r2, r4
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e96:	46bd      	mov	sp, r7
 8002e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9c:	51eb851f 	.word	0x51eb851f

08002ea0 <std>:
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	b510      	push	{r4, lr}
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8002eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eae:	6083      	str	r3, [r0, #8]
 8002eb0:	8181      	strh	r1, [r0, #12]
 8002eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002eb4:	81c2      	strh	r2, [r0, #14]
 8002eb6:	6183      	str	r3, [r0, #24]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	2208      	movs	r2, #8
 8002ebc:	305c      	adds	r0, #92	@ 0x5c
 8002ebe:	f000 f906 	bl	80030ce <memset>
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <std+0x58>)
 8002ec4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <std+0x5c>)
 8002ec8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002eca:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <std+0x60>)
 8002ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <std+0x64>)
 8002ed0:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <std+0x68>)
 8002ed4:	6224      	str	r4, [r4, #32]
 8002ed6:	429c      	cmp	r4, r3
 8002ed8:	d006      	beq.n	8002ee8 <std+0x48>
 8002eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ede:	4294      	cmp	r4, r2
 8002ee0:	d002      	beq.n	8002ee8 <std+0x48>
 8002ee2:	33d0      	adds	r3, #208	@ 0xd0
 8002ee4:	429c      	cmp	r4, r3
 8002ee6:	d105      	bne.n	8002ef4 <std+0x54>
 8002ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef0:	f000 b97c 	b.w	80031ec <__retarget_lock_init_recursive>
 8002ef4:	bd10      	pop	{r4, pc}
 8002ef6:	bf00      	nop
 8002ef8:	08003049 	.word	0x08003049
 8002efc:	0800306b 	.word	0x0800306b
 8002f00:	080030a3 	.word	0x080030a3
 8002f04:	080030c7 	.word	0x080030c7
 8002f08:	2000018c 	.word	0x2000018c

08002f0c <stdio_exit_handler>:
 8002f0c:	4a02      	ldr	r2, [pc, #8]	@ (8002f18 <stdio_exit_handler+0xc>)
 8002f0e:	4903      	ldr	r1, [pc, #12]	@ (8002f1c <stdio_exit_handler+0x10>)
 8002f10:	4803      	ldr	r0, [pc, #12]	@ (8002f20 <stdio_exit_handler+0x14>)
 8002f12:	f000 b869 	b.w	8002fe8 <_fwalk_sglue>
 8002f16:	bf00      	nop
 8002f18:	20000010 	.word	0x20000010
 8002f1c:	08003a8d 	.word	0x08003a8d
 8002f20:	20000020 	.word	0x20000020

08002f24 <cleanup_stdio>:
 8002f24:	6841      	ldr	r1, [r0, #4]
 8002f26:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <cleanup_stdio+0x34>)
 8002f28:	4299      	cmp	r1, r3
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	d001      	beq.n	8002f34 <cleanup_stdio+0x10>
 8002f30:	f000 fdac 	bl	8003a8c <_fflush_r>
 8002f34:	68a1      	ldr	r1, [r4, #8]
 8002f36:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <cleanup_stdio+0x38>)
 8002f38:	4299      	cmp	r1, r3
 8002f3a:	d002      	beq.n	8002f42 <cleanup_stdio+0x1e>
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f000 fda5 	bl	8003a8c <_fflush_r>
 8002f42:	68e1      	ldr	r1, [r4, #12]
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <cleanup_stdio+0x3c>)
 8002f46:	4299      	cmp	r1, r3
 8002f48:	d004      	beq.n	8002f54 <cleanup_stdio+0x30>
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	f000 bd9c 	b.w	8003a8c <_fflush_r>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	bf00      	nop
 8002f58:	2000018c 	.word	0x2000018c
 8002f5c:	200001f4 	.word	0x200001f4
 8002f60:	2000025c 	.word	0x2000025c

08002f64 <global_stdio_init.part.0>:
 8002f64:	b510      	push	{r4, lr}
 8002f66:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <global_stdio_init.part.0+0x30>)
 8002f68:	4c0b      	ldr	r4, [pc, #44]	@ (8002f98 <global_stdio_init.part.0+0x34>)
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f9c <global_stdio_init.part.0+0x38>)
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	4620      	mov	r0, r4
 8002f70:	2200      	movs	r2, #0
 8002f72:	2104      	movs	r1, #4
 8002f74:	f7ff ff94 	bl	8002ea0 <std>
 8002f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2109      	movs	r1, #9
 8002f80:	f7ff ff8e 	bl	8002ea0 <std>
 8002f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f88:	2202      	movs	r2, #2
 8002f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f8e:	2112      	movs	r1, #18
 8002f90:	f7ff bf86 	b.w	8002ea0 <std>
 8002f94:	200002c4 	.word	0x200002c4
 8002f98:	2000018c 	.word	0x2000018c
 8002f9c:	08002f0d 	.word	0x08002f0d

08002fa0 <__sfp_lock_acquire>:
 8002fa0:	4801      	ldr	r0, [pc, #4]	@ (8002fa8 <__sfp_lock_acquire+0x8>)
 8002fa2:	f000 b924 	b.w	80031ee <__retarget_lock_acquire_recursive>
 8002fa6:	bf00      	nop
 8002fa8:	200002cd 	.word	0x200002cd

08002fac <__sfp_lock_release>:
 8002fac:	4801      	ldr	r0, [pc, #4]	@ (8002fb4 <__sfp_lock_release+0x8>)
 8002fae:	f000 b91f 	b.w	80031f0 <__retarget_lock_release_recursive>
 8002fb2:	bf00      	nop
 8002fb4:	200002cd 	.word	0x200002cd

08002fb8 <__sinit>:
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	4604      	mov	r4, r0
 8002fbc:	f7ff fff0 	bl	8002fa0 <__sfp_lock_acquire>
 8002fc0:	6a23      	ldr	r3, [r4, #32]
 8002fc2:	b11b      	cbz	r3, 8002fcc <__sinit+0x14>
 8002fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc8:	f7ff bff0 	b.w	8002fac <__sfp_lock_release>
 8002fcc:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <__sinit+0x28>)
 8002fce:	6223      	str	r3, [r4, #32]
 8002fd0:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <__sinit+0x2c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f5      	bne.n	8002fc4 <__sinit+0xc>
 8002fd8:	f7ff ffc4 	bl	8002f64 <global_stdio_init.part.0>
 8002fdc:	e7f2      	b.n	8002fc4 <__sinit+0xc>
 8002fde:	bf00      	nop
 8002fe0:	08002f25 	.word	0x08002f25
 8002fe4:	200002c4 	.word	0x200002c4

08002fe8 <_fwalk_sglue>:
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fec:	4607      	mov	r7, r0
 8002fee:	4688      	mov	r8, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8002ffc:	d505      	bpl.n	800300a <_fwalk_sglue+0x22>
 8002ffe:	6824      	ldr	r4, [r4, #0]
 8003000:	2c00      	cmp	r4, #0
 8003002:	d1f7      	bne.n	8002ff4 <_fwalk_sglue+0xc>
 8003004:	4630      	mov	r0, r6
 8003006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800300a:	89ab      	ldrh	r3, [r5, #12]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d907      	bls.n	8003020 <_fwalk_sglue+0x38>
 8003010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003014:	3301      	adds	r3, #1
 8003016:	d003      	beq.n	8003020 <_fwalk_sglue+0x38>
 8003018:	4629      	mov	r1, r5
 800301a:	4638      	mov	r0, r7
 800301c:	47c0      	blx	r8
 800301e:	4306      	orrs	r6, r0
 8003020:	3568      	adds	r5, #104	@ 0x68
 8003022:	e7e9      	b.n	8002ff8 <_fwalk_sglue+0x10>

08003024 <iprintf>:
 8003024:	b40f      	push	{r0, r1, r2, r3}
 8003026:	b507      	push	{r0, r1, r2, lr}
 8003028:	4906      	ldr	r1, [pc, #24]	@ (8003044 <iprintf+0x20>)
 800302a:	ab04      	add	r3, sp, #16
 800302c:	6808      	ldr	r0, [r1, #0]
 800302e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003032:	6881      	ldr	r1, [r0, #8]
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	f000 f9ff 	bl	8003438 <_vfiprintf_r>
 800303a:	b003      	add	sp, #12
 800303c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003040:	b004      	add	sp, #16
 8003042:	4770      	bx	lr
 8003044:	2000001c 	.word	0x2000001c

08003048 <__sread>:
 8003048:	b510      	push	{r4, lr}
 800304a:	460c      	mov	r4, r1
 800304c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003050:	f000 f87e 	bl	8003150 <_read_r>
 8003054:	2800      	cmp	r0, #0
 8003056:	bfab      	itete	ge
 8003058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800305a:	89a3      	ldrhlt	r3, [r4, #12]
 800305c:	181b      	addge	r3, r3, r0
 800305e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003062:	bfac      	ite	ge
 8003064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003066:	81a3      	strhlt	r3, [r4, #12]
 8003068:	bd10      	pop	{r4, pc}

0800306a <__swrite>:
 800306a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800306e:	461f      	mov	r7, r3
 8003070:	898b      	ldrh	r3, [r1, #12]
 8003072:	05db      	lsls	r3, r3, #23
 8003074:	4605      	mov	r5, r0
 8003076:	460c      	mov	r4, r1
 8003078:	4616      	mov	r6, r2
 800307a:	d505      	bpl.n	8003088 <__swrite+0x1e>
 800307c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003080:	2302      	movs	r3, #2
 8003082:	2200      	movs	r2, #0
 8003084:	f000 f852 	bl	800312c <_lseek_r>
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800308e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003092:	81a3      	strh	r3, [r4, #12]
 8003094:	4632      	mov	r2, r6
 8003096:	463b      	mov	r3, r7
 8003098:	4628      	mov	r0, r5
 800309a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800309e:	f000 b869 	b.w	8003174 <_write_r>

080030a2 <__sseek>:
 80030a2:	b510      	push	{r4, lr}
 80030a4:	460c      	mov	r4, r1
 80030a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030aa:	f000 f83f 	bl	800312c <_lseek_r>
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	89a3      	ldrh	r3, [r4, #12]
 80030b2:	bf15      	itete	ne
 80030b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80030b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80030ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80030be:	81a3      	strheq	r3, [r4, #12]
 80030c0:	bf18      	it	ne
 80030c2:	81a3      	strhne	r3, [r4, #12]
 80030c4:	bd10      	pop	{r4, pc}

080030c6 <__sclose>:
 80030c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ca:	f000 b81f 	b.w	800310c <_close_r>

080030ce <memset>:
 80030ce:	4402      	add	r2, r0
 80030d0:	4603      	mov	r3, r0
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d100      	bne.n	80030d8 <memset+0xa>
 80030d6:	4770      	bx	lr
 80030d8:	f803 1b01 	strb.w	r1, [r3], #1
 80030dc:	e7f9      	b.n	80030d2 <memset+0x4>

080030de <strstr>:
 80030de:	780a      	ldrb	r2, [r1, #0]
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	b96a      	cbnz	r2, 8003100 <strstr+0x22>
 80030e4:	bd70      	pop	{r4, r5, r6, pc}
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d109      	bne.n	80030fe <strstr+0x20>
 80030ea:	460c      	mov	r4, r1
 80030ec:	4605      	mov	r5, r0
 80030ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f6      	beq.n	80030e4 <strstr+0x6>
 80030f6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80030fa:	429e      	cmp	r6, r3
 80030fc:	d0f7      	beq.n	80030ee <strstr+0x10>
 80030fe:	3001      	adds	r0, #1
 8003100:	7803      	ldrb	r3, [r0, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ef      	bne.n	80030e6 <strstr+0x8>
 8003106:	4618      	mov	r0, r3
 8003108:	e7ec      	b.n	80030e4 <strstr+0x6>
	...

0800310c <_close_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4d06      	ldr	r5, [pc, #24]	@ (8003128 <_close_r+0x1c>)
 8003110:	2300      	movs	r3, #0
 8003112:	4604      	mov	r4, r0
 8003114:	4608      	mov	r0, r1
 8003116:	602b      	str	r3, [r5, #0]
 8003118:	f7fd fd56 	bl	8000bc8 <_close>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d102      	bne.n	8003126 <_close_r+0x1a>
 8003120:	682b      	ldr	r3, [r5, #0]
 8003122:	b103      	cbz	r3, 8003126 <_close_r+0x1a>
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	bd38      	pop	{r3, r4, r5, pc}
 8003128:	200002c8 	.word	0x200002c8

0800312c <_lseek_r>:
 800312c:	b538      	push	{r3, r4, r5, lr}
 800312e:	4d07      	ldr	r5, [pc, #28]	@ (800314c <_lseek_r+0x20>)
 8003130:	4604      	mov	r4, r0
 8003132:	4608      	mov	r0, r1
 8003134:	4611      	mov	r1, r2
 8003136:	2200      	movs	r2, #0
 8003138:	602a      	str	r2, [r5, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	f7fd fd6b 	bl	8000c16 <_lseek>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d102      	bne.n	800314a <_lseek_r+0x1e>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b103      	cbz	r3, 800314a <_lseek_r+0x1e>
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	200002c8 	.word	0x200002c8

08003150 <_read_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d07      	ldr	r5, [pc, #28]	@ (8003170 <_read_r+0x20>)
 8003154:	4604      	mov	r4, r0
 8003156:	4608      	mov	r0, r1
 8003158:	4611      	mov	r1, r2
 800315a:	2200      	movs	r2, #0
 800315c:	602a      	str	r2, [r5, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	f7fd fcf9 	bl	8000b56 <_read>
 8003164:	1c43      	adds	r3, r0, #1
 8003166:	d102      	bne.n	800316e <_read_r+0x1e>
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	b103      	cbz	r3, 800316e <_read_r+0x1e>
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	bd38      	pop	{r3, r4, r5, pc}
 8003170:	200002c8 	.word	0x200002c8

08003174 <_write_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4d07      	ldr	r5, [pc, #28]	@ (8003194 <_write_r+0x20>)
 8003178:	4604      	mov	r4, r0
 800317a:	4608      	mov	r0, r1
 800317c:	4611      	mov	r1, r2
 800317e:	2200      	movs	r2, #0
 8003180:	602a      	str	r2, [r5, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	f7fd fd04 	bl	8000b90 <_write>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_write_r+0x1e>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	b103      	cbz	r3, 8003192 <_write_r+0x1e>
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	200002c8 	.word	0x200002c8

08003198 <__errno>:
 8003198:	4b01      	ldr	r3, [pc, #4]	@ (80031a0 <__errno+0x8>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	2000001c 	.word	0x2000001c

080031a4 <__libc_init_array>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	4d0d      	ldr	r5, [pc, #52]	@ (80031dc <__libc_init_array+0x38>)
 80031a8:	4c0d      	ldr	r4, [pc, #52]	@ (80031e0 <__libc_init_array+0x3c>)
 80031aa:	1b64      	subs	r4, r4, r5
 80031ac:	10a4      	asrs	r4, r4, #2
 80031ae:	2600      	movs	r6, #0
 80031b0:	42a6      	cmp	r6, r4
 80031b2:	d109      	bne.n	80031c8 <__libc_init_array+0x24>
 80031b4:	4d0b      	ldr	r5, [pc, #44]	@ (80031e4 <__libc_init_array+0x40>)
 80031b6:	4c0c      	ldr	r4, [pc, #48]	@ (80031e8 <__libc_init_array+0x44>)
 80031b8:	f000 fdb8 	bl	8003d2c <_init>
 80031bc:	1b64      	subs	r4, r4, r5
 80031be:	10a4      	asrs	r4, r4, #2
 80031c0:	2600      	movs	r6, #0
 80031c2:	42a6      	cmp	r6, r4
 80031c4:	d105      	bne.n	80031d2 <__libc_init_array+0x2e>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031cc:	4798      	blx	r3
 80031ce:	3601      	adds	r6, #1
 80031d0:	e7ee      	b.n	80031b0 <__libc_init_array+0xc>
 80031d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d6:	4798      	blx	r3
 80031d8:	3601      	adds	r6, #1
 80031da:	e7f2      	b.n	80031c2 <__libc_init_array+0x1e>
 80031dc:	08003dcc 	.word	0x08003dcc
 80031e0:	08003dcc 	.word	0x08003dcc
 80031e4:	08003dcc 	.word	0x08003dcc
 80031e8:	08003dd0 	.word	0x08003dd0

080031ec <__retarget_lock_init_recursive>:
 80031ec:	4770      	bx	lr

080031ee <__retarget_lock_acquire_recursive>:
 80031ee:	4770      	bx	lr

080031f0 <__retarget_lock_release_recursive>:
 80031f0:	4770      	bx	lr
	...

080031f4 <_free_r>:
 80031f4:	b538      	push	{r3, r4, r5, lr}
 80031f6:	4605      	mov	r5, r0
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d041      	beq.n	8003280 <_free_r+0x8c>
 80031fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003200:	1f0c      	subs	r4, r1, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	bfb8      	it	lt
 8003206:	18e4      	addlt	r4, r4, r3
 8003208:	f000 f8e0 	bl	80033cc <__malloc_lock>
 800320c:	4a1d      	ldr	r2, [pc, #116]	@ (8003284 <_free_r+0x90>)
 800320e:	6813      	ldr	r3, [r2, #0]
 8003210:	b933      	cbnz	r3, 8003220 <_free_r+0x2c>
 8003212:	6063      	str	r3, [r4, #4]
 8003214:	6014      	str	r4, [r2, #0]
 8003216:	4628      	mov	r0, r5
 8003218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800321c:	f000 b8dc 	b.w	80033d8 <__malloc_unlock>
 8003220:	42a3      	cmp	r3, r4
 8003222:	d908      	bls.n	8003236 <_free_r+0x42>
 8003224:	6820      	ldr	r0, [r4, #0]
 8003226:	1821      	adds	r1, r4, r0
 8003228:	428b      	cmp	r3, r1
 800322a:	bf01      	itttt	eq
 800322c:	6819      	ldreq	r1, [r3, #0]
 800322e:	685b      	ldreq	r3, [r3, #4]
 8003230:	1809      	addeq	r1, r1, r0
 8003232:	6021      	streq	r1, [r4, #0]
 8003234:	e7ed      	b.n	8003212 <_free_r+0x1e>
 8003236:	461a      	mov	r2, r3
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	b10b      	cbz	r3, 8003240 <_free_r+0x4c>
 800323c:	42a3      	cmp	r3, r4
 800323e:	d9fa      	bls.n	8003236 <_free_r+0x42>
 8003240:	6811      	ldr	r1, [r2, #0]
 8003242:	1850      	adds	r0, r2, r1
 8003244:	42a0      	cmp	r0, r4
 8003246:	d10b      	bne.n	8003260 <_free_r+0x6c>
 8003248:	6820      	ldr	r0, [r4, #0]
 800324a:	4401      	add	r1, r0
 800324c:	1850      	adds	r0, r2, r1
 800324e:	4283      	cmp	r3, r0
 8003250:	6011      	str	r1, [r2, #0]
 8003252:	d1e0      	bne.n	8003216 <_free_r+0x22>
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	6053      	str	r3, [r2, #4]
 800325a:	4408      	add	r0, r1
 800325c:	6010      	str	r0, [r2, #0]
 800325e:	e7da      	b.n	8003216 <_free_r+0x22>
 8003260:	d902      	bls.n	8003268 <_free_r+0x74>
 8003262:	230c      	movs	r3, #12
 8003264:	602b      	str	r3, [r5, #0]
 8003266:	e7d6      	b.n	8003216 <_free_r+0x22>
 8003268:	6820      	ldr	r0, [r4, #0]
 800326a:	1821      	adds	r1, r4, r0
 800326c:	428b      	cmp	r3, r1
 800326e:	bf04      	itt	eq
 8003270:	6819      	ldreq	r1, [r3, #0]
 8003272:	685b      	ldreq	r3, [r3, #4]
 8003274:	6063      	str	r3, [r4, #4]
 8003276:	bf04      	itt	eq
 8003278:	1809      	addeq	r1, r1, r0
 800327a:	6021      	streq	r1, [r4, #0]
 800327c:	6054      	str	r4, [r2, #4]
 800327e:	e7ca      	b.n	8003216 <_free_r+0x22>
 8003280:	bd38      	pop	{r3, r4, r5, pc}
 8003282:	bf00      	nop
 8003284:	200002d4 	.word	0x200002d4

08003288 <sbrk_aligned>:
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	4e0f      	ldr	r6, [pc, #60]	@ (80032c8 <sbrk_aligned+0x40>)
 800328c:	460c      	mov	r4, r1
 800328e:	6831      	ldr	r1, [r6, #0]
 8003290:	4605      	mov	r5, r0
 8003292:	b911      	cbnz	r1, 800329a <sbrk_aligned+0x12>
 8003294:	f000 fcb6 	bl	8003c04 <_sbrk_r>
 8003298:	6030      	str	r0, [r6, #0]
 800329a:	4621      	mov	r1, r4
 800329c:	4628      	mov	r0, r5
 800329e:	f000 fcb1 	bl	8003c04 <_sbrk_r>
 80032a2:	1c43      	adds	r3, r0, #1
 80032a4:	d103      	bne.n	80032ae <sbrk_aligned+0x26>
 80032a6:	f04f 34ff 	mov.w	r4, #4294967295
 80032aa:	4620      	mov	r0, r4
 80032ac:	bd70      	pop	{r4, r5, r6, pc}
 80032ae:	1cc4      	adds	r4, r0, #3
 80032b0:	f024 0403 	bic.w	r4, r4, #3
 80032b4:	42a0      	cmp	r0, r4
 80032b6:	d0f8      	beq.n	80032aa <sbrk_aligned+0x22>
 80032b8:	1a21      	subs	r1, r4, r0
 80032ba:	4628      	mov	r0, r5
 80032bc:	f000 fca2 	bl	8003c04 <_sbrk_r>
 80032c0:	3001      	adds	r0, #1
 80032c2:	d1f2      	bne.n	80032aa <sbrk_aligned+0x22>
 80032c4:	e7ef      	b.n	80032a6 <sbrk_aligned+0x1e>
 80032c6:	bf00      	nop
 80032c8:	200002d0 	.word	0x200002d0

080032cc <_malloc_r>:
 80032cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d0:	1ccd      	adds	r5, r1, #3
 80032d2:	f025 0503 	bic.w	r5, r5, #3
 80032d6:	3508      	adds	r5, #8
 80032d8:	2d0c      	cmp	r5, #12
 80032da:	bf38      	it	cc
 80032dc:	250c      	movcc	r5, #12
 80032de:	2d00      	cmp	r5, #0
 80032e0:	4606      	mov	r6, r0
 80032e2:	db01      	blt.n	80032e8 <_malloc_r+0x1c>
 80032e4:	42a9      	cmp	r1, r5
 80032e6:	d904      	bls.n	80032f2 <_malloc_r+0x26>
 80032e8:	230c      	movs	r3, #12
 80032ea:	6033      	str	r3, [r6, #0]
 80032ec:	2000      	movs	r0, #0
 80032ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033c8 <_malloc_r+0xfc>
 80032f6:	f000 f869 	bl	80033cc <__malloc_lock>
 80032fa:	f8d8 3000 	ldr.w	r3, [r8]
 80032fe:	461c      	mov	r4, r3
 8003300:	bb44      	cbnz	r4, 8003354 <_malloc_r+0x88>
 8003302:	4629      	mov	r1, r5
 8003304:	4630      	mov	r0, r6
 8003306:	f7ff ffbf 	bl	8003288 <sbrk_aligned>
 800330a:	1c43      	adds	r3, r0, #1
 800330c:	4604      	mov	r4, r0
 800330e:	d158      	bne.n	80033c2 <_malloc_r+0xf6>
 8003310:	f8d8 4000 	ldr.w	r4, [r8]
 8003314:	4627      	mov	r7, r4
 8003316:	2f00      	cmp	r7, #0
 8003318:	d143      	bne.n	80033a2 <_malloc_r+0xd6>
 800331a:	2c00      	cmp	r4, #0
 800331c:	d04b      	beq.n	80033b6 <_malloc_r+0xea>
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	4639      	mov	r1, r7
 8003322:	4630      	mov	r0, r6
 8003324:	eb04 0903 	add.w	r9, r4, r3
 8003328:	f000 fc6c 	bl	8003c04 <_sbrk_r>
 800332c:	4581      	cmp	r9, r0
 800332e:	d142      	bne.n	80033b6 <_malloc_r+0xea>
 8003330:	6821      	ldr	r1, [r4, #0]
 8003332:	1a6d      	subs	r5, r5, r1
 8003334:	4629      	mov	r1, r5
 8003336:	4630      	mov	r0, r6
 8003338:	f7ff ffa6 	bl	8003288 <sbrk_aligned>
 800333c:	3001      	adds	r0, #1
 800333e:	d03a      	beq.n	80033b6 <_malloc_r+0xea>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	442b      	add	r3, r5
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	f8d8 3000 	ldr.w	r3, [r8]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	bb62      	cbnz	r2, 80033a8 <_malloc_r+0xdc>
 800334e:	f8c8 7000 	str.w	r7, [r8]
 8003352:	e00f      	b.n	8003374 <_malloc_r+0xa8>
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	1b52      	subs	r2, r2, r5
 8003358:	d420      	bmi.n	800339c <_malloc_r+0xd0>
 800335a:	2a0b      	cmp	r2, #11
 800335c:	d917      	bls.n	800338e <_malloc_r+0xc2>
 800335e:	1961      	adds	r1, r4, r5
 8003360:	42a3      	cmp	r3, r4
 8003362:	6025      	str	r5, [r4, #0]
 8003364:	bf18      	it	ne
 8003366:	6059      	strne	r1, [r3, #4]
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	bf08      	it	eq
 800336c:	f8c8 1000 	streq.w	r1, [r8]
 8003370:	5162      	str	r2, [r4, r5]
 8003372:	604b      	str	r3, [r1, #4]
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f82f 	bl	80033d8 <__malloc_unlock>
 800337a:	f104 000b 	add.w	r0, r4, #11
 800337e:	1d23      	adds	r3, r4, #4
 8003380:	f020 0007 	bic.w	r0, r0, #7
 8003384:	1ac2      	subs	r2, r0, r3
 8003386:	bf1c      	itt	ne
 8003388:	1a1b      	subne	r3, r3, r0
 800338a:	50a3      	strne	r3, [r4, r2]
 800338c:	e7af      	b.n	80032ee <_malloc_r+0x22>
 800338e:	6862      	ldr	r2, [r4, #4]
 8003390:	42a3      	cmp	r3, r4
 8003392:	bf0c      	ite	eq
 8003394:	f8c8 2000 	streq.w	r2, [r8]
 8003398:	605a      	strne	r2, [r3, #4]
 800339a:	e7eb      	b.n	8003374 <_malloc_r+0xa8>
 800339c:	4623      	mov	r3, r4
 800339e:	6864      	ldr	r4, [r4, #4]
 80033a0:	e7ae      	b.n	8003300 <_malloc_r+0x34>
 80033a2:	463c      	mov	r4, r7
 80033a4:	687f      	ldr	r7, [r7, #4]
 80033a6:	e7b6      	b.n	8003316 <_malloc_r+0x4a>
 80033a8:	461a      	mov	r2, r3
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d1fb      	bne.n	80033a8 <_malloc_r+0xdc>
 80033b0:	2300      	movs	r3, #0
 80033b2:	6053      	str	r3, [r2, #4]
 80033b4:	e7de      	b.n	8003374 <_malloc_r+0xa8>
 80033b6:	230c      	movs	r3, #12
 80033b8:	6033      	str	r3, [r6, #0]
 80033ba:	4630      	mov	r0, r6
 80033bc:	f000 f80c 	bl	80033d8 <__malloc_unlock>
 80033c0:	e794      	b.n	80032ec <_malloc_r+0x20>
 80033c2:	6005      	str	r5, [r0, #0]
 80033c4:	e7d6      	b.n	8003374 <_malloc_r+0xa8>
 80033c6:	bf00      	nop
 80033c8:	200002d4 	.word	0x200002d4

080033cc <__malloc_lock>:
 80033cc:	4801      	ldr	r0, [pc, #4]	@ (80033d4 <__malloc_lock+0x8>)
 80033ce:	f7ff bf0e 	b.w	80031ee <__retarget_lock_acquire_recursive>
 80033d2:	bf00      	nop
 80033d4:	200002cc 	.word	0x200002cc

080033d8 <__malloc_unlock>:
 80033d8:	4801      	ldr	r0, [pc, #4]	@ (80033e0 <__malloc_unlock+0x8>)
 80033da:	f7ff bf09 	b.w	80031f0 <__retarget_lock_release_recursive>
 80033de:	bf00      	nop
 80033e0:	200002cc 	.word	0x200002cc

080033e4 <__sfputc_r>:
 80033e4:	6893      	ldr	r3, [r2, #8]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	b410      	push	{r4}
 80033ec:	6093      	str	r3, [r2, #8]
 80033ee:	da08      	bge.n	8003402 <__sfputc_r+0x1e>
 80033f0:	6994      	ldr	r4, [r2, #24]
 80033f2:	42a3      	cmp	r3, r4
 80033f4:	db01      	blt.n	80033fa <__sfputc_r+0x16>
 80033f6:	290a      	cmp	r1, #10
 80033f8:	d103      	bne.n	8003402 <__sfputc_r+0x1e>
 80033fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033fe:	f000 bb6d 	b.w	8003adc <__swbuf_r>
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	1c58      	adds	r0, r3, #1
 8003406:	6010      	str	r0, [r2, #0]
 8003408:	7019      	strb	r1, [r3, #0]
 800340a:	4608      	mov	r0, r1
 800340c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003410:	4770      	bx	lr

08003412 <__sfputs_r>:
 8003412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003414:	4606      	mov	r6, r0
 8003416:	460f      	mov	r7, r1
 8003418:	4614      	mov	r4, r2
 800341a:	18d5      	adds	r5, r2, r3
 800341c:	42ac      	cmp	r4, r5
 800341e:	d101      	bne.n	8003424 <__sfputs_r+0x12>
 8003420:	2000      	movs	r0, #0
 8003422:	e007      	b.n	8003434 <__sfputs_r+0x22>
 8003424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003428:	463a      	mov	r2, r7
 800342a:	4630      	mov	r0, r6
 800342c:	f7ff ffda 	bl	80033e4 <__sfputc_r>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d1f3      	bne.n	800341c <__sfputs_r+0xa>
 8003434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003438 <_vfiprintf_r>:
 8003438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800343c:	460d      	mov	r5, r1
 800343e:	b09d      	sub	sp, #116	@ 0x74
 8003440:	4614      	mov	r4, r2
 8003442:	4698      	mov	r8, r3
 8003444:	4606      	mov	r6, r0
 8003446:	b118      	cbz	r0, 8003450 <_vfiprintf_r+0x18>
 8003448:	6a03      	ldr	r3, [r0, #32]
 800344a:	b90b      	cbnz	r3, 8003450 <_vfiprintf_r+0x18>
 800344c:	f7ff fdb4 	bl	8002fb8 <__sinit>
 8003450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003452:	07d9      	lsls	r1, r3, #31
 8003454:	d405      	bmi.n	8003462 <_vfiprintf_r+0x2a>
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	059a      	lsls	r2, r3, #22
 800345a:	d402      	bmi.n	8003462 <_vfiprintf_r+0x2a>
 800345c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800345e:	f7ff fec6 	bl	80031ee <__retarget_lock_acquire_recursive>
 8003462:	89ab      	ldrh	r3, [r5, #12]
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	d501      	bpl.n	800346c <_vfiprintf_r+0x34>
 8003468:	692b      	ldr	r3, [r5, #16]
 800346a:	b99b      	cbnz	r3, 8003494 <_vfiprintf_r+0x5c>
 800346c:	4629      	mov	r1, r5
 800346e:	4630      	mov	r0, r6
 8003470:	f000 fb72 	bl	8003b58 <__swsetup_r>
 8003474:	b170      	cbz	r0, 8003494 <_vfiprintf_r+0x5c>
 8003476:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003478:	07dc      	lsls	r4, r3, #31
 800347a:	d504      	bpl.n	8003486 <_vfiprintf_r+0x4e>
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	b01d      	add	sp, #116	@ 0x74
 8003482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003486:	89ab      	ldrh	r3, [r5, #12]
 8003488:	0598      	lsls	r0, r3, #22
 800348a:	d4f7      	bmi.n	800347c <_vfiprintf_r+0x44>
 800348c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800348e:	f7ff feaf 	bl	80031f0 <__retarget_lock_release_recursive>
 8003492:	e7f3      	b.n	800347c <_vfiprintf_r+0x44>
 8003494:	2300      	movs	r3, #0
 8003496:	9309      	str	r3, [sp, #36]	@ 0x24
 8003498:	2320      	movs	r3, #32
 800349a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800349e:	f8cd 800c 	str.w	r8, [sp, #12]
 80034a2:	2330      	movs	r3, #48	@ 0x30
 80034a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003654 <_vfiprintf_r+0x21c>
 80034a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034ac:	f04f 0901 	mov.w	r9, #1
 80034b0:	4623      	mov	r3, r4
 80034b2:	469a      	mov	sl, r3
 80034b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034b8:	b10a      	cbz	r2, 80034be <_vfiprintf_r+0x86>
 80034ba:	2a25      	cmp	r2, #37	@ 0x25
 80034bc:	d1f9      	bne.n	80034b2 <_vfiprintf_r+0x7a>
 80034be:	ebba 0b04 	subs.w	fp, sl, r4
 80034c2:	d00b      	beq.n	80034dc <_vfiprintf_r+0xa4>
 80034c4:	465b      	mov	r3, fp
 80034c6:	4622      	mov	r2, r4
 80034c8:	4629      	mov	r1, r5
 80034ca:	4630      	mov	r0, r6
 80034cc:	f7ff ffa1 	bl	8003412 <__sfputs_r>
 80034d0:	3001      	adds	r0, #1
 80034d2:	f000 80a7 	beq.w	8003624 <_vfiprintf_r+0x1ec>
 80034d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034d8:	445a      	add	r2, fp
 80034da:	9209      	str	r2, [sp, #36]	@ 0x24
 80034dc:	f89a 3000 	ldrb.w	r3, [sl]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 809f 	beq.w	8003624 <_vfiprintf_r+0x1ec>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034f0:	f10a 0a01 	add.w	sl, sl, #1
 80034f4:	9304      	str	r3, [sp, #16]
 80034f6:	9307      	str	r3, [sp, #28]
 80034f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80034fe:	4654      	mov	r4, sl
 8003500:	2205      	movs	r2, #5
 8003502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003506:	4853      	ldr	r0, [pc, #332]	@ (8003654 <_vfiprintf_r+0x21c>)
 8003508:	f7fc fe6a 	bl	80001e0 <memchr>
 800350c:	9a04      	ldr	r2, [sp, #16]
 800350e:	b9d8      	cbnz	r0, 8003548 <_vfiprintf_r+0x110>
 8003510:	06d1      	lsls	r1, r2, #27
 8003512:	bf44      	itt	mi
 8003514:	2320      	movmi	r3, #32
 8003516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800351a:	0713      	lsls	r3, r2, #28
 800351c:	bf44      	itt	mi
 800351e:	232b      	movmi	r3, #43	@ 0x2b
 8003520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003524:	f89a 3000 	ldrb.w	r3, [sl]
 8003528:	2b2a      	cmp	r3, #42	@ 0x2a
 800352a:	d015      	beq.n	8003558 <_vfiprintf_r+0x120>
 800352c:	9a07      	ldr	r2, [sp, #28]
 800352e:	4654      	mov	r4, sl
 8003530:	2000      	movs	r0, #0
 8003532:	f04f 0c0a 	mov.w	ip, #10
 8003536:	4621      	mov	r1, r4
 8003538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800353c:	3b30      	subs	r3, #48	@ 0x30
 800353e:	2b09      	cmp	r3, #9
 8003540:	d94b      	bls.n	80035da <_vfiprintf_r+0x1a2>
 8003542:	b1b0      	cbz	r0, 8003572 <_vfiprintf_r+0x13a>
 8003544:	9207      	str	r2, [sp, #28]
 8003546:	e014      	b.n	8003572 <_vfiprintf_r+0x13a>
 8003548:	eba0 0308 	sub.w	r3, r0, r8
 800354c:	fa09 f303 	lsl.w	r3, r9, r3
 8003550:	4313      	orrs	r3, r2
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	46a2      	mov	sl, r4
 8003556:	e7d2      	b.n	80034fe <_vfiprintf_r+0xc6>
 8003558:	9b03      	ldr	r3, [sp, #12]
 800355a:	1d19      	adds	r1, r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	9103      	str	r1, [sp, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	bfbb      	ittet	lt
 8003564:	425b      	neglt	r3, r3
 8003566:	f042 0202 	orrlt.w	r2, r2, #2
 800356a:	9307      	strge	r3, [sp, #28]
 800356c:	9307      	strlt	r3, [sp, #28]
 800356e:	bfb8      	it	lt
 8003570:	9204      	strlt	r2, [sp, #16]
 8003572:	7823      	ldrb	r3, [r4, #0]
 8003574:	2b2e      	cmp	r3, #46	@ 0x2e
 8003576:	d10a      	bne.n	800358e <_vfiprintf_r+0x156>
 8003578:	7863      	ldrb	r3, [r4, #1]
 800357a:	2b2a      	cmp	r3, #42	@ 0x2a
 800357c:	d132      	bne.n	80035e4 <_vfiprintf_r+0x1ac>
 800357e:	9b03      	ldr	r3, [sp, #12]
 8003580:	1d1a      	adds	r2, r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	9203      	str	r2, [sp, #12]
 8003586:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800358a:	3402      	adds	r4, #2
 800358c:	9305      	str	r3, [sp, #20]
 800358e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003664 <_vfiprintf_r+0x22c>
 8003592:	7821      	ldrb	r1, [r4, #0]
 8003594:	2203      	movs	r2, #3
 8003596:	4650      	mov	r0, sl
 8003598:	f7fc fe22 	bl	80001e0 <memchr>
 800359c:	b138      	cbz	r0, 80035ae <_vfiprintf_r+0x176>
 800359e:	9b04      	ldr	r3, [sp, #16]
 80035a0:	eba0 000a 	sub.w	r0, r0, sl
 80035a4:	2240      	movs	r2, #64	@ 0x40
 80035a6:	4082      	lsls	r2, r0
 80035a8:	4313      	orrs	r3, r2
 80035aa:	3401      	adds	r4, #1
 80035ac:	9304      	str	r3, [sp, #16]
 80035ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b2:	4829      	ldr	r0, [pc, #164]	@ (8003658 <_vfiprintf_r+0x220>)
 80035b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035b8:	2206      	movs	r2, #6
 80035ba:	f7fc fe11 	bl	80001e0 <memchr>
 80035be:	2800      	cmp	r0, #0
 80035c0:	d03f      	beq.n	8003642 <_vfiprintf_r+0x20a>
 80035c2:	4b26      	ldr	r3, [pc, #152]	@ (800365c <_vfiprintf_r+0x224>)
 80035c4:	bb1b      	cbnz	r3, 800360e <_vfiprintf_r+0x1d6>
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	3307      	adds	r3, #7
 80035ca:	f023 0307 	bic.w	r3, r3, #7
 80035ce:	3308      	adds	r3, #8
 80035d0:	9303      	str	r3, [sp, #12]
 80035d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035d4:	443b      	add	r3, r7
 80035d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80035d8:	e76a      	b.n	80034b0 <_vfiprintf_r+0x78>
 80035da:	fb0c 3202 	mla	r2, ip, r2, r3
 80035de:	460c      	mov	r4, r1
 80035e0:	2001      	movs	r0, #1
 80035e2:	e7a8      	b.n	8003536 <_vfiprintf_r+0xfe>
 80035e4:	2300      	movs	r3, #0
 80035e6:	3401      	adds	r4, #1
 80035e8:	9305      	str	r3, [sp, #20]
 80035ea:	4619      	mov	r1, r3
 80035ec:	f04f 0c0a 	mov.w	ip, #10
 80035f0:	4620      	mov	r0, r4
 80035f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035f6:	3a30      	subs	r2, #48	@ 0x30
 80035f8:	2a09      	cmp	r2, #9
 80035fa:	d903      	bls.n	8003604 <_vfiprintf_r+0x1cc>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0c6      	beq.n	800358e <_vfiprintf_r+0x156>
 8003600:	9105      	str	r1, [sp, #20]
 8003602:	e7c4      	b.n	800358e <_vfiprintf_r+0x156>
 8003604:	fb0c 2101 	mla	r1, ip, r1, r2
 8003608:	4604      	mov	r4, r0
 800360a:	2301      	movs	r3, #1
 800360c:	e7f0      	b.n	80035f0 <_vfiprintf_r+0x1b8>
 800360e:	ab03      	add	r3, sp, #12
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	462a      	mov	r2, r5
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <_vfiprintf_r+0x228>)
 8003616:	a904      	add	r1, sp, #16
 8003618:	4630      	mov	r0, r6
 800361a:	f3af 8000 	nop.w
 800361e:	4607      	mov	r7, r0
 8003620:	1c78      	adds	r0, r7, #1
 8003622:	d1d6      	bne.n	80035d2 <_vfiprintf_r+0x19a>
 8003624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003626:	07d9      	lsls	r1, r3, #31
 8003628:	d405      	bmi.n	8003636 <_vfiprintf_r+0x1fe>
 800362a:	89ab      	ldrh	r3, [r5, #12]
 800362c:	059a      	lsls	r2, r3, #22
 800362e:	d402      	bmi.n	8003636 <_vfiprintf_r+0x1fe>
 8003630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003632:	f7ff fddd 	bl	80031f0 <__retarget_lock_release_recursive>
 8003636:	89ab      	ldrh	r3, [r5, #12]
 8003638:	065b      	lsls	r3, r3, #25
 800363a:	f53f af1f 	bmi.w	800347c <_vfiprintf_r+0x44>
 800363e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003640:	e71e      	b.n	8003480 <_vfiprintf_r+0x48>
 8003642:	ab03      	add	r3, sp, #12
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	462a      	mov	r2, r5
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <_vfiprintf_r+0x228>)
 800364a:	a904      	add	r1, sp, #16
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f879 	bl	8003744 <_printf_i>
 8003652:	e7e4      	b.n	800361e <_vfiprintf_r+0x1e6>
 8003654:	08003d90 	.word	0x08003d90
 8003658:	08003d9a 	.word	0x08003d9a
 800365c:	00000000 	.word	0x00000000
 8003660:	08003413 	.word	0x08003413
 8003664:	08003d96 	.word	0x08003d96

08003668 <_printf_common>:
 8003668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800366c:	4616      	mov	r6, r2
 800366e:	4698      	mov	r8, r3
 8003670:	688a      	ldr	r2, [r1, #8]
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003678:	4293      	cmp	r3, r2
 800367a:	bfb8      	it	lt
 800367c:	4613      	movlt	r3, r2
 800367e:	6033      	str	r3, [r6, #0]
 8003680:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003684:	4607      	mov	r7, r0
 8003686:	460c      	mov	r4, r1
 8003688:	b10a      	cbz	r2, 800368e <_printf_common+0x26>
 800368a:	3301      	adds	r3, #1
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	0699      	lsls	r1, r3, #26
 8003692:	bf42      	ittt	mi
 8003694:	6833      	ldrmi	r3, [r6, #0]
 8003696:	3302      	addmi	r3, #2
 8003698:	6033      	strmi	r3, [r6, #0]
 800369a:	6825      	ldr	r5, [r4, #0]
 800369c:	f015 0506 	ands.w	r5, r5, #6
 80036a0:	d106      	bne.n	80036b0 <_printf_common+0x48>
 80036a2:	f104 0a19 	add.w	sl, r4, #25
 80036a6:	68e3      	ldr	r3, [r4, #12]
 80036a8:	6832      	ldr	r2, [r6, #0]
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	42ab      	cmp	r3, r5
 80036ae:	dc26      	bgt.n	80036fe <_printf_common+0x96>
 80036b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	3b00      	subs	r3, #0
 80036b8:	bf18      	it	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	0692      	lsls	r2, r2, #26
 80036be:	d42b      	bmi.n	8003718 <_printf_common+0xb0>
 80036c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036c4:	4641      	mov	r1, r8
 80036c6:	4638      	mov	r0, r7
 80036c8:	47c8      	blx	r9
 80036ca:	3001      	adds	r0, #1
 80036cc:	d01e      	beq.n	800370c <_printf_common+0xa4>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	6922      	ldr	r2, [r4, #16]
 80036d2:	f003 0306 	and.w	r3, r3, #6
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf02      	ittt	eq
 80036da:	68e5      	ldreq	r5, [r4, #12]
 80036dc:	6833      	ldreq	r3, [r6, #0]
 80036de:	1aed      	subeq	r5, r5, r3
 80036e0:	68a3      	ldr	r3, [r4, #8]
 80036e2:	bf0c      	ite	eq
 80036e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e8:	2500      	movne	r5, #0
 80036ea:	4293      	cmp	r3, r2
 80036ec:	bfc4      	itt	gt
 80036ee:	1a9b      	subgt	r3, r3, r2
 80036f0:	18ed      	addgt	r5, r5, r3
 80036f2:	2600      	movs	r6, #0
 80036f4:	341a      	adds	r4, #26
 80036f6:	42b5      	cmp	r5, r6
 80036f8:	d11a      	bne.n	8003730 <_printf_common+0xc8>
 80036fa:	2000      	movs	r0, #0
 80036fc:	e008      	b.n	8003710 <_printf_common+0xa8>
 80036fe:	2301      	movs	r3, #1
 8003700:	4652      	mov	r2, sl
 8003702:	4641      	mov	r1, r8
 8003704:	4638      	mov	r0, r7
 8003706:	47c8      	blx	r9
 8003708:	3001      	adds	r0, #1
 800370a:	d103      	bne.n	8003714 <_printf_common+0xac>
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003714:	3501      	adds	r5, #1
 8003716:	e7c6      	b.n	80036a6 <_printf_common+0x3e>
 8003718:	18e1      	adds	r1, r4, r3
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	2030      	movs	r0, #48	@ 0x30
 800371e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003722:	4422      	add	r2, r4
 8003724:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800372c:	3302      	adds	r3, #2
 800372e:	e7c7      	b.n	80036c0 <_printf_common+0x58>
 8003730:	2301      	movs	r3, #1
 8003732:	4622      	mov	r2, r4
 8003734:	4641      	mov	r1, r8
 8003736:	4638      	mov	r0, r7
 8003738:	47c8      	blx	r9
 800373a:	3001      	adds	r0, #1
 800373c:	d0e6      	beq.n	800370c <_printf_common+0xa4>
 800373e:	3601      	adds	r6, #1
 8003740:	e7d9      	b.n	80036f6 <_printf_common+0x8e>
	...

08003744 <_printf_i>:
 8003744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	7e0f      	ldrb	r7, [r1, #24]
 800374a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800374c:	2f78      	cmp	r7, #120	@ 0x78
 800374e:	4691      	mov	r9, r2
 8003750:	4680      	mov	r8, r0
 8003752:	460c      	mov	r4, r1
 8003754:	469a      	mov	sl, r3
 8003756:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800375a:	d807      	bhi.n	800376c <_printf_i+0x28>
 800375c:	2f62      	cmp	r7, #98	@ 0x62
 800375e:	d80a      	bhi.n	8003776 <_printf_i+0x32>
 8003760:	2f00      	cmp	r7, #0
 8003762:	f000 80d2 	beq.w	800390a <_printf_i+0x1c6>
 8003766:	2f58      	cmp	r7, #88	@ 0x58
 8003768:	f000 80b9 	beq.w	80038de <_printf_i+0x19a>
 800376c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003770:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003774:	e03a      	b.n	80037ec <_printf_i+0xa8>
 8003776:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800377a:	2b15      	cmp	r3, #21
 800377c:	d8f6      	bhi.n	800376c <_printf_i+0x28>
 800377e:	a101      	add	r1, pc, #4	@ (adr r1, 8003784 <_printf_i+0x40>)
 8003780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003784:	080037dd 	.word	0x080037dd
 8003788:	080037f1 	.word	0x080037f1
 800378c:	0800376d 	.word	0x0800376d
 8003790:	0800376d 	.word	0x0800376d
 8003794:	0800376d 	.word	0x0800376d
 8003798:	0800376d 	.word	0x0800376d
 800379c:	080037f1 	.word	0x080037f1
 80037a0:	0800376d 	.word	0x0800376d
 80037a4:	0800376d 	.word	0x0800376d
 80037a8:	0800376d 	.word	0x0800376d
 80037ac:	0800376d 	.word	0x0800376d
 80037b0:	080038f1 	.word	0x080038f1
 80037b4:	0800381b 	.word	0x0800381b
 80037b8:	080038ab 	.word	0x080038ab
 80037bc:	0800376d 	.word	0x0800376d
 80037c0:	0800376d 	.word	0x0800376d
 80037c4:	08003913 	.word	0x08003913
 80037c8:	0800376d 	.word	0x0800376d
 80037cc:	0800381b 	.word	0x0800381b
 80037d0:	0800376d 	.word	0x0800376d
 80037d4:	0800376d 	.word	0x0800376d
 80037d8:	080038b3 	.word	0x080038b3
 80037dc:	6833      	ldr	r3, [r6, #0]
 80037de:	1d1a      	adds	r2, r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6032      	str	r2, [r6, #0]
 80037e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037ec:	2301      	movs	r3, #1
 80037ee:	e09d      	b.n	800392c <_printf_i+0x1e8>
 80037f0:	6833      	ldr	r3, [r6, #0]
 80037f2:	6820      	ldr	r0, [r4, #0]
 80037f4:	1d19      	adds	r1, r3, #4
 80037f6:	6031      	str	r1, [r6, #0]
 80037f8:	0606      	lsls	r6, r0, #24
 80037fa:	d501      	bpl.n	8003800 <_printf_i+0xbc>
 80037fc:	681d      	ldr	r5, [r3, #0]
 80037fe:	e003      	b.n	8003808 <_printf_i+0xc4>
 8003800:	0645      	lsls	r5, r0, #25
 8003802:	d5fb      	bpl.n	80037fc <_printf_i+0xb8>
 8003804:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003808:	2d00      	cmp	r5, #0
 800380a:	da03      	bge.n	8003814 <_printf_i+0xd0>
 800380c:	232d      	movs	r3, #45	@ 0x2d
 800380e:	426d      	negs	r5, r5
 8003810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003814:	4859      	ldr	r0, [pc, #356]	@ (800397c <_printf_i+0x238>)
 8003816:	230a      	movs	r3, #10
 8003818:	e011      	b.n	800383e <_printf_i+0xfa>
 800381a:	6821      	ldr	r1, [r4, #0]
 800381c:	6833      	ldr	r3, [r6, #0]
 800381e:	0608      	lsls	r0, r1, #24
 8003820:	f853 5b04 	ldr.w	r5, [r3], #4
 8003824:	d402      	bmi.n	800382c <_printf_i+0xe8>
 8003826:	0649      	lsls	r1, r1, #25
 8003828:	bf48      	it	mi
 800382a:	b2ad      	uxthmi	r5, r5
 800382c:	2f6f      	cmp	r7, #111	@ 0x6f
 800382e:	4853      	ldr	r0, [pc, #332]	@ (800397c <_printf_i+0x238>)
 8003830:	6033      	str	r3, [r6, #0]
 8003832:	bf14      	ite	ne
 8003834:	230a      	movne	r3, #10
 8003836:	2308      	moveq	r3, #8
 8003838:	2100      	movs	r1, #0
 800383a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800383e:	6866      	ldr	r6, [r4, #4]
 8003840:	60a6      	str	r6, [r4, #8]
 8003842:	2e00      	cmp	r6, #0
 8003844:	bfa2      	ittt	ge
 8003846:	6821      	ldrge	r1, [r4, #0]
 8003848:	f021 0104 	bicge.w	r1, r1, #4
 800384c:	6021      	strge	r1, [r4, #0]
 800384e:	b90d      	cbnz	r5, 8003854 <_printf_i+0x110>
 8003850:	2e00      	cmp	r6, #0
 8003852:	d04b      	beq.n	80038ec <_printf_i+0x1a8>
 8003854:	4616      	mov	r6, r2
 8003856:	fbb5 f1f3 	udiv	r1, r5, r3
 800385a:	fb03 5711 	mls	r7, r3, r1, r5
 800385e:	5dc7      	ldrb	r7, [r0, r7]
 8003860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003864:	462f      	mov	r7, r5
 8003866:	42bb      	cmp	r3, r7
 8003868:	460d      	mov	r5, r1
 800386a:	d9f4      	bls.n	8003856 <_printf_i+0x112>
 800386c:	2b08      	cmp	r3, #8
 800386e:	d10b      	bne.n	8003888 <_printf_i+0x144>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	07df      	lsls	r7, r3, #31
 8003874:	d508      	bpl.n	8003888 <_printf_i+0x144>
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	6861      	ldr	r1, [r4, #4]
 800387a:	4299      	cmp	r1, r3
 800387c:	bfde      	ittt	le
 800387e:	2330      	movle	r3, #48	@ 0x30
 8003880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003888:	1b92      	subs	r2, r2, r6
 800388a:	6122      	str	r2, [r4, #16]
 800388c:	f8cd a000 	str.w	sl, [sp]
 8003890:	464b      	mov	r3, r9
 8003892:	aa03      	add	r2, sp, #12
 8003894:	4621      	mov	r1, r4
 8003896:	4640      	mov	r0, r8
 8003898:	f7ff fee6 	bl	8003668 <_printf_common>
 800389c:	3001      	adds	r0, #1
 800389e:	d14a      	bne.n	8003936 <_printf_i+0x1f2>
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	b004      	add	sp, #16
 80038a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	f043 0320 	orr.w	r3, r3, #32
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	4833      	ldr	r0, [pc, #204]	@ (8003980 <_printf_i+0x23c>)
 80038b4:	2778      	movs	r7, #120	@ 0x78
 80038b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	6831      	ldr	r1, [r6, #0]
 80038be:	061f      	lsls	r7, r3, #24
 80038c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80038c4:	d402      	bmi.n	80038cc <_printf_i+0x188>
 80038c6:	065f      	lsls	r7, r3, #25
 80038c8:	bf48      	it	mi
 80038ca:	b2ad      	uxthmi	r5, r5
 80038cc:	6031      	str	r1, [r6, #0]
 80038ce:	07d9      	lsls	r1, r3, #31
 80038d0:	bf44      	itt	mi
 80038d2:	f043 0320 	orrmi.w	r3, r3, #32
 80038d6:	6023      	strmi	r3, [r4, #0]
 80038d8:	b11d      	cbz	r5, 80038e2 <_printf_i+0x19e>
 80038da:	2310      	movs	r3, #16
 80038dc:	e7ac      	b.n	8003838 <_printf_i+0xf4>
 80038de:	4827      	ldr	r0, [pc, #156]	@ (800397c <_printf_i+0x238>)
 80038e0:	e7e9      	b.n	80038b6 <_printf_i+0x172>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	f023 0320 	bic.w	r3, r3, #32
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	e7f6      	b.n	80038da <_printf_i+0x196>
 80038ec:	4616      	mov	r6, r2
 80038ee:	e7bd      	b.n	800386c <_printf_i+0x128>
 80038f0:	6833      	ldr	r3, [r6, #0]
 80038f2:	6825      	ldr	r5, [r4, #0]
 80038f4:	6961      	ldr	r1, [r4, #20]
 80038f6:	1d18      	adds	r0, r3, #4
 80038f8:	6030      	str	r0, [r6, #0]
 80038fa:	062e      	lsls	r6, r5, #24
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	d501      	bpl.n	8003904 <_printf_i+0x1c0>
 8003900:	6019      	str	r1, [r3, #0]
 8003902:	e002      	b.n	800390a <_printf_i+0x1c6>
 8003904:	0668      	lsls	r0, r5, #25
 8003906:	d5fb      	bpl.n	8003900 <_printf_i+0x1bc>
 8003908:	8019      	strh	r1, [r3, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	6123      	str	r3, [r4, #16]
 800390e:	4616      	mov	r6, r2
 8003910:	e7bc      	b.n	800388c <_printf_i+0x148>
 8003912:	6833      	ldr	r3, [r6, #0]
 8003914:	1d1a      	adds	r2, r3, #4
 8003916:	6032      	str	r2, [r6, #0]
 8003918:	681e      	ldr	r6, [r3, #0]
 800391a:	6862      	ldr	r2, [r4, #4]
 800391c:	2100      	movs	r1, #0
 800391e:	4630      	mov	r0, r6
 8003920:	f7fc fc5e 	bl	80001e0 <memchr>
 8003924:	b108      	cbz	r0, 800392a <_printf_i+0x1e6>
 8003926:	1b80      	subs	r0, r0, r6
 8003928:	6060      	str	r0, [r4, #4]
 800392a:	6863      	ldr	r3, [r4, #4]
 800392c:	6123      	str	r3, [r4, #16]
 800392e:	2300      	movs	r3, #0
 8003930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003934:	e7aa      	b.n	800388c <_printf_i+0x148>
 8003936:	6923      	ldr	r3, [r4, #16]
 8003938:	4632      	mov	r2, r6
 800393a:	4649      	mov	r1, r9
 800393c:	4640      	mov	r0, r8
 800393e:	47d0      	blx	sl
 8003940:	3001      	adds	r0, #1
 8003942:	d0ad      	beq.n	80038a0 <_printf_i+0x15c>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	079b      	lsls	r3, r3, #30
 8003948:	d413      	bmi.n	8003972 <_printf_i+0x22e>
 800394a:	68e0      	ldr	r0, [r4, #12]
 800394c:	9b03      	ldr	r3, [sp, #12]
 800394e:	4298      	cmp	r0, r3
 8003950:	bfb8      	it	lt
 8003952:	4618      	movlt	r0, r3
 8003954:	e7a6      	b.n	80038a4 <_printf_i+0x160>
 8003956:	2301      	movs	r3, #1
 8003958:	4632      	mov	r2, r6
 800395a:	4649      	mov	r1, r9
 800395c:	4640      	mov	r0, r8
 800395e:	47d0      	blx	sl
 8003960:	3001      	adds	r0, #1
 8003962:	d09d      	beq.n	80038a0 <_printf_i+0x15c>
 8003964:	3501      	adds	r5, #1
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	9903      	ldr	r1, [sp, #12]
 800396a:	1a5b      	subs	r3, r3, r1
 800396c:	42ab      	cmp	r3, r5
 800396e:	dcf2      	bgt.n	8003956 <_printf_i+0x212>
 8003970:	e7eb      	b.n	800394a <_printf_i+0x206>
 8003972:	2500      	movs	r5, #0
 8003974:	f104 0619 	add.w	r6, r4, #25
 8003978:	e7f5      	b.n	8003966 <_printf_i+0x222>
 800397a:	bf00      	nop
 800397c:	08003da1 	.word	0x08003da1
 8003980:	08003db2 	.word	0x08003db2

08003984 <__sflush_r>:
 8003984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800398c:	0716      	lsls	r6, r2, #28
 800398e:	4605      	mov	r5, r0
 8003990:	460c      	mov	r4, r1
 8003992:	d454      	bmi.n	8003a3e <__sflush_r+0xba>
 8003994:	684b      	ldr	r3, [r1, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	dc02      	bgt.n	80039a0 <__sflush_r+0x1c>
 800399a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	dd48      	ble.n	8003a32 <__sflush_r+0xae>
 80039a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039a2:	2e00      	cmp	r6, #0
 80039a4:	d045      	beq.n	8003a32 <__sflush_r+0xae>
 80039a6:	2300      	movs	r3, #0
 80039a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039ac:	682f      	ldr	r7, [r5, #0]
 80039ae:	6a21      	ldr	r1, [r4, #32]
 80039b0:	602b      	str	r3, [r5, #0]
 80039b2:	d030      	beq.n	8003a16 <__sflush_r+0x92>
 80039b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	0759      	lsls	r1, r3, #29
 80039ba:	d505      	bpl.n	80039c8 <__sflush_r+0x44>
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	1ad2      	subs	r2, r2, r3
 80039c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039c2:	b10b      	cbz	r3, 80039c8 <__sflush_r+0x44>
 80039c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039c6:	1ad2      	subs	r2, r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039cc:	6a21      	ldr	r1, [r4, #32]
 80039ce:	4628      	mov	r0, r5
 80039d0:	47b0      	blx	r6
 80039d2:	1c43      	adds	r3, r0, #1
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	d106      	bne.n	80039e6 <__sflush_r+0x62>
 80039d8:	6829      	ldr	r1, [r5, #0]
 80039da:	291d      	cmp	r1, #29
 80039dc:	d82b      	bhi.n	8003a36 <__sflush_r+0xb2>
 80039de:	4a2a      	ldr	r2, [pc, #168]	@ (8003a88 <__sflush_r+0x104>)
 80039e0:	410a      	asrs	r2, r1
 80039e2:	07d6      	lsls	r6, r2, #31
 80039e4:	d427      	bmi.n	8003a36 <__sflush_r+0xb2>
 80039e6:	2200      	movs	r2, #0
 80039e8:	6062      	str	r2, [r4, #4]
 80039ea:	04d9      	lsls	r1, r3, #19
 80039ec:	6922      	ldr	r2, [r4, #16]
 80039ee:	6022      	str	r2, [r4, #0]
 80039f0:	d504      	bpl.n	80039fc <__sflush_r+0x78>
 80039f2:	1c42      	adds	r2, r0, #1
 80039f4:	d101      	bne.n	80039fa <__sflush_r+0x76>
 80039f6:	682b      	ldr	r3, [r5, #0]
 80039f8:	b903      	cbnz	r3, 80039fc <__sflush_r+0x78>
 80039fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80039fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039fe:	602f      	str	r7, [r5, #0]
 8003a00:	b1b9      	cbz	r1, 8003a32 <__sflush_r+0xae>
 8003a02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a06:	4299      	cmp	r1, r3
 8003a08:	d002      	beq.n	8003a10 <__sflush_r+0x8c>
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f7ff fbf2 	bl	80031f4 <_free_r>
 8003a10:	2300      	movs	r3, #0
 8003a12:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a14:	e00d      	b.n	8003a32 <__sflush_r+0xae>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4628      	mov	r0, r5
 8003a1a:	47b0      	blx	r6
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	1c50      	adds	r0, r2, #1
 8003a20:	d1c9      	bne.n	80039b6 <__sflush_r+0x32>
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0c6      	beq.n	80039b6 <__sflush_r+0x32>
 8003a28:	2b1d      	cmp	r3, #29
 8003a2a:	d001      	beq.n	8003a30 <__sflush_r+0xac>
 8003a2c:	2b16      	cmp	r3, #22
 8003a2e:	d11e      	bne.n	8003a6e <__sflush_r+0xea>
 8003a30:	602f      	str	r7, [r5, #0]
 8003a32:	2000      	movs	r0, #0
 8003a34:	e022      	b.n	8003a7c <__sflush_r+0xf8>
 8003a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	e01b      	b.n	8003a76 <__sflush_r+0xf2>
 8003a3e:	690f      	ldr	r7, [r1, #16]
 8003a40:	2f00      	cmp	r7, #0
 8003a42:	d0f6      	beq.n	8003a32 <__sflush_r+0xae>
 8003a44:	0793      	lsls	r3, r2, #30
 8003a46:	680e      	ldr	r6, [r1, #0]
 8003a48:	bf08      	it	eq
 8003a4a:	694b      	ldreq	r3, [r1, #20]
 8003a4c:	600f      	str	r7, [r1, #0]
 8003a4e:	bf18      	it	ne
 8003a50:	2300      	movne	r3, #0
 8003a52:	eba6 0807 	sub.w	r8, r6, r7
 8003a56:	608b      	str	r3, [r1, #8]
 8003a58:	f1b8 0f00 	cmp.w	r8, #0
 8003a5c:	dde9      	ble.n	8003a32 <__sflush_r+0xae>
 8003a5e:	6a21      	ldr	r1, [r4, #32]
 8003a60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a62:	4643      	mov	r3, r8
 8003a64:	463a      	mov	r2, r7
 8003a66:	4628      	mov	r0, r5
 8003a68:	47b0      	blx	r6
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	dc08      	bgt.n	8003a80 <__sflush_r+0xfc>
 8003a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a76:	81a3      	strh	r3, [r4, #12]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a80:	4407      	add	r7, r0
 8003a82:	eba8 0800 	sub.w	r8, r8, r0
 8003a86:	e7e7      	b.n	8003a58 <__sflush_r+0xd4>
 8003a88:	dfbffffe 	.word	0xdfbffffe

08003a8c <_fflush_r>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	690b      	ldr	r3, [r1, #16]
 8003a90:	4605      	mov	r5, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	b913      	cbnz	r3, 8003a9c <_fflush_r+0x10>
 8003a96:	2500      	movs	r5, #0
 8003a98:	4628      	mov	r0, r5
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	b118      	cbz	r0, 8003aa6 <_fflush_r+0x1a>
 8003a9e:	6a03      	ldr	r3, [r0, #32]
 8003aa0:	b90b      	cbnz	r3, 8003aa6 <_fflush_r+0x1a>
 8003aa2:	f7ff fa89 	bl	8002fb8 <__sinit>
 8003aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f3      	beq.n	8003a96 <_fflush_r+0xa>
 8003aae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ab0:	07d0      	lsls	r0, r2, #31
 8003ab2:	d404      	bmi.n	8003abe <_fflush_r+0x32>
 8003ab4:	0599      	lsls	r1, r3, #22
 8003ab6:	d402      	bmi.n	8003abe <_fflush_r+0x32>
 8003ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003aba:	f7ff fb98 	bl	80031ee <__retarget_lock_acquire_recursive>
 8003abe:	4628      	mov	r0, r5
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	f7ff ff5f 	bl	8003984 <__sflush_r>
 8003ac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ac8:	07da      	lsls	r2, r3, #31
 8003aca:	4605      	mov	r5, r0
 8003acc:	d4e4      	bmi.n	8003a98 <_fflush_r+0xc>
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	059b      	lsls	r3, r3, #22
 8003ad2:	d4e1      	bmi.n	8003a98 <_fflush_r+0xc>
 8003ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ad6:	f7ff fb8b 	bl	80031f0 <__retarget_lock_release_recursive>
 8003ada:	e7dd      	b.n	8003a98 <_fflush_r+0xc>

08003adc <__swbuf_r>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	460e      	mov	r6, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	b118      	cbz	r0, 8003aee <__swbuf_r+0x12>
 8003ae6:	6a03      	ldr	r3, [r0, #32]
 8003ae8:	b90b      	cbnz	r3, 8003aee <__swbuf_r+0x12>
 8003aea:	f7ff fa65 	bl	8002fb8 <__sinit>
 8003aee:	69a3      	ldr	r3, [r4, #24]
 8003af0:	60a3      	str	r3, [r4, #8]
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	071a      	lsls	r2, r3, #28
 8003af6:	d501      	bpl.n	8003afc <__swbuf_r+0x20>
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	b943      	cbnz	r3, 8003b0e <__swbuf_r+0x32>
 8003afc:	4621      	mov	r1, r4
 8003afe:	4628      	mov	r0, r5
 8003b00:	f000 f82a 	bl	8003b58 <__swsetup_r>
 8003b04:	b118      	cbz	r0, 8003b0e <__swbuf_r+0x32>
 8003b06:	f04f 37ff 	mov.w	r7, #4294967295
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	6922      	ldr	r2, [r4, #16]
 8003b12:	1a98      	subs	r0, r3, r2
 8003b14:	6963      	ldr	r3, [r4, #20]
 8003b16:	b2f6      	uxtb	r6, r6
 8003b18:	4283      	cmp	r3, r0
 8003b1a:	4637      	mov	r7, r6
 8003b1c:	dc05      	bgt.n	8003b2a <__swbuf_r+0x4e>
 8003b1e:	4621      	mov	r1, r4
 8003b20:	4628      	mov	r0, r5
 8003b22:	f7ff ffb3 	bl	8003a8c <_fflush_r>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d1ed      	bne.n	8003b06 <__swbuf_r+0x2a>
 8003b2a:	68a3      	ldr	r3, [r4, #8]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	60a3      	str	r3, [r4, #8]
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	6022      	str	r2, [r4, #0]
 8003b36:	701e      	strb	r6, [r3, #0]
 8003b38:	6962      	ldr	r2, [r4, #20]
 8003b3a:	1c43      	adds	r3, r0, #1
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d004      	beq.n	8003b4a <__swbuf_r+0x6e>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	07db      	lsls	r3, r3, #31
 8003b44:	d5e1      	bpl.n	8003b0a <__swbuf_r+0x2e>
 8003b46:	2e0a      	cmp	r6, #10
 8003b48:	d1df      	bne.n	8003b0a <__swbuf_r+0x2e>
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f7ff ff9d 	bl	8003a8c <_fflush_r>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d0d9      	beq.n	8003b0a <__swbuf_r+0x2e>
 8003b56:	e7d6      	b.n	8003b06 <__swbuf_r+0x2a>

08003b58 <__swsetup_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	4b29      	ldr	r3, [pc, #164]	@ (8003c00 <__swsetup_r+0xa8>)
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	460c      	mov	r4, r1
 8003b62:	b118      	cbz	r0, 8003b6c <__swsetup_r+0x14>
 8003b64:	6a03      	ldr	r3, [r0, #32]
 8003b66:	b90b      	cbnz	r3, 8003b6c <__swsetup_r+0x14>
 8003b68:	f7ff fa26 	bl	8002fb8 <__sinit>
 8003b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b70:	0719      	lsls	r1, r3, #28
 8003b72:	d422      	bmi.n	8003bba <__swsetup_r+0x62>
 8003b74:	06da      	lsls	r2, r3, #27
 8003b76:	d407      	bmi.n	8003b88 <__swsetup_r+0x30>
 8003b78:	2209      	movs	r2, #9
 8003b7a:	602a      	str	r2, [r5, #0]
 8003b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	f04f 30ff 	mov.w	r0, #4294967295
 8003b86:	e033      	b.n	8003bf0 <__swsetup_r+0x98>
 8003b88:	0758      	lsls	r0, r3, #29
 8003b8a:	d512      	bpl.n	8003bb2 <__swsetup_r+0x5a>
 8003b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b8e:	b141      	cbz	r1, 8003ba2 <__swsetup_r+0x4a>
 8003b90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b94:	4299      	cmp	r1, r3
 8003b96:	d002      	beq.n	8003b9e <__swsetup_r+0x46>
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f7ff fb2b 	bl	80031f4 <_free_r>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ba8:	81a3      	strh	r3, [r4, #12]
 8003baa:	2300      	movs	r3, #0
 8003bac:	6063      	str	r3, [r4, #4]
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	f043 0308 	orr.w	r3, r3, #8
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	b94b      	cbnz	r3, 8003bd2 <__swsetup_r+0x7a>
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc8:	d003      	beq.n	8003bd2 <__swsetup_r+0x7a>
 8003bca:	4621      	mov	r1, r4
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f000 f84f 	bl	8003c70 <__smakebuf_r>
 8003bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd6:	f013 0201 	ands.w	r2, r3, #1
 8003bda:	d00a      	beq.n	8003bf2 <__swsetup_r+0x9a>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	60a2      	str	r2, [r4, #8]
 8003be0:	6962      	ldr	r2, [r4, #20]
 8003be2:	4252      	negs	r2, r2
 8003be4:	61a2      	str	r2, [r4, #24]
 8003be6:	6922      	ldr	r2, [r4, #16]
 8003be8:	b942      	cbnz	r2, 8003bfc <__swsetup_r+0xa4>
 8003bea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bee:	d1c5      	bne.n	8003b7c <__swsetup_r+0x24>
 8003bf0:	bd38      	pop	{r3, r4, r5, pc}
 8003bf2:	0799      	lsls	r1, r3, #30
 8003bf4:	bf58      	it	pl
 8003bf6:	6962      	ldrpl	r2, [r4, #20]
 8003bf8:	60a2      	str	r2, [r4, #8]
 8003bfa:	e7f4      	b.n	8003be6 <__swsetup_r+0x8e>
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e7f7      	b.n	8003bf0 <__swsetup_r+0x98>
 8003c00:	2000001c 	.word	0x2000001c

08003c04 <_sbrk_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d06      	ldr	r5, [pc, #24]	@ (8003c20 <_sbrk_r+0x1c>)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	f7fd f80e 	bl	8000c30 <_sbrk>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_sbrk_r+0x1a>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_sbrk_r+0x1a>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	200002c8 	.word	0x200002c8

08003c24 <__swhatbuf_r>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	460c      	mov	r4, r1
 8003c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	b096      	sub	sp, #88	@ 0x58
 8003c30:	4615      	mov	r5, r2
 8003c32:	461e      	mov	r6, r3
 8003c34:	da0d      	bge.n	8003c52 <__swhatbuf_r+0x2e>
 8003c36:	89a3      	ldrh	r3, [r4, #12]
 8003c38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c3c:	f04f 0100 	mov.w	r1, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2340      	movne	r3, #64	@ 0x40
 8003c44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c48:	2000      	movs	r0, #0
 8003c4a:	6031      	str	r1, [r6, #0]
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	b016      	add	sp, #88	@ 0x58
 8003c50:	bd70      	pop	{r4, r5, r6, pc}
 8003c52:	466a      	mov	r2, sp
 8003c54:	f000 f848 	bl	8003ce8 <_fstat_r>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	dbec      	blt.n	8003c36 <__swhatbuf_r+0x12>
 8003c5c:	9901      	ldr	r1, [sp, #4]
 8003c5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c66:	4259      	negs	r1, r3
 8003c68:	4159      	adcs	r1, r3
 8003c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c6e:	e7eb      	b.n	8003c48 <__swhatbuf_r+0x24>

08003c70 <__smakebuf_r>:
 8003c70:	898b      	ldrh	r3, [r1, #12]
 8003c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c74:	079d      	lsls	r5, r3, #30
 8003c76:	4606      	mov	r6, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	d507      	bpl.n	8003c8c <__smakebuf_r+0x1c>
 8003c7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	6123      	str	r3, [r4, #16]
 8003c84:	2301      	movs	r3, #1
 8003c86:	6163      	str	r3, [r4, #20]
 8003c88:	b003      	add	sp, #12
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8c:	ab01      	add	r3, sp, #4
 8003c8e:	466a      	mov	r2, sp
 8003c90:	f7ff ffc8 	bl	8003c24 <__swhatbuf_r>
 8003c94:	9f00      	ldr	r7, [sp, #0]
 8003c96:	4605      	mov	r5, r0
 8003c98:	4639      	mov	r1, r7
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f7ff fb16 	bl	80032cc <_malloc_r>
 8003ca0:	b948      	cbnz	r0, 8003cb6 <__smakebuf_r+0x46>
 8003ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca6:	059a      	lsls	r2, r3, #22
 8003ca8:	d4ee      	bmi.n	8003c88 <__smakebuf_r+0x18>
 8003caa:	f023 0303 	bic.w	r3, r3, #3
 8003cae:	f043 0302 	orr.w	r3, r3, #2
 8003cb2:	81a3      	strh	r3, [r4, #12]
 8003cb4:	e7e2      	b.n	8003c7c <__smakebuf_r+0xc>
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	6020      	str	r0, [r4, #0]
 8003cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	9b01      	ldr	r3, [sp, #4]
 8003cc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003cc6:	b15b      	cbz	r3, 8003ce0 <__smakebuf_r+0x70>
 8003cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f000 f81d 	bl	8003d0c <_isatty_r>
 8003cd2:	b128      	cbz	r0, 8003ce0 <__smakebuf_r+0x70>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	431d      	orrs	r5, r3
 8003ce4:	81a5      	strh	r5, [r4, #12]
 8003ce6:	e7cf      	b.n	8003c88 <__smakebuf_r+0x18>

08003ce8 <_fstat_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4d07      	ldr	r5, [pc, #28]	@ (8003d08 <_fstat_r+0x20>)
 8003cec:	2300      	movs	r3, #0
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	602b      	str	r3, [r5, #0]
 8003cf6:	f7fc ff73 	bl	8000be0 <_fstat>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	d102      	bne.n	8003d04 <_fstat_r+0x1c>
 8003cfe:	682b      	ldr	r3, [r5, #0]
 8003d00:	b103      	cbz	r3, 8003d04 <_fstat_r+0x1c>
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	bd38      	pop	{r3, r4, r5, pc}
 8003d06:	bf00      	nop
 8003d08:	200002c8 	.word	0x200002c8

08003d0c <_isatty_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4d06      	ldr	r5, [pc, #24]	@ (8003d28 <_isatty_r+0x1c>)
 8003d10:	2300      	movs	r3, #0
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fc ff72 	bl	8000c00 <_isatty>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_isatty_r+0x1a>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_isatty_r+0x1a>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	200002c8 	.word	0x200002c8

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
