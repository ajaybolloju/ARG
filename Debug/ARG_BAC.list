
ARG_BAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800cbec  0800cbec  0000dbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cccc  0800cccc  0000e08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cccc  0800cccc  0000dccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccd4  0800ccd4  0000e08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccd4  0800ccd4  0000dcd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ccd8  0800ccd8  0000dcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800ccdc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b48  2000008c  0800cd68  0000e08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bd4  0800cd68  0000ebd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df49  00000000  00000000  0000e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a88  00000000  00000000  0002c005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00030a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114d  00000000  00000000  00032110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfc8  00000000  00000000  0003325d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021eec  00000000  00000000  0004f225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d12  00000000  00000000  00071111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102e23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006548  00000000  00000000  00102e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001093b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbd4 	.word	0x0800cbd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800cbd4 	.word	0x0800cbd4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BCDToDec>:
#define DS3231_ADDRESS 0xD0  // 7-bit I2C address of DS3231 (0x68 shifted left by 1)


extern I2C_HandleTypeDef hi2c1;

uint8_t BCDToDec(uint8_t val) { return ((val / 16 * 10) + (val % 16)); }
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	091b      	lsrs	r3, r3, #4
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	4413      	add	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	b2da      	uxtb	r2, r3
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 030f 	and.w	r3, r3, #15
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4413      	add	r3, r2
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <DecToBCD>:
uint8_t DecToBCD(uint8_t val) { return ((val / 10 * 16) + (val % 10)); }
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a0c      	ldr	r2, [pc, #48]	@ (80005e4 <DecToBCD+0x40>)
 80005b2:	fba2 2303 	umull	r2, r3, r2, r3
 80005b6:	08db      	lsrs	r3, r3, #3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	011b      	lsls	r3, r3, #4
 80005bc:	b2d8      	uxtb	r0, r3
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <DecToBCD+0x40>)
 80005c2:	fba3 1302 	umull	r1, r3, r3, r2
 80005c6:	08d9      	lsrs	r1, r3, #3
 80005c8:	460b      	mov	r3, r1
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4403      	add	r3, r0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	cccccccd 	.word	0xcccccccd

080005e8 <DS3231_Init>:


void DS3231_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af04      	add	r7, sp, #16
	  uint8_t controlReg = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &controlReg, 1, HAL_MAX_DELAY);
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	220e      	movs	r2, #14
 8000604:	21d0      	movs	r1, #208	@ 0xd0
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <DS3231_Init+0x50>)
 8000608:	f003 fd68 	bl	80040dc <HAL_I2C_Mem_Read>
	  controlReg &= ~(1 << 7); // Clear the "Oscillator Stop Flag" (OSF) bit, if set
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000612:	b2db      	uxtb	r3, r3
 8000614:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &controlReg, 1, HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	9302      	str	r3, [sp, #8]
 800061c:	2301      	movs	r3, #1
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	220e      	movs	r2, #14
 8000628:	21d0      	movs	r1, #208	@ 0xd0
 800062a:	4803      	ldr	r0, [pc, #12]	@ (8000638 <DS3231_Init+0x50>)
 800062c:	f003 fc5c 	bl	8003ee8 <HAL_I2C_Mem_Write>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000a8 	.word	0x200000a8

0800063c <DS3231_SetTime>:

// Function to set time (HH, MM, SS)
void DS3231_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af04      	add	r7, sp, #16
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	460b      	mov	r3, r1
 8000648:	71bb      	strb	r3, [r7, #6]
 800064a:	4613      	mov	r3, r2
 800064c:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[7];

    buffer[0] = ((seconds / 10) << 4) | (seconds % 10); // Convert to BCD
 800064e:	797b      	ldrb	r3, [r7, #5]
 8000650:	4a36      	ldr	r2, [pc, #216]	@ (800072c <DS3231_SetTime+0xf0>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	b258      	sxtb	r0, r3
 800065e:	797a      	ldrb	r2, [r7, #5]
 8000660:	4b32      	ldr	r3, [pc, #200]	@ (800072c <DS3231_SetTime+0xf0>)
 8000662:	fba3 1302 	umull	r1, r3, r3, r2
 8000666:	08d9      	lsrs	r1, r3, #3
 8000668:	460b      	mov	r3, r1
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	b25b      	sxtb	r3, r3
 8000676:	4303      	orrs	r3, r0
 8000678:	b25b      	sxtb	r3, r3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	723b      	strb	r3, [r7, #8]
    buffer[1] = ((minutes / 10) << 4) | (minutes % 10);
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	4a2a      	ldr	r2, [pc, #168]	@ (800072c <DS3231_SetTime+0xf0>)
 8000682:	fba2 2303 	umull	r2, r3, r2, r3
 8000686:	08db      	lsrs	r3, r3, #3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	b258      	sxtb	r0, r3
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	4b26      	ldr	r3, [pc, #152]	@ (800072c <DS3231_SetTime+0xf0>)
 8000692:	fba3 1302 	umull	r1, r3, r3, r2
 8000696:	08d9      	lsrs	r1, r3, #3
 8000698:	460b      	mov	r3, r1
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	4303      	orrs	r3, r0
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	727b      	strb	r3, [r7, #9]
    buffer[2] = ((hours / 10) << 4) | (hours % 10);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4a1e      	ldr	r2, [pc, #120]	@ (800072c <DS3231_SetTime+0xf0>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	08db      	lsrs	r3, r3, #3
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	b258      	sxtb	r0, r3
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <DS3231_SetTime+0xf0>)
 80006c2:	fba3 1302 	umull	r1, r3, r3, r2
 80006c6:	08d9      	lsrs	r1, r3, #3
 80006c8:	460b      	mov	r3, r1
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	440b      	add	r3, r1
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4303      	orrs	r3, r0
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	72bb      	strb	r3, [r7, #10]
    buffer[3] = DecToBCD(0);
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff ff60 	bl	80005a4 <DecToBCD>
 80006e4:	4603      	mov	r3, r0
 80006e6:	72fb      	strb	r3, [r7, #11]
    buffer[4] = DecToBCD(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff5b 	bl	80005a4 <DecToBCD>
 80006ee:	4603      	mov	r3, r0
 80006f0:	733b      	strb	r3, [r7, #12]
    buffer[5] = DecToBCD(0);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff ff56 	bl	80005a4 <DecToBCD>
 80006f8:	4603      	mov	r3, r0
 80006fa:	737b      	strb	r3, [r7, #13]
    buffer[6] = DecToBCD(0);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ff51 	bl	80005a4 <DecToBCD>
 8000702:	4603      	mov	r3, r0
 8000704:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, buffer, 7, HAL_MAX_DELAY);
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	9302      	str	r3, [sp, #8]
 800070c:	2307      	movs	r3, #7
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	2200      	movs	r2, #0
 800071a:	21d0      	movs	r1, #208	@ 0xd0
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <DS3231_SetTime+0xf4>)
 800071e:	f003 fbe3 	bl	8003ee8 <HAL_I2C_Mem_Write>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	cccccccd 	.word	0xcccccccd
 8000730:	200000a8 	.word	0x200000a8

08000734 <DS3231_ReadTime>:
//    *hours   = BCDToDec(raw_hours);
//
//    printf("Converted Time: %02d:%02d:%02d\n", *hours, *minutes, *seconds);
//}

void DS3231_ReadTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af04      	add	r7, sp, #16
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
    uint8_t buffer[3];
    for (int retry = 0; retry < 3; retry++) {
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e034      	b.n	80007b0 <DS3231_ReadTime+0x7c>
        HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, buffer, 3, HAL_MAX_DELAY);
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	9302      	str	r3, [sp, #8]
 800074c:	2303      	movs	r3, #3
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2301      	movs	r3, #1
 8000758:	2200      	movs	r2, #0
 800075a:	21d0      	movs	r1, #208	@ 0xd0
 800075c:	4818      	ldr	r0, [pc, #96]	@ (80007c0 <DS3231_ReadTime+0x8c>)
 800075e:	f003 fcbd 	bl	80040dc <HAL_I2C_Mem_Read>

        *seconds = BCDToDec(buffer[0]);
 8000762:	7c3b      	ldrb	r3, [r7, #16]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff03 	bl	8000570 <BCDToDec>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	701a      	strb	r2, [r3, #0]
        *minutes = BCDToDec(buffer[1]);
 8000772:	7c7b      	ldrb	r3, [r7, #17]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fefb 	bl	8000570 <BCDToDec>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	701a      	strb	r2, [r3, #0]
        *hours   = BCDToDec(buffer[2]);
 8000782:	7cbb      	ldrb	r3, [r7, #18]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fef3 	bl	8000570 <BCDToDec>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	701a      	strb	r2, [r3, #0]

        if (*hours != 0 || *minutes != 0 || *seconds != 0) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10d      	bne.n	80007b6 <DS3231_ReadTime+0x82>
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d109      	bne.n	80007b6 <DS3231_ReadTime+0x82>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d105      	bne.n	80007b6 <DS3231_ReadTime+0x82>
    for (int retry = 0; retry < 3; retry++) {
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	ddc7      	ble.n	8000746 <DS3231_ReadTime+0x12>
            // Successfully read non-zero time
            break;
        }
    }
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fcf3 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f84f 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 f96f 	bl	8000ab4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007d6:	f000 f919 	bl	8000a0c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007da:	f000 f941 	bl	8000a60 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007de:	f000 f8df 	bl	80009a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007e2:	f00a ff87 	bl	800b6f4 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 80007e6:	f007 f85d 	bl	80078a4 <MX_FATFS_Init>
  MX_I2C1_Init();
 80007ea:	f000 f8ab 	bl	8000944 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  if (f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 0) != FR_OK)
 80007ee:	2200      	movs	r2, #0
 80007f0:	4918      	ldr	r1, [pc, #96]	@ (8000854 <main+0x90>)
 80007f2:	4819      	ldr	r0, [pc, #100]	@ (8000858 <main+0x94>)
 80007f4:	f00a fedc 	bl	800b5b0 <f_mount>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <main+0x40>
  {
    printf("\n\n ERROR : USBHFatFS Initialization");
 80007fe:	4817      	ldr	r0, [pc, #92]	@ (800085c <main+0x98>)
 8000800:	f00b fc1a 	bl	800c038 <iprintf>
  }

  HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	4916      	ldr	r1, [pc, #88]	@ (8000860 <main+0x9c>)
 8000808:	4816      	ldr	r0, [pc, #88]	@ (8000864 <main+0xa0>)
 800080a:	f005 f809 	bl	8005820 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 800080e:	2201      	movs	r2, #1
 8000810:	4913      	ldr	r1, [pc, #76]	@ (8000860 <main+0x9c>)
 8000812:	4815      	ldr	r0, [pc, #84]	@ (8000868 <main+0xa4>)
 8000814:	f005 f804 	bl	8005820 <HAL_UART_Receive_IT>
      FIL MyFile;
      char buffer[100];   // Buffer to hold read data
      FRESULT res;    // FATFS function common result variable
      UINT bytesWritten, bytesRead;
#endif
      DS3231_Init();
 8000818:	f7ff fee6 	bl	80005e8 <DS3231_Init>

      DS3231_SetTime(23, 44, 0);  // Set time to 14:30:00
 800081c:	2200      	movs	r2, #0
 800081e:	212c      	movs	r1, #44	@ 0x2c
 8000820:	2017      	movs	r0, #23
 8000822:	f7ff ff0b 	bl	800063c <DS3231_SetTime>
//      {
//          printf("%c", read_data[i]);
//      }
#endif

      DS3231_ReadTime(&hours, &minutes, &seconds);
 8000826:	1d7a      	adds	r2, r7, #5
 8000828:	1db9      	adds	r1, r7, #6
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff81 	bl	8000734 <DS3231_ReadTime>

      printf("Time: %02d:%02d:%02d\n", hours, minutes, seconds);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4619      	mov	r1, r3
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	461a      	mov	r2, r3
 800083a:	797b      	ldrb	r3, [r7, #5]
 800083c:	480b      	ldr	r0, [pc, #44]	@ (800086c <main+0xa8>)
 800083e:	f00b fbfb 	bl	800c038 <iprintf>
      HAL_Delay(1000);
 8000842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000846:	f000 fd27 	bl	8001298 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800084a:	f00a ff79 	bl	800b740 <MX_USB_HOST_Process>
      DS3231_ReadTime(&hours, &minutes, &seconds);
 800084e:	bf00      	nop
 8000850:	e7e9      	b.n	8000826 <main+0x62>
 8000852:	bf00      	nop
 8000854:	2000025c 	.word	0x2000025c
 8000858:	20000260 	.word	0x20000260
 800085c:	0800cbec 	.word	0x0800cbec
 8000860:	200001e4 	.word	0x200001e4
 8000864:	20000154 	.word	0x20000154
 8000868:	2000019c 	.word	0x2000019c
 800086c:	0800cc10 	.word	0x0800cc10

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	@ 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	@ 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f00b fc2f 	bl	800c0e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b28      	ldr	r3, [pc, #160]	@ (800093c <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089c:	4a27      	ldr	r2, [pc, #156]	@ (800093c <SystemClock_Config+0xcc>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a4:	4b25      	ldr	r3, [pc, #148]	@ (800093c <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <SystemClock_Config+0xd0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008bc:	4a20      	ldr	r2, [pc, #128]	@ (8000940 <SystemClock_Config+0xd0>)
 80008be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008e4:	230f      	movs	r3, #15
 80008e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008e8:	2390      	movs	r3, #144	@ 0x90
 80008ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008f0:	2305      	movs	r3, #5
 80008f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f004 f9d5 	bl	8004ca8 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000904:	f000 f9d8 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2101      	movs	r1, #1
 8000924:	4618      	mov	r0, r3
 8000926:	f004 fc37 	bl	8005198 <HAL_RCC_ClockConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000930:	f000 f9c2 	bl	8000cb8 <Error_Handler>
  }
}
 8000934:	bf00      	nop
 8000936:	3750      	adds	r7, #80	@ 0x50
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_I2C1_Init+0x50>)
 800094a:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <MX_I2C1_Init+0x54>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000950:	4a12      	ldr	r2, [pc, #72]	@ (800099c <MX_I2C1_Init+0x58>)
 8000952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000962:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000982:	f003 f96d 	bl	8003c60 <HAL_I2C_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800098c:	f000 f994 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000a8 	.word	0x200000a8
 8000998:	40005400 	.word	0x40005400
 800099c:	000186a0 	.word	0x000186a0

080009a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009a6:	4a18      	ldr	r2, [pc, #96]	@ (8000a08 <MX_SPI1_Init+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009d4:	2220      	movs	r2, #32
 80009d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009ec:	220a      	movs	r2, #10
 80009ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <MX_SPI1_Init+0x64>)
 80009f2:	f004 fdb1 	bl	8005558 <HAL_SPI_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009fc:	f000 f95c 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000fc 	.word	0x200000fc
 8000a08:	40013000 	.word	0x40013000

08000a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <MX_USART1_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f004 fe11 	bl	800566a <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f933 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000154 	.word	0x20000154
 8000a5c:	40011000 	.word	0x40011000

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <MX_USART2_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a98:	f004 fde7 	bl	800566a <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa2:	f000 f909 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000019c 	.word	0x2000019c
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	@ 0x28
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b3b      	ldr	r3, [pc, #236]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a3a      	ldr	r2, [pc, #232]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b34      	ldr	r3, [pc, #208]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a33      	ldr	r2, [pc, #204]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b2d      	ldr	r3, [pc, #180]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b26      	ldr	r3, [pc, #152]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a25      	ldr	r2, [pc, #148]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b40:	481f      	ldr	r0, [pc, #124]	@ (8000bc0 <MX_GPIO_Init+0x10c>)
 8000b42:	f000 ff0d 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2110      	movs	r1, #16
 8000b4a:	481e      	ldr	r0, [pc, #120]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b4c:	f000 ff08 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OnBoardLED_Pin */
  GPIO_InitStruct.Pin = OnBoardLED_Pin;
 8000b50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OnBoardLED_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4815      	ldr	r0, [pc, #84]	@ (8000bc0 <MX_GPIO_Init+0x10c>)
 8000b6a:	f000 fd5d 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : RainGuagePulseInput_Pin */
  GPIO_InitStruct.Pin = RainGuagePulseInput_Pin;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RainGuagePulseInput_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4810      	ldr	r0, [pc, #64]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b84:	f000 fd50 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000ba0:	f000 fd42 	bl	8001628 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2007      	movs	r0, #7
 8000baa:	f000 fc74 	bl	8001496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bae:	2007      	movs	r0, #7
 8000bb0:	f000 fc8d 	bl	80014ce <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	@ 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_UART_RxCpltCallback>:
   @param  UartHandle: UART handle.
   @note   This callback executes once defined bytes of reception completed
   @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
//	  if (UartHandle->Instance == USART1)
//	  {
////		    HAL_UART_Receive_IT(&huart1, (uint8_t *) &aRxBuffer, 1);
//	  }
	  if (UartHandle->Instance == USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c04 <HAL_UART_RxCpltCallback+0x3c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d10f      	bne.n	8000bfa <HAL_UART_RxCpltCallback+0x32>
	  {
		    HAL_UART_Receive_IT(&huart2, (uint8_t *) &aRxBuffer, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	490a      	ldr	r1, [pc, #40]	@ (8000c08 <HAL_UART_RxCpltCallback+0x40>)
 8000bde:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <HAL_UART_RxCpltCallback+0x44>)
 8000be0:	f004 fe1e 	bl	8005820 <HAL_UART_Receive_IT>
		    g_buff[wr_ptr++] = aRxBuffer;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_UART_RxCpltCallback+0x48>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	b2d1      	uxtb	r1, r2
 8000bec:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_UART_RxCpltCallback+0x48>)
 8000bee:	7011      	strb	r1, [r2, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_UART_RxCpltCallback+0x40>)
 8000bf4:	7819      	ldrb	r1, [r3, #0]
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <HAL_UART_RxCpltCallback+0x4c>)
 8000bf8:	5499      	strb	r1, [r3, r2]
//		    printf("%c", aRxBuffer);
	  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40004400 	.word	0x40004400
 8000c08:	200001e4 	.word	0x200001e4
 8000c0c:	2000019c 	.word	0x2000019c
 8000c10:	2000024c 	.word	0x2000024c
 8000c14:	200001e8 	.word	0x200001e8

08000c18 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	  if (UartHandle->Instance == USART1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <HAL_UART_TxCpltCallback+0x34>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d102      	bne.n	8000c30 <HAL_UART_TxCpltCallback+0x18>
	  {
	    /* Set transmission flag: transfer complete */
		  SerialTxReady = SET;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_UART_TxCpltCallback+0x38>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
	  }
	  if (UartHandle->Instance == USART2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <HAL_UART_TxCpltCallback+0x3c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d102      	bne.n	8000c40 <HAL_UART_TxCpltCallback+0x28>
	  {
	    /* Set transmission flag: transfer complete */
		  ModemTxReady = SET;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <HAL_UART_TxCpltCallback+0x40>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
	  }
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	200001e5 	.word	0x200001e5
 8000c54:	40004400 	.word	0x40004400
 8000c58:	20000000 	.word	0x20000000

08000c5c <HAL_GPIO_EXTI_Callback>:
   @brief EXTI line detection callbacks
   @param GPIO_Pin: Specifies the pins connected EXTI line
   @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == RainGuagePulseInput_Pin)
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d10b      	bne.n	8000c84 <HAL_GPIO_EXTI_Callback+0x28>
  {
    if (HAL_GPIO_ReadPin(RainGuagePulseInput_GPIO_Port, RainGuagePulseInput_Pin)
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x30>)
 8000c70:	f000 fe5e 	bl	8001930 <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d104      	bne.n	8000c84 <HAL_GPIO_EXTI_Callback+0x28>
         == GPIO_PIN_SET)
    {
    	HAL_GPIO_TogglePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin);
 8000c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7e:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c80:	f000 fe87 	bl	8001992 <HAL_GPIO_TogglePin>
    }
  }
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020800 	.word	0x40020800

08000c94 <__io_putchar>:
   @brief  Retargets the C library APP_DEBUG_STR function to the USART.
   @param  None
   @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0XFFFF);
 8000c9c:	1d39      	adds	r1, r7, #4
 8000c9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <__io_putchar+0x20>)
 8000ca6:	f004 fd30 	bl	800570a <HAL_UART_Transmit>
  return ch;
 8000caa:	687b      	ldr	r3, [r7, #4]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000154 	.word	0x20000154

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <Error_Handler+0x8>

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <HAL_I2C_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DS3231_SCL_Pin|DS3231_SDA_Pin;
 8000d52:	23c0      	movs	r3, #192	@ 0xc0
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d56:	2312      	movs	r3, #18
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d62:	2304      	movs	r3, #4
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <HAL_I2C_MspInit+0x8c>)
 8000d6e:	f000 fc5b 	bl	8001628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	@ 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40005400 	.word	0x40005400
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020400 	.word	0x40020400

08000da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	@ (8000e28 <HAL_SPI_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12b      	bne.n	8000e1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <HAL_SPI_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a10      	ldr	r2, [pc, #64]	@ (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <HAL_SPI_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dfe:	23e0      	movs	r3, #224	@ 0xe0
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <HAL_SPI_MspInit+0x8c>)
 8000e1a:	f000 fc05 	bl	8001628 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40013000 	.word	0x40013000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a3a      	ldr	r2, [pc, #232]	@ (8000f3c <HAL_UART_MspInit+0x108>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d135      	bne.n	8000ec2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4b39      	ldr	r3, [pc, #228]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5e:	4a38      	ldr	r2, [pc, #224]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e66:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b32      	ldr	r3, [pc, #200]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a31      	ldr	r2, [pc, #196]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_Tx_Pin|MODEM_Rx_Pin;
 8000e8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4826      	ldr	r0, [pc, #152]	@ (8000f44 <HAL_UART_MspInit+0x110>)
 8000eac:	f000 fbbc 	bl	8001628 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2025      	movs	r0, #37	@ 0x25
 8000eb6:	f000 faee 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eba:	2025      	movs	r0, #37	@ 0x25
 8000ebc:	f000 fb07 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec0:	e038      	b.n	8000f34 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <HAL_UART_MspInit+0x114>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d133      	bne.n	8000f34 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef0:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <HAL_UART_MspInit+0x10c>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERIAL_Tx_Pin|SERIAL_Rx_Pin;
 8000f04:	230c      	movs	r3, #12
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f14:	2307      	movs	r3, #7
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <HAL_UART_MspInit+0x110>)
 8000f20:	f000 fb82 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2026      	movs	r0, #38	@ 0x26
 8000f2a:	f000 fab4 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f2e:	2026      	movs	r0, #38	@ 0x26
 8000f30:	f000 facd 	bl	80014ce <HAL_NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	@ 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40004400 	.word	0x40004400

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 f959 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <USART1_IRQHandler+0x10>)
 8000fb2:	f004 fc5b 	bl	800586c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000154 	.word	0x20000154

08000fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <USART2_IRQHandler+0x10>)
 8000fc6:	f004 fc51 	bl	800586c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000019c 	.word	0x2000019c

08000fd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <OTG_FS_IRQHandler+0x10>)
 8000fda:	f000 ffed 	bl	8001fb8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200016a8 	.word	0x200016a8

08000fe8 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000fec:	2002      	movs	r0, #2
 8000fee:	f000 fceb 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e00a      	b.n	800101e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001008:	f3af 8000 	nop.w
 800100c:	4601      	mov	r1, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	60ba      	str	r2, [r7, #8]
 8001014:	b2ca      	uxtb	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	dbf0      	blt.n	8001008 <_read+0x12>
  }

  return len;
 8001026:	687b      	ldr	r3, [r7, #4]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e009      	b.n	8001056 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	60ba      	str	r2, [r7, #8]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fe22 	bl	8000c94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	dbf1      	blt.n	8001042 <_write+0x12>
  }
  return len;
 800105e:	687b      	ldr	r3, [r7, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_close>:

int _close(int file)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001090:	605a      	str	r2, [r3, #4]
  return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_isatty>:

int _isatty(int file)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a8:	2301      	movs	r3, #1
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f00b f84e 	bl	800c1a0 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20010000 	.word	0x20010000
 8001130:	00000400 	.word	0x00000400
 8001134:	20000250 	.word	0x20000250
 8001138:	20001bd8 	.word	0x20001bd8

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001164:	f7ff ffea 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f00b f80d 	bl	800c1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fb17 	bl	80007c4 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80011a4:	0800ccdc 	.word	0x0800ccdc
  ldr r2, =_sbss
 80011a8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80011ac:	20001bd4 	.word	0x20001bd4

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <HAL_Init+0x40>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <HAL_Init+0x40>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	@ (80011f4 <HAL_Init+0x40>)
 80011d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f94f 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fd6c 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f967 	bl	80014ea <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f92f 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000004 	.word	0x20000004
 8001250:	2000000c 	.word	0x2000000c
 8001254:	20000008 	.word	0x20000008

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000254 	.word	0x20000254

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000254 	.word	0x20000254

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000000c 	.word	0x2000000c

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4907      	ldr	r1, [pc, #28]	@ (800137c <__NVIC_EnableIRQ+0x38>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	@ (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff8e 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff29 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff3e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff8e 	bl	80013d4 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff31 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff feb6 	bl	8001280 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d008      	beq.n	8001534 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2280      	movs	r2, #128	@ 0x80
 8001526:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e052      	b.n	80015da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0216 	bic.w	r2, r2, #22
 8001542:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001552:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	2b00      	cmp	r3, #0
 800155a:	d103      	bne.n	8001564 <HAL_DMA_Abort+0x62>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0208 	bic.w	r2, r2, #8
 8001572:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001584:	e013      	b.n	80015ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001586:	f7ff fe7b 	bl	8001280 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b05      	cmp	r3, #5
 8001592:	d90c      	bls.n	80015ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2220      	movs	r2, #32
 8001598:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2203      	movs	r2, #3
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e015      	b.n	80015da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e4      	bne.n	8001586 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c0:	223f      	movs	r2, #63	@ 0x3f
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d004      	beq.n	8001600 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e00c      	b.n	800161a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2205      	movs	r2, #5
 8001604:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e159      	b.n	80018f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8148 	bne.w	80018f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d005      	beq.n	800167a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	2b02      	cmp	r3, #2
 8001678:	d130      	bne.n	80016dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 0201 	and.w	r2, r3, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d017      	beq.n	8001718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80a2 	beq.w	80018f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b57      	ldr	r3, [pc, #348]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a56      	ldr	r2, [pc, #344]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b54      	ldr	r3, [pc, #336]	@ (8001910 <HAL_GPIO_Init+0x2e8>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ca:	4a52      	ldr	r2, [pc, #328]	@ (8001914 <HAL_GPIO_Init+0x2ec>)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a49      	ldr	r2, [pc, #292]	@ (8001918 <HAL_GPIO_Init+0x2f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x202>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a48      	ldr	r2, [pc, #288]	@ (800191c <HAL_GPIO_Init+0x2f4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x1fe>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a47      	ldr	r2, [pc, #284]	@ (8001920 <HAL_GPIO_Init+0x2f8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x1fa>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a46      	ldr	r2, [pc, #280]	@ (8001924 <HAL_GPIO_Init+0x2fc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x1f6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a45      	ldr	r2, [pc, #276]	@ (8001928 <HAL_GPIO_Init+0x300>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x1f2>
 8001816:	2304      	movs	r3, #4
 8001818:	e008      	b.n	800182c <HAL_GPIO_Init+0x204>
 800181a:	2307      	movs	r3, #7
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x204>
 800181e:	2303      	movs	r3, #3
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x204>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x204>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x204>
 800182a:	2300      	movs	r3, #0
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4093      	lsls	r3, r2
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183c:	4935      	ldr	r1, [pc, #212]	@ (8001914 <HAL_GPIO_Init+0x2ec>)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <HAL_GPIO_Init+0x304>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186e:	4a2f      	ldr	r2, [pc, #188]	@ (800192c <HAL_GPIO_Init+0x304>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001874:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <HAL_GPIO_Init+0x304>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001898:	4a24      	ldr	r2, [pc, #144]	@ (800192c <HAL_GPIO_Init+0x304>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c2:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ec:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	f67f aea2 	bls.w	8001644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3724      	adds	r7, #36	@ 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40013800 	.word	0x40013800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40020800 	.word	0x40020800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40021000 	.word	0x40021000
 800192c:	40013c00 	.word	0x40013c00

08001930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	041a      	lsls	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	041a      	lsls	r2, r3, #16
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	400b      	ands	r3, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	619a      	str	r2, [r3, #24]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f938 	bl	8000c5c <HAL_GPIO_EXTI_Callback>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40013c00 	.word	0x40013c00

080019f8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e059      	b.n	8001abe <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d106      	bne.n	8001a2a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f009 fedb 	bl	800b7e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a38:	d102      	bne.n	8001a40 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fed2 	bl	80067ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7c1a      	ldrb	r2, [r3, #16]
 8001a52:	f88d 2000 	strb.w	r2, [sp]
 8001a56:	3304      	adds	r3, #4
 8001a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a5a:	f004 fe53 	bl	8006704 <USB_CoreInit>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e026      	b.n	8001abe <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 feca 	bl	8006810 <USB_SetCurrentMode>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2202      	movs	r2, #2
 8001a86:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e017      	b.n	8001abe <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7c1a      	ldrb	r2, [r3, #16]
 8001a96:	f88d 2000 	strb.w	r2, [sp]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9e:	f005 f86d 	bl	8006b7c <USB_HostInit>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e004      	b.n	8001abe <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001ac6:	b590      	push	{r4, r7, lr}
 8001ac8:	b08b      	sub	sp, #44	@ 0x2c
 8001aca:	af04      	add	r7, sp, #16
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	4608      	mov	r0, r1
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	70fb      	strb	r3, [r7, #3]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70bb      	strb	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001ae0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001ae2:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_HCD_HC_Init+0x2c>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e09d      	b.n	8001c2e <HAL_HCD_HC_Init+0x168>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	3319      	adds	r3, #25
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3314      	adds	r3, #20
 8001b1e:	787a      	ldrb	r2, [r7, #1]
 8001b20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	3315      	adds	r3, #21
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	3326      	adds	r3, #38	@ 0x26
 8001b46:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	78bb      	ldrb	r3, [r7, #2]
 8001b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b54:	b2d8      	uxtb	r0, r3
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3316      	adds	r3, #22
 8001b64:	4602      	mov	r2, r0
 8001b66:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fbc7 	bl	8002300 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001b72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da0a      	bge.n	8001b90 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	3317      	adds	r3, #23
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e009      	b.n	8001ba4 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3317      	adds	r3, #23
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 f935 	bl	8006e18 <USB_GetHostSpeed>
 8001bae:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001bb0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001bb8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_HCD_HC_Init+0x10a>
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d104      	bne.n	8001bd0 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2bbc      	cmp	r3, #188	@ 0xbc
 8001bca:	d901      	bls.n	8001bd0 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001bcc:	23bc      	movs	r3, #188	@ 0xbc
 8001bce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	3318      	adds	r3, #24
 8001be0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001be4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	b298      	uxth	r0, r3
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3328      	adds	r3, #40	@ 0x28
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	787c      	ldrb	r4, [r7, #1]
 8001c08:	78ba      	ldrb	r2, [r7, #2]
 8001c0a:	78f9      	ldrb	r1, [r7, #3]
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	f005 f924 	bl	8006e68 <USB_HC_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}

08001c36 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_HCD_HC_Halt+0x1e>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e00f      	b.n	8001c74 <HAL_HCD_HC_Halt+0x3e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fc6a 	bl	800753e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	70fb      	strb	r3, [r7, #3]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	70bb      	strb	r3, [r7, #2]
 8001c92:	4613      	mov	r3, r2
 8001c94:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3317      	adds	r3, #23
 8001ca6:	78ba      	ldrb	r2, [r7, #2]
 8001ca8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3326      	adds	r3, #38	@ 0x26
 8001cba:	787a      	ldrb	r2, [r7, #1]
 8001cbc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001cbe:	7c3b      	ldrb	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d114      	bne.n	8001cee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	332a      	adds	r3, #42	@ 0x2a
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3319      	adds	r3, #25
 8001ce8:	7f3a      	ldrb	r2, [r7, #28]
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e009      	b.n	8001d02 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	332a      	adds	r3, #42	@ 0x2a
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d02:	787b      	ldrb	r3, [r7, #1]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	f200 8102 	bhi.w	8001f0e <HAL_HCD_HC_SubmitRequest+0x292>
 8001d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d10 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001ef9 	.word	0x08001ef9
 8001d18:	08001de5 	.word	0x08001de5
 8001d1c:	08001e6f 	.word	0x08001e6f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001d20:	7c3b      	ldrb	r3, [r7, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	f040 80f5 	bne.w	8001f12 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001d28:	78bb      	ldrb	r3, [r7, #2]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d12d      	bne.n	8001d8a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001d2e:	8b3b      	ldrh	r3, [r7, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	333d      	adds	r3, #61	@ 0x3d
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	333d      	adds	r3, #61	@ 0x3d
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10a      	bne.n	8001d74 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	332a      	adds	r3, #42	@ 0x2a
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001d72:	e0ce      	b.n	8001f12 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	332a      	adds	r3, #42	@ 0x2a
 8001d84:	2202      	movs	r2, #2
 8001d86:	701a      	strb	r2, [r3, #0]
      break;
 8001d88:	e0c3      	b.n	8001f12 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	331a      	adds	r3, #26
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	f040 80b8 	bne.w	8001f12 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	333c      	adds	r3, #60	@ 0x3c
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	332a      	adds	r3, #42	@ 0x2a
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
      break;
 8001dcc:	e0a1      	b.n	8001f12 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	332a      	adds	r3, #42	@ 0x2a
 8001dde:	2202      	movs	r2, #2
 8001de0:	701a      	strb	r2, [r3, #0]
      break;
 8001de2:	e096      	b.n	8001f12 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001de4:	78bb      	ldrb	r3, [r7, #2]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d120      	bne.n	8001e2c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	333d      	adds	r3, #61	@ 0x3d
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	332a      	adds	r3, #42	@ 0x2a
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e14:	e07e      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	332a      	adds	r3, #42	@ 0x2a
 8001e26:	2202      	movs	r2, #2
 8001e28:	701a      	strb	r2, [r3, #0]
      break;
 8001e2a:	e073      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	333c      	adds	r3, #60	@ 0x3c
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	332a      	adds	r3, #42	@ 0x2a
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
      break;
 8001e56:	e05d      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	332a      	adds	r3, #42	@ 0x2a
 8001e68:	2202      	movs	r2, #2
 8001e6a:	701a      	strb	r2, [r3, #0]
      break;
 8001e6c:	e052      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e6e:	78bb      	ldrb	r3, [r7, #2]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d120      	bne.n	8001eb6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	333d      	adds	r3, #61	@ 0x3d
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	332a      	adds	r3, #42	@ 0x2a
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e9e:	e039      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	332a      	adds	r3, #42	@ 0x2a
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
      break;
 8001eb4:	e02e      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	333c      	adds	r3, #60	@ 0x3c
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	332a      	adds	r3, #42	@ 0x2a
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
      break;
 8001ee0:	e018      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	332a      	adds	r3, #42	@ 0x2a
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	701a      	strb	r2, [r3, #0]
      break;
 8001ef6:	e00d      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	332a      	adds	r3, #42	@ 0x2a
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001f12:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	332c      	adds	r3, #44	@ 0x2c
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	8b39      	ldrh	r1, [r7, #24]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4403      	add	r3, r0
 8001f38:	3334      	adds	r3, #52	@ 0x34
 8001f3a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	334c      	adds	r3, #76	@ 0x4c
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3338      	adds	r3, #56	@ 0x38
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3315      	adds	r3, #21
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	334d      	adds	r3, #77	@ 0x4d
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3310      	adds	r3, #16
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	1d19      	adds	r1, r3, #4
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	799b      	ldrb	r3, [r3, #6]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f005 f874 	bl	8007094 <USB_HC_StartXfer>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 fd94 	bl	8006afc <USB_GetMode>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 80fb 	bne.w	80021d2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 fd57 	bl	8006a94 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80f1 	beq.w	80021d0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f004 fd4e 	bl	8006a94 <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002002:	d104      	bne.n	800200e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800200c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fd3e 	bl	8006a94 <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800201e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002022:	d104      	bne.n	800202e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800202c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fd2e 	bl	8006a94 <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800203e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002042:	d104      	bne.n	800204e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800204c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f004 fd1e 	bl	8006a94 <USB_ReadInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d103      	bne.n	800206a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2202      	movs	r2, #2
 8002068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f004 fd10 	bl	8006a94 <USB_ReadInterrupts>
 8002074:	4603      	mov	r3, r0
 8002076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800207a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800207e:	d120      	bne.n	80020c2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002088:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d113      	bne.n	80020c2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800209a:	2110      	movs	r1, #16
 800209c:	6938      	ldr	r0, [r7, #16]
 800209e:	f004 fc03 	bl	80068a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020a2:	6938      	ldr	r0, [r7, #16]
 80020a4:	f004 fc32 	bl	800690c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7a5b      	ldrb	r3, [r3, #9]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d105      	bne.n	80020bc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 fe0e 	bl	8006cd8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f009 fbff 	bl	800b8c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fce4 	bl	8006a94 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d6:	d102      	bne.n	80020de <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f001 fd4d 	bl	8003b78 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 fcd6 	bl	8006a94 <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d106      	bne.n	8002100 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f009 fbc8 	bl	800b888 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2208      	movs	r2, #8
 80020fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f004 fcc5 	bl	8006a94 <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002114:	d139      	bne.n	800218a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f005 f9fe 	bl	800751c <USB_HC_ReadInterrupt>
 8002120:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e025      	b.n	8002174 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d018      	beq.n	800216e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800214e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002152:	d106      	bne.n	8002162 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f905 	bl	800236a <HCD_HC_IN_IRQHandler>
 8002160:	e005      	b.n	800216e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 ff67 	bl	800303c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	795b      	ldrb	r3, [r3, #5]
 8002178:	461a      	mov	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	4293      	cmp	r3, r2
 800217e:	d3d3      	bcc.n	8002128 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fc80 	bl	8006a94 <USB_ReadInterrupts>
 8002194:	4603      	mov	r3, r0
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b10      	cmp	r3, #16
 800219c:	d101      	bne.n	80021a2 <HAL_HCD_IRQHandler+0x1ea>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_HCD_IRQHandler+0x1ec>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d014      	beq.n	80021d2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0210 	bic.w	r2, r2, #16
 80021b6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f001 fbfe 	bl	80039ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0210 	orr.w	r2, r2, #16
 80021cc:	619a      	str	r2, [r3, #24]
 80021ce:	e000      	b.n	80021d2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80021d0:	bf00      	nop
    }
  }
}
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_HCD_Start+0x16>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e013      	b.n	8002216 <HAL_HCD_Start+0x3e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2101      	movs	r1, #1
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 fdd2 	bl	8006da6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fae0 	bl	80067cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_HCD_Stop+0x16>
 8002230:	2302      	movs	r3, #2
 8002232:	e00d      	b.n	8002250 <HAL_HCD_Stop+0x32>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f005 fa9c 	bl	800777e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fd74 	bl	8006d52 <USB_ResetPort>
 800226a:	4603      	mov	r3, r0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	334c      	adds	r3, #76	@ 0x4c
 8002290:	781b      	ldrb	r3, [r3, #0]
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3338      	adds	r3, #56	@ 0x38
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 fdb6 	bl	8006e46 <USB_GetCurrentFrame>
 80022da:	4603      	mov	r3, r0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 fd91 	bl	8006e18 <USB_GetHostSpeed>
 80022f6:	4603      	mov	r3, r0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	331a      	adds	r3, #26
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	331b      	adds	r3, #27
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3325      	adds	r3, #37	@ 0x25
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3324      	adds	r3, #36	@ 0x24
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f004 fb96 	bl	8006aba <USB_ReadChInterrupts>
 800238e:	4603      	mov	r3, r0
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11a      	bne.n	80023ce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	2304      	movs	r3, #4
 80023a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	334d      	adds	r3, #77	@ 0x4d
 80023ba:	2207      	movs	r2, #7
 80023bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f005 f8b9 	bl	800753e <USB_HC_Halt>
 80023cc:	e09e      	b.n	800250c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fb6f 	bl	8006aba <USB_ReadChInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023e6:	d11b      	bne.n	8002420 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	334d      	adds	r3, #77	@ 0x4d
 800240c:	2208      	movs	r2, #8
 800240e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f005 f890 	bl	800753e <USB_HC_Halt>
 800241e:	e075      	b.n	800250c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f004 fb46 	bl	8006aba <USB_ReadChInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b08      	cmp	r3, #8
 8002436:	d11a      	bne.n	800246e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002444:	461a      	mov	r2, r3
 8002446:	2308      	movs	r3, #8
 8002448:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	334d      	adds	r3, #77	@ 0x4d
 800245a:	2206      	movs	r2, #6
 800245c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f005 f869 	bl	800753e <USB_HC_Halt>
 800246c:	e04e      	b.n	800250c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f004 fb1f 	bl	8006aba <USB_ReadChInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002486:	d11b      	bne.n	80024c0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002494:	461a      	mov	r2, r3
 8002496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800249a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	334d      	adds	r3, #77	@ 0x4d
 80024ac:	2209      	movs	r2, #9
 80024ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f005 f840 	bl	800753e <USB_HC_Halt>
 80024be:	e025      	b.n	800250c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f004 faf6 	bl	8006aba <USB_ReadChInterrupts>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d4:	2b80      	cmp	r3, #128	@ 0x80
 80024d6:	d119      	bne.n	800250c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2380      	movs	r3, #128	@ 0x80
 80024e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	334d      	adds	r3, #77	@ 0x4d
 80024fa:	2207      	movs	r2, #7
 80024fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f005 f819 	bl	800753e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f004 fad0 	bl	8006aba <USB_ReadChInterrupts>
 800251a:	4603      	mov	r3, r0
 800251c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002524:	d112      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f005 f805 	bl	800753e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002546:	6093      	str	r3, [r2, #8]
 8002548:	f000 bd75 	b.w	8003036 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f004 fab0 	bl	8006aba <USB_ReadChInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	f040 8128 	bne.w	80027b6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002572:	461a      	mov	r2, r3
 8002574:	2320      	movs	r3, #32
 8002576:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	331b      	adds	r3, #27
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d119      	bne.n	80025c2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	331b      	adds	r3, #27
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	0151      	lsls	r1, r2, #5
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	440a      	add	r2, r1
 80025b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	799b      	ldrb	r3, [r3, #6]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01b      	beq.n	8002602 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3330      	adds	r3, #48	@ 0x30
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	1ac9      	subs	r1, r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4403      	add	r3, r0
 80025fe:	3338      	adds	r3, #56	@ 0x38
 8002600:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	334d      	adds	r3, #77	@ 0x4d
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3344      	adds	r3, #68	@ 0x44
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002636:	461a      	mov	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3326      	adds	r3, #38	@ 0x26
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3326      	adds	r3, #38	@ 0x26
 8002662:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002664:	2b02      	cmp	r3, #2
 8002666:	d110      	bne.n	800268a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f004 ff64 	bl	800753e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2310      	movs	r3, #16
 8002686:	6093      	str	r3, [r2, #8]
 8002688:	e03d      	b.n	8002706 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3326      	adds	r3, #38	@ 0x26
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d00a      	beq.n	80026b6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3326      	adds	r3, #38	@ 0x26
 80026b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d127      	bne.n	8002706 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	0151      	lsls	r1, r2, #5
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	440a      	add	r2, r1
 80026cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80026d4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	334c      	adds	r3, #76	@ 0x4c
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	334c      	adds	r3, #76	@ 0x4c
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f009 f8eb 	bl	800b8dc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	799b      	ldrb	r3, [r3, #6]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d13b      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3338      	adds	r3, #56	@ 0x38
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4403      	add	r3, r0
 800272e:	3328      	adds	r3, #40	@ 0x28
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	440b      	add	r3, r1
 8002734:	1e59      	subs	r1, r3, #1
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4403      	add	r3, r0
 8002744:	3328      	adds	r3, #40	@ 0x28
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	fbb1 f3f3 	udiv	r3, r1, r3
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8470 	beq.w	8003036 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	333c      	adds	r3, #60	@ 0x3c
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	f083 0301 	eor.w	r3, r3, #1
 800276e:	b2d8      	uxtb	r0, r3
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	333c      	adds	r3, #60	@ 0x3c
 800277e:	4602      	mov	r2, r0
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	f000 bc58 	b.w	8003036 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	333c      	adds	r3, #60	@ 0x3c
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	f083 0301 	eor.w	r3, r3, #1
 800279e:	b2d8      	uxtb	r0, r3
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	333c      	adds	r3, #60	@ 0x3c
 80027ae:	4602      	mov	r2, r0
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	f000 bc40 	b.w	8003036 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 f97b 	bl	8006aba <USB_ReadChInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d131      	bne.n	8002832 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	2320      	movs	r3, #32
 80027de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	331a      	adds	r3, #26
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	f040 841f 	bne.w	8003036 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	331b      	adds	r3, #27
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334d      	adds	r3, #77	@ 0x4d
 800281c:	2203      	movs	r2, #3
 800281e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f004 fe88 	bl	800753e <USB_HC_Halt>
 800282e:	f000 bc02 	b.w	8003036 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f004 f93d 	bl	8006aba <USB_ReadChInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	f040 8305 	bne.w	8002e56 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002858:	461a      	mov	r2, r3
 800285a:	2302      	movs	r3, #2
 800285c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	334d      	adds	r3, #77	@ 0x4d
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d114      	bne.n	800289e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334c      	adds	r3, #76	@ 0x4c
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e2cc      	b.n	8002e38 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	334d      	adds	r3, #77	@ 0x4d
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d114      	bne.n	80028de <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	334d      	adds	r3, #77	@ 0x4d
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	334c      	adds	r3, #76	@ 0x4c
 80028d8:	2205      	movs	r2, #5
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e2ac      	b.n	8002e38 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	334d      	adds	r3, #77	@ 0x4d
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d00b      	beq.n	800290c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	334d      	adds	r3, #77	@ 0x4d
 8002904:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002906:	2b09      	cmp	r3, #9
 8002908:	f040 80a6 	bne.w	8002a58 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	334d      	adds	r3, #77	@ 0x4d
 800291c:	2202      	movs	r2, #2
 800291e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	3344      	adds	r3, #68	@ 0x44
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1c59      	adds	r1, r3, #1
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4403      	add	r3, r0
 8002940:	3344      	adds	r3, #68	@ 0x44
 8002942:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3344      	adds	r3, #68	@ 0x44
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d943      	bls.n	80029e2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3344      	adds	r3, #68	@ 0x44
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	331a      	adds	r3, #26
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d123      	bne.n	80029cc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	331b      	adds	r3, #27
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	331c      	adds	r3, #28
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	0151      	lsls	r1, r2, #5
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	440a      	add	r2, r1
 80029c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ca:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	334c      	adds	r3, #76	@ 0x4c
 80029dc:	2204      	movs	r2, #4
 80029de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029e0:	e229      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	334c      	adds	r3, #76	@ 0x4c
 80029f2:	2202      	movs	r2, #2
 80029f4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3326      	adds	r3, #38	@ 0x26
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3326      	adds	r3, #38	@ 0x26
 8002a1c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	f040 8209 	bne.w	8002e36 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a3a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a42:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a56:	e1ee      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	334d      	adds	r3, #77	@ 0x4d
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	f040 80c8 	bne.w	8002c00 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	334d      	adds	r3, #77	@ 0x4d
 8002a80:	2202      	movs	r2, #2
 8002a82:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	331b      	adds	r3, #27
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	f040 81ce 	bne.w	8002e38 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3326      	adds	r3, #38	@ 0x26
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d16b      	bne.n	8002b8a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3348      	adds	r3, #72	@ 0x48
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	1c59      	adds	r1, r3, #1
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4403      	add	r3, r0
 8002ad2:	3348      	adds	r3, #72	@ 0x48
 8002ad4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3348      	adds	r3, #72	@ 0x48
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d943      	bls.n	8002b74 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3348      	adds	r3, #72	@ 0x48
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	331b      	adds	r3, #27
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3344      	adds	r3, #68	@ 0x44
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d809      	bhi.n	8002b3e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	331c      	adds	r3, #28
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	0151      	lsls	r1, r2, #5
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	440a      	add	r2, r1
 8002b54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b5c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	334c      	adds	r3, #76	@ 0x4c
 8002b6e:	2204      	movs	r2, #4
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e014      	b.n	8002b9e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334c      	adds	r3, #76	@ 0x4c
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e009      	b.n	8002b9e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	334c      	adds	r3, #76	@ 0x4c
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3326      	adds	r3, #38	@ 0x26
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00b      	beq.n	8002bcc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3326      	adds	r3, #38	@ 0x26
 8002bc4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	f040 8136 	bne.w	8002e38 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002be2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e11b      	b.n	8002e38 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	334d      	adds	r3, #77	@ 0x4d
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	f040 8081 	bne.w	8002d1a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	334d      	adds	r3, #77	@ 0x4d
 8002c28:	2202      	movs	r2, #2
 8002c2a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	331b      	adds	r3, #27
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	f040 80fa 	bne.w	8002e38 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	334c      	adds	r3, #76	@ 0x4c
 8002c54:	2202      	movs	r2, #2
 8002c56:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	0151      	lsls	r1, r2, #5
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c76:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	0151      	lsls	r1, r2, #5
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	440a      	add	r2, r1
 8002c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c96:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	0151      	lsls	r1, r2, #5
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	440a      	add	r2, r1
 8002cae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cb2:	f023 0320 	bic.w	r3, r3, #32
 8002cb6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3326      	adds	r3, #38	@ 0x26
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3326      	adds	r3, #38	@ 0x26
 8002cde:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	f040 80a9 	bne.w	8002e38 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002cfc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d04:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	e08e      	b.n	8002e38 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	334d      	adds	r3, #77	@ 0x4d
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d143      	bne.n	8002db8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	334d      	adds	r3, #77	@ 0x4d
 8002d40:	2202      	movs	r2, #2
 8002d42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	334c      	adds	r3, #76	@ 0x4c
 8002d54:	2202      	movs	r2, #2
 8002d56:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3326      	adds	r3, #38	@ 0x26
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3326      	adds	r3, #38	@ 0x26
 8002d7e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d159      	bne.n	8002e38 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d9a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002da2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db0:	461a      	mov	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e03f      	b.n	8002e38 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	334d      	adds	r3, #77	@ 0x4d
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d126      	bne.n	8002e1c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	334d      	adds	r3, #77	@ 0x4d
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3344      	adds	r3, #68	@ 0x44
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	1c59      	adds	r1, r3, #1
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4403      	add	r3, r0
 8002e02:	3344      	adds	r3, #68	@ 0x44
 8002e04:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	334c      	adds	r3, #76	@ 0x4c
 8002e16:	2204      	movs	r2, #4
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e00d      	b.n	8002e38 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	334d      	adds	r3, #77	@ 0x4d
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	f000 8100 	beq.w	8003034 <HCD_HC_IN_IRQHandler+0xcca>
 8002e34:	e000      	b.n	8002e38 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e36:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334c      	adds	r3, #76	@ 0x4c
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f008 fd44 	bl	800b8dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e54:	e0ef      	b.n	8003036 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fe2b 	bl	8006aba <USB_ReadChInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6a:	2b40      	cmp	r3, #64	@ 0x40
 8002e6c:	d12f      	bne.n	8002ece <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2340      	movs	r3, #64	@ 0x40
 8002e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	334d      	adds	r3, #77	@ 0x4d
 8002e90:	2205      	movs	r2, #5
 8002e92:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	331a      	adds	r3, #26
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3344      	adds	r3, #68	@ 0x44
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 fb39 	bl	800753e <USB_HC_Halt>
 8002ecc:	e0b3      	b.n	8003036 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 fdef 	bl	8006aba <USB_ReadChInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	f040 80a7 	bne.w	8003036 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3326      	adds	r3, #38	@ 0x26
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d11b      	bne.n	8002f36 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3344      	adds	r3, #68	@ 0x44
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	334d      	adds	r3, #77	@ 0x4d
 8002f22:	2204      	movs	r2, #4
 8002f24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 fb05 	bl	800753e <USB_HC_Halt>
 8002f34:	e03f      	b.n	8002fb6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3326      	adds	r3, #38	@ 0x26
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	3326      	adds	r3, #38	@ 0x26
 8002f5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d129      	bne.n	8002fb6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3344      	adds	r3, #68	@ 0x44
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	799b      	ldrb	r3, [r3, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HCD_HC_IN_IRQHandler+0xc2a>
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	331b      	adds	r3, #27
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d110      	bne.n	8002fb6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	334d      	adds	r3, #77	@ 0x4d
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fac4 	bl	800753e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	331b      	adds	r3, #27
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d129      	bne.n	8003020 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	331b      	adds	r3, #27
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	0151      	lsls	r1, r2, #5
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	440a      	add	r2, r1
 8002ff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	0151      	lsls	r1, r2, #5
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	440a      	add	r2, r1
 8003016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800301a:	f043 0320 	orr.w	r3, r3, #32
 800301e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2310      	movs	r3, #16
 8003030:	6093      	str	r3, [r2, #8]
 8003032:	e000      	b.n	8003036 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003034:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fd2d 	bl	8006aba <USB_ReadChInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d11b      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003076:	461a      	mov	r2, r3
 8003078:	2304      	movs	r3, #4
 800307a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	334d      	adds	r3, #77	@ 0x4d
 800308c:	2207      	movs	r2, #7
 800308e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f004 fa50 	bl	800753e <USB_HC_Halt>
 800309e:	f000 bc89 	b.w	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fd05 	bl	8006aba <USB_ReadChInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	f040 8082 	bne.w	80031c0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c8:	461a      	mov	r2, r3
 80030ca:	2320      	movs	r3, #32
 80030cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3319      	adds	r3, #25
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d124      	bne.n	800312e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3319      	adds	r3, #25
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	334c      	adds	r3, #76	@ 0x4c
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	334d      	adds	r3, #77	@ 0x4d
 800311c:	2203      	movs	r2, #3
 800311e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f004 fa08 	bl	800753e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	331a      	adds	r3, #26
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 8437 	bne.w	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	331b      	adds	r3, #27
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f040 842b 	bne.w	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3326      	adds	r3, #38	@ 0x26
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d009      	beq.n	8003188 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	331b      	adds	r3, #27
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	334d      	adds	r3, #77	@ 0x4d
 8003198:	2203      	movs	r2, #3
 800319a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 f9ca 	bl	800753e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3344      	adds	r3, #68	@ 0x44
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e3f9      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 fc76 	bl	8006aba <USB_ReadChInterrupts>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d8:	d111      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e6:	461a      	mov	r2, r3
 80031e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 f9a1 	bl	800753e <USB_HC_Halt>
 80031fc:	e3da      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fc57 	bl	8006aba <USB_ReadChInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d168      	bne.n	80032e8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3344      	adds	r3, #68	@ 0x44
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f003 fc41 	bl	8006aba <USB_ReadChInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323e:	2b40      	cmp	r3, #64	@ 0x40
 8003240:	d112      	bne.n	8003268 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3319      	adds	r3, #25
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	2340      	movs	r3, #64	@ 0x40
 8003266:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	331b      	adds	r3, #27
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d019      	beq.n	80032b2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	331b      	adds	r3, #27
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	0151      	lsls	r1, r2, #5
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	440a      	add	r2, r1
 80032a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032be:	461a      	mov	r2, r3
 80032c0:	2301      	movs	r3, #1
 80032c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	334d      	adds	r3, #77	@ 0x4d
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f004 f92c 	bl	800753e <USB_HC_Halt>
 80032e6:	e365      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fbe2 	bl	8006aba <USB_ReadChInterrupts>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b40      	cmp	r3, #64	@ 0x40
 80032fe:	d139      	bne.n	8003374 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334d      	adds	r3, #77	@ 0x4d
 8003310:	2205      	movs	r2, #5
 8003312:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	331a      	adds	r3, #26
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3319      	adds	r3, #25
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3344      	adds	r3, #68	@ 0x44
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f004 f8ef 	bl	800753e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2340      	movs	r3, #64	@ 0x40
 8003370:	6093      	str	r3, [r2, #8]
 8003372:	e31f      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fb9c 	bl	8006aba <USB_ReadChInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d11a      	bne.n	80033c2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003398:	461a      	mov	r2, r3
 800339a:	2308      	movs	r3, #8
 800339c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334d      	adds	r3, #77	@ 0x4d
 80033ae:	2206      	movs	r2, #6
 80033b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 f8bf 	bl	800753e <USB_HC_Halt>
 80033c0:	e2f8      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 fb75 	bl	8006aba <USB_ReadChInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d144      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3344      	adds	r3, #68	@ 0x44
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	334d      	adds	r3, #77	@ 0x4d
 80033fe:	2204      	movs	r2, #4
 8003400:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3319      	adds	r3, #25
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d114      	bne.n	8003442 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3318      	adds	r3, #24
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	3319      	adds	r3, #25
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f004 f877 	bl	800753e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345c:	461a      	mov	r2, r3
 800345e:	2310      	movs	r3, #16
 8003460:	6093      	str	r3, [r2, #8]
 8003462:	e2a7      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f003 fb24 	bl	8006aba <USB_ReadChInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003478:	2b80      	cmp	r3, #128	@ 0x80
 800347a:	f040 8083 	bne.w	8003584 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	799b      	ldrb	r3, [r3, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d111      	bne.n	80034aa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	334d      	adds	r3, #77	@ 0x4d
 8003496:	2207      	movs	r2, #7
 8003498:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f004 f84b 	bl	800753e <USB_HC_Halt>
 80034a8:	e062      	b.n	8003570 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3344      	adds	r3, #68	@ 0x44
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1c59      	adds	r1, r3, #1
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4403      	add	r3, r0
 80034ca:	3344      	adds	r3, #68	@ 0x44
 80034cc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3344      	adds	r3, #68	@ 0x44
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d922      	bls.n	800352a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3344      	adds	r3, #68	@ 0x44
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	334c      	adds	r3, #76	@ 0x4c
 8003508:	2204      	movs	r2, #4
 800350a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	334c      	adds	r3, #76	@ 0x4c
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f008 f9da 	bl	800b8dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003528:	e022      	b.n	8003570 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	334c      	adds	r3, #76	@ 0x4c
 800353a:	2202      	movs	r2, #2
 800353c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003554:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800355c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2380      	movs	r3, #128	@ 0x80
 8003580:	6093      	str	r3, [r2, #8]
 8003582:	e217      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f003 fa94 	bl	8006aba <USB_ReadChInterrupts>
 8003592:	4603      	mov	r3, r0
 8003594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359c:	d11b      	bne.n	80035d6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	334d      	adds	r3, #77	@ 0x4d
 80035ae:	2209      	movs	r2, #9
 80035b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 ffbf 	bl	800753e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035d2:	6093      	str	r3, [r2, #8]
 80035d4:	e1ee      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f003 fa6b 	bl	8006aba <USB_ReadChInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	f040 81df 	bne.w	80039ae <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	2302      	movs	r3, #2
 8003600:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	334d      	adds	r3, #77	@ 0x4d
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 8093 	bne.w	8003740 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	334d      	adds	r3, #77	@ 0x4d
 800362a:	2202      	movs	r2, #2
 800362c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334c      	adds	r3, #76	@ 0x4c
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3326      	adds	r3, #38	@ 0x26
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d00b      	beq.n	8003670 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3326      	adds	r3, #38	@ 0x26
 8003668:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800366a:	2b03      	cmp	r3, #3
 800366c:	f040 8190 	bne.w	8003990 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	799b      	ldrb	r3, [r3, #6]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d115      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	333d      	adds	r3, #61	@ 0x3d
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	f083 0301 	eor.w	r3, r3, #1
 8003690:	b2d8      	uxtb	r0, r3
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	333d      	adds	r3, #61	@ 0x3d
 80036a0:	4602      	mov	r2, r0
 80036a2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	799b      	ldrb	r3, [r3, #6]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 8171 	bne.w	8003990 <HCD_HC_OUT_IRQHandler+0x954>
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3334      	adds	r3, #52	@ 0x34
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8165 	beq.w	8003990 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	3334      	adds	r3, #52	@ 0x34
 80036d6:	6819      	ldr	r1, [r3, #0]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4403      	add	r3, r0
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	440b      	add	r3, r1
 80036ec:	1e59      	subs	r1, r3, #1
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4403      	add	r3, r0
 80036fc:	3328      	adds	r3, #40	@ 0x28
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	fbb1 f3f3 	udiv	r3, r1, r3
 8003704:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 813f 	beq.w	8003990 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	333d      	adds	r3, #61	@ 0x3d
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	f083 0301 	eor.w	r3, r3, #1
 800372a:	b2d8      	uxtb	r0, r3
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	333d      	adds	r3, #61	@ 0x3d
 800373a:	4602      	mov	r2, r0
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e127      	b.n	8003990 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	334d      	adds	r3, #77	@ 0x4d
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d120      	bne.n	8003798 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	334d      	adds	r3, #77	@ 0x4d
 8003766:	2202      	movs	r2, #2
 8003768:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	331b      	adds	r3, #27
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 8107 	bne.w	8003990 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	334c      	adds	r3, #76	@ 0x4c
 8003792:	2202      	movs	r2, #2
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	e0fb      	b.n	8003990 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	334d      	adds	r3, #77	@ 0x4d
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d13a      	bne.n	8003824 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	334d      	adds	r3, #77	@ 0x4d
 80037be:	2202      	movs	r2, #2
 80037c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	334c      	adds	r3, #76	@ 0x4c
 80037d2:	2202      	movs	r2, #2
 80037d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	331b      	adds	r3, #27
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f040 80d1 	bne.w	8003990 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	331b      	adds	r3, #27
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	0151      	lsls	r1, r2, #5
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	440a      	add	r2, r1
 8003818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800381c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003820:	6053      	str	r3, [r2, #4]
 8003822:	e0b5      	b.n	8003990 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	334d      	adds	r3, #77	@ 0x4d
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b05      	cmp	r3, #5
 8003838:	d114      	bne.n	8003864 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334d      	adds	r3, #77	@ 0x4d
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	334c      	adds	r3, #76	@ 0x4c
 800385e:	2202      	movs	r2, #2
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e095      	b.n	8003990 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	334d      	adds	r3, #77	@ 0x4d
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b06      	cmp	r3, #6
 8003878:	d114      	bne.n	80038a4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	334d      	adds	r3, #77	@ 0x4d
 800388a:	2202      	movs	r2, #2
 800388c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	334c      	adds	r3, #76	@ 0x4c
 800389e:	2205      	movs	r2, #5
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e075      	b.n	8003990 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	334d      	adds	r3, #77	@ 0x4d
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b07      	cmp	r3, #7
 80038b8:	d00a      	beq.n	80038d0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	334d      	adds	r3, #77	@ 0x4d
 80038ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d170      	bne.n	80039b2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	334d      	adds	r3, #77	@ 0x4d
 80038e0:	2202      	movs	r2, #2
 80038e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3344      	adds	r3, #68	@ 0x44
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1c59      	adds	r1, r3, #1
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4403      	add	r3, r0
 8003904:	3344      	adds	r3, #68	@ 0x44
 8003906:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	3344      	adds	r3, #68	@ 0x44
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d914      	bls.n	8003948 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	3344      	adds	r3, #68	@ 0x44
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	334c      	adds	r3, #76	@ 0x4c
 8003942:	2204      	movs	r2, #4
 8003944:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003946:	e022      	b.n	800398e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	334c      	adds	r3, #76	@ 0x4c
 8003958:	2202      	movs	r2, #2
 800395a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003972:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800397a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003988:	461a      	mov	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800398e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334c      	adds	r3, #76	@ 0x4c
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f007 ff98 	bl	800b8dc <HAL_HCD_HC_NotifyURBChange_Callback>
 80039ac:	e002      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80039b2:	bf00      	nop
  }
}
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b08a      	sub	sp, #40	@ 0x28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	0c5b      	lsrs	r3, r3, #17
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d004      	beq.n	8003a00 <HCD_RXQLVL_IRQHandler+0x46>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b05      	cmp	r3, #5
 80039fa:	f000 80b6 	beq.w	8003b6a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80039fe:	e0b7      	b.n	8003b70 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80b3 	beq.w	8003b6e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	332c      	adds	r3, #44	@ 0x2c
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80a7 	beq.w	8003b6e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3338      	adds	r3, #56	@ 0x38
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	18d1      	adds	r1, r2, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4403      	add	r3, r0
 8003a44:	3334      	adds	r3, #52	@ 0x34
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4299      	cmp	r1, r3
 8003a4a:	f200 8083 	bhi.w	8003b54 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	332c      	adds	r3, #44	@ 0x2c
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	b292      	uxth	r2, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f002 ffbb 	bl	80069e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	332c      	adds	r3, #44	@ 0x2c
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	18d1      	adds	r1, r2, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	332c      	adds	r3, #44	@ 0x2c
 8003a94:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3338      	adds	r3, #56	@ 0x38
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	18d1      	adds	r1, r2, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4403      	add	r3, r0
 8003aba:	3338      	adds	r3, #56	@ 0x38
 8003abc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	0cdb      	lsrs	r3, r3, #19
 8003ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3328      	adds	r3, #40	@ 0x28
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d13f      	bne.n	8003b6e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d03c      	beq.n	8003b6e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b0a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b12:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	333c      	adds	r3, #60	@ 0x3c
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	f083 0301 	eor.w	r3, r3, #1
 8003b3c:	b2d8      	uxtb	r0, r3
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4613      	mov	r3, r2
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	333c      	adds	r3, #60	@ 0x3c
 8003b4e:	4602      	mov	r2, r0
 8003b50:	701a      	strb	r2, [r3, #0]
      break;
 8003b52:	e00c      	b.n	8003b6e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	334c      	adds	r3, #76	@ 0x4c
 8003b64:	2204      	movs	r2, #4
 8003b66:	701a      	strb	r2, [r3, #0]
      break;
 8003b68:	e001      	b.n	8003b6e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003b6e:	bf00      	nop
  }
}
 8003b70:	bf00      	nop
 8003b72:	3728      	adds	r7, #40	@ 0x28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003ba4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d10b      	bne.n	8003bc8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f007 fe72 	bl	800b8a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f043 0302 	orr.w	r3, r3, #2
 8003bc6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d132      	bne.n	8003c38 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d126      	bne.n	8003c32 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	7a5b      	ldrb	r3, [r3, #9]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d113      	bne.n	8003c14 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003bf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bf6:	d106      	bne.n	8003c06 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 f86a 	bl	8006cd8 <USB_InitFSLSPClkSel>
 8003c04:	e011      	b.n	8003c2a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f003 f863 	bl	8006cd8 <USB_InitFSLSPClkSel>
 8003c12:	e00a      	b.n	8003c2a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	79db      	ldrb	r3, [r3, #7]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d106      	bne.n	8003c2a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c22:	461a      	mov	r2, r3
 8003c24:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003c28:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f007 fe64 	bl	800b8f8 <HAL_HCD_PortEnabled_Callback>
 8003c30:	e002      	b.n	8003c38 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f007 fe6e 	bl	800b914 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d103      	bne.n	8003c4a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f043 0320 	orr.w	r3, r3, #32
 8003c48:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c50:	461a      	mov	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6013      	str	r3, [r2, #0]
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e12b      	b.n	8003eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd f844 	bl	8000d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	@ 0x24
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f001 fc20 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4a81      	ldr	r2, [pc, #516]	@ (8003ed4 <HAL_I2C_Init+0x274>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d807      	bhi.n	8003ce4 <HAL_I2C_Init+0x84>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a80      	ldr	r2, [pc, #512]	@ (8003ed8 <HAL_I2C_Init+0x278>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	bf94      	ite	ls
 8003cdc:	2301      	movls	r3, #1
 8003cde:	2300      	movhi	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e006      	b.n	8003cf2 <HAL_I2C_Init+0x92>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a7d      	ldr	r2, [pc, #500]	@ (8003edc <HAL_I2C_Init+0x27c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	bf94      	ite	ls
 8003cec:	2301      	movls	r3, #1
 8003cee:	2300      	movhi	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0e7      	b.n	8003eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a78      	ldr	r2, [pc, #480]	@ (8003ee0 <HAL_I2C_Init+0x280>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0c9b      	lsrs	r3, r3, #18
 8003d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a6a      	ldr	r2, [pc, #424]	@ (8003ed4 <HAL_I2C_Init+0x274>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d802      	bhi.n	8003d34 <HAL_I2C_Init+0xd4>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3301      	adds	r3, #1
 8003d32:	e009      	b.n	8003d48 <HAL_I2C_Init+0xe8>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	4a69      	ldr	r2, [pc, #420]	@ (8003ee4 <HAL_I2C_Init+0x284>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	3301      	adds	r3, #1
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	495c      	ldr	r1, [pc, #368]	@ (8003ed4 <HAL_I2C_Init+0x274>)
 8003d64:	428b      	cmp	r3, r1
 8003d66:	d819      	bhi.n	8003d9c <HAL_I2C_Init+0x13c>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e59      	subs	r1, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d76:	1c59      	adds	r1, r3, #1
 8003d78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_I2C_Init+0x138>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e59      	subs	r1, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	e051      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e04f      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d111      	bne.n	8003dc8 <HAL_I2C_Init+0x168>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e58      	subs	r0, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e012      	b.n	8003dee <HAL_I2C_Init+0x18e>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1e58      	subs	r0, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	0099      	lsls	r1, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Init+0x196>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e022      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10e      	bne.n	8003e1c <HAL_I2C_Init+0x1bc>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1e58      	subs	r0, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	440b      	add	r3, r1
 8003e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e10:	3301      	adds	r3, #1
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e1a:	e00f      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1e58      	subs	r0, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	0099      	lsls	r1, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e32:	3301      	adds	r3, #1
 8003e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	6809      	ldr	r1, [r1, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6911      	ldr	r1, [r2, #16]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68d2      	ldr	r2, [r2, #12]
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	000186a0 	.word	0x000186a0
 8003ed8:	001e847f 	.word	0x001e847f
 8003edc:	003d08ff 	.word	0x003d08ff
 8003ee0:	431bde83 	.word	0x431bde83
 8003ee4:	10624dd3 	.word	0x10624dd3

08003ee8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	817b      	strh	r3, [r7, #10]
 8003efa:	460b      	mov	r3, r1
 8003efc:	813b      	strh	r3, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f02:	f7fd f9bd 	bl	8001280 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	f040 80d9 	bne.w	80040c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2319      	movs	r3, #25
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	496d      	ldr	r1, [pc, #436]	@ (80040d4 <HAL_I2C_Mem_Write+0x1ec>)
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fc8b 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e0cc      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_I2C_Mem_Write+0x56>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e0c5      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d007      	beq.n	8003f64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2221      	movs	r2, #33	@ 0x21
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2240      	movs	r2, #64	@ 0x40
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a4d      	ldr	r2, [pc, #308]	@ (80040d8 <HAL_I2C_Mem_Write+0x1f0>)
 8003fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa6:	88f8      	ldrh	r0, [r7, #6]
 8003fa8:	893a      	ldrh	r2, [r7, #8]
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fac2 	bl	8004540 <I2C_RequestMemoryWrite>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d052      	beq.n	8004068 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e081      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fd50 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d107      	bne.n	8003fee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06b      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d11b      	bne.n	8004068 <HAL_I2C_Mem_Write+0x180>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d017      	beq.n	8004068 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1aa      	bne.n	8003fc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fd43 	bl	8004b00 <I2C_WaitOnBTFFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	2b04      	cmp	r3, #4
 8004086:	d107      	bne.n	8004098 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004096:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e016      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	00100002 	.word	0x00100002
 80040d8:	ffff0000 	.word	0xffff0000

080040dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	@ 0x30
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	817b      	strh	r3, [r7, #10]
 80040ee:	460b      	mov	r3, r1
 80040f0:	813b      	strh	r3, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040f6:	f7fd f8c3 	bl	8001280 <HAL_GetTick>
 80040fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b20      	cmp	r3, #32
 8004106:	f040 8214 	bne.w	8004532 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2319      	movs	r3, #25
 8004110:	2201      	movs	r2, #1
 8004112:	497b      	ldr	r1, [pc, #492]	@ (8004300 <HAL_I2C_Mem_Read+0x224>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fb91 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
 8004122:	e207      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_I2C_Mem_Read+0x56>
 800412e:	2302      	movs	r3, #2
 8004130:	e200      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d007      	beq.n	8004158 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2222      	movs	r2, #34	@ 0x22
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2240      	movs	r2, #64	@ 0x40
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a5b      	ldr	r2, [pc, #364]	@ (8004304 <HAL_I2C_Mem_Read+0x228>)
 8004198:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800419a:	88f8      	ldrh	r0, [r7, #6]
 800419c:	893a      	ldrh	r2, [r7, #8]
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	4603      	mov	r3, r0
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fa5e 	bl	800466c <I2C_RequestMemoryRead>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1bc      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	623b      	str	r3, [r7, #32]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	623b      	str	r3, [r7, #32]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e190      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d11b      	bne.n	800422a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e170      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422e:	2b02      	cmp	r3, #2
 8004230:	d11b      	bne.n	800426a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004240:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	e150      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004280:	e144      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004286:	2b03      	cmp	r3, #3
 8004288:	f200 80f1 	bhi.w	800446e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004290:	2b01      	cmp	r3, #1
 8004292:	d123      	bne.n	80042dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004296:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fc79 	bl	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e145      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042da:	e117      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d14e      	bne.n	8004382 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	2200      	movs	r2, #0
 80042ec:	4906      	ldr	r1, [pc, #24]	@ (8004308 <HAL_I2C_Mem_Read+0x22c>)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 faa4 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e11a      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
 80042fe:	bf00      	nop
 8004300:	00100002 	.word	0x00100002
 8004304:	ffff0000 	.word	0xffff0000
 8004308:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004380:	e0c4      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	2200      	movs	r2, #0
 800438a:	496c      	ldr	r1, [pc, #432]	@ (800453c <HAL_I2C_Mem_Read+0x460>)
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fa55 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0cb      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	2200      	movs	r2, #0
 80043e6:	4955      	ldr	r1, [pc, #340]	@ (800453c <HAL_I2C_Mem_Read+0x460>)
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fa27 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e09d      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800446c:	e04e      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004470:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fb8c 	bl	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e058      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d124      	bne.n	800450c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d107      	bne.n	80044da <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	f47f aeb6 	bne.w	8004282 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e000      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	@ 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	00010004 	.word	0x00010004

08004540 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	4608      	mov	r0, r1
 800454a:	4611      	mov	r1, r2
 800454c:	461a      	mov	r2, r3
 800454e:	4603      	mov	r3, r0
 8004550:	817b      	strh	r3, [r7, #10]
 8004552:	460b      	mov	r3, r1
 8004554:	813b      	strh	r3, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2200      	movs	r2, #0
 8004572:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f960 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004590:	d103      	bne.n	800459a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e05f      	b.n	800465e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	492d      	ldr	r1, [pc, #180]	@ (8004668 <I2C_RequestMemoryWrite+0x128>)
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f9bb 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e04c      	b.n	800465e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fa46 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004600:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e02b      	b.n	800465e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460c:	893b      	ldrh	r3, [r7, #8]
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]
 8004616:	e021      	b.n	800465c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004618:	893b      	ldrh	r3, [r7, #8]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	b29b      	uxth	r3, r3
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004628:	6a39      	ldr	r1, [r7, #32]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fa20 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	2b04      	cmp	r3, #4
 800463c:	d107      	bne.n	800464e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800464c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e005      	b.n	800465e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004652:	893b      	ldrh	r3, [r7, #8]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	00010002 	.word	0x00010002

0800466c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	4608      	mov	r0, r1
 8004676:	4611      	mov	r1, r2
 8004678:	461a      	mov	r2, r3
 800467a:	4603      	mov	r3, r0
 800467c:	817b      	strh	r3, [r7, #10]
 800467e:	460b      	mov	r3, r1
 8004680:	813b      	strh	r3, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004694:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f8c2 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046cc:	d103      	bne.n	80046d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0aa      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046da:	897b      	ldrh	r3, [r7, #10]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	6a3a      	ldr	r2, [r7, #32]
 80046ee:	4952      	ldr	r1, [pc, #328]	@ (8004838 <I2C_RequestMemoryRead+0x1cc>)
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f91d 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e097      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004718:	6a39      	ldr	r1, [r7, #32]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f9a8 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b04      	cmp	r3, #4
 800472c:	d107      	bne.n	800473e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800473c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e076      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004748:	893b      	ldrh	r3, [r7, #8]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]
 8004752:	e021      	b.n	8004798 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004754:	893b      	ldrh	r3, [r7, #8]
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	b29b      	uxth	r3, r3
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004764:	6a39      	ldr	r1, [r7, #32]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f982 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d107      	bne.n	800478a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004788:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e050      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800478e:	893b      	ldrh	r3, [r7, #8]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479a:	6a39      	ldr	r1, [r7, #32]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f967 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d107      	bne.n	80047c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e035      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2200      	movs	r2, #0
 80047dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f82b 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00d      	beq.n	8004808 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fa:	d103      	bne.n	8004804 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004802:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e013      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004808:	897b      	ldrh	r3, [r7, #10]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	4906      	ldr	r1, [pc, #24]	@ (8004838 <I2C_RequestMemoryRead+0x1cc>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f886 	bl	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	00010002 	.word	0x00010002

0800483c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800484c:	e048      	b.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d044      	beq.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004856:	f7fc fd13 	bl	8001280 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d139      	bne.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10d      	bne.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	43da      	mvns	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	e00c      	b.n	80048ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	43da      	mvns	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d116      	bne.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e023      	b.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10d      	bne.n	8004906 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	e00c      	b.n	8004920 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	43da      	mvns	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	429a      	cmp	r2, r3
 8004924:	d093      	beq.n	800484e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800493e:	e071      	b.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494e:	d123      	bne.n	8004998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004968:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	f043 0204 	orr.w	r2, r3, #4
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e067      	b.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d041      	beq.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a0:	f7fc fc6e 	bl	8001280 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d136      	bne.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10c      	bne.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	43da      	mvns	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4013      	ands	r3, r2
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e00b      	b.n	80049f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e021      	b.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d10c      	bne.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	43da      	mvns	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e00b      	b.n	8004a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf14      	ite	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	2300      	moveq	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af6d 	bne.w	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a7c:	e034      	b.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f8e3 	bl	8004c4a <I2C_IsAcknowledgeFailed>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e034      	b.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d028      	beq.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a96:	f7fc fbf3 	bl	8001280 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11d      	bne.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b80      	cmp	r3, #128	@ 0x80
 8004ab8:	d016      	beq.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b80      	cmp	r3, #128	@ 0x80
 8004af4:	d1c3      	bne.n	8004a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b0c:	e034      	b.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f89b 	bl	8004c4a <I2C_IsAcknowledgeFailed>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e034      	b.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d028      	beq.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fc fbab 	bl	8001280 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d11d      	bne.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d016      	beq.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e007      	b.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d1c3      	bne.n	8004b0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b9c:	e049      	b.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d119      	bne.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0210 	mvn.w	r2, #16
 8004bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e030      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be0:	f7fc fb4e 	bl	8001280 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11d      	bne.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d016      	beq.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e007      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d1ae      	bne.n	8004b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c60:	d11b      	bne.n	8004c9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f043 0204 	orr.w	r2, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e267      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d075      	beq.n	8004db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cc6:	4b88      	ldr	r3, [pc, #544]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d00c      	beq.n	8004cec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd2:	4b85      	ldr	r3, [pc, #532]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d112      	bne.n	8004d04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cde:	4b82      	ldr	r3, [pc, #520]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cea:	d10b      	bne.n	8004d04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d05b      	beq.n	8004db0 <HAL_RCC_OscConfig+0x108>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d157      	bne.n	8004db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e242      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_OscConfig+0x74>
 8004d0e:	4b76      	ldr	r3, [pc, #472]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a75      	ldr	r2, [pc, #468]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e01d      	b.n	8004d58 <HAL_RCC_OscConfig+0xb0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x98>
 8004d26:	4b70      	ldr	r3, [pc, #448]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6c      	ldr	r2, [pc, #432]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0xb0>
 8004d40:	4b69      	ldr	r3, [pc, #420]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a68      	ldr	r2, [pc, #416]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b66      	ldr	r3, [pc, #408]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a65      	ldr	r2, [pc, #404]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fc fa8e 	bl	8001280 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fc fa8a 	bl	8001280 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	@ 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e207      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0xc0>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fc fa7a 	bl	8001280 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fc fa76 	bl	8001280 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	@ 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1f3      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	4b51      	ldr	r3, [pc, #324]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0xe8>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d063      	beq.n	8004e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dca:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d11c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	4b41      	ldr	r3, [pc, #260]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_RCC_OscConfig+0x152>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e1c7      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4937      	ldr	r1, [pc, #220]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0e:	e03a      	b.n	8004e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d020      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e18:	4b34      	ldr	r3, [pc, #208]	@ (8004eec <HAL_RCC_OscConfig+0x244>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fc fa2f 	bl	8001280 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e26:	f7fc fa2b 	bl	8001280 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e1a8      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b28      	ldr	r3, [pc, #160]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4925      	ldr	r1, [pc, #148]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	e015      	b.n	8004e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <HAL_RCC_OscConfig+0x244>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fc fa0e 	bl	8001280 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fc fa0a 	bl	8001280 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e187      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d036      	beq.n	8004f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <HAL_RCC_OscConfig+0x248>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fc f9ee 	bl	8001280 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fc f9ea 	bl	8001280 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e167      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x200>
 8004ec6:	e01b      	b.n	8004f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec8:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <HAL_RCC_OscConfig+0x248>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ece:	f7fc f9d7 	bl	8001280 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed4:	e00e      	b.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed6:	f7fc f9d3 	bl	8001280 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d907      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e150      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	42470000 	.word	0x42470000
 8004ef0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef4:	4b88      	ldr	r3, [pc, #544]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ea      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8097 	beq.w	800503c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f12:	4b81      	ldr	r3, [pc, #516]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	4b7d      	ldr	r3, [pc, #500]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	4a7c      	ldr	r2, [pc, #496]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b77      	ldr	r3, [pc, #476]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d118      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4a:	4b74      	ldr	r3, [pc, #464]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a73      	ldr	r2, [pc, #460]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f56:	f7fc f993 	bl	8001280 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fc f98f 	bl	8001280 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e10c      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	4b6a      	ldr	r3, [pc, #424]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x2ea>
 8004f84:	4b64      	ldr	r3, [pc, #400]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a63      	ldr	r2, [pc, #396]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f90:	e01c      	b.n	8004fcc <HAL_RCC_OscConfig+0x324>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x30c>
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	4a5e      	ldr	r2, [pc, #376]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa6:	4b5c      	ldr	r3, [pc, #368]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	4a5b      	ldr	r2, [pc, #364]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCC_OscConfig+0x324>
 8004fb4:	4b58      	ldr	r3, [pc, #352]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	4a57      	ldr	r2, [pc, #348]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc0:	4b55      	ldr	r3, [pc, #340]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc4:	4a54      	ldr	r2, [pc, #336]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fc6:	f023 0304 	bic.w	r3, r3, #4
 8004fca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fc f954 	bl	8001280 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fc f950 	bl	8001280 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e0cb      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff2:	4b49      	ldr	r3, [pc, #292]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ee      	beq.n	8004fdc <HAL_RCC_OscConfig+0x334>
 8004ffe:	e014      	b.n	800502a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005000:	f7fc f93e 	bl	8001280 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005006:	e00a      	b.n	800501e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fc f93a 	bl	8001280 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0b5      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501e:	4b3e      	ldr	r3, [pc, #248]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1ee      	bne.n	8005008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d105      	bne.n	800503c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005030:	4b39      	ldr	r3, [pc, #228]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	4a38      	ldr	r2, [pc, #224]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80a1 	beq.w	8005188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005046:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b08      	cmp	r3, #8
 8005050:	d05c      	beq.n	800510c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d141      	bne.n	80050de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505a:	4b31      	ldr	r3, [pc, #196]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fc f90e 	bl	8001280 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005068:	f7fc f90a 	bl	8001280 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e087      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	3b01      	subs	r3, #1
 80050a0:	041b      	lsls	r3, r3, #16
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	491b      	ldr	r1, [pc, #108]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b6:	f7fc f8e3 	bl	8001280 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050be:	f7fc f8df 	bl	8001280 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e05c      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d0:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x416>
 80050dc:	e054      	b.n	8005188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fc f8cc 	bl	8001280 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fc f8c8 	bl	8001280 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e045      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x444>
 800510a:	e03d      	b.n	8005188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d107      	bne.n	8005124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e038      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
 8005118:	40023800 	.word	0x40023800
 800511c:	40007000 	.word	0x40007000
 8005120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005124:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <HAL_RCC_OscConfig+0x4ec>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d028      	beq.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d121      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d11a      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800515a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800515c:	4293      	cmp	r3, r2
 800515e:	d111      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	3b01      	subs	r3, #1
 800516e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d107      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800

08005198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0cc      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051ac:	4b68      	ldr	r3, [pc, #416]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d90c      	bls.n	80051d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b65      	ldr	r3, [pc, #404]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b63      	ldr	r3, [pc, #396]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0b8      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d020      	beq.n	8005222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051ec:	4b59      	ldr	r3, [pc, #356]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a58      	ldr	r2, [pc, #352]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005204:	4b53      	ldr	r3, [pc, #332]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a52      	ldr	r2, [pc, #328]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800520e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005210:	4b50      	ldr	r3, [pc, #320]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	494d      	ldr	r1, [pc, #308]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d044      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005236:	4b47      	ldr	r3, [pc, #284]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d119      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e07f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d003      	beq.n	8005256 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005252:	2b03      	cmp	r3, #3
 8005254:	d107      	bne.n	8005266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005256:	4b3f      	ldr	r3, [pc, #252]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e06f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005266:	4b3b      	ldr	r3, [pc, #236]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e067      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005276:	4b37      	ldr	r3, [pc, #220]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f023 0203 	bic.w	r2, r3, #3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4934      	ldr	r1, [pc, #208]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005288:	f7fb fffa 	bl	8001280 <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528e:	e00a      	b.n	80052a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005290:	f7fb fff6 	bl	8001280 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e04f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 020c 	and.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d1eb      	bne.n	8005290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052b8:	4b25      	ldr	r3, [pc, #148]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d20c      	bcs.n	80052e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b22      	ldr	r3, [pc, #136]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b20      	ldr	r3, [pc, #128]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e032      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ec:	4b19      	ldr	r3, [pc, #100]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4916      	ldr	r1, [pc, #88]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	490e      	ldr	r1, [pc, #56]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531e:	f000 f821 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 8005322:	4602      	mov	r2, r0
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	490a      	ldr	r1, [pc, #40]	@ (8005358 <HAL_RCC_ClockConfig+0x1c0>)
 8005330:	5ccb      	ldrb	r3, [r1, r3]
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	4a09      	ldr	r2, [pc, #36]	@ (800535c <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800533a:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb ff5a 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023c00 	.word	0x40023c00
 8005354:	40023800 	.word	0x40023800
 8005358:	0800cc6c 	.word	0x0800cc6c
 800535c:	20000004 	.word	0x20000004
 8005360:	20000008 	.word	0x20000008

08005364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b090      	sub	sp, #64	@ 0x40
 800536a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800537c:	4b59      	ldr	r3, [pc, #356]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b08      	cmp	r3, #8
 8005386:	d00d      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005388:	2b08      	cmp	r3, #8
 800538a:	f200 80a1 	bhi.w	80054d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x34>
 8005392:	2b04      	cmp	r3, #4
 8005394:	d003      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x3a>
 8005396:	e09b      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005398:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800539c:	e09b      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800539e:	4b53      	ldr	r3, [pc, #332]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053a2:	e098      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a4:	4b4f      	ldr	r3, [pc, #316]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ae:	4b4d      	ldr	r3, [pc, #308]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d028      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ba:	4b4a      	ldr	r3, [pc, #296]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	099b      	lsrs	r3, r3, #6
 80053c0:	2200      	movs	r2, #0
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053cc:	2100      	movs	r1, #0
 80053ce:	4b47      	ldr	r3, [pc, #284]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053d0:	fb03 f201 	mul.w	r2, r3, r1
 80053d4:	2300      	movs	r3, #0
 80053d6:	fb00 f303 	mul.w	r3, r0, r3
 80053da:	4413      	add	r3, r2
 80053dc:	4a43      	ldr	r2, [pc, #268]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053de:	fba0 1202 	umull	r1, r2, r0, r2
 80053e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e4:	460a      	mov	r2, r1
 80053e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ea:	4413      	add	r3, r2
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	2200      	movs	r2, #0
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053fe:	f7fa ff3f 	bl	8000280 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4613      	mov	r3, r2
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800540a:	e053      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540c:	4b35      	ldr	r3, [pc, #212]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	2200      	movs	r2, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	617a      	str	r2, [r7, #20]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800541e:	f04f 0b00 	mov.w	fp, #0
 8005422:	4652      	mov	r2, sl
 8005424:	465b      	mov	r3, fp
 8005426:	f04f 0000 	mov.w	r0, #0
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	0159      	lsls	r1, r3, #5
 8005430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005434:	0150      	lsls	r0, r2, #5
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	ebb2 080a 	subs.w	r8, r2, sl
 800543e:	eb63 090b 	sbc.w	r9, r3, fp
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800544e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005452:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005456:	ebb2 0408 	subs.w	r4, r2, r8
 800545a:	eb63 0509 	sbc.w	r5, r3, r9
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	00eb      	lsls	r3, r5, #3
 8005468:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546c:	00e2      	lsls	r2, r4, #3
 800546e:	4614      	mov	r4, r2
 8005470:	461d      	mov	r5, r3
 8005472:	eb14 030a 	adds.w	r3, r4, sl
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	eb45 030b 	adc.w	r3, r5, fp
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548a:	4629      	mov	r1, r5
 800548c:	028b      	lsls	r3, r1, #10
 800548e:	4621      	mov	r1, r4
 8005490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005494:	4621      	mov	r1, r4
 8005496:	028a      	lsls	r2, r1, #10
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	2200      	movs	r2, #0
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	60fa      	str	r2, [r7, #12]
 80054a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a8:	f7fa feea 	bl	8000280 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054b4:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80054c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80054d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3740      	adds	r7, #64	@ 0x40
 80054dc:	46bd      	mov	sp, r7
 80054de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	017d7840 	.word	0x017d7840

080054f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000004 	.word	0x20000004

08005508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800550c:	f7ff fff0 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	@ (800552c <HAL_RCC_GetPCLK1Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	0800cc7c 	.word	0x0800cc7c

08005530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005534:	f7ff ffdc 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005538:	4602      	mov	r2, r0
 800553a:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	0b5b      	lsrs	r3, r3, #13
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	4903      	ldr	r1, [pc, #12]	@ (8005554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005546:	5ccb      	ldrb	r3, [r1, r3]
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40023800 	.word	0x40023800
 8005554:	0800cc7c 	.word	0x0800cc7c

08005558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e07b      	b.n	8005662 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d108      	bne.n	8005584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800557a:	d009      	beq.n	8005590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	61da      	str	r2, [r3, #28]
 8005582:	e005      	b.n	8005590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb fbfa 	bl	8000da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005614:	ea42 0103 	orr.w	r1, r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	f003 0104 	and.w	r1, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	f003 0210 	and.w	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005650:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e042      	b.n	8005702 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fb fbcf 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2224      	movs	r2, #36	@ 0x24
 800569a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fdb4 	bl	800621c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b08a      	sub	sp, #40	@ 0x28
 800570e:	af02      	add	r7, sp, #8
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b20      	cmp	r3, #32
 8005728:	d175      	bne.n	8005816 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_UART_Transmit+0x2c>
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e06e      	b.n	8005818 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2221      	movs	r2, #33	@ 0x21
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005748:	f7fb fd9a 	bl	8001280 <HAL_GetTick>
 800574c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	88fa      	ldrh	r2, [r7, #6]
 8005752:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005762:	d108      	bne.n	8005776 <HAL_UART_Transmit+0x6c>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	e003      	b.n	800577e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800577e:	e02e      	b.n	80057de <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2200      	movs	r2, #0
 8005788:	2180      	movs	r1, #128	@ 0x80
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 fb16 	bl	8005dbc <UART_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e03a      	b.n	8005818 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057b6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	3302      	adds	r3, #2
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e007      	b.n	80057d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3301      	adds	r3, #1
 80057ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1cb      	bne.n	8005780 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2200      	movs	r2, #0
 80057f0:	2140      	movs	r1, #64	@ 0x40
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fae2 	bl	8005dbc <UART_WaitOnFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e006      	b.n	8005818 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	e000      	b.n	8005818 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005816:	2302      	movs	r3, #2
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	d112      	bne.n	8005860 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_UART_Receive_IT+0x26>
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e00b      	b.n	8005862 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	461a      	mov	r2, r3
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fb09 	bl	8005e6e <UART_Start_Receive_IT>
 800585c:	4603      	mov	r3, r0
 800585e:	e000      	b.n	8005862 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b0ba      	sub	sp, #232	@ 0xe8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005892:	2300      	movs	r3, #0
 8005894:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80058aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10f      	bne.n	80058d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_UART_IRQHandler+0x66>
 80058be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fbe8 	bl	80060a0 <UART_Receive_IT>
      return;
 80058d0:	e25b      	b.n	8005d8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80de 	beq.w	8005a98 <HAL_UART_IRQHandler+0x22c>
 80058dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80d1 	beq.w	8005a98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_UART_IRQHandler+0xae>
 8005902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <HAL_UART_IRQHandler+0xd2>
 8005926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	f043 0202 	orr.w	r2, r3, #2
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <HAL_UART_IRQHandler+0xf6>
 800594a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	f043 0204 	orr.w	r2, r3, #4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d011      	beq.n	8005992 <HAL_UART_IRQHandler+0x126>
 800596e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800597a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598a:	f043 0208 	orr.w	r2, r3, #8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 81f2 	beq.w	8005d80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800599c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_UART_IRQHandler+0x14e>
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fb73 	bl	80060a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c4:	2b40      	cmp	r3, #64	@ 0x40
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <HAL_UART_IRQHandler+0x17a>
 80059de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d04f      	beq.n	8005a86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fa7b 	bl	8005ee2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f6:	2b40      	cmp	r3, #64	@ 0x40
 80059f8:	d141      	bne.n	8005a7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3314      	adds	r3, #20
 8005a22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1d9      	bne.n	80059fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a52:	4a7e      	ldr	r2, [pc, #504]	@ (8005c4c <HAL_UART_IRQHandler+0x3e0>)
 8005a54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fb fdc1 	bl	80015e2 <HAL_DMA_Abort_IT>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	e00e      	b.n	8005a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f98a 	bl	8005d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	e00a      	b.n	8005a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f986 	bl	8005d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e006      	b.n	8005a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f982 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a92:	e175      	b.n	8005d80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	bf00      	nop
    return;
 8005a96:	e173      	b.n	8005d80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	f040 814f 	bne.w	8005d40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8148 	beq.w	8005d40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8141 	beq.w	8005d40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	f040 80b6 	bne.w	8005c50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8145 	beq.w	8005d84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b02:	429a      	cmp	r2, r3
 8005b04:	f080 813e 	bcs.w	8005d84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b1a:	f000 8088 	beq.w	8005c2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1d9      	bne.n	8005b1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3314      	adds	r3, #20
 8005b70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3314      	adds	r3, #20
 8005b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ba0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e1      	bne.n	8005b6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e3      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bfe:	f023 0310 	bic.w	r3, r3, #16
 8005c02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e3      	bne.n	8005bec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fb fc6a 	bl	8001502 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f8ad 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c4a:	e09b      	b.n	8005d84 <HAL_UART_IRQHandler+0x518>
 8005c4c:	08005fa9 	.word	0x08005fa9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 808e 	beq.w	8005d88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8089 	beq.w	8005d88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e3      	bne.n	8005c76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e3      	bne.n	8005cae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0310 	bic.w	r3, r3, #16
 8005d0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d18:	61fa      	str	r2, [r7, #28]
 8005d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	69b9      	ldr	r1, [r7, #24]
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	617b      	str	r3, [r7, #20]
   return(result);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e3      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f833 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d3e:	e023      	b.n	8005d88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <HAL_UART_IRQHandler+0x4f4>
 8005d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f939 	bl	8005fd0 <UART_Transmit_IT>
    return;
 8005d5e:	e014      	b.n	8005d8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <HAL_UART_IRQHandler+0x51e>
 8005d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f979 	bl	8006070 <UART_EndTransmit_IT>
    return;
 8005d7e:	e004      	b.n	8005d8a <HAL_UART_IRQHandler+0x51e>
    return;
 8005d80:	bf00      	nop
 8005d82:	e002      	b.n	8005d8a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d84:	bf00      	nop
 8005d86:	e000      	b.n	8005d8a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d88:	bf00      	nop
  }
}
 8005d8a:	37e8      	adds	r7, #232	@ 0xe8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dcc:	e03b      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d037      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd6:	f7fb fa53 	bl	8001280 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	6a3a      	ldr	r2, [r7, #32]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d302      	bcc.n	8005dec <UART_WaitOnFlagUntilTimeout+0x30>
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e03a      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d023      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b80      	cmp	r3, #128	@ 0x80
 8005e02:	d020      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d01d      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d116      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f857 	bl	8005ee2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2208      	movs	r2, #8
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e00f      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d0b4      	beq.n	8005dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	88fa      	ldrh	r2, [r7, #6]
 8005e86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	88fa      	ldrh	r2, [r7, #6]
 8005e8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2222      	movs	r2, #34	@ 0x22
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eb2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695a      	ldr	r2, [r3, #20]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0220 	orr.w	r2, r2, #32
 8005ed2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b095      	sub	sp, #84	@ 0x54
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	330c      	adds	r3, #12
 8005f08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e5      	bne.n	8005eea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d119      	bne.n	8005f8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f023 0310 	bic.w	r3, r3, #16
 8005f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f7a:	61ba      	str	r2, [r7, #24]
 8005f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6979      	ldr	r1, [r7, #20]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	613b      	str	r3, [r7, #16]
   return(result);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f9c:	bf00      	nop
 8005f9e:	3754      	adds	r7, #84	@ 0x54
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7ff fee4 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b21      	cmp	r3, #33	@ 0x21
 8005fe2:	d13e      	bne.n	8006062 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fec:	d114      	bne.n	8006018 <UART_Transmit_IT+0x48>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d110      	bne.n	8006018 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800600a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	621a      	str	r2, [r3, #32]
 8006016:	e008      	b.n	800602a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	1c59      	adds	r1, r3, #1
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6211      	str	r1, [r2, #32]
 8006022:	781a      	ldrb	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29b      	uxth	r3, r3
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	4619      	mov	r1, r3
 8006038:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10f      	bne.n	800605e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800604c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800605c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e000      	b.n	8006064 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006062:	2302      	movs	r3, #2
  }
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006086:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fa fdc1 	bl	8000c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08c      	sub	sp, #48	@ 0x30
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b22      	cmp	r3, #34	@ 0x22
 80060b2:	f040 80ae 	bne.w	8006212 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060be:	d117      	bne.n	80060f0 <UART_Receive_IT+0x50>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d113      	bne.n	80060f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060de:	b29a      	uxth	r2, r3
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e8:	1c9a      	adds	r2, r3, #2
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80060ee:	e026      	b.n	800613e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006102:	d007      	beq.n	8006114 <UART_Receive_IT+0x74>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <UART_Receive_IT+0x82>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e008      	b.n	8006134 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800612e:	b2da      	uxtb	r2, r3
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29b      	uxth	r3, r3
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	4619      	mov	r1, r3
 800614c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800614e:	2b00      	cmp	r3, #0
 8006150:	d15d      	bne.n	800620e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0220 	bic.w	r2, r2, #32
 8006160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	2b01      	cmp	r3, #1
 8006196:	d135      	bne.n	8006204 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	330c      	adds	r3, #12
 80061a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	613b      	str	r3, [r7, #16]
   return(result);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f023 0310 	bic.w	r3, r3, #16
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061be:	623a      	str	r2, [r7, #32]
 80061c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	69f9      	ldr	r1, [r7, #28]
 80061c4:	6a3a      	ldr	r2, [r7, #32]
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e5      	bne.n	800619e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d10a      	bne.n	80061f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff fdd1 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
 8006202:	e002      	b.n	800620a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fa fcdf 	bl	8000bc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	e002      	b.n	8006214 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3730      	adds	r7, #48	@ 0x30
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800621c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006220:	b0c0      	sub	sp, #256	@ 0x100
 8006222:	af00      	add	r7, sp, #0
 8006224:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006238:	68d9      	ldr	r1, [r3, #12]
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	ea40 0301 	orr.w	r3, r0, r1
 8006244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	431a      	orrs	r2, r3
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	431a      	orrs	r2, r3
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006274:	f021 010c 	bic.w	r1, r1, #12
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006282:	430b      	orrs	r3, r1
 8006284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006296:	6999      	ldr	r1, [r3, #24]
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	ea40 0301 	orr.w	r3, r0, r1
 80062a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b8f      	ldr	r3, [pc, #572]	@ (80064e8 <UART_SetConfig+0x2cc>)
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d005      	beq.n	80062bc <UART_SetConfig+0xa0>
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	4b8d      	ldr	r3, [pc, #564]	@ (80064ec <UART_SetConfig+0x2d0>)
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d104      	bne.n	80062c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062bc:	f7ff f938 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 80062c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062c4:	e003      	b.n	80062ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062c6:	f7ff f91f 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 80062ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062d8:	f040 810c 	bne.w	80064f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e0:	2200      	movs	r2, #0
 80062e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062ee:	4622      	mov	r2, r4
 80062f0:	462b      	mov	r3, r5
 80062f2:	1891      	adds	r1, r2, r2
 80062f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80062f6:	415b      	adcs	r3, r3
 80062f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062fe:	4621      	mov	r1, r4
 8006300:	eb12 0801 	adds.w	r8, r2, r1
 8006304:	4629      	mov	r1, r5
 8006306:	eb43 0901 	adc.w	r9, r3, r1
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800631a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800631e:	4690      	mov	r8, r2
 8006320:	4699      	mov	r9, r3
 8006322:	4623      	mov	r3, r4
 8006324:	eb18 0303 	adds.w	r3, r8, r3
 8006328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800632c:	462b      	mov	r3, r5
 800632e:	eb49 0303 	adc.w	r3, r9, r3
 8006332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006342:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800634a:	460b      	mov	r3, r1
 800634c:	18db      	adds	r3, r3, r3
 800634e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006350:	4613      	mov	r3, r2
 8006352:	eb42 0303 	adc.w	r3, r2, r3
 8006356:	657b      	str	r3, [r7, #84]	@ 0x54
 8006358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800635c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006360:	f7f9 ff8e 	bl	8000280 <__aeabi_uldivmod>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4b61      	ldr	r3, [pc, #388]	@ (80064f0 <UART_SetConfig+0x2d4>)
 800636a:	fba3 2302 	umull	r2, r3, r3, r2
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	011c      	lsls	r4, r3, #4
 8006372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006376:	2200      	movs	r2, #0
 8006378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800637c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	1891      	adds	r1, r2, r2
 800638a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800638c:	415b      	adcs	r3, r3
 800638e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006394:	4641      	mov	r1, r8
 8006396:	eb12 0a01 	adds.w	sl, r2, r1
 800639a:	4649      	mov	r1, r9
 800639c:	eb43 0b01 	adc.w	fp, r3, r1
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063b4:	4692      	mov	sl, r2
 80063b6:	469b      	mov	fp, r3
 80063b8:	4643      	mov	r3, r8
 80063ba:	eb1a 0303 	adds.w	r3, sl, r3
 80063be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063c2:	464b      	mov	r3, r9
 80063c4:	eb4b 0303 	adc.w	r3, fp, r3
 80063c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063e0:	460b      	mov	r3, r1
 80063e2:	18db      	adds	r3, r3, r3
 80063e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063e6:	4613      	mov	r3, r2
 80063e8:	eb42 0303 	adc.w	r3, r2, r3
 80063ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80063f6:	f7f9 ff43 	bl	8000280 <__aeabi_uldivmod>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	4b3b      	ldr	r3, [pc, #236]	@ (80064f0 <UART_SetConfig+0x2d4>)
 8006402:	fba3 2301 	umull	r2, r3, r3, r1
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2264      	movs	r2, #100	@ 0x64
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	1acb      	subs	r3, r1, r3
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006416:	4b36      	ldr	r3, [pc, #216]	@ (80064f0 <UART_SetConfig+0x2d4>)
 8006418:	fba3 2302 	umull	r2, r3, r3, r2
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006424:	441c      	add	r4, r3
 8006426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800642a:	2200      	movs	r2, #0
 800642c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006430:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006438:	4642      	mov	r2, r8
 800643a:	464b      	mov	r3, r9
 800643c:	1891      	adds	r1, r2, r2
 800643e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006440:	415b      	adcs	r3, r3
 8006442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006448:	4641      	mov	r1, r8
 800644a:	1851      	adds	r1, r2, r1
 800644c:	6339      	str	r1, [r7, #48]	@ 0x30
 800644e:	4649      	mov	r1, r9
 8006450:	414b      	adcs	r3, r1
 8006452:	637b      	str	r3, [r7, #52]	@ 0x34
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006460:	4659      	mov	r1, fp
 8006462:	00cb      	lsls	r3, r1, #3
 8006464:	4651      	mov	r1, sl
 8006466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800646a:	4651      	mov	r1, sl
 800646c:	00ca      	lsls	r2, r1, #3
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	4603      	mov	r3, r0
 8006474:	4642      	mov	r2, r8
 8006476:	189b      	adds	r3, r3, r2
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800647c:	464b      	mov	r3, r9
 800647e:	460a      	mov	r2, r1
 8006480:	eb42 0303 	adc.w	r3, r2, r3
 8006484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006494:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800649c:	460b      	mov	r3, r1
 800649e:	18db      	adds	r3, r3, r3
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064a2:	4613      	mov	r3, r2
 80064a4:	eb42 0303 	adc.w	r3, r2, r3
 80064a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064b2:	f7f9 fee5 	bl	8000280 <__aeabi_uldivmod>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4b0d      	ldr	r3, [pc, #52]	@ (80064f0 <UART_SetConfig+0x2d4>)
 80064bc:	fba3 1302 	umull	r1, r3, r3, r2
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	2164      	movs	r1, #100	@ 0x64
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	3332      	adds	r3, #50	@ 0x32
 80064ce:	4a08      	ldr	r2, [pc, #32]	@ (80064f0 <UART_SetConfig+0x2d4>)
 80064d0:	fba2 2303 	umull	r2, r3, r2, r3
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f003 0207 	and.w	r2, r3, #7
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4422      	add	r2, r4
 80064e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064e4:	e106      	b.n	80066f4 <UART_SetConfig+0x4d8>
 80064e6:	bf00      	nop
 80064e8:	40011000 	.word	0x40011000
 80064ec:	40011400 	.word	0x40011400
 80064f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064f8:	2200      	movs	r2, #0
 80064fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006506:	4642      	mov	r2, r8
 8006508:	464b      	mov	r3, r9
 800650a:	1891      	adds	r1, r2, r2
 800650c:	6239      	str	r1, [r7, #32]
 800650e:	415b      	adcs	r3, r3
 8006510:	627b      	str	r3, [r7, #36]	@ 0x24
 8006512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006516:	4641      	mov	r1, r8
 8006518:	1854      	adds	r4, r2, r1
 800651a:	4649      	mov	r1, r9
 800651c:	eb43 0501 	adc.w	r5, r3, r1
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	00eb      	lsls	r3, r5, #3
 800652a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800652e:	00e2      	lsls	r2, r4, #3
 8006530:	4614      	mov	r4, r2
 8006532:	461d      	mov	r5, r3
 8006534:	4643      	mov	r3, r8
 8006536:	18e3      	adds	r3, r4, r3
 8006538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800653c:	464b      	mov	r3, r9
 800653e:	eb45 0303 	adc.w	r3, r5, r3
 8006542:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006552:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006562:	4629      	mov	r1, r5
 8006564:	008b      	lsls	r3, r1, #2
 8006566:	4621      	mov	r1, r4
 8006568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800656c:	4621      	mov	r1, r4
 800656e:	008a      	lsls	r2, r1, #2
 8006570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006574:	f7f9 fe84 	bl	8000280 <__aeabi_uldivmod>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4b60      	ldr	r3, [pc, #384]	@ (8006700 <UART_SetConfig+0x4e4>)
 800657e:	fba3 2302 	umull	r2, r3, r3, r2
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	011c      	lsls	r4, r3, #4
 8006586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800658a:	2200      	movs	r2, #0
 800658c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006590:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	1891      	adds	r1, r2, r2
 800659e:	61b9      	str	r1, [r7, #24]
 80065a0:	415b      	adcs	r3, r3
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a8:	4641      	mov	r1, r8
 80065aa:	1851      	adds	r1, r2, r1
 80065ac:	6139      	str	r1, [r7, #16]
 80065ae:	4649      	mov	r1, r9
 80065b0:	414b      	adcs	r3, r1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065c0:	4659      	mov	r1, fp
 80065c2:	00cb      	lsls	r3, r1, #3
 80065c4:	4651      	mov	r1, sl
 80065c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ca:	4651      	mov	r1, sl
 80065cc:	00ca      	lsls	r2, r1, #3
 80065ce:	4610      	mov	r0, r2
 80065d0:	4619      	mov	r1, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	4642      	mov	r2, r8
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065dc:	464b      	mov	r3, r9
 80065de:	460a      	mov	r2, r1
 80065e0:	eb42 0303 	adc.w	r3, r2, r3
 80065e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006600:	4649      	mov	r1, r9
 8006602:	008b      	lsls	r3, r1, #2
 8006604:	4641      	mov	r1, r8
 8006606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800660a:	4641      	mov	r1, r8
 800660c:	008a      	lsls	r2, r1, #2
 800660e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006612:	f7f9 fe35 	bl	8000280 <__aeabi_uldivmod>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4611      	mov	r1, r2
 800661c:	4b38      	ldr	r3, [pc, #224]	@ (8006700 <UART_SetConfig+0x4e4>)
 800661e:	fba3 2301 	umull	r2, r3, r3, r1
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	2264      	movs	r2, #100	@ 0x64
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	1acb      	subs	r3, r1, r3
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	3332      	adds	r3, #50	@ 0x32
 8006630:	4a33      	ldr	r2, [pc, #204]	@ (8006700 <UART_SetConfig+0x4e4>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800663c:	441c      	add	r4, r3
 800663e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006642:	2200      	movs	r2, #0
 8006644:	673b      	str	r3, [r7, #112]	@ 0x70
 8006646:	677a      	str	r2, [r7, #116]	@ 0x74
 8006648:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	1891      	adds	r1, r2, r2
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	415b      	adcs	r3, r3
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800665c:	4641      	mov	r1, r8
 800665e:	1851      	adds	r1, r2, r1
 8006660:	6039      	str	r1, [r7, #0]
 8006662:	4649      	mov	r1, r9
 8006664:	414b      	adcs	r3, r1
 8006666:	607b      	str	r3, [r7, #4]
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006674:	4659      	mov	r1, fp
 8006676:	00cb      	lsls	r3, r1, #3
 8006678:	4651      	mov	r1, sl
 800667a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667e:	4651      	mov	r1, sl
 8006680:	00ca      	lsls	r2, r1, #3
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	4603      	mov	r3, r0
 8006688:	4642      	mov	r2, r8
 800668a:	189b      	adds	r3, r3, r2
 800668c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800668e:	464b      	mov	r3, r9
 8006690:	460a      	mov	r2, r1
 8006692:	eb42 0303 	adc.w	r3, r2, r3
 8006696:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80066a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066b0:	4649      	mov	r1, r9
 80066b2:	008b      	lsls	r3, r1, #2
 80066b4:	4641      	mov	r1, r8
 80066b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ba:	4641      	mov	r1, r8
 80066bc:	008a      	lsls	r2, r1, #2
 80066be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066c2:	f7f9 fddd 	bl	8000280 <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <UART_SetConfig+0x4e4>)
 80066cc:	fba3 1302 	umull	r1, r3, r3, r2
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	2164      	movs	r1, #100	@ 0x64
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	3332      	adds	r3, #50	@ 0x32
 80066de:	4a08      	ldr	r2, [pc, #32]	@ (8006700 <UART_SetConfig+0x4e4>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	f003 020f 	and.w	r2, r3, #15
 80066ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4422      	add	r2, r4
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	bf00      	nop
 80066f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80066fa:	46bd      	mov	sp, r7
 80066fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006700:	51eb851f 	.word	0x51eb851f

08006704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006704:	b084      	sub	sp, #16
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	f107 001c 	add.w	r0, r7, #28
 8006712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006716:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800671a:	2b01      	cmp	r3, #1
 800671c:	d123      	bne.n	8006766 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006722:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9dc 	bl	8006b18 <USB_CoreReset>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]
 8006764:	e01b      	b.n	800679e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f9d0 	bl	8006b18 <USB_CoreReset>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800677c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006788:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006790:	e005      	b.n	800679e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800679e:	7fbb      	ldrb	r3, [r7, #30]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d10b      	bne.n	80067bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f043 0206 	orr.w	r2, r3, #6
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c8:	b004      	add	sp, #16
 80067ca:	4770      	bx	lr

080067cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f023 0201 	bic.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d115      	bne.n	800685e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800683e:	200a      	movs	r0, #10
 8006840:	f7fa fd2a 	bl	8001298 <HAL_Delay>
      ms += 10U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	330a      	adds	r3, #10
 8006848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f956 	bl	8006afc <USB_GetMode>
 8006850:	4603      	mov	r3, r0
 8006852:	2b01      	cmp	r3, #1
 8006854:	d01e      	beq.n	8006894 <USB_SetCurrentMode+0x84>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2bc7      	cmp	r3, #199	@ 0xc7
 800685a:	d9f0      	bls.n	800683e <USB_SetCurrentMode+0x2e>
 800685c:	e01a      	b.n	8006894 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d115      	bne.n	8006890 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006870:	200a      	movs	r0, #10
 8006872:	f7fa fd11 	bl	8001298 <HAL_Delay>
      ms += 10U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	330a      	adds	r3, #10
 800687a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f93d 	bl	8006afc <USB_GetMode>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <USB_SetCurrentMode+0x84>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2bc7      	cmp	r3, #199	@ 0xc7
 800688c:	d9f0      	bls.n	8006870 <USB_SetCurrentMode+0x60>
 800688e:	e001      	b.n	8006894 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e005      	b.n	80068a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2bc8      	cmp	r3, #200	@ 0xc8
 8006898:	d101      	bne.n	800689e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068c2:	d901      	bls.n	80068c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e01b      	b.n	8006900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	daf2      	bge.n	80068b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	019b      	lsls	r3, r3, #6
 80068d8:	f043 0220 	orr.w	r2, r3, #32
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068ec:	d901      	bls.n	80068f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e006      	b.n	8006900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d0f0      	beq.n	80068e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3301      	adds	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006924:	d901      	bls.n	800692a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e018      	b.n	800695c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	daf2      	bge.n	8006918 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2210      	movs	r2, #16
 800693a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3301      	adds	r3, #1
 8006940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006948:	d901      	bls.n	800694e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e006      	b.n	800695c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b10      	cmp	r3, #16
 8006958:	d0f0      	beq.n	800693c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006968:	b480      	push	{r7}
 800696a:	b089      	sub	sp, #36	@ 0x24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4611      	mov	r1, r2
 8006974:	461a      	mov	r2, r3
 8006976:	460b      	mov	r3, r1
 8006978:	71fb      	strb	r3, [r7, #7]
 800697a:	4613      	mov	r3, r2
 800697c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006986:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d123      	bne.n	80069d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800698e:	88bb      	ldrh	r3, [r7, #4]
 8006990:	3303      	adds	r3, #3
 8006992:	089b      	lsrs	r3, r3, #2
 8006994:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006996:	2300      	movs	r3, #0
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	e018      	b.n	80069ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	031a      	lsls	r2, r3, #12
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a8:	461a      	mov	r2, r3
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	3301      	adds	r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	3301      	adds	r3, #1
 80069ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3301      	adds	r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	3301      	adds	r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	3301      	adds	r3, #1
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d3e2      	bcc.n	800699c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3724      	adds	r7, #36	@ 0x24
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b08b      	sub	sp, #44	@ 0x2c
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a02:	88fb      	ldrh	r3, [r7, #6]
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	e014      	b.n	8006a3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	3301      	adds	r3, #1
 8006a20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	3301      	adds	r3, #1
 8006a26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	3301      	adds	r3, #1
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	3301      	adds	r3, #1
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d3e6      	bcc.n	8006a10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a42:	8bfb      	ldrh	r3, [r7, #30]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01e      	beq.n	8006a86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a52:	461a      	mov	r2, r3
 8006a54:	f107 0310 	add.w	r3, r7, #16
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	701a      	strb	r2, [r3, #0]
      i++;
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	3301      	adds	r3, #1
 8006a72:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	3301      	adds	r3, #1
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006a7a:	8bfb      	ldrh	r3, [r7, #30]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a80:	8bfb      	ldrh	r3, [r7, #30]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1ea      	bne.n	8006a5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	372c      	adds	r7, #44	@ 0x2c
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006aac:	68fb      	ldr	r3, [r7, #12]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	4013      	ands	r3, r2
 8006aec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006aee:	68bb      	ldr	r3, [r7, #8]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	f003 0301 	and.w	r3, r3, #1
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b30:	d901      	bls.n	8006b36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e01b      	b.n	8006b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	daf2      	bge.n	8006b24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f043 0201 	orr.w	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b5a:	d901      	bls.n	8006b60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e006      	b.n	8006b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d0f0      	beq.n	8006b4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d119      	bne.n	8006c06 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d10a      	bne.n	8006bf0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006be8:	f043 0304 	orr.w	r3, r3, #4
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	e014      	b.n	8006c1a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bfe:	f023 0304 	bic.w	r3, r3, #4
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e009      	b.n	8006c1a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c14:	f023 0304 	bic.w	r3, r3, #4
 8006c18:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c1a:	2110      	movs	r1, #16
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff fe43 	bl	80068a8 <USB_FlushTxFifo>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fe6d 	bl	800690c <USB_FlushRxFifo>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	e015      	b.n	8006c6e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295
 8006c54:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c62:	461a      	mov	r2, r3
 8006c64:	2300      	movs	r3, #0
 8006c66:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c72:	461a      	mov	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d3e3      	bcc.n	8006c42 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f04f 32ff 	mov.w	r2, #4294967295
 8006c86:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2280      	movs	r2, #128	@ 0x80
 8006c8c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a0e      	ldr	r2, [pc, #56]	@ (8006ccc <USB_HostInit+0x150>)
 8006c92:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a0e      	ldr	r2, [pc, #56]	@ (8006cd0 <USB_HostInit+0x154>)
 8006c98:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f043 0210 	orr.w	r2, r3, #16
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	4b07      	ldr	r3, [pc, #28]	@ (8006cd4 <USB_HostInit+0x158>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cc8:	b004      	add	sp, #16
 8006cca:	4770      	bx	lr
 8006ccc:	00600080 	.word	0x00600080
 8006cd0:	004000e0 	.word	0x004000e0
 8006cd4:	a3200008 	.word	0xa3200008

08006cd8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
 8006cfa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006d10:	4313      	orrs	r3, r2
 8006d12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d107      	bne.n	8006d2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d20:	461a      	mov	r2, r3
 8006d22:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d26:	6053      	str	r3, [r2, #4]
 8006d28:	e00c      	b.n	8006d44 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d107      	bne.n	8006d40 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d36:	461a      	mov	r2, r3
 8006d38:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006d3c:	6053      	str	r3, [r2, #4]
 8006d3e:	e001      	b.n	8006d44 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006d72:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d80:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006d82:	2064      	movs	r0, #100	@ 0x64
 8006d84:	f7fa fa88 	bl	8001298 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d94:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006d96:	200a      	movs	r0, #10
 8006d98:	f7fa fa7e 	bl	8001298 <HAL_Delay>

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006dca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <USB_DriveVbus+0x44>
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d106      	bne.n	8006dea <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006de4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006de8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df4:	d109      	bne.n	8006e0a <USB_DriveVbus+0x64>
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006e04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e08:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	0c5b      	lsrs	r3, r3, #17
 8006e36:	f003 0303 	and.w	r3, r3, #3
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	b29b      	uxth	r3, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	4608      	mov	r0, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	461a      	mov	r2, r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	70fb      	strb	r3, [r7, #3]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70bb      	strb	r3, [r7, #2]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e96:	461a      	mov	r2, r3
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d867      	bhi.n	8006f76 <USB_HC_Init+0x10e>
 8006ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eac <USB_HC_Init+0x44>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006f39 	.word	0x08006f39
 8006eb4:	08006ebd 	.word	0x08006ebd
 8006eb8:	08006efb 	.word	0x08006efb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006ece:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ed0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da51      	bge.n	8006f7c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006ef8:	e040      	b.n	8006f7c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f06:	461a      	mov	r2, r3
 8006f08:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006f0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da34      	bge.n	8006f80 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f16:	78fb      	ldrb	r3, [r7, #3]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	78fa      	ldrb	r2, [r7, #3]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f34:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006f36:	e023      	b.n	8006f80 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f44:	461a      	mov	r2, r3
 8006f46:	f240 2325 	movw	r3, #549	@ 0x225
 8006f4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da17      	bge.n	8006f84 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	78fa      	ldrb	r2, [r7, #3]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f6e:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006f72:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006f74:	e006      	b.n	8006f84 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	77fb      	strb	r3, [r7, #31]
      break;
 8006f7a:	e004      	b.n	8006f86 <USB_HC_Init+0x11e>
      break;
 8006f7c:	bf00      	nop
 8006f7e:	e002      	b.n	8006f86 <USB_HC_Init+0x11e>
      break;
 8006f80:	bf00      	nop
 8006f82:	e000      	b.n	8006f86 <USB_HC_Init+0x11e>
      break;
 8006f84:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f92:	461a      	mov	r2, r3
 8006f94:	2300      	movs	r3, #0
 8006f96:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fb2:	f043 0302 	orr.w	r3, r3, #2
 8006fb6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fcc:	6939      	ldr	r1, [r7, #16]
 8006fce:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006fe2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	da03      	bge.n	8006ff2 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	e001      	b.n	8006ff6 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff ff0e 	bl	8006e18 <USB_GetHostSpeed>
 8006ffc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007002:	2b02      	cmp	r3, #2
 8007004:	d106      	bne.n	8007014 <USB_HC_Init+0x1ac>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d003      	beq.n	8007014 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800700c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e001      	b.n	8007018 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007018:	787b      	ldrb	r3, [r7, #1]
 800701a:	059b      	lsls	r3, r3, #22
 800701c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007020:	78bb      	ldrb	r3, [r7, #2]
 8007022:	02db      	lsls	r3, r3, #11
 8007024:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007028:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800702a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800702e:	049b      	lsls	r3, r3, #18
 8007030:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007034:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007036:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007038:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800703c:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	431a      	orrs	r2, r3
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007046:	78fa      	ldrb	r2, [r7, #3]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	440a      	add	r2, r1
 800704e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007056:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007058:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800705c:	2b03      	cmp	r3, #3
 800705e:	d003      	beq.n	8007068 <USB_HC_Init+0x200>
 8007060:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d10f      	bne.n	8007088 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	440a      	add	r2, r1
 800707e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007082:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007086:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007088:	7ffb      	ldrb	r3, [r7, #31]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3720      	adds	r7, #32
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop

08007094 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08c      	sub	sp, #48	@ 0x30
 8007098:	af02      	add	r7, sp, #8
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80070ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80070b0:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	799b      	ldrb	r3, [r3, #6]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d158      	bne.n	800716c <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80070ba:	2301      	movs	r3, #1
 80070bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	78db      	ldrb	r3, [r3, #3]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	8a92      	ldrh	r2, [r2, #20]
 80070cc:	fb03 f202 	mul.w	r2, r3, r2
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	61da      	str	r2, [r3, #28]
 80070d4:	e079      	b.n	80071ca <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	7c9b      	ldrb	r3, [r3, #18]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d130      	bne.n	8007140 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80070e4:	d918      	bls.n	8007118 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	8a9b      	ldrh	r3, [r3, #20]
 80070ea:	461a      	mov	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d003      	beq.n	8007108 <USB_HC_StartXfer+0x74>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d103      	bne.n	8007110 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2202      	movs	r2, #2
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e05c      	b.n	80071ca <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2201      	movs	r2, #1
 8007114:	60da      	str	r2, [r3, #12]
 8007116:	e058      	b.n	80071ca <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6a1a      	ldr	r2, [r3, #32]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d007      	beq.n	8007138 <USB_HC_StartXfer+0xa4>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d003      	beq.n	8007138 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2204      	movs	r2, #4
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	e048      	b.n	80071ca <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2203      	movs	r2, #3
 800713c:	60da      	str	r2, [r3, #12]
 800713e:	e044      	b.n	80071ca <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d10d      	bne.n	8007162 <USB_HC_StartXfer+0xce>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	8a92      	ldrh	r2, [r2, #20]
 800714e:	4293      	cmp	r3, r2
 8007150:	d907      	bls.n	8007162 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007152:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	8a92      	ldrh	r2, [r2, #20]
 8007158:	fb03 f202 	mul.w	r2, r3, r2
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	61da      	str	r2, [r3, #28]
 8007160:	e033      	b.n	80071ca <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	61da      	str	r2, [r3, #28]
 800716a:	e02e      	b.n	80071ca <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d018      	beq.n	80071a6 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	8a92      	ldrh	r2, [r2, #20]
 800717c:	4413      	add	r3, r2
 800717e:	3b01      	subs	r3, #1
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	8a92      	ldrh	r2, [r2, #20]
 8007184:	fbb3 f3f2 	udiv	r3, r3, r2
 8007188:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800718a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800718c:	8b7b      	ldrh	r3, [r7, #26]
 800718e:	429a      	cmp	r2, r3
 8007190:	d90b      	bls.n	80071aa <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8007192:	8b7b      	ldrh	r3, [r7, #26]
 8007194:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007196:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	8a92      	ldrh	r2, [r2, #20]
 800719c:	fb03 f202 	mul.w	r2, r3, r2
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	61da      	str	r2, [r3, #28]
 80071a4:	e001      	b.n	80071aa <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80071a6:	2301      	movs	r3, #1
 80071a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	78db      	ldrb	r3, [r3, #3]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d007      	beq.n	80071c2 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	8a92      	ldrh	r2, [r2, #20]
 80071b8:	fb03 f202 	mul.w	r2, r3, r2
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	61da      	str	r2, [r3, #28]
 80071c0:	e003      	b.n	80071ca <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6a1a      	ldr	r2, [r3, #32]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071d4:	04d9      	lsls	r1, r3, #19
 80071d6:	4ba4      	ldr	r3, [pc, #656]	@ (8007468 <USB_HC_StartXfer+0x3d4>)
 80071d8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071da:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	7d9b      	ldrb	r3, [r3, #22]
 80071e0:	075b      	lsls	r3, r3, #29
 80071e2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071e6:	69f9      	ldr	r1, [r7, #28]
 80071e8:	0148      	lsls	r0, r1, #5
 80071ea:	6a39      	ldr	r1, [r7, #32]
 80071ec:	4401      	add	r1, r0
 80071ee:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071f2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071f4:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6999      	ldr	r1, [r3, #24]
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	4413      	add	r3, r2
 8007208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800720c:	460a      	mov	r2, r1
 800720e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	bf0c      	ite	eq
 8007220:	2301      	moveq	r3, #1
 8007222:	2300      	movne	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	6a3a      	ldr	r2, [r7, #32]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007242:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007246:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	4413      	add	r3, r2
 8007250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	7e7b      	ldrb	r3, [r7, #25]
 8007258:	075b      	lsls	r3, r3, #29
 800725a:	69f9      	ldr	r1, [r7, #28]
 800725c:	0148      	lsls	r0, r1, #5
 800725e:	6a39      	ldr	r1, [r7, #32]
 8007260:	4401      	add	r1, r0
 8007262:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007266:	4313      	orrs	r3, r2
 8007268:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	799b      	ldrb	r3, [r3, #6]
 800726e:	2b01      	cmp	r3, #1
 8007270:	f040 80c4 	bne.w	80073fc <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	7c5b      	ldrb	r3, [r3, #17]
 8007278:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800727e:	4313      	orrs	r3, r2
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	6a3a      	ldr	r2, [r7, #32]
 8007286:	440a      	add	r2, r1
 8007288:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800728c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007290:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	4413      	add	r3, r2
 800729a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	6a3a      	ldr	r2, [r7, #32]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80072b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	79db      	ldrb	r3, [r3, #7]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d123      	bne.n	8007302 <USB_HC_StartXfer+0x26e>
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	78db      	ldrb	r3, [r3, #3]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d11f      	bne.n	8007302 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	6a3a      	ldr	r2, [r7, #32]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072e0:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	6a3a      	ldr	r2, [r7, #32]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007300:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	7c9b      	ldrb	r3, [r3, #18]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d003      	beq.n	8007312 <USB_HC_StartXfer+0x27e>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7c9b      	ldrb	r3, [r3, #18]
 800730e:	2b03      	cmp	r3, #3
 8007310:	d117      	bne.n	8007342 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007316:	2b01      	cmp	r3, #1
 8007318:	d113      	bne.n	8007342 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	78db      	ldrb	r3, [r3, #3]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d10f      	bne.n	8007342 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	0151      	lsls	r1, r2, #5
 8007334:	6a3a      	ldr	r2, [r7, #32]
 8007336:	440a      	add	r2, r1
 8007338:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800733c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007340:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	7c9b      	ldrb	r3, [r3, #18]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d163      	bne.n	8007412 <USB_HC_StartXfer+0x37e>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	78db      	ldrb	r3, [r3, #3]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d15f      	bne.n	8007412 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	3b01      	subs	r3, #1
 8007358:	2b03      	cmp	r3, #3
 800735a:	d859      	bhi.n	8007410 <USB_HC_StartXfer+0x37c>
 800735c:	a201      	add	r2, pc, #4	@ (adr r2, 8007364 <USB_HC_StartXfer+0x2d0>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007375 	.word	0x08007375
 8007368:	08007397 	.word	0x08007397
 800736c:	080073b9 	.word	0x080073b9
 8007370:	080073db 	.word	0x080073db
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	440a      	add	r2, r1
 800738a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800738e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007392:	6053      	str	r3, [r2, #4]
          break;
 8007394:	e03d      	b.n	8007412 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	69fa      	ldr	r2, [r7, #28]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	6a3a      	ldr	r2, [r7, #32]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073b0:	f043 030e 	orr.w	r3, r3, #14
 80073b4:	6053      	str	r3, [r2, #4]
          break;
 80073b6:	e02c      	b.n	8007412 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073d6:	6053      	str	r3, [r2, #4]
          break;
 80073d8:	e01b      	b.n	8007412 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073f8:	6053      	str	r3, [r2, #4]
          break;
 80073fa:	e00a      	b.n	8007412 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	4413      	add	r3, r2
 8007404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007408:	461a      	mov	r2, r3
 800740a:	2300      	movs	r3, #0
 800740c:	6053      	str	r3, [r2, #4]
 800740e:	e000      	b.n	8007412 <USB_HC_StartXfer+0x37e>
          break;
 8007410:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007428:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	78db      	ldrb	r3, [r3, #3]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	e003      	b.n	8007444 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007442:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800744a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007458:	461a      	mov	r2, r3
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	e055      	b.n	8007514 <USB_HC_StartXfer+0x480>
 8007468:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	78db      	ldrb	r3, [r3, #3]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d14e      	bne.n	8007512 <USB_HC_StartXfer+0x47e>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d04a      	beq.n	8007512 <USB_HC_StartXfer+0x47e>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	79db      	ldrb	r3, [r3, #7]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d146      	bne.n	8007512 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	7c9b      	ldrb	r3, [r3, #18]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d831      	bhi.n	80074f0 <USB_HC_StartXfer+0x45c>
 800748c:	a201      	add	r2, pc, #4	@ (adr r2, 8007494 <USB_HC_StartXfer+0x400>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074c9 	.word	0x080074c9
 800749c:	080074a5 	.word	0x080074a5
 80074a0:	080074c9 	.word	0x080074c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	3303      	adds	r3, #3
 80074aa:	089b      	lsrs	r3, r3, #2
 80074ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80074ae:	8afa      	ldrh	r2, [r7, #22]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d91c      	bls.n	80074f4 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80074c6:	e015      	b.n	80074f4 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	3303      	adds	r3, #3
 80074ce:	089b      	lsrs	r3, r3, #2
 80074d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80074d2:	8afa      	ldrh	r2, [r7, #22]
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	429a      	cmp	r2, r3
 80074e0:	d90a      	bls.n	80074f8 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80074ee:	e003      	b.n	80074f8 <USB_HC_StartXfer+0x464>

      default:
        break;
 80074f0:	bf00      	nop
 80074f2:	e002      	b.n	80074fa <USB_HC_StartXfer+0x466>
        break;
 80074f4:	bf00      	nop
 80074f6:	e000      	b.n	80074fa <USB_HC_StartXfer+0x466>
        break;
 80074f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6999      	ldr	r1, [r3, #24]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	785a      	ldrb	r2, [r3, #1]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	b29b      	uxth	r3, r3
 8007508:	2000      	movs	r0, #0
 800750a:	9000      	str	r0, [sp, #0]
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff fa2b 	bl	8006968 <USB_WritePacket>
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3728      	adds	r7, #40	@ 0x28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	b29b      	uxth	r3, r3
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800753e:	b480      	push	{r7}
 8007540:	b089      	sub	sp, #36	@ 0x24
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	0c9b      	lsrs	r3, r3, #18
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	0fdb      	lsrs	r3, r3, #31
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	0fdb      	lsrs	r3, r3, #31
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d10d      	bne.n	80075c0 <USB_HC_Halt+0x82>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <USB_HC_Halt+0x82>
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d002      	beq.n	80075bc <USB_HC_Halt+0x7e>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d101      	bne.n	80075c0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e0d8      	b.n	8007772 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <USB_HC_Halt+0x8e>
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d173      	bne.n	80076b4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d14a      	bne.n	800768e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d133      	bne.n	800766c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	4413      	add	r3, r2
 800760c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	440a      	add	r2, r1
 800761a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800761e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007622:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	4413      	add	r3, r2
 800762c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	440a      	add	r2, r1
 800763a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800763e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007642:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3301      	adds	r3, #1
 8007648:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007650:	d82e      	bhi.n	80076b0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007668:	d0ec      	beq.n	8007644 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800766a:	e081      	b.n	8007770 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	0151      	lsls	r1, r2, #5
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	440a      	add	r2, r1
 8007682:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007686:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800768a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800768c:	e070      	b.n	8007770 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076ae:	e05f      	b.n	8007770 <USB_HC_Halt+0x232>
            break;
 80076b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076b2:	e05d      	b.n	8007770 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	0151      	lsls	r1, r2, #5
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	440a      	add	r2, r1
 80076ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d133      	bne.n	800774c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	0151      	lsls	r1, r2, #5
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	440a      	add	r2, r1
 80076fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007702:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	4413      	add	r3, r2
 800770c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	0151      	lsls	r1, r2, #5
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	440a      	add	r2, r1
 800771a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800771e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007722:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	3301      	adds	r3, #1
 8007728:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007730:	d81d      	bhi.n	800776e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007748:	d0ec      	beq.n	8007724 <USB_HC_Halt+0x1e6>
 800774a:	e011      	b.n	8007770 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	4413      	add	r3, r2
 8007754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	440a      	add	r2, r1
 8007762:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007766:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	e000      	b.n	8007770 <USB_HC_Halt+0x232>
          break;
 800776e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3724      	adds	r7, #36	@ 0x24
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b088      	sub	sp, #32
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff f82b 	bl	80067ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007798:	2110      	movs	r1, #16
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff f884 	bl	80068a8 <USB_FlushTxFifo>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff f8ae 	bl	800690c <USB_FlushRxFifo>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80077ba:	2300      	movs	r3, #0
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e01f      	b.n	8007800 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077d6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077de:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077e6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f4:	461a      	mov	r2, r3
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	3301      	adds	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2b0f      	cmp	r3, #15
 8007804:	d9dc      	bls.n	80077c0 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007806:	2300      	movs	r3, #0
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e034      	b.n	8007876 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	4413      	add	r3, r2
 8007814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007822:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800782a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007832:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007840:	461a      	mov	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007852:	d80c      	bhi.n	800786e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4413      	add	r3, r2
 800785c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800786a:	d0ec      	beq.n	8007846 <USB_StopHost+0xc8>
 800786c:	e000      	b.n	8007870 <USB_StopHost+0xf2>
        break;
 800786e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	3301      	adds	r3, #1
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b0f      	cmp	r3, #15
 800787a:	d9c7      	bls.n	800780c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007882:	461a      	mov	r2, r3
 8007884:	f04f 33ff 	mov.w	r3, #4294967295
 8007888:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f04f 32ff 	mov.w	r2, #4294967295
 8007890:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fe ff9a 	bl	80067cc <USB_EnableGlobalInt>

  return ret;
 8007898:	7ffb      	ldrb	r3, [r7, #31]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3720      	adds	r7, #32
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80078a8:	4904      	ldr	r1, [pc, #16]	@ (80078bc <MX_FATFS_Init+0x18>)
 80078aa:	4805      	ldr	r0, [pc, #20]	@ (80078c0 <MX_FATFS_Init+0x1c>)
 80078ac:	f003 ff12 	bl	800b6d4 <FATFS_LinkDriver>
 80078b0:	4603      	mov	r3, r0
 80078b2:	461a      	mov	r2, r3
 80078b4:	4b03      	ldr	r3, [pc, #12]	@ (80078c4 <MX_FATFS_Init+0x20>)
 80078b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80078b8:	bf00      	nop
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	2000025c 	.word	0x2000025c
 80078c0:	0800cc84 	.word	0x0800cc84
 80078c4:	20000258 	.word	0x20000258

080078c8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	4619      	mov	r1, r3
 80078f2:	4808      	ldr	r0, [pc, #32]	@ (8007914 <USBH_status+0x34>)
 80078f4:	f000 fe79 	bl	80085ea <USBH_MSC_UnitIsReady>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <USBH_status+0x24>
  {
    res = RES_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
 8007902:	e001      	b.n	8007908 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200012cc 	.word	0x200012cc

08007918 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b094      	sub	sp, #80	@ 0x50
 800791c:	af02      	add	r7, sp, #8
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800792e:	7bf9      	ldrb	r1, [r7, #15]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4813      	ldr	r0, [pc, #76]	@ (8007988 <USBH_read+0x70>)
 800793a:	f000 feaa 	bl	8008692 <USBH_MSC_Read>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d103      	bne.n	800794c <USBH_read+0x34>
  {
    res = RES_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800794a:	e017      	b.n	800797c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800794c:	f107 0210 	add.w	r2, r7, #16
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	4619      	mov	r1, r3
 8007954:	480c      	ldr	r0, [pc, #48]	@ (8007988 <USBH_read+0x70>)
 8007956:	f000 fe73 	bl	8008640 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800795a:	7f7b      	ldrb	r3, [r7, #29]
 800795c:	2b3a      	cmp	r3, #58	@ 0x3a
 800795e:	d005      	beq.n	800796c <USBH_read+0x54>
 8007960:	2b3a      	cmp	r3, #58	@ 0x3a
 8007962:	dc07      	bgt.n	8007974 <USBH_read+0x5c>
 8007964:	2b04      	cmp	r3, #4
 8007966:	d001      	beq.n	800796c <USBH_read+0x54>
 8007968:	2b28      	cmp	r3, #40	@ 0x28
 800796a:	d103      	bne.n	8007974 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800796c:	2303      	movs	r3, #3
 800796e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8007972:	e003      	b.n	800797c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800797a:	bf00      	nop
    }
  }

  return res;
 800797c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007980:	4618      	mov	r0, r3
 8007982:	3748      	adds	r7, #72	@ 0x48
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	200012cc 	.word	0x200012cc

0800798c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b094      	sub	sp, #80	@ 0x50
 8007990:	af02      	add	r7, sp, #8
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80079a2:	7bf9      	ldrb	r1, [r7, #15]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	4817      	ldr	r0, [pc, #92]	@ (8007a0c <USBH_write+0x80>)
 80079ae:	f000 fed0 	bl	8008752 <USBH_MSC_Write>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <USBH_write+0x34>
  {
    res = RES_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80079be:	e01f      	b.n	8007a00 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80079c0:	f107 0210 	add.w	r2, r7, #16
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	4619      	mov	r1, r3
 80079c8:	4810      	ldr	r0, [pc, #64]	@ (8007a0c <USBH_write+0x80>)
 80079ca:	f000 fe39 	bl	8008640 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80079ce:	7f7b      	ldrb	r3, [r7, #29]
 80079d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80079d2:	d00d      	beq.n	80079f0 <USBH_write+0x64>
 80079d4:	2b3a      	cmp	r3, #58	@ 0x3a
 80079d6:	dc0f      	bgt.n	80079f8 <USBH_write+0x6c>
 80079d8:	2b28      	cmp	r3, #40	@ 0x28
 80079da:	d009      	beq.n	80079f0 <USBH_write+0x64>
 80079dc:	2b28      	cmp	r3, #40	@ 0x28
 80079de:	dc0b      	bgt.n	80079f8 <USBH_write+0x6c>
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d005      	beq.n	80079f0 <USBH_write+0x64>
 80079e4:	2b27      	cmp	r3, #39	@ 0x27
 80079e6:	d107      	bne.n	80079f8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80079e8:	2302      	movs	r3, #2
 80079ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80079ee:	e007      	b.n	8007a00 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80079f0:	2303      	movs	r3, #3
 80079f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80079f6:	e003      	b.n	8007a00 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80079fe:	bf00      	nop
    }
  }

  return res;
 8007a00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3748      	adds	r7, #72	@ 0x48
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	200012cc 	.word	0x200012cc

08007a10 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b090      	sub	sp, #64	@ 0x40
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	603a      	str	r2, [r7, #0]
 8007a1a:	71fb      	strb	r3, [r7, #7]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007a26:	79bb      	ldrb	r3, [r7, #6]
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d852      	bhi.n	8007ad2 <USBH_ioctl+0xc2>
 8007a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a34 <USBH_ioctl+0x24>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a45 	.word	0x08007a45
 8007a38:	08007a4d 	.word	0x08007a4d
 8007a3c:	08007a77 	.word	0x08007a77
 8007a40:	08007aa3 	.word	0x08007aa3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8007a4a:	e045      	b.n	8007ad8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007a4c:	f107 0208 	add.w	r2, r7, #8
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	4619      	mov	r1, r3
 8007a54:	4823      	ldr	r0, [pc, #140]	@ (8007ae4 <USBH_ioctl+0xd4>)
 8007a56:	f000 fdf3 	bl	8008640 <USBH_MSC_GetLUNInfo>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007a6c:	e034      	b.n	8007ad8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8007a74:	e030      	b.n	8007ad8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007a76:	f107 0208 	add.w	r2, r7, #8
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4819      	ldr	r0, [pc, #100]	@ (8007ae4 <USBH_ioctl+0xd4>)
 8007a80:	f000 fdde 	bl	8008640 <USBH_MSC_GetLUNInfo>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d107      	bne.n	8007a9a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007a8a:	8a3b      	ldrh	r3, [r7, #16]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007a98:	e01e      	b.n	8007ad8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8007aa0:	e01a      	b.n	8007ad8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007aa2:	f107 0208 	add.w	r2, r7, #8
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	480e      	ldr	r0, [pc, #56]	@ (8007ae4 <USBH_ioctl+0xd4>)
 8007aac:	f000 fdc8 	bl	8008640 <USBH_MSC_GetLUNInfo>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007ab6:	8a3b      	ldrh	r3, [r7, #16]
 8007ab8:	0a5b      	lsrs	r3, r3, #9
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007ac8:	e006      	b.n	8007ad8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8007ad0:	e002      	b.n	8007ad8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007ad2:	2304      	movs	r3, #4
 8007ad4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8007ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3740      	adds	r7, #64	@ 0x40
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	200012cc 	.word	0x200012cc

08007ae8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007ae8:	b590      	push	{r4, r7, lr}
 8007aea:	b089      	sub	sp, #36	@ 0x24
 8007aec:	af04      	add	r7, sp, #16
 8007aee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007af6:	7919      	ldrb	r1, [r3, #4]
 8007af8:	2350      	movs	r3, #80	@ 0x50
 8007afa:	2206      	movs	r2, #6
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 fcd7 	bl	80094b0 <USBH_FindInterface>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	2bff      	cmp	r3, #255	@ 0xff
 8007b0a:	d002      	beq.n	8007b12 <USBH_MSC_InterfaceInit+0x2a>
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d901      	bls.n	8007b16 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b12:	2302      	movs	r3, #2
 8007b14:	e106      	b.n	8007d24 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fcac 	bl	8009478 <USBH_SelectInterface>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e0fa      	b.n	8007d24 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007b34:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8007b38:	f004 f8fe 	bl	800bd38 <malloc>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007b50:	2302      	movs	r3, #2
 8007b52:	e0e7      	b.n	8007d24 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007b54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007b58:	2100      	movs	r1, #0
 8007b5a:	68b8      	ldr	r0, [r7, #8]
 8007b5c:	f004 fac1 	bl	800c0e2 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	211a      	movs	r1, #26
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b25b      	sxtb	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da16      	bge.n	8007ba6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	211a      	movs	r1, #26
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	4413      	add	r3, r2
 8007b84:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b88:	781a      	ldrb	r2, [r3, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	211a      	movs	r1, #26
 8007b94:	fb01 f303 	mul.w	r3, r1, r3
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b9e:	881a      	ldrh	r2, [r3, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	815a      	strh	r2, [r3, #10]
 8007ba4:	e015      	b.n	8007bd2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	211a      	movs	r1, #26
 8007bac:	fb01 f303 	mul.w	r3, r1, r3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	211a      	movs	r1, #26
 8007bc2:	fb01 f303 	mul.w	r3, r1, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007bcc:	881a      	ldrh	r2, [r3, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	211a      	movs	r1, #26
 8007bd8:	fb01 f303 	mul.w	r3, r1, r3
 8007bdc:	4413      	add	r3, r2
 8007bde:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b25b      	sxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	da16      	bge.n	8007c18 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	211a      	movs	r1, #26
 8007bf0:	fb01 f303 	mul.w	r3, r1, r3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007bfa:	781a      	ldrb	r2, [r3, #0]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	211a      	movs	r1, #26
 8007c06:	fb01 f303 	mul.w	r3, r1, r3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007c10:	881a      	ldrh	r2, [r3, #0]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	815a      	strh	r2, [r3, #10]
 8007c16:	e015      	b.n	8007c44 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	211a      	movs	r1, #26
 8007c1e:	fb01 f303 	mul.w	r3, r1, r3
 8007c22:	4413      	add	r3, r2
 8007c24:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	211a      	movs	r1, #26
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007c3e:	881a      	ldrh	r2, [r3, #0]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2200      	movs	r2, #0
 8007c48:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2200      	movs	r2, #0
 8007c54:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	799b      	ldrb	r3, [r3, #6]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f002 ffb4 	bl	800abca <USBH_AllocPipe>
 8007c62:	4603      	mov	r3, r0
 8007c64:	461a      	mov	r2, r3
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	79db      	ldrb	r3, [r3, #7]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f002 ffaa 	bl	800abca <USBH_AllocPipe>
 8007c76:	4603      	mov	r3, r0
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fe02 	bl	8008888 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	799b      	ldrb	r3, [r3, #6]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01e      	beq.n	8007cca <USBH_MSC_InterfaceInit+0x1e2>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	891b      	ldrh	r3, [r3, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01a      	beq.n	8007cca <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	7959      	ldrb	r1, [r3, #5]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	7998      	ldrb	r0, [r3, #6]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	8912      	ldrh	r2, [r2, #8]
 8007cac:	9202      	str	r2, [sp, #8]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	9201      	str	r2, [sp, #4]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	4623      	mov	r3, r4
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f002 ff57 	bl	800ab6c <USBH_OpenPipe>
 8007cbe:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	79db      	ldrb	r3, [r3, #7]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02c      	beq.n	8007d22 <USBH_MSC_InterfaceInit+0x23a>
 8007cc8:	e001      	b.n	8007cce <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e02a      	b.n	8007d24 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	895b      	ldrh	r3, [r3, #10]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d025      	beq.n	8007d22 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	7919      	ldrb	r1, [r3, #4]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	79d8      	ldrb	r0, [r3, #7]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	8952      	ldrh	r2, [r2, #10]
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	9201      	str	r2, [sp, #4]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4623      	mov	r3, r4
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f002 ff36 	bl	800ab6c <USBH_OpenPipe>
 8007d00:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	791b      	ldrb	r3, [r3, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f003 ff77 	bl	800bbfe <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	795b      	ldrb	r3, [r3, #5]
 8007d14:	2200      	movs	r2, #0
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f003 ff70 	bl	800bbfe <USBH_LL_SetToggle>

  return USBH_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e000      	b.n	8007d24 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8007d22:	2303      	movs	r3, #3
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}

08007d2c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	795b      	ldrb	r3, [r3, #5]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00e      	beq.n	8007d64 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	795b      	ldrb	r3, [r3, #5]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f002 ff2c 	bl	800abaa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	795b      	ldrb	r3, [r3, #5]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f002 ff57 	bl	800ac0c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	791b      	ldrb	r3, [r3, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00e      	beq.n	8007d8a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	791b      	ldrb	r3, [r3, #4]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f002 ff19 	bl	800abaa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	791b      	ldrb	r3, [r3, #4]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f002 ff44 	bl	800ac0c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00b      	beq.n	8007dae <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f003 ffd2 	bl	800bd48 <free>
    phost->pActiveClass->pData = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007daa:	2200      	movs	r2, #0
 8007dac:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	7b9b      	ldrb	r3, [r3, #14]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d041      	beq.n	8007e5a <USBH_MSC_ClassRequest+0xa2>
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	dc4b      	bgt.n	8007e72 <USBH_MSC_ClassRequest+0xba>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <USBH_MSC_ClassRequest+0x2a>
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d147      	bne.n	8007e72 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fd30 	bl	800884c <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d104      	bne.n	8007e00 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d137      	bne.n	8007e76 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d804      	bhi.n	8007e18 <USBH_MSC_ClassRequest+0x60>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	e000      	b.n	8007e1a <USBH_MSC_ClassRequest+0x62>
 8007e18:	2202      	movs	r2, #2
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73bb      	strb	r3, [r7, #14]
 8007e22:	e014      	b.n	8007e4e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	2134      	movs	r1, #52	@ 0x34
 8007e2a:	fb01 f303 	mul.w	r3, r1, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	3392      	adds	r3, #146	@ 0x92
 8007e32:	2202      	movs	r2, #2
 8007e34:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	2134      	movs	r1, #52	@ 0x34
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	4413      	add	r3, r2
 8007e42:	33c1      	adds	r3, #193	@ 0xc1
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	73bb      	strb	r3, [r7, #14]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	7bba      	ldrb	r2, [r7, #14]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d3e5      	bcc.n	8007e24 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007e58:	e00d      	b.n	8007e76 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f002 f8ff 	bl	800a060 <USBH_ClrFeature>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d108      	bne.n	8007e7a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	7bda      	ldrb	r2, [r3, #15]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007e70:	e003      	b.n	8007e7a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8007e72:	bf00      	nop
 8007e74:	e002      	b.n	8007e7c <USBH_MSC_ClassRequest+0xc4>
      break;
 8007e76:	bf00      	nop
 8007e78:	e000      	b.n	8007e7c <USBH_MSC_ClassRequest+0xc4>
      break;
 8007e7a:	bf00      	nop
  }

  return status;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	7b1b      	ldrb	r3, [r3, #12]
 8007eaa:	2b0a      	cmp	r3, #10
 8007eac:	f000 8280 	beq.w	80083b0 <USBH_MSC_Process+0x528>
 8007eb0:	2b0a      	cmp	r3, #10
 8007eb2:	f300 82b8 	bgt.w	8008426 <USBH_MSC_Process+0x59e>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <USBH_MSC_Process+0x3a>
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	f000 82b0 	beq.w	8008420 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007ec0:	e2b1      	b.n	8008426 <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	f080 825d 	bcs.w	800838c <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ed8:	4619      	mov	r1, r3
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	2334      	movs	r3, #52	@ 0x34
 8007ede:	fb01 f303 	mul.w	r3, r1, r3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3391      	adds	r3, #145	@ 0x91
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	2334      	movs	r3, #52	@ 0x34
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	3390      	adds	r3, #144	@ 0x90
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	f200 824b 	bhi.w	800839c <USBH_MSC_Process+0x514>
 8007f06:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <USBH_MSC_Process+0x84>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f31 	.word	0x08007f31
 8007f10:	0800839d 	.word	0x0800839d
 8007f14:	08007ffb 	.word	0x08007ffb
 8007f18:	08008181 	.word	0x08008181
 8007f1c:	08007f57 	.word	0x08007f57
 8007f20:	0800824d 	.word	0x0800824d
 8007f24:	0800839d 	.word	0x0800839d
 8007f28:	0800839d 	.word	0x0800839d
 8007f2c:	0800837b 	.word	0x0800837b
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007f36:	4619      	mov	r1, r3
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	2334      	movs	r3, #52	@ 0x34
 8007f3c:	fb01 f303 	mul.w	r3, r1, r3
 8007f40:	4413      	add	r3, r2
 8007f42:	3390      	adds	r3, #144	@ 0x90
 8007f44:	2204      	movs	r2, #4
 8007f46:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8007f54:	e22b      	b.n	80083ae <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007f5c:	b2d9      	uxtb	r1, r3
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007f64:	461a      	mov	r2, r3
 8007f66:	2334      	movs	r3, #52	@ 0x34
 8007f68:	fb02 f303 	mul.w	r3, r2, r3
 8007f6c:	3398      	adds	r3, #152	@ 0x98
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4413      	add	r3, r2
 8007f72:	3307      	adds	r3, #7
 8007f74:	461a      	mov	r2, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 ffa3 	bl	8008ec2 <USBH_MSC_SCSI_Inquiry>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10c      	bne.n	8007fa0 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	2334      	movs	r3, #52	@ 0x34
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	3390      	adds	r3, #144	@ 0x90
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	701a      	strb	r2, [r3, #0]
            break;
 8007f9e:	e1ff      	b.n	80083a0 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d10c      	bne.n	8007fc0 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007fac:	4619      	mov	r1, r3
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	2334      	movs	r3, #52	@ 0x34
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	3390      	adds	r3, #144	@ 0x90
 8007fba:	2205      	movs	r2, #5
 8007fbc:	701a      	strb	r2, [r3, #0]
            break;
 8007fbe:	e1ef      	b.n	80083a0 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	f040 81ec 	bne.w	80083a0 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007fce:	4619      	mov	r1, r3
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	2334      	movs	r3, #52	@ 0x34
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	3390      	adds	r3, #144	@ 0x90
 8007fdc:	2208      	movs	r2, #8
 8007fde:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	2334      	movs	r3, #52	@ 0x34
 8007fec:	fb01 f303 	mul.w	r3, r1, r3
 8007ff0:	4413      	add	r3, r2
 8007ff2:	3391      	adds	r3, #145	@ 0x91
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	701a      	strb	r2, [r3, #0]
            break;
 8007ff8:	e1d2      	b.n	80083a0 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008000:	b2db      	uxtb	r3, r3
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fe9f 	bl	8008d48 <USBH_MSC_SCSI_TestUnitReady>
 800800a:	4603      	mov	r3, r0
 800800c:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d14a      	bne.n	80080aa <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800801a:	4619      	mov	r1, r3
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	2334      	movs	r3, #52	@ 0x34
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	4413      	add	r3, r2
 8008026:	3392      	adds	r3, #146	@ 0x92
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00c      	beq.n	8008048 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008034:	4619      	mov	r1, r3
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	2334      	movs	r3, #52	@ 0x34
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	4413      	add	r3, r2
 8008040:	33c1      	adds	r3, #193	@ 0xc1
 8008042:	2201      	movs	r2, #1
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e00b      	b.n	8008060 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800804e:	4619      	mov	r1, r3
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	2334      	movs	r3, #52	@ 0x34
 8008054:	fb01 f303 	mul.w	r3, r1, r3
 8008058:	4413      	add	r3, r2
 800805a:	33c1      	adds	r3, #193	@ 0xc1
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008066:	4619      	mov	r1, r3
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	2334      	movs	r3, #52	@ 0x34
 800806c:	fb01 f303 	mul.w	r3, r1, r3
 8008070:	4413      	add	r3, r2
 8008072:	3390      	adds	r3, #144	@ 0x90
 8008074:	2203      	movs	r2, #3
 8008076:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800807e:	4619      	mov	r1, r3
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	2334      	movs	r3, #52	@ 0x34
 8008084:	fb01 f303 	mul.w	r3, r1, r3
 8008088:	4413      	add	r3, r2
 800808a:	3391      	adds	r3, #145	@ 0x91
 800808c:	2200      	movs	r2, #0
 800808e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008096:	4619      	mov	r1, r3
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	2334      	movs	r3, #52	@ 0x34
 800809c:	fb01 f303 	mul.w	r3, r1, r3
 80080a0:	4413      	add	r3, r2
 80080a2:	3392      	adds	r3, #146	@ 0x92
 80080a4:	2200      	movs	r2, #0
 80080a6:	701a      	strb	r2, [r3, #0]
            break;
 80080a8:	e17c      	b.n	80083a4 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d14a      	bne.n	8008146 <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80080b6:	4619      	mov	r1, r3
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	2334      	movs	r3, #52	@ 0x34
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	4413      	add	r3, r2
 80080c2:	3392      	adds	r3, #146	@ 0x92
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d00c      	beq.n	80080e4 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80080d0:	4619      	mov	r1, r3
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	2334      	movs	r3, #52	@ 0x34
 80080d6:	fb01 f303 	mul.w	r3, r1, r3
 80080da:	4413      	add	r3, r2
 80080dc:	33c1      	adds	r3, #193	@ 0xc1
 80080de:	2201      	movs	r2, #1
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	e00b      	b.n	80080fc <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80080ea:	4619      	mov	r1, r3
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	2334      	movs	r3, #52	@ 0x34
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	4413      	add	r3, r2
 80080f6:	33c1      	adds	r3, #193	@ 0xc1
 80080f8:	2200      	movs	r2, #0
 80080fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008102:	4619      	mov	r1, r3
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	2334      	movs	r3, #52	@ 0x34
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	4413      	add	r3, r2
 800810e:	3390      	adds	r3, #144	@ 0x90
 8008110:	2205      	movs	r2, #5
 8008112:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800811a:	4619      	mov	r1, r3
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	2334      	movs	r3, #52	@ 0x34
 8008120:	fb01 f303 	mul.w	r3, r1, r3
 8008124:	4413      	add	r3, r2
 8008126:	3391      	adds	r3, #145	@ 0x91
 8008128:	2201      	movs	r2, #1
 800812a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008132:	4619      	mov	r1, r3
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	2334      	movs	r3, #52	@ 0x34
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	4413      	add	r3, r2
 800813e:	3392      	adds	r3, #146	@ 0x92
 8008140:	2202      	movs	r2, #2
 8008142:	701a      	strb	r2, [r3, #0]
            break;
 8008144:	e12e      	b.n	80083a4 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b04      	cmp	r3, #4
 800814a:	f040 812b 	bne.w	80083a4 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008154:	4619      	mov	r1, r3
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	2334      	movs	r3, #52	@ 0x34
 800815a:	fb01 f303 	mul.w	r3, r1, r3
 800815e:	4413      	add	r3, r2
 8008160:	3390      	adds	r3, #144	@ 0x90
 8008162:	2208      	movs	r2, #8
 8008164:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800816c:	4619      	mov	r1, r3
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	2334      	movs	r3, #52	@ 0x34
 8008172:	fb01 f303 	mul.w	r3, r1, r3
 8008176:	4413      	add	r3, r2
 8008178:	3391      	adds	r3, #145	@ 0x91
 800817a:	2202      	movs	r2, #2
 800817c:	701a      	strb	r2, [r3, #0]
            break;
 800817e:	e111      	b.n	80083a4 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008186:	b2d9      	uxtb	r1, r3
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800818e:	461a      	mov	r2, r3
 8008190:	2334      	movs	r3, #52	@ 0x34
 8008192:	fb02 f303 	mul.w	r3, r2, r3
 8008196:	3390      	adds	r3, #144	@ 0x90
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4413      	add	r3, r2
 800819c:	3304      	adds	r3, #4
 800819e:	461a      	mov	r2, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fe14 	bl	8008dce <USBH_MSC_SCSI_ReadCapacity>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d120      	bne.n	80081f2 <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80081b6:	4619      	mov	r1, r3
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	2334      	movs	r3, #52	@ 0x34
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	4413      	add	r3, r2
 80081c2:	3390      	adds	r3, #144	@ 0x90
 80081c4:	2201      	movs	r2, #1
 80081c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80081ce:	4619      	mov	r1, r3
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	2334      	movs	r3, #52	@ 0x34
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	3391      	adds	r3, #145	@ 0x91
 80081dc:	2200      	movs	r2, #0
 80081de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80081e6:	3301      	adds	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80081f0:	e0da      	b.n	80083a8 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d10c      	bne.n	8008212 <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80081fe:	4619      	mov	r1, r3
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	2334      	movs	r3, #52	@ 0x34
 8008204:	fb01 f303 	mul.w	r3, r1, r3
 8008208:	4413      	add	r3, r2
 800820a:	3390      	adds	r3, #144	@ 0x90
 800820c:	2205      	movs	r2, #5
 800820e:	701a      	strb	r2, [r3, #0]
            break;
 8008210:	e0ca      	b.n	80083a8 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b04      	cmp	r3, #4
 8008216:	f040 80c7 	bne.w	80083a8 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008220:	4619      	mov	r1, r3
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	2334      	movs	r3, #52	@ 0x34
 8008226:	fb01 f303 	mul.w	r3, r1, r3
 800822a:	4413      	add	r3, r2
 800822c:	3390      	adds	r3, #144	@ 0x90
 800822e:	2208      	movs	r2, #8
 8008230:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008238:	4619      	mov	r1, r3
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	2334      	movs	r3, #52	@ 0x34
 800823e:	fb01 f303 	mul.w	r3, r1, r3
 8008242:	4413      	add	r3, r2
 8008244:	3391      	adds	r3, #145	@ 0x91
 8008246:	2202      	movs	r2, #2
 8008248:	701a      	strb	r2, [r3, #0]
            break;
 800824a:	e0ad      	b.n	80083a8 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008252:	b2d9      	uxtb	r1, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800825a:	461a      	mov	r2, r3
 800825c:	2334      	movs	r3, #52	@ 0x34
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	3398      	adds	r3, #152	@ 0x98
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4413      	add	r3, r2
 8008268:	3304      	adds	r3, #4
 800826a:	461a      	mov	r2, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fecd 	bl	800900c <USBH_MSC_SCSI_RequestSense>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d146      	bne.n	800830a <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008282:	4619      	mov	r1, r3
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	2334      	movs	r3, #52	@ 0x34
 8008288:	fb01 f303 	mul.w	r3, r1, r3
 800828c:	4413      	add	r3, r2
 800828e:	339c      	adds	r3, #156	@ 0x9c
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b06      	cmp	r3, #6
 8008294:	d00c      	beq.n	80082b0 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800829c:	4619      	mov	r1, r3
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	2334      	movs	r3, #52	@ 0x34
 80082a2:	fb01 f303 	mul.w	r3, r1, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	339c      	adds	r3, #156	@ 0x9c
 80082aa:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d117      	bne.n	80082e0 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f242 720f 	movw	r2, #9999	@ 0x270f
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d80c      	bhi.n	80082e0 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80082cc:	4619      	mov	r1, r3
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	2334      	movs	r3, #52	@ 0x34
 80082d2:	fb01 f303 	mul.w	r3, r1, r3
 80082d6:	4413      	add	r3, r2
 80082d8:	3390      	adds	r3, #144	@ 0x90
 80082da:	2202      	movs	r2, #2
 80082dc:	701a      	strb	r2, [r3, #0]
                  break;
 80082de:	e066      	b.n	80083ae <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80082e6:	4619      	mov	r1, r3
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	2334      	movs	r3, #52	@ 0x34
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	4413      	add	r3, r2
 80082f2:	3390      	adds	r3, #144	@ 0x90
 80082f4:	2201      	movs	r2, #1
 80082f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80082fe:	3301      	adds	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8008308:	e050      	b.n	80083ac <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d118      	bne.n	8008342 <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008316:	4619      	mov	r1, r3
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	2334      	movs	r3, #52	@ 0x34
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	4413      	add	r3, r2
 8008322:	3390      	adds	r3, #144	@ 0x90
 8008324:	2208      	movs	r2, #8
 8008326:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800832e:	4619      	mov	r1, r3
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	2334      	movs	r3, #52	@ 0x34
 8008334:	fb01 f303 	mul.w	r3, r1, r3
 8008338:	4413      	add	r3, r2
 800833a:	3391      	adds	r3, #145	@ 0x91
 800833c:	2202      	movs	r2, #2
 800833e:	701a      	strb	r2, [r3, #0]
            break;
 8008340:	e034      	b.n	80083ac <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b04      	cmp	r3, #4
 8008346:	d131      	bne.n	80083ac <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800834e:	4619      	mov	r1, r3
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	2334      	movs	r3, #52	@ 0x34
 8008354:	fb01 f303 	mul.w	r3, r1, r3
 8008358:	4413      	add	r3, r2
 800835a:	3390      	adds	r3, #144	@ 0x90
 800835c:	2208      	movs	r2, #8
 800835e:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008366:	4619      	mov	r1, r3
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	2334      	movs	r3, #52	@ 0x34
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	4413      	add	r3, r2
 8008372:	3391      	adds	r3, #145	@ 0x91
 8008374:	2202      	movs	r2, #2
 8008376:	701a      	strb	r2, [r3, #0]
            break;
 8008378:	e018      	b.n	80083ac <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008380:	3301      	adds	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800838a:	e010      	b.n	80083ae <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2200      	movs	r2, #0
 8008390:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	220a      	movs	r2, #10
 8008398:	731a      	strb	r2, [r3, #12]
      break;
 800839a:	e045      	b.n	8008428 <USBH_MSC_Process+0x5a0>
            break;
 800839c:	bf00      	nop
 800839e:	e043      	b.n	8008428 <USBH_MSC_Process+0x5a0>
            break;
 80083a0:	bf00      	nop
 80083a2:	e041      	b.n	8008428 <USBH_MSC_Process+0x5a0>
            break;
 80083a4:	bf00      	nop
 80083a6:	e03f      	b.n	8008428 <USBH_MSC_Process+0x5a0>
            break;
 80083a8:	bf00      	nop
 80083aa:	e03d      	b.n	8008428 <USBH_MSC_Process+0x5a0>
            break;
 80083ac:	bf00      	nop
      break;
 80083ae:	e03b      	b.n	8008428 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	7812      	ldrb	r2, [r2, #0]
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d228      	bcs.n	8008410 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80083d0:	4619      	mov	r1, r3
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	2334      	movs	r3, #52	@ 0x34
 80083d6:	fb01 f303 	mul.w	r3, r1, r3
 80083da:	4413      	add	r3, r2
 80083dc:	3391      	adds	r3, #145	@ 0x91
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d106      	bne.n	80083f2 <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80083ea:	2102      	movs	r1, #2
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
 80083f0:	e005      	b.n	80083fe <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80083f8:	2106      	movs	r1, #6
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
        MSC_Handle->lun++;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8008404:	3301      	adds	r3, #1
 8008406:	b29a      	uxth	r2, r3
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 800840e:	e00b      	b.n	8008428 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2200      	movs	r2, #0
 8008414:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	2201      	movs	r2, #1
 800841c:	731a      	strb	r2, [r3, #12]
      break;
 800841e:	e003      	b.n	8008428 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	75fb      	strb	r3, [r7, #23]
      break;
 8008424:	e000      	b.n	8008428 <USBH_MSC_Process+0x5a0>
      break;
 8008426:	bf00      	nop
  }
  return error;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop

08008434 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b088      	sub	sp, #32
 800844e:	af02      	add	r7, sp, #8
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008460:	2301      	movs	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	2134      	movs	r1, #52	@ 0x34
 800846e:	fb01 f303 	mul.w	r3, r1, r3
 8008472:	4413      	add	r3, r2
 8008474:	3390      	adds	r3, #144	@ 0x90
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b07      	cmp	r3, #7
 800847a:	d03c      	beq.n	80084f6 <USBH_MSC_RdWrProcess+0xac>
 800847c:	2b07      	cmp	r3, #7
 800847e:	f300 80a8 	bgt.w	80085d2 <USBH_MSC_RdWrProcess+0x188>
 8008482:	2b05      	cmp	r3, #5
 8008484:	d06c      	beq.n	8008560 <USBH_MSC_RdWrProcess+0x116>
 8008486:	2b06      	cmp	r3, #6
 8008488:	f040 80a3 	bne.w	80085d2 <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800848c:	78f9      	ldrb	r1, [r7, #3]
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	2200      	movs	r2, #0
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fea7 	bl	80091ea <USBH_MSC_SCSI_Read>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	2134      	movs	r1, #52	@ 0x34
 80084ac:	fb01 f303 	mul.w	r3, r1, r3
 80084b0:	4413      	add	r3, r2
 80084b2:	3390      	adds	r3, #144	@ 0x90
 80084b4:	2201      	movs	r2, #1
 80084b6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084bc:	e08b      	b.n	80085d6 <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d109      	bne.n	80084d8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	2134      	movs	r1, #52	@ 0x34
 80084ca:	fb01 f303 	mul.w	r3, r1, r3
 80084ce:	4413      	add	r3, r2
 80084d0:	3390      	adds	r3, #144	@ 0x90
 80084d2:	2205      	movs	r2, #5
 80084d4:	701a      	strb	r2, [r3, #0]
      break;
 80084d6:	e07e      	b.n	80085d6 <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d17b      	bne.n	80085d6 <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	2134      	movs	r1, #52	@ 0x34
 80084e4:	fb01 f303 	mul.w	r3, r1, r3
 80084e8:	4413      	add	r3, r2
 80084ea:	3390      	adds	r3, #144	@ 0x90
 80084ec:	2208      	movs	r2, #8
 80084ee:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80084f0:	2302      	movs	r3, #2
 80084f2:	75fb      	strb	r3, [r7, #23]
      break;
 80084f4:	e06f      	b.n	80085d6 <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80084f6:	78f9      	ldrb	r1, [r7, #3]
 80084f8:	2300      	movs	r3, #0
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	2300      	movs	r3, #0
 80084fe:	2200      	movs	r2, #0
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fe02 	bl	800910a <USBH_MSC_SCSI_Write>
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10b      	bne.n	8008528 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	2134      	movs	r1, #52	@ 0x34
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	4413      	add	r3, r2
 800851c:	3390      	adds	r3, #144	@ 0x90
 800851e:	2201      	movs	r2, #1
 8008520:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008526:	e058      	b.n	80085da <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d109      	bne.n	8008542 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	2134      	movs	r1, #52	@ 0x34
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	4413      	add	r3, r2
 800853a:	3390      	adds	r3, #144	@ 0x90
 800853c:	2205      	movs	r2, #5
 800853e:	701a      	strb	r2, [r3, #0]
      break;
 8008540:	e04b      	b.n	80085da <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	2b04      	cmp	r3, #4
 8008546:	d148      	bne.n	80085da <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	2134      	movs	r1, #52	@ 0x34
 800854e:	fb01 f303 	mul.w	r3, r1, r3
 8008552:	4413      	add	r3, r2
 8008554:	3390      	adds	r3, #144	@ 0x90
 8008556:	2208      	movs	r2, #8
 8008558:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800855a:	2302      	movs	r3, #2
 800855c:	75fb      	strb	r3, [r7, #23]
      break;
 800855e:	e03c      	b.n	80085da <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	2234      	movs	r2, #52	@ 0x34
 8008564:	fb02 f303 	mul.w	r3, r2, r3
 8008568:	3398      	adds	r3, #152	@ 0x98
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4413      	add	r3, r2
 800856e:	1d1a      	adds	r2, r3, #4
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fd49 	bl	800900c <USBH_MSC_SCSI_RequestSense>
 800857a:	4603      	mov	r3, r0
 800857c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d114      	bne.n	80085ae <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	2134      	movs	r1, #52	@ 0x34
 800858a:	fb01 f303 	mul.w	r3, r1, r3
 800858e:	4413      	add	r3, r2
 8008590:	3390      	adds	r3, #144	@ 0x90
 8008592:	2201      	movs	r2, #1
 8008594:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	2134      	movs	r1, #52	@ 0x34
 800859c:	fb01 f303 	mul.w	r3, r1, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	3391      	adds	r3, #145	@ 0x91
 80085a4:	2202      	movs	r2, #2
 80085a6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80085a8:	2302      	movs	r3, #2
 80085aa:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085ac:	e017      	b.n	80085de <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d014      	beq.n	80085de <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d111      	bne.n	80085de <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	2134      	movs	r1, #52	@ 0x34
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	3390      	adds	r3, #144	@ 0x90
 80085c8:	2208      	movs	r2, #8
 80085ca:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80085cc:	2302      	movs	r3, #2
 80085ce:	75fb      	strb	r3, [r7, #23]
      break;
 80085d0:	e005      	b.n	80085de <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 80085d2:	bf00      	nop
 80085d4:	e004      	b.n	80085e0 <USBH_MSC_RdWrProcess+0x196>
      break;
 80085d6:	bf00      	nop
 80085d8:	e002      	b.n	80085e0 <USBH_MSC_RdWrProcess+0x196>
      break;
 80085da:	bf00      	nop
 80085dc:	e000      	b.n	80085e0 <USBH_MSC_RdWrProcess+0x196>
      break;
 80085de:	bf00      	nop

  }
  return error;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	b29a      	uxth	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b0b      	cmp	r3, #11
 8008612:	d10c      	bne.n	800862e <USBH_MSC_UnitIsReady+0x44>
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	2134      	movs	r1, #52	@ 0x34
 800861a:	fb01 f303 	mul.w	r3, r1, r3
 800861e:	4413      	add	r3, r2
 8008620:	3391      	adds	r3, #145	@ 0x91
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
 800862c:	e001      	b.n	8008632 <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	460b      	mov	r3, r1
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008658:	7afb      	ldrb	r3, [r7, #11]
 800865a:	b29a      	uxth	r2, r3
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b0b      	cmp	r3, #11
 800866a:	d10d      	bne.n	8008688 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	2234      	movs	r2, #52	@ 0x34
 8008670:	fb02 f303 	mul.w	r3, r2, r3
 8008674:	3390      	adds	r3, #144	@ 0x90
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	2234      	movs	r2, #52	@ 0x34
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f003 fdbb 	bl	800c1fa <memcpy>
    return USBH_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	e000      	b.n	800868a <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 8008688:	2302      	movs	r3, #2
  }
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b088      	sub	sp, #32
 8008696:	af02      	add	r7, sp, #8
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
 800869e:	460b      	mov	r3, r1
 80086a0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00e      	beq.n	80086e0 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80086c8:	2b0b      	cmp	r3, #11
 80086ca:	d109      	bne.n	80086e0 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	2134      	movs	r1, #52	@ 0x34
 80086d2:	fb01 f303 	mul.w	r3, r1, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	3390      	adds	r3, #144	@ 0x90
 80086da:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d001      	beq.n	80086e4 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 80086e0:	2302      	movs	r3, #2
 80086e2:	e032      	b.n	800874a <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	2134      	movs	r1, #52	@ 0x34
 80086ea:	fb01 f303 	mul.w	r3, r1, r3
 80086ee:	4413      	add	r3, r2
 80086f0:	3390      	adds	r3, #144	@ 0x90
 80086f2:	2206      	movs	r2, #6
 80086f4:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80086f6:	7af9      	ldrb	r1, [r7, #11]
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 fd72 	bl	80091ea <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800870c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800870e:	e013      	b.n	8008738 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad2      	subs	r2, r2, r3
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	429a      	cmp	r2, r3
 8008726:	d805      	bhi.n	8008734 <USBH_MSC_Read+0xa2>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 8008734:	2302      	movs	r3, #2
 8008736:	e008      	b.n	800874a <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008738:	7afb      	ldrb	r3, [r7, #11]
 800873a:	4619      	mov	r1, r3
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7ff fe84 	bl	800844a <USBH_MSC_RdWrProcess>
 8008742:	4603      	mov	r3, r0
 8008744:	2b01      	cmp	r3, #1
 8008746:	d0e3      	beq.n	8008710 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b088      	sub	sp, #32
 8008756:	af02      	add	r7, sp, #8
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
 800875e:	460b      	mov	r3, r1
 8008760:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	b29a      	uxth	r2, r3
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00e      	beq.n	80087a0 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008788:	2b0b      	cmp	r3, #11
 800878a:	d109      	bne.n	80087a0 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800878c:	7afb      	ldrb	r3, [r7, #11]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	2134      	movs	r1, #52	@ 0x34
 8008792:	fb01 f303 	mul.w	r3, r1, r3
 8008796:	4413      	add	r3, r2
 8008798:	3390      	adds	r3, #144	@ 0x90
 800879a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800879c:	2b01      	cmp	r3, #1
 800879e:	d001      	beq.n	80087a4 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 80087a0:	2302      	movs	r3, #2
 80087a2:	e032      	b.n	800880a <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	2134      	movs	r1, #52	@ 0x34
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	4413      	add	r3, r2
 80087b0:	3390      	adds	r3, #144	@ 0x90
 80087b2:	2207      	movs	r2, #7
 80087b4:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80087b6:	7af9      	ldrb	r1, [r7, #11]
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fca2 	bl	800910a <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087cc:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087ce:	e013      	b.n	80087f8 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad2      	subs	r2, r2, r3
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	f242 7110 	movw	r1, #10000	@ 0x2710
 80087e0:	fb01 f303 	mul.w	r3, r1, r3
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d805      	bhi.n	80087f4 <USBH_MSC_Write+0xa2>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 80087f4:	2302      	movs	r3, #2
 80087f6:	e008      	b.n	800880a <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	4619      	mov	r1, r3
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fe24 	bl	800844a <USBH_MSC_RdWrProcess>
 8008802:	4603      	mov	r3, r0
 8008804:	2b01      	cmp	r3, #1
 8008806:	d0e3      	beq.n	80087d0 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2221      	movs	r2, #33	@ 0x21
 800881e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	22ff      	movs	r2, #255	@ 0xff
 8008824:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008838:	2200      	movs	r2, #0
 800883a:	2100      	movs	r1, #0
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 ff44 	bl	800a6ca <USBH_CtlReq>
 8008842:	4603      	mov	r3, r0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	22a1      	movs	r2, #161	@ 0xa1
 800885a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	22fe      	movs	r2, #254	@ 0xfe
 8008860:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008874:	2201      	movs	r2, #1
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 ff26 	bl	800a6ca <USBH_CtlReq>
 800887e:	4603      	mov	r3, r0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4a09      	ldr	r2, [pc, #36]	@ (80088c4 <USBH_MSC_BOT_Init+0x3c>)
 800889e:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a09      	ldr	r2, [pc, #36]	@ (80088c8 <USBH_MSC_BOT_Init+0x40>)
 80088a4:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	43425355 	.word	0x43425355
 80088c8:	20304050 	.word	0x20304050

080088cc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80088dc:	2301      	movs	r3, #1
 80088de:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80088e0:	2301      	movs	r3, #1
 80088e2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088e4:	2300      	movs	r3, #0
 80088e6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088fc:	3b01      	subs	r3, #1
 80088fe:	2b0a      	cmp	r3, #10
 8008900:	f200 819e 	bhi.w	8008c40 <USBH_MSC_BOT_Process+0x374>
 8008904:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <USBH_MSC_BOT_Process+0x40>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	08008939 	.word	0x08008939
 8008910:	08008961 	.word	0x08008961
 8008914:	080089cb 	.word	0x080089cb
 8008918:	080089e9 	.word	0x080089e9
 800891c:	08008a6d 	.word	0x08008a6d
 8008920:	08008a8f 	.word	0x08008a8f
 8008924:	08008b27 	.word	0x08008b27
 8008928:	08008b43 	.word	0x08008b43
 800892c:	08008b95 	.word	0x08008b95
 8008930:	08008bc5 	.word	0x08008bc5
 8008934:	08008c27 	.word	0x08008c27
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	795b      	ldrb	r3, [r3, #5]
 8008952:	2201      	movs	r2, #1
 8008954:	9200      	str	r2, [sp, #0]
 8008956:	221f      	movs	r2, #31
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f002 f8c4 	bl	800aae6 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800895e:	e17e      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	795b      	ldrb	r3, [r3, #5]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f003 f928 	bl	800bbbc <USBH_LL_GetURBState>
 800896c:	4603      	mov	r3, r0
 800896e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008970:	7d3b      	ldrb	r3, [r7, #20]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d118      	bne.n	80089a8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00f      	beq.n	800899e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8008984:	b25b      	sxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	da04      	bge.n	8008994 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2203      	movs	r2, #3
 800898e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008992:	e157      	b.n	8008c44 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2205      	movs	r2, #5
 8008998:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800899c:	e152      	b.n	8008c44 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2207      	movs	r2, #7
 80089a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80089a6:	e14d      	b.n	8008c44 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089a8:	7d3b      	ldrb	r3, [r7, #20]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d104      	bne.n	80089b8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80089b6:	e145      	b.n	8008c44 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80089b8:	7d3b      	ldrb	r3, [r7, #20]
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	f040 8142 	bne.w	8008c44 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	220a      	movs	r2, #10
 80089c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80089c8:	e13c      	b.n	8008c44 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	895a      	ldrh	r2, [r3, #10]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	791b      	ldrb	r3, [r3, #4]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f002 f8a9 	bl	800ab30 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2204      	movs	r2, #4
 80089e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 80089e6:	e13a      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	791b      	ldrb	r3, [r3, #4]
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f003 f8e4 	bl	800bbbc <USBH_LL_GetURBState>
 80089f4:	4603      	mov	r3, r0
 80089f6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80089f8:	7d3b      	ldrb	r3, [r7, #20]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d12d      	bne.n	8008a5a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	8952      	ldrh	r2, [r2, #10]
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d910      	bls.n	8008a2c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	8952      	ldrh	r2, [r2, #10]
 8008a14:	441a      	add	r2, r3
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	8952      	ldrh	r2, [r2, #10]
 8008a24:	1a9a      	subs	r2, r3, r2
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a2a:	e002      	b.n	8008a32 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	895a      	ldrh	r2, [r3, #10]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	791b      	ldrb	r3, [r3, #4]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f002 f871 	bl	800ab30 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008a4e:	e0fb      	b.n	8008c48 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2207      	movs	r2, #7
 8008a54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008a58:	e0f6      	b.n	8008c48 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8008a5a:	7d3b      	ldrb	r3, [r7, #20]
 8008a5c:	2b05      	cmp	r3, #5
 8008a5e:	f040 80f3 	bne.w	8008c48 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2209      	movs	r2, #9
 8008a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008a6a:	e0ed      	b.n	8008c48 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	891a      	ldrh	r2, [r3, #8]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	795b      	ldrb	r3, [r3, #5]
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	9000      	str	r0, [sp, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f002 f831 	bl	800aae6 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2206      	movs	r2, #6
 8008a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008a8c:	e0e7      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	795b      	ldrb	r3, [r3, #5]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f003 f891 	bl	800bbbc <USBH_LL_GetURBState>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008a9e:	7d3b      	ldrb	r3, [r7, #20]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d12f      	bne.n	8008b04 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	8912      	ldrh	r2, [r2, #8]
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d910      	bls.n	8008ad2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	8912      	ldrh	r2, [r2, #8]
 8008aba:	441a      	add	r2, r3
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	8912      	ldrh	r2, [r2, #8]
 8008aca:	1a9a      	subs	r2, r3, r2
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ad0:	e002      	b.n	8008ad8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00c      	beq.n	8008afa <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	891a      	ldrh	r2, [r3, #8]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	795b      	ldrb	r3, [r3, #5]
 8008aee:	2001      	movs	r0, #1
 8008af0:	9000      	str	r0, [sp, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 fff7 	bl	800aae6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008af8:	e0a8      	b.n	8008c4c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2207      	movs	r2, #7
 8008afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008b02:	e0a3      	b.n	8008c4c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b04:	7d3b      	ldrb	r3, [r7, #20]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d104      	bne.n	8008b14 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2205      	movs	r2, #5
 8008b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008b12:	e09b      	b.n	8008c4c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8008b14:	7d3b      	ldrb	r3, [r7, #20]
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	f040 8098 	bne.w	8008c4c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	220a      	movs	r2, #10
 8008b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008b24:	e092      	b.n	8008c4c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	791b      	ldrb	r3, [r3, #4]
 8008b30:	220d      	movs	r2, #13
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fffc 	bl	800ab30 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	2208      	movs	r2, #8
 8008b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008b40:	e08d      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	791b      	ldrb	r3, [r3, #4]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f003 f837 	bl	800bbbc <USBH_LL_GetURBState>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008b52:	7d3b      	ldrb	r3, [r7, #20]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d115      	bne.n	8008b84 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f8a9 	bl	8008cc0 <USBH_MSC_DecodeCSW>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008b72:	7d7b      	ldrb	r3, [r7, #21]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008b7c:	e068      	b.n	8008c50 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	75fb      	strb	r3, [r7, #23]
      break;
 8008b82:	e065      	b.n	8008c50 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008b84:	7d3b      	ldrb	r3, [r7, #20]
 8008b86:	2b05      	cmp	r3, #5
 8008b88:	d162      	bne.n	8008c50 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2209      	movs	r2, #9
 8008b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008b92:	e05d      	b.n	8008c50 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	2200      	movs	r2, #0
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f864 	bl	8008c68 <USBH_MSC_BOT_Abort>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008ba4:	7dbb      	ldrb	r3, [r7, #22]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2207      	movs	r2, #7
 8008bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008bb2:	e04f      	b.n	8008c54 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008bb4:	7dbb      	ldrb	r3, [r7, #22]
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d14c      	bne.n	8008c54 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	220b      	movs	r2, #11
 8008bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008bc2:	e047      	b.n	8008c54 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f84c 	bl	8008c68 <USBH_MSC_BOT_Abort>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008bd4:	7dbb      	ldrb	r3, [r7, #22]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d11d      	bne.n	8008c16 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	795b      	ldrb	r3, [r3, #5]
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f003 f83f 	bl	800bc64 <USBH_LL_GetToggle>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	7959      	ldrb	r1, [r3, #5]
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	f1c3 0301 	rsb	r3, r3, #1
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f003 f800 	bl	800bbfe <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	791b      	ldrb	r3, [r3, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f002 fff9 	bl	800bbfe <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2209      	movs	r2, #9
 8008c10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008c14:	e020      	b.n	8008c58 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8008c16:	7dbb      	ldrb	r3, [r7, #22]
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d11d      	bne.n	8008c58 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	220b      	movs	r2, #11
 8008c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8008c24:	e018      	b.n	8008c58 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fdf3 	bl	8008812 <USBH_MSC_BOT_REQ_Reset>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d112      	bne.n	8008c5c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8008c3e:	e00d      	b.n	8008c5c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008c40:	bf00      	nop
 8008c42:	e00c      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c44:	bf00      	nop
 8008c46:	e00a      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c48:	bf00      	nop
 8008c4a:	e008      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c4c:	bf00      	nop
 8008c4e:	e006      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c50:	bf00      	nop
 8008c52:	e004      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c54:	bf00      	nop
 8008c56:	e002      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c58:	bf00      	nop
 8008c5a:	e000      	b.n	8008c5e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c5c:	bf00      	nop
  }
  return status;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
 8008c74:	4613      	mov	r3, r2
 8008c76:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008c86:	78bb      	ldrb	r3, [r7, #2]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <USBH_MSC_BOT_Abort+0x2a>
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d009      	beq.n	8008ca4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008c90:	e011      	b.n	8008cb6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	79db      	ldrb	r3, [r3, #7]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f9e1 	bl	800a060 <USBH_ClrFeature>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca2:	e008      	b.n	8008cb6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	799b      	ldrb	r3, [r3, #6]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 f9d8 	bl	800a060 <USBH_ClrFeature>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb4:	bf00      	nop
  }
  return status;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	791b      	ldrb	r3, [r3, #4]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f002 fedb 	bl	800ba98 <USBH_LL_GetLastXferSize>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b0d      	cmp	r3, #13
 8008ce6:	d002      	beq.n	8008cee <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	e024      	b.n	8008d38 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cf2:	4a14      	ldr	r2, [pc, #80]	@ (8008d44 <USBH_MSC_DecodeCSW+0x84>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d11d      	bne.n	8008d34 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d119      	bne.n	8008d38 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]
 8008d12:	e011      	b.n	8008d38 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d102      	bne.n	8008d24 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]
 8008d22:	e009      	b.n	8008d38 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d104      	bne.n	8008d38 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	73fb      	strb	r3, [r7, #15]
 8008d32:	e001      	b.n	8008d38 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008d34:	2302      	movs	r3, #2
 8008d36:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	53425355 	.word	0x53425355

08008d48 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008d54:	2302      	movs	r3, #2
 8008d56:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d002      	beq.n	8008d72 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d021      	beq.n	8008db4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008d70:	e028      	b.n	8008dc4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2200      	movs	r2, #0
 8008d76:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	220a      	movs	r2, #10
 8008d84:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	3363      	adds	r3, #99	@ 0x63
 8008d8c:	2210      	movs	r2, #16
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4618      	mov	r0, r3
 8008d92:	f003 f9a6 	bl	800c0e2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2202      	movs	r2, #2
 8008daa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8008dae:	2301      	movs	r3, #1
 8008db0:	73fb      	strb	r3, [r7, #15]
      break;
 8008db2:	e007      	b.n	8008dc4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff fd87 	bl	80088cc <USBH_MSC_BOT_Process>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc2:	bf00      	nop
  }

  return error;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b086      	sub	sp, #24
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	607a      	str	r2, [r7, #4]
 8008dda:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d002      	beq.n	8008dfa <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d027      	beq.n	8008e48 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008df8:	e05e      	b.n	8008eb8 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2280      	movs	r2, #128	@ 0x80
 8008e04:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	220a      	movs	r2, #10
 8008e0c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3363      	adds	r3, #99	@ 0x63
 8008e14:	2210      	movs	r2, #16
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f003 f962 	bl	800c0e2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2225      	movs	r2, #37	@ 0x25
 8008e22:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2202      	movs	r2, #2
 8008e32:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f103 0210 	add.w	r2, r3, #16
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008e42:	2301      	movs	r3, #1
 8008e44:	75fb      	strb	r3, [r7, #23]
      break;
 8008e46:	e037      	b.n	8008eb8 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fd3d 	bl	80088cc <USBH_MSC_BOT_Process>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d12c      	bne.n	8008eb6 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e62:	3303      	adds	r3, #3
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e6e:	3302      	adds	r3, #2
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	021b      	lsls	r3, r3, #8
 8008e74:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e82:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	061b      	lsls	r3, r3, #24
 8008e8e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e9a:	3307      	adds	r3, #7
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ea6:	3306      	adds	r3, #6
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	021b      	lsls	r3, r3, #8
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	809a      	strh	r2, [r3, #4]
      break;
 8008eb6:	bf00      	nop
  }

  return error;
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b086      	sub	sp, #24
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d002      	beq.n	8008eee <USBH_MSC_SCSI_Inquiry+0x2c>
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d03d      	beq.n	8008f68 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008eec:	e089      	b.n	8009002 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2224      	movs	r2, #36	@ 0x24
 8008ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2280      	movs	r2, #128	@ 0x80
 8008ef8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	220a      	movs	r2, #10
 8008f00:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	3363      	adds	r3, #99	@ 0x63
 8008f08:	220a      	movs	r2, #10
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f003 f8e8 	bl	800c0e2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2212      	movs	r2, #18
 8008f16:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	015b      	lsls	r3, r3, #5
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2224      	movs	r2, #36	@ 0x24
 8008f3a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2202      	movs	r2, #2
 8008f52:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f103 0210 	add.w	r2, r3, #16
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8008f62:	2301      	movs	r3, #1
 8008f64:	75fb      	strb	r3, [r7, #23]
      break;
 8008f66:	e04c      	b.n	8009002 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008f68:	7afb      	ldrb	r3, [r7, #11]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7ff fcad 	bl	80088cc <USBH_MSC_BOT_Process>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d141      	bne.n	8009000 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008f7c:	2222      	movs	r2, #34	@ 0x22
 8008f7e:	2100      	movs	r1, #0
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f003 f8ae 	bl	800c0e2 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	f003 031f 	and.w	r3, r3, #31
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	095b      	lsrs	r3, r3, #5
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fae:	3301      	adds	r3, #1
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	b25b      	sxtb	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	da03      	bge.n	8008fc0 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	709a      	strb	r2, [r3, #2]
 8008fbe:	e002      	b.n	8008fc6 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	1cd8      	adds	r0, r3, #3
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f003 f910 	bl	800c1fa <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f103 000c 	add.w	r0, r3, #12
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fe6:	3310      	adds	r3, #16
 8008fe8:	2210      	movs	r2, #16
 8008fea:	4619      	mov	r1, r3
 8008fec:	f003 f905 	bl	800c1fa <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	331d      	adds	r3, #29
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8008ffa:	3220      	adds	r2, #32
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	601a      	str	r2, [r3, #0]
      break;
 8009000:	bf00      	nop
  }

  return error;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	460b      	mov	r3, r1
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800901a:	2302      	movs	r3, #2
 800901c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800902e:	2b01      	cmp	r3, #1
 8009030:	d002      	beq.n	8009038 <USBH_MSC_SCSI_RequestSense+0x2c>
 8009032:	2b02      	cmp	r3, #2
 8009034:	d03d      	beq.n	80090b2 <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 8009036:	e063      	b.n	8009100 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	220e      	movs	r2, #14
 800903c:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2280      	movs	r2, #128	@ 0x80
 8009042:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	220a      	movs	r2, #10
 800904a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3363      	adds	r3, #99	@ 0x63
 8009052:	2210      	movs	r2, #16
 8009054:	2100      	movs	r1, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f003 f843 	bl	800c0e2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2203      	movs	r2, #3
 8009060:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	015b      	lsls	r3, r3, #5
 8009068:	b2da      	uxtb	r2, r3
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	220e      	movs	r2, #14
 8009084:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f103 0210 	add.w	r2, r3, #16
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80090ac:	2301      	movs	r3, #1
 80090ae:	75fb      	strb	r3, [r7, #23]
      break;
 80090b0:	e026      	b.n	8009100 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	4619      	mov	r1, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff fc08 	bl	80088cc <USBH_MSC_BOT_Process>
 80090bc:	4603      	mov	r3, r0
 80090be:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d11b      	bne.n	80090fe <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090cc:	3302      	adds	r3, #2
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	f003 030f 	and.w	r3, r3, #15
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090e0:	7b1a      	ldrb	r2, [r3, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090ec:	7b5a      	ldrb	r2, [r3, #13]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80090f8:	d101      	bne.n	80090fe <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 80090fa:	2304      	movs	r3, #4
 80090fc:	75fb      	strb	r3, [r7, #23]
      break;
 80090fe:	bf00      	nop
  }

  return error;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
 8009116:	460b      	mov	r3, r1
 8009118:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800911a:	2302      	movs	r3, #2
 800911c:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800912e:	2b01      	cmp	r3, #1
 8009130:	d002      	beq.n	8009138 <USBH_MSC_SCSI_Write+0x2e>
 8009132:	2b02      	cmp	r3, #2
 8009134:	d04c      	beq.n	80091d0 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009136:	e053      	b.n	80091e0 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	2134      	movs	r1, #52	@ 0x34
 800913e:	fb01 f303 	mul.w	r3, r1, r3
 8009142:	4413      	add	r3, r2
 8009144:	3398      	adds	r3, #152	@ 0x98
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	fb03 f202 	mul.w	r2, r3, r2
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	220a      	movs	r2, #10
 8009160:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	3363      	adds	r3, #99	@ 0x63
 8009168:	2210      	movs	r2, #16
 800916a:	2100      	movs	r1, #0
 800916c:	4618      	mov	r0, r3
 800916e:	f002 ffb8 	bl	800c0e2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	222a      	movs	r2, #42	@ 0x2a
 8009176:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800917a:	79fa      	ldrb	r2, [r7, #7]
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8009182:	79ba      	ldrb	r2, [r7, #6]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800918a:	797a      	ldrb	r2, [r7, #5]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8009192:	1d3b      	adds	r3, r7, #4
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800919c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 80091a6:	f107 0320 	add.w	r3, r7, #32
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2202      	movs	r2, #2
 80091be:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80091ca:	2301      	movs	r3, #1
 80091cc:	75fb      	strb	r3, [r7, #23]
      break;
 80091ce:	e007      	b.n	80091e0 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	4619      	mov	r1, r3
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff fb79 	bl	80088cc <USBH_MSC_BOT_Process>
 80091da:	4603      	mov	r3, r0
 80091dc:	75fb      	strb	r3, [r7, #23]
      break;
 80091de:	bf00      	nop
  }

  return error;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
 80091f6:	460b      	mov	r3, r1
 80091f8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80091fa:	2302      	movs	r3, #2
 80091fc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800920e:	2b01      	cmp	r3, #1
 8009210:	d002      	beq.n	8009218 <USBH_MSC_SCSI_Read+0x2e>
 8009212:	2b02      	cmp	r3, #2
 8009214:	d04c      	beq.n	80092b0 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009216:	e053      	b.n	80092c0 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	2134      	movs	r1, #52	@ 0x34
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	4413      	add	r3, r2
 8009224:	3398      	adds	r3, #152	@ 0x98
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	fb03 f202 	mul.w	r2, r3, r2
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2280      	movs	r2, #128	@ 0x80
 8009238:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	220a      	movs	r2, #10
 8009240:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	3363      	adds	r3, #99	@ 0x63
 8009248:	2210      	movs	r2, #16
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f002 ff48 	bl	800c0e2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2228      	movs	r2, #40	@ 0x28
 8009256:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800925a:	79fa      	ldrb	r2, [r7, #7]
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8009262:	79ba      	ldrb	r2, [r7, #6]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800926a:	797a      	ldrb	r2, [r7, #5]
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8009272:	1d3b      	adds	r3, r7, #4
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800927c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8009286:	f107 0320 	add.w	r3, r7, #32
 800928a:	781a      	ldrb	r2, [r3, #0]
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2202      	movs	r2, #2
 800929e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80092aa:	2301      	movs	r3, #1
 80092ac:	75fb      	strb	r3, [r7, #23]
      break;
 80092ae:	e007      	b.n	80092c0 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	4619      	mov	r1, r3
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff fb09 	bl	80088cc <USBH_MSC_BOT_Process>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75fb      	strb	r3, [r7, #23]
      break;
 80092be:	bf00      	nop
  }

  return error;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	4613      	mov	r3, r2
 80092d6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80092de:	2302      	movs	r3, #2
 80092e0:	e029      	b.n	8009336 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	79fa      	ldrb	r2, [r7, #7]
 80092e6:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f81f 	bl	800933e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f002 fafe 	bl	800b930 <USBH_LL_Init>

  return USBH_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	e009      	b.n	8009364 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	33e0      	adds	r3, #224	@ 0xe0
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	2200      	movs	r2, #0
 800935c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3301      	adds	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b0f      	cmp	r3, #15
 8009368:	d9f2      	bls.n	8009350 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	e009      	b.n	8009384 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4413      	add	r3, r2
 8009376:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800937a:	2200      	movs	r2, #0
 800937c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800938a:	d3f1      	bcc.n	8009370 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2240      	movs	r2, #64	@ 0x40
 80093b0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	331c      	adds	r3, #28
 80093dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f002 fe7d 	bl	800c0e2 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80093ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f002 fe74 	bl	800c0e2 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009400:	2212      	movs	r2, #18
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f002 fe6c 	bl	800c0e2 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009410:	223e      	movs	r2, #62	@ 0x3e
 8009412:	2100      	movs	r1, #0
 8009414:	4618      	mov	r0, r3
 8009416:	f002 fe64 	bl	800c0e2 <memset>

  return USBH_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d016      	beq.n	8009466 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10e      	bne.n	8009460 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009448:	1c59      	adds	r1, r3, #1
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	33de      	adds	r3, #222	@ 0xde
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
 800945e:	e004      	b.n	800946a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009460:	2302      	movs	r3, #2
 8009462:	73fb      	strb	r3, [r7, #15]
 8009464:	e001      	b.n	800946a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009466:	2302      	movs	r3, #2
 8009468:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800948e:	78fa      	ldrb	r2, [r7, #3]
 8009490:	429a      	cmp	r2, r3
 8009492:	d204      	bcs.n	800949e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	78fa      	ldrb	r2, [r7, #3]
 8009498:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800949c:	e001      	b.n	80094a2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800949e:	2302      	movs	r3, #2
 80094a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	4608      	mov	r0, r1
 80094ba:	4611      	mov	r1, r2
 80094bc:	461a      	mov	r2, r3
 80094be:	4603      	mov	r3, r0
 80094c0:	70fb      	strb	r3, [r7, #3]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70bb      	strb	r3, [r7, #2]
 80094c6:	4613      	mov	r3, r2
 80094c8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80094d8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094da:	e025      	b.n	8009528 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	221a      	movs	r2, #26
 80094e0:	fb02 f303 	mul.w	r3, r2, r3
 80094e4:	3308      	adds	r3, #8
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	3302      	adds	r3, #2
 80094ec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	795b      	ldrb	r3, [r3, #5]
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d002      	beq.n	80094fe <USBH_FindInterface+0x4e>
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	2bff      	cmp	r3, #255	@ 0xff
 80094fc:	d111      	bne.n	8009522 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009502:	78ba      	ldrb	r2, [r7, #2]
 8009504:	429a      	cmp	r2, r3
 8009506:	d002      	beq.n	800950e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009508:	78bb      	ldrb	r3, [r7, #2]
 800950a:	2bff      	cmp	r3, #255	@ 0xff
 800950c:	d109      	bne.n	8009522 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009512:	787a      	ldrb	r2, [r7, #1]
 8009514:	429a      	cmp	r2, r3
 8009516:	d002      	beq.n	800951e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009518:	787b      	ldrb	r3, [r7, #1]
 800951a:	2bff      	cmp	r3, #255	@ 0xff
 800951c:	d101      	bne.n	8009522 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	e006      	b.n	8009530 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	3301      	adds	r3, #1
 8009526:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d9d6      	bls.n	80094dc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800952e:	23ff      	movs	r3, #255	@ 0xff
}
 8009530:	4618      	mov	r0, r3
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f002 fa2f 	bl	800b9a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800954a:	2101      	movs	r1, #1
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f002 fb48 	bl	800bbe2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af04      	add	r7, sp, #16
 8009562:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009564:	2302      	movs	r3, #2
 8009566:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b01      	cmp	r3, #1
 8009576:	d102      	bne.n	800957e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2203      	movs	r2, #3
 800957c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b0b      	cmp	r3, #11
 8009586:	f200 81bb 	bhi.w	8009900 <USBH_Process+0x3a4>
 800958a:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <USBH_Process+0x34>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095c1 	.word	0x080095c1
 8009594:	080095f3 	.word	0x080095f3
 8009598:	0800965b 	.word	0x0800965b
 800959c:	0800989b 	.word	0x0800989b
 80095a0:	08009901 	.word	0x08009901
 80095a4:	080096fb 	.word	0x080096fb
 80095a8:	08009841 	.word	0x08009841
 80095ac:	08009731 	.word	0x08009731
 80095b0:	08009751 	.word	0x08009751
 80095b4:	0800976f 	.word	0x0800976f
 80095b8:	080097b3 	.word	0x080097b3
 80095bc:	08009883 	.word	0x08009883
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 819b 	beq.w	8009904 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80095d4:	20c8      	movs	r0, #200	@ 0xc8
 80095d6:	f002 fb78 	bl	800bcca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f002 fa41 	bl	800ba62 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095f0:	e188      	b.n	8009904 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d107      	bne.n	800960c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800960a:	e18a      	b.n	8009922 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009616:	d914      	bls.n	8009642 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800961e:	3301      	adds	r3, #1
 8009620:	b2da      	uxtb	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800962e:	2b03      	cmp	r3, #3
 8009630:	d903      	bls.n	800963a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	220d      	movs	r2, #13
 8009636:	701a      	strb	r2, [r3, #0]
      break;
 8009638:	e173      	b.n	8009922 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	701a      	strb	r2, [r3, #0]
      break;
 8009640:	e16f      	b.n	8009922 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009648:	f103 020a 	add.w	r2, r3, #10
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009652:	200a      	movs	r0, #10
 8009654:	f002 fb39 	bl	800bcca <USBH_Delay>
      break;
 8009658:	e163      	b.n	8009922 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800966a:	2104      	movs	r1, #4
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009670:	2064      	movs	r0, #100	@ 0x64
 8009672:	f002 fb2a 	bl	800bcca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f002 f9cc 	bl	800ba14 <USBH_LL_GetSpeed>
 800967c:	4603      	mov	r3, r0
 800967e:	461a      	mov	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2205      	movs	r2, #5
 800968a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800968c:	2100      	movs	r1, #0
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 fa9b 	bl	800abca <USBH_AllocPipe>
 8009694:	4603      	mov	r3, r0
 8009696:	461a      	mov	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800969c:	2180      	movs	r1, #128	@ 0x80
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f001 fa93 	bl	800abca <USBH_AllocPipe>
 80096a4:	4603      	mov	r3, r0
 80096a6:	461a      	mov	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7919      	ldrb	r1, [r3, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80096c0:	9202      	str	r2, [sp, #8]
 80096c2:	2200      	movs	r2, #0
 80096c4:	9201      	str	r2, [sp, #4]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	4603      	mov	r3, r0
 80096ca:	2280      	movs	r2, #128	@ 0x80
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 fa4d 	bl	800ab6c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	7959      	ldrb	r1, [r3, #5]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80096e6:	9202      	str	r2, [sp, #8]
 80096e8:	2200      	movs	r2, #0
 80096ea:	9201      	str	r2, [sp, #4]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	4603      	mov	r3, r0
 80096f0:	2200      	movs	r2, #0
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 fa3a 	bl	800ab6c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096f8:	e113      	b.n	8009922 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f916 	bl	800992c <USBH_HandleEnum>
 8009700:	4603      	mov	r3, r0
 8009702:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	f040 80fd 	bne.w	8009908 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800971c:	2b01      	cmp	r3, #1
 800971e:	d103      	bne.n	8009728 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2208      	movs	r2, #8
 8009724:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009726:	e0ef      	b.n	8009908 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2207      	movs	r2, #7
 800972c:	701a      	strb	r2, [r3, #0]
      break;
 800972e:	e0eb      	b.n	8009908 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 80e8 	beq.w	800990c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009742:	2101      	movs	r1, #1
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2208      	movs	r2, #8
 800974c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800974e:	e0dd      	b.n	800990c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fc3a 	bl	8009fd2 <USBH_SetCfg>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	f040 80d5 	bne.w	8009910 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2209      	movs	r2, #9
 800976a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800976c:	e0d0      	b.n	8009910 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009774:	f003 0320 	and.w	r3, r3, #32
 8009778:	2b00      	cmp	r3, #0
 800977a:	d016      	beq.n	80097aa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800977c:	2101      	movs	r1, #1
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fc4a 	bl	800a018 <USBH_SetFeature>
 8009784:	4603      	mov	r3, r0
 8009786:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d103      	bne.n	8009798 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	220a      	movs	r2, #10
 8009794:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009796:	e0bd      	b.n	8009914 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b03      	cmp	r3, #3
 800979e:	f040 80b9 	bne.w	8009914 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	220a      	movs	r2, #10
 80097a6:	701a      	strb	r2, [r3, #0]
      break;
 80097a8:	e0b4      	b.n	8009914 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	220a      	movs	r2, #10
 80097ae:	701a      	strb	r2, [r3, #0]
      break;
 80097b0:	e0b0      	b.n	8009914 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 80ad 	beq.w	8009918 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]
 80097ca:	e016      	b.n	80097fa <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80097cc:	7bfa      	ldrb	r2, [r7, #15]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	32de      	adds	r2, #222	@ 0xde
 80097d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d6:	791a      	ldrb	r2, [r3, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80097de:	429a      	cmp	r2, r3
 80097e0:	d108      	bne.n	80097f4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80097e2:	7bfa      	ldrb	r2, [r7, #15]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	32de      	adds	r2, #222	@ 0xde
 80097e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80097f2:	e005      	b.n	8009800 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	3301      	adds	r3, #1
 80097f8:	73fb      	strb	r3, [r7, #15]
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0e5      	beq.n	80097cc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d016      	beq.n	8009838 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d109      	bne.n	8009830 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2206      	movs	r2, #6
 8009820:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009828:	2103      	movs	r1, #3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800982e:	e073      	b.n	8009918 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	220d      	movs	r2, #13
 8009834:	701a      	strb	r2, [r3, #0]
      break;
 8009836:	e06f      	b.n	8009918 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	220d      	movs	r2, #13
 800983c:	701a      	strb	r2, [r3, #0]
      break;
 800983e:	e06b      	b.n	8009918 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009846:	2b00      	cmp	r3, #0
 8009848:	d017      	beq.n	800987a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
 8009856:	4603      	mov	r3, r0
 8009858:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d103      	bne.n	800986a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	220b      	movs	r2, #11
 8009866:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009868:	e058      	b.n	800991c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b02      	cmp	r3, #2
 8009870:	d154      	bne.n	800991c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	220d      	movs	r2, #13
 8009876:	701a      	strb	r2, [r3, #0]
      break;
 8009878:	e050      	b.n	800991c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	220d      	movs	r2, #13
 800987e:	701a      	strb	r2, [r3, #0]
      break;
 8009880:	e04c      	b.n	800991c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d049      	beq.n	8009920 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
      }
      break;
 8009898:	e042      	b.n	8009920 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7ff fd4b 	bl	800933e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d009      	beq.n	80098c6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80098d6:	2105      	movs	r1, #5
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d107      	bne.n	80098f8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff fe23 	bl	800953c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098f6:	e014      	b.n	8009922 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f002 f855 	bl	800b9a8 <USBH_LL_Start>
      break;
 80098fe:	e010      	b.n	8009922 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009900:	bf00      	nop
 8009902:	e00e      	b.n	8009922 <USBH_Process+0x3c6>
      break;
 8009904:	bf00      	nop
 8009906:	e00c      	b.n	8009922 <USBH_Process+0x3c6>
      break;
 8009908:	bf00      	nop
 800990a:	e00a      	b.n	8009922 <USBH_Process+0x3c6>
    break;
 800990c:	bf00      	nop
 800990e:	e008      	b.n	8009922 <USBH_Process+0x3c6>
      break;
 8009910:	bf00      	nop
 8009912:	e006      	b.n	8009922 <USBH_Process+0x3c6>
      break;
 8009914:	bf00      	nop
 8009916:	e004      	b.n	8009922 <USBH_Process+0x3c6>
      break;
 8009918:	bf00      	nop
 800991a:	e002      	b.n	8009922 <USBH_Process+0x3c6>
      break;
 800991c:	bf00      	nop
 800991e:	e000      	b.n	8009922 <USBH_Process+0x3c6>
      break;
 8009920:	bf00      	nop
  }
  return USBH_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af04      	add	r7, sp, #16
 8009932:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009934:	2301      	movs	r3, #1
 8009936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009938:	2301      	movs	r3, #1
 800993a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	2b07      	cmp	r3, #7
 8009942:	f200 81bd 	bhi.w	8009cc0 <USBH_HandleEnum+0x394>
 8009946:	a201      	add	r2, pc, #4	@ (adr r2, 800994c <USBH_HandleEnum+0x20>)
 8009948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994c:	0800996d 	.word	0x0800996d
 8009950:	08009a27 	.word	0x08009a27
 8009954:	08009a91 	.word	0x08009a91
 8009958:	08009b1b 	.word	0x08009b1b
 800995c:	08009b85 	.word	0x08009b85
 8009960:	08009bf5 	.word	0x08009bf5
 8009964:	08009c3b 	.word	0x08009c3b
 8009968:	08009c81 	.word	0x08009c81
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800996c:	2108      	movs	r1, #8
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fa4c 	bl	8009e0c <USBH_Get_DevDesc>
 8009974:	4603      	mov	r3, r0
 8009976:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d12e      	bne.n	80099dc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	7919      	ldrb	r1, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80099a2:	9202      	str	r2, [sp, #8]
 80099a4:	2200      	movs	r2, #0
 80099a6:	9201      	str	r2, [sp, #4]
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	4603      	mov	r3, r0
 80099ac:	2280      	movs	r2, #128	@ 0x80
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 f8dc 	bl	800ab6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	7959      	ldrb	r1, [r3, #5]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099c8:	9202      	str	r2, [sp, #8]
 80099ca:	2200      	movs	r2, #0
 80099cc:	9201      	str	r2, [sp, #4]
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	4603      	mov	r3, r0
 80099d2:	2200      	movs	r2, #0
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 f8c9 	bl	800ab6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099da:	e173      	b.n	8009cc4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	2b03      	cmp	r3, #3
 80099e0:	f040 8170 	bne.w	8009cc4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099ea:	3301      	adds	r3, #1
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d903      	bls.n	8009a06 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	220d      	movs	r2, #13
 8009a02:	701a      	strb	r2, [r3, #0]
      break;
 8009a04:	e15e      	b.n	8009cc4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	795b      	ldrb	r3, [r3, #5]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f001 f8fd 	bl	800ac0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	791b      	ldrb	r3, [r3, #4]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 f8f7 	bl	800ac0c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	701a      	strb	r2, [r3, #0]
      break;
 8009a24:	e14e      	b.n	8009cc4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009a26:	2112      	movs	r1, #18
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f9ef 	bl	8009e0c <USBH_Get_DevDesc>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a3e:	e143      	b.n	8009cc8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	f040 8140 	bne.w	8009cc8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a4e:	3301      	adds	r3, #1
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d903      	bls.n	8009a6a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	220d      	movs	r2, #13
 8009a66:	701a      	strb	r2, [r3, #0]
      break;
 8009a68:	e12e      	b.n	8009cc8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	795b      	ldrb	r3, [r3, #5]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 f8cb 	bl	800ac0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	791b      	ldrb	r3, [r3, #4]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f001 f8c5 	bl	800ac0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	701a      	strb	r2, [r3, #0]
      break;
 8009a8e:	e11b      	b.n	8009cc8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a90:	2101      	movs	r1, #1
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fa79 	bl	8009f8a <USBH_SetAddress>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d130      	bne.n	8009b04 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009aa2:	2002      	movs	r0, #2
 8009aa4:	f002 f911 	bl	800bcca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2203      	movs	r2, #3
 8009ab4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	7919      	ldrb	r1, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009aca:	9202      	str	r2, [sp, #8]
 8009acc:	2200      	movs	r2, #0
 8009ace:	9201      	str	r2, [sp, #4]
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2280      	movs	r2, #128	@ 0x80
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 f848 	bl	800ab6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7959      	ldrb	r1, [r3, #5]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009af0:	9202      	str	r2, [sp, #8]
 8009af2:	2200      	movs	r2, #0
 8009af4:	9201      	str	r2, [sp, #4]
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4603      	mov	r3, r0
 8009afa:	2200      	movs	r2, #0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 f835 	bl	800ab6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b02:	e0e3      	b.n	8009ccc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	f040 80e0 	bne.w	8009ccc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	220d      	movs	r2, #13
 8009b10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	705a      	strb	r2, [r3, #1]
      break;
 8009b18:	e0d8      	b.n	8009ccc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009b1a:	2109      	movs	r1, #9
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9a1 	bl	8009e64 <USBH_Get_CfgDesc>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2204      	movs	r2, #4
 8009b30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b32:	e0cd      	b.n	8009cd0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	f040 80ca 	bne.w	8009cd0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b42:	3301      	adds	r3, #1
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d903      	bls.n	8009b5e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	220d      	movs	r2, #13
 8009b5a:	701a      	strb	r2, [r3, #0]
      break;
 8009b5c:	e0b8      	b.n	8009cd0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	795b      	ldrb	r3, [r3, #5]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f001 f851 	bl	800ac0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	791b      	ldrb	r3, [r3, #4]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 f84b 	bl	800ac0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	701a      	strb	r2, [r3, #0]
      break;
 8009b82:	e0a5      	b.n	8009cd0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f969 	bl	8009e64 <USBH_Get_CfgDesc>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d103      	bne.n	8009ba4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2205      	movs	r2, #5
 8009ba0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ba2:	e097      	b.n	8009cd4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ba4:	7bbb      	ldrb	r3, [r7, #14]
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	f040 8094 	bne.w	8009cd4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d903      	bls.n	8009bce <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	220d      	movs	r2, #13
 8009bca:	701a      	strb	r2, [r3, #0]
      break;
 8009bcc:	e082      	b.n	8009cd4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	795b      	ldrb	r3, [r3, #5]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 f819 	bl	800ac0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	791b      	ldrb	r3, [r3, #4]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 f813 	bl	800ac0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]
      break;
 8009bf2:	e06f      	b.n	8009cd4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d019      	beq.n	8009c32 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c0a:	23ff      	movs	r3, #255	@ 0xff
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f953 	bl	8009eb8 <USBH_Get_StringDesc>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d103      	bne.n	8009c24 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2206      	movs	r2, #6
 8009c20:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c22:	e059      	b.n	8009cd8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d156      	bne.n	8009cd8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2206      	movs	r2, #6
 8009c2e:	705a      	strb	r2, [r3, #1]
      break;
 8009c30:	e052      	b.n	8009cd8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2206      	movs	r2, #6
 8009c36:	705a      	strb	r2, [r3, #1]
      break;
 8009c38:	e04e      	b.n	8009cd8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d019      	beq.n	8009c78 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c50:	23ff      	movs	r3, #255	@ 0xff
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f930 	bl	8009eb8 <USBH_Get_StringDesc>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d103      	bne.n	8009c6a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2207      	movs	r2, #7
 8009c66:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c68:	e038      	b.n	8009cdc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d135      	bne.n	8009cdc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2207      	movs	r2, #7
 8009c74:	705a      	strb	r2, [r3, #1]
      break;
 8009c76:	e031      	b.n	8009cdc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2207      	movs	r2, #7
 8009c7c:	705a      	strb	r2, [r3, #1]
      break;
 8009c7e:	e02d      	b.n	8009cdc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d017      	beq.n	8009cba <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c96:	23ff      	movs	r3, #255	@ 0xff
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f90d 	bl	8009eb8 <USBH_Get_StringDesc>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d102      	bne.n	8009cae <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009cac:	e018      	b.n	8009ce0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b03      	cmp	r3, #3
 8009cb2:	d115      	bne.n	8009ce0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb8:	e012      	b.n	8009ce0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8009cbe:	e00f      	b.n	8009ce0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009cc0:	bf00      	nop
 8009cc2:	e00e      	b.n	8009ce2 <USBH_HandleEnum+0x3b6>
      break;
 8009cc4:	bf00      	nop
 8009cc6:	e00c      	b.n	8009ce2 <USBH_HandleEnum+0x3b6>
      break;
 8009cc8:	bf00      	nop
 8009cca:	e00a      	b.n	8009ce2 <USBH_HandleEnum+0x3b6>
      break;
 8009ccc:	bf00      	nop
 8009cce:	e008      	b.n	8009ce2 <USBH_HandleEnum+0x3b6>
      break;
 8009cd0:	bf00      	nop
 8009cd2:	e006      	b.n	8009ce2 <USBH_HandleEnum+0x3b6>
      break;
 8009cd4:	bf00      	nop
 8009cd6:	e004      	b.n	8009ce2 <USBH_HandleEnum+0x3b6>
      break;
 8009cd8:	bf00      	nop
 8009cda:	e002      	b.n	8009ce2 <USBH_HandleEnum+0x3b6>
      break;
 8009cdc:	bf00      	nop
 8009cde:	e000      	b.n	8009ce2 <USBH_HandleEnum+0x3b6>
      break;
 8009ce0:	bf00      	nop
  }
  return Status;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009cfe:	bf00      	nop
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f804 	bl	8009d2e <USBH_HandleSof>
}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b0b      	cmp	r3, #11
 8009d3e:	d10a      	bne.n	8009d56 <USBH_HandleSof+0x28>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d005      	beq.n	8009d56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
  }
}
 8009d56:	bf00      	nop
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009d6e:	bf00      	nop
}
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009d8a:	bf00      	nop
}
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fdfa 	bl	800b9de <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	791b      	ldrb	r3, [r3, #4]
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 ff0b 	bl	800ac0c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	795b      	ldrb	r3, [r3, #5]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 ff05 	bl	800ac0c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af02      	add	r7, sp, #8
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009e18:	887b      	ldrh	r3, [r7, #2]
 8009e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1e:	d901      	bls.n	8009e24 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e01b      	b.n	8009e5c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009e2a:	887b      	ldrh	r3, [r7, #2]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e34:	2100      	movs	r1, #0
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f872 	bl	8009f20 <USBH_GetDescriptor>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009e4c:	887a      	ldrh	r2, [r7, #2]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f929 	bl	800a0a8 <USBH_ParseDevDesc>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	331c      	adds	r3, #28
 8009e74:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009e76:	887b      	ldrh	r3, [r7, #2]
 8009e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e7c:	d901      	bls.n	8009e82 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e016      	b.n	8009eb0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009e82:	887b      	ldrh	r3, [r7, #2]
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f846 	bl	8009f20 <USBH_GetDescriptor>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d107      	bne.n	8009eae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009e9e:	887b      	ldrh	r3, [r7, #2]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f9af 	bl	800a208 <USBH_ParseCfgDesc>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	72fb      	strb	r3, [r7, #11]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009ecc:	893b      	ldrh	r3, [r7, #8]
 8009ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ed2:	d802      	bhi.n	8009eda <USBH_Get_StringDesc+0x22>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e01c      	b.n	8009f18 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009ede:	7afb      	ldrb	r3, [r7, #11]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009ee6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009eee:	893b      	ldrh	r3, [r7, #8]
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 f812 	bl	8009f20 <USBH_GetDescriptor>
 8009efc:	4603      	mov	r3, r0
 8009efe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d107      	bne.n	8009f16 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009f0c:	893a      	ldrh	r2, [r7, #8]
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f000 fb8d 	bl	800a630 <USBH_ParseStringDesc>
  }

  return status;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	607b      	str	r3, [r7, #4]
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	72fb      	strb	r3, [r7, #11]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	789b      	ldrb	r3, [r3, #2]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d11c      	bne.n	8009f74 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009f3a:	7afb      	ldrb	r3, [r7, #11]
 8009f3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2206      	movs	r2, #6
 8009f4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	893a      	ldrh	r2, [r7, #8]
 8009f50:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009f52:	893b      	ldrh	r3, [r7, #8]
 8009f54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f5c:	d104      	bne.n	8009f68 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f240 4209 	movw	r2, #1033	@ 0x409
 8009f64:	829a      	strh	r2, [r3, #20]
 8009f66:	e002      	b.n	8009f6e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8b3a      	ldrh	r2, [r7, #24]
 8009f72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009f74:	8b3b      	ldrh	r3, [r7, #24]
 8009f76:	461a      	mov	r2, r3
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fba5 	bl	800a6ca <USBH_CtlReq>
 8009f80:	4603      	mov	r3, r0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	789b      	ldrb	r3, [r3, #2]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d10f      	bne.n	8009fbe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2205      	movs	r2, #5
 8009fa8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009faa:	78fb      	ldrb	r3, [r7, #3]
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fb81 	bl	800a6ca <USBH_CtlReq>
 8009fc8:	4603      	mov	r3, r0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	789b      	ldrb	r3, [r3, #2]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d10e      	bne.n	800a004 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2209      	movs	r2, #9
 8009ff0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	887a      	ldrh	r2, [r7, #2]
 8009ff6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a004:	2200      	movs	r2, #0
 800a006:	2100      	movs	r1, #0
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fb5e 	bl	800a6ca <USBH_CtlReq>
 800a00e:	4603      	mov	r3, r0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	789b      	ldrb	r3, [r3, #2]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d10f      	bne.n	800a04c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2203      	movs	r2, #3
 800a036:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a04c:	2200      	movs	r2, #0
 800a04e:	2100      	movs	r1, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fb3a 	bl	800a6ca <USBH_CtlReq>
 800a056:	4603      	mov	r3, r0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	789b      	ldrb	r3, [r3, #2]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d10f      	bne.n	800a094 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a086:	78fb      	ldrb	r3, [r7, #3]
 800a088:	b29a      	uxth	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a094:	2200      	movs	r2, #0
 800a096:	2100      	movs	r1, #0
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fb16 	bl	800a6ca <USBH_CtlReq>
 800a09e:	4603      	mov	r3, r0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a0bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	e094      	b.n	800a1f6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	781a      	ldrb	r2, [r3, #0]
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	785a      	ldrb	r2, [r3, #1]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	3302      	adds	r3, #2
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	3303      	adds	r3, #3
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	791a      	ldrb	r2, [r3, #4]
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	795a      	ldrb	r2, [r3, #5]
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	799a      	ldrb	r2, [r3, #6]
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	79da      	ldrb	r2, [r3, #7]
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d004      	beq.n	800a12a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a126:	2b01      	cmp	r3, #1
 800a128:	d11b      	bne.n	800a162 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	79db      	ldrb	r3, [r3, #7]
 800a12e:	2b20      	cmp	r3, #32
 800a130:	dc0f      	bgt.n	800a152 <USBH_ParseDevDesc+0xaa>
 800a132:	2b08      	cmp	r3, #8
 800a134:	db0f      	blt.n	800a156 <USBH_ParseDevDesc+0xae>
 800a136:	3b08      	subs	r3, #8
 800a138:	4a32      	ldr	r2, [pc, #200]	@ (800a204 <USBH_ParseDevDesc+0x15c>)
 800a13a:	fa22 f303 	lsr.w	r3, r2, r3
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	bf14      	ite	ne
 800a146:	2301      	movne	r3, #1
 800a148:	2300      	moveq	r3, #0
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d106      	bne.n	800a15e <USBH_ParseDevDesc+0xb6>
 800a150:	e001      	b.n	800a156 <USBH_ParseDevDesc+0xae>
 800a152:	2b40      	cmp	r3, #64	@ 0x40
 800a154:	d003      	beq.n	800a15e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	2208      	movs	r2, #8
 800a15a:	71da      	strb	r2, [r3, #7]
        break;
 800a15c:	e000      	b.n	800a160 <USBH_ParseDevDesc+0xb8>
        break;
 800a15e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a160:	e00e      	b.n	800a180 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d107      	bne.n	800a17c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	79db      	ldrb	r3, [r3, #7]
 800a170:	2b08      	cmp	r3, #8
 800a172:	d005      	beq.n	800a180 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2208      	movs	r2, #8
 800a178:	71da      	strb	r2, [r3, #7]
 800a17a:	e001      	b.n	800a180 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a17c:	2303      	movs	r3, #3
 800a17e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a180:	88fb      	ldrh	r3, [r7, #6]
 800a182:	2b08      	cmp	r3, #8
 800a184:	d936      	bls.n	800a1f4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	3308      	adds	r3, #8
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	3309      	adds	r3, #9
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	021b      	lsls	r3, r3, #8
 800a196:	b29b      	uxth	r3, r3
 800a198:	4313      	orrs	r3, r2
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	330a      	adds	r3, #10
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	330b      	adds	r3, #11
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	330c      	adds	r3, #12
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	330d      	adds	r3, #13
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	021b      	lsls	r3, r3, #8
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	7b9a      	ldrb	r2, [r3, #14]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	7bda      	ldrb	r2, [r3, #15]
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	7c1a      	ldrb	r2, [r3, #16]
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	7c5a      	ldrb	r2, [r3, #17]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	01000101 	.word	0x01000101

0800a208 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b08c      	sub	sp, #48	@ 0x30
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a21c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a224:	2300      	movs	r3, #0
 800a226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a236:	2302      	movs	r3, #2
 800a238:	e0da      	b.n	800a3f0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	2b09      	cmp	r3, #9
 800a244:	d002      	beq.n	800a24c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a248:	2209      	movs	r2, #9
 800a24a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	781a      	ldrb	r2, [r3, #0]
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	785a      	ldrb	r2, [r3, #1]
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	3302      	adds	r3, #2
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	3303      	adds	r3, #3
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4313      	orrs	r3, r2
 800a270:	b29b      	uxth	r3, r3
 800a272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a276:	bf28      	it	cs
 800a278:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	791a      	ldrb	r2, [r3, #4]
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	795a      	ldrb	r2, [r3, #5]
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	799a      	ldrb	r2, [r3, #6]
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	79da      	ldrb	r2, [r3, #7]
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	7a1a      	ldrb	r2, [r3, #8]
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a2aa:	88fb      	ldrh	r3, [r7, #6]
 800a2ac:	2b09      	cmp	r3, #9
 800a2ae:	f240 809d 	bls.w	800a3ec <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a2b2:	2309      	movs	r3, #9
 800a2b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2ba:	e081      	b.n	800a3c0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2bc:	f107 0316 	add.w	r3, r7, #22
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2c4:	f000 f9e7 	bl	800a696 <USBH_GetNextDesc>
 800a2c8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2cc:	785b      	ldrb	r3, [r3, #1]
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d176      	bne.n	800a3c0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b09      	cmp	r3, #9
 800a2d8:	d002      	beq.n	800a2e0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2dc:	2209      	movs	r2, #9
 800a2de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2e4:	221a      	movs	r2, #26
 800a2e6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	6a3a      	ldr	r2, [r7, #32]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	3302      	adds	r3, #2
 800a2f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a2f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2f6:	69f8      	ldr	r0, [r7, #28]
 800a2f8:	f000 f87e 	bl	800a3f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a306:	e043      	b.n	800a390 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a308:	f107 0316 	add.w	r3, r7, #22
 800a30c:	4619      	mov	r1, r3
 800a30e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a310:	f000 f9c1 	bl	800a696 <USBH_GetNextDesc>
 800a314:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	785b      	ldrb	r3, [r3, #1]
 800a31a:	2b05      	cmp	r3, #5
 800a31c:	d138      	bne.n	800a390 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	795b      	ldrb	r3, [r3, #5]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d113      	bne.n	800a34e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d003      	beq.n	800a336 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	799b      	ldrb	r3, [r3, #6]
 800a332:	2b03      	cmp	r3, #3
 800a334:	d10b      	bne.n	800a34e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	79db      	ldrb	r3, [r3, #7]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10b      	bne.n	800a356 <USBH_ParseCfgDesc+0x14e>
 800a33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	2b09      	cmp	r3, #9
 800a344:	d007      	beq.n	800a356 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a348:	2209      	movs	r2, #9
 800a34a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a34c:	e003      	b.n	800a356 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a350:	2207      	movs	r2, #7
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	e000      	b.n	800a358 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a356:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a35c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a360:	3201      	adds	r2, #1
 800a362:	00d2      	lsls	r2, r2, #3
 800a364:	211a      	movs	r1, #26
 800a366:	fb01 f303 	mul.w	r3, r1, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	3308      	adds	r3, #8
 800a36e:	6a3a      	ldr	r2, [r7, #32]
 800a370:	4413      	add	r3, r2
 800a372:	3304      	adds	r3, #4
 800a374:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a378:	69b9      	ldr	r1, [r7, #24]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f870 	bl	800a460 <USBH_ParseEPDesc>
 800a380:	4603      	mov	r3, r0
 800a382:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a386:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a38a:	3301      	adds	r3, #1
 800a38c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	791b      	ldrb	r3, [r3, #4]
 800a394:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a398:	429a      	cmp	r2, r3
 800a39a:	d204      	bcs.n	800a3a6 <USBH_ParseCfgDesc+0x19e>
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	885a      	ldrh	r2, [r3, #2]
 800a3a0:	8afb      	ldrh	r3, [r7, #22]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d8b0      	bhi.n	800a308 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	791b      	ldrb	r3, [r3, #4]
 800a3aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d201      	bcs.n	800a3b6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e01c      	b.n	800a3f0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a3b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d805      	bhi.n	800a3d4 <USBH_ParseCfgDesc+0x1cc>
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	885a      	ldrh	r2, [r3, #2]
 800a3cc:	8afb      	ldrh	r3, [r7, #22]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	f63f af74 	bhi.w	800a2bc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	791b      	ldrb	r3, [r3, #4]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	bf28      	it	cs
 800a3dc:	2302      	movcs	r3, #2
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d201      	bcs.n	800a3ec <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e001      	b.n	800a3f0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a3ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3730      	adds	r7, #48	@ 0x30
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	781a      	ldrb	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	785a      	ldrb	r2, [r3, #1]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	789a      	ldrb	r2, [r3, #2]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	78da      	ldrb	r2, [r3, #3]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	3304      	adds	r3, #4
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	bf28      	it	cs
 800a42c:	2302      	movcs	r3, #2
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	795a      	ldrb	r2, [r3, #5]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	799a      	ldrb	r2, [r3, #6]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	79da      	ldrb	r2, [r3, #7]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	7a1a      	ldrb	r2, [r3, #8]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	721a      	strb	r2, [r3, #8]
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	785a      	ldrb	r2, [r3, #1]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	789a      	ldrb	r2, [r3, #2]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	78da      	ldrb	r2, [r3, #3]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3304      	adds	r3, #4
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3305      	adds	r3, #5
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	021b      	lsls	r3, r3, #8
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	799a      	ldrb	r2, [r3, #6]
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	889b      	ldrh	r3, [r3, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d009      	beq.n	800a4ce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a4be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4c2:	d804      	bhi.n	800a4ce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a4c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4cc:	d901      	bls.n	800a4d2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d136      	bne.n	800a54a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	78db      	ldrb	r3, [r3, #3]
 800a4e0:	f003 0303 	and.w	r3, r3, #3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d108      	bne.n	800a4fa <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	889b      	ldrh	r3, [r3, #4]
 800a4ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4f0:	f240 8097 	bls.w	800a622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	75fb      	strb	r3, [r7, #23]
 800a4f8:	e093      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	78db      	ldrb	r3, [r3, #3]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d107      	bne.n	800a516 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	889b      	ldrh	r3, [r3, #4]
 800a50a:	2b40      	cmp	r3, #64	@ 0x40
 800a50c:	f240 8089 	bls.w	800a622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a510:	2303      	movs	r3, #3
 800a512:	75fb      	strb	r3, [r7, #23]
 800a514:	e085      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	78db      	ldrb	r3, [r3, #3]
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d005      	beq.n	800a52e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	78db      	ldrb	r3, [r3, #3]
 800a526:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d10a      	bne.n	800a544 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	799b      	ldrb	r3, [r3, #6]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <USBH_ParseEPDesc+0xde>
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	799b      	ldrb	r3, [r3, #6]
 800a53a:	2b10      	cmp	r3, #16
 800a53c:	d970      	bls.n	800a620 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a53e:	2303      	movs	r3, #3
 800a540:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a542:	e06d      	b.n	800a620 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a544:	2303      	movs	r3, #3
 800a546:	75fb      	strb	r3, [r7, #23]
 800a548:	e06b      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a550:	2b01      	cmp	r3, #1
 800a552:	d13c      	bne.n	800a5ce <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	78db      	ldrb	r3, [r3, #3]
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d005      	beq.n	800a56c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	78db      	ldrb	r3, [r3, #3]
 800a564:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d106      	bne.n	800a57a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	889b      	ldrh	r3, [r3, #4]
 800a570:	2b40      	cmp	r3, #64	@ 0x40
 800a572:	d956      	bls.n	800a622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a574:	2303      	movs	r3, #3
 800a576:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a578:	e053      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	78db      	ldrb	r3, [r3, #3]
 800a57e:	f003 0303 	and.w	r3, r3, #3
 800a582:	2b01      	cmp	r3, #1
 800a584:	d10e      	bne.n	800a5a4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	799b      	ldrb	r3, [r3, #6]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d007      	beq.n	800a59e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a592:	2b10      	cmp	r3, #16
 800a594:	d803      	bhi.n	800a59e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a59a:	2b40      	cmp	r3, #64	@ 0x40
 800a59c:	d941      	bls.n	800a622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	75fb      	strb	r3, [r7, #23]
 800a5a2:	e03e      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	78db      	ldrb	r3, [r3, #3]
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d10b      	bne.n	800a5c8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	799b      	ldrb	r3, [r3, #6]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <USBH_ParseEPDesc+0x162>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	889b      	ldrh	r3, [r3, #4]
 800a5bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5c0:	d32f      	bcc.n	800a622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	75fb      	strb	r3, [r7, #23]
 800a5c6:	e02c      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	75fb      	strb	r3, [r7, #23]
 800a5cc:	e029      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d120      	bne.n	800a61a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	78db      	ldrb	r3, [r3, #3]
 800a5dc:	f003 0303 	and.w	r3, r3, #3
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d106      	bne.n	800a5f2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	889b      	ldrh	r3, [r3, #4]
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d01a      	beq.n	800a622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	75fb      	strb	r3, [r7, #23]
 800a5f0:	e017      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	78db      	ldrb	r3, [r3, #3]
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d10a      	bne.n	800a614 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	799b      	ldrb	r3, [r3, #6]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <USBH_ParseEPDesc+0x1ae>
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	889b      	ldrh	r3, [r3, #4]
 800a60a:	2b08      	cmp	r3, #8
 800a60c:	d909      	bls.n	800a622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a60e:	2303      	movs	r3, #3
 800a610:	75fb      	strb	r3, [r7, #23]
 800a612:	e006      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a614:	2303      	movs	r3, #3
 800a616:	75fb      	strb	r3, [r7, #23]
 800a618:	e003      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a61a:	2303      	movs	r3, #3
 800a61c:	75fb      	strb	r3, [r7, #23]
 800a61e:	e000      	b.n	800a622 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a620:	bf00      	nop
  }

  return status;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
}
 800a624:	4618      	mov	r0, r3
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3301      	adds	r3, #1
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d120      	bne.n	800a68a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	1e9a      	subs	r2, r3, #2
 800a64e:	88fb      	ldrh	r3, [r7, #6]
 800a650:	4293      	cmp	r3, r2
 800a652:	bf28      	it	cs
 800a654:	4613      	movcs	r3, r2
 800a656:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3302      	adds	r3, #2
 800a65c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a65e:	2300      	movs	r3, #0
 800a660:	82fb      	strh	r3, [r7, #22]
 800a662:	e00b      	b.n	800a67c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a664:	8afb      	ldrh	r3, [r7, #22]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	4413      	add	r3, r2
 800a66a:	781a      	ldrb	r2, [r3, #0]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	3301      	adds	r3, #1
 800a674:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a676:	8afb      	ldrh	r3, [r7, #22]
 800a678:	3302      	adds	r3, #2
 800a67a:	82fb      	strh	r3, [r7, #22]
 800a67c:	8afa      	ldrh	r2, [r7, #22]
 800a67e:	8abb      	ldrh	r3, [r7, #20]
 800a680:	429a      	cmp	r2, r3
 800a682:	d3ef      	bcc.n	800a664 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2200      	movs	r2, #0
 800a688:	701a      	strb	r2, [r3, #0]
  }
}
 800a68a:	bf00      	nop
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	7812      	ldrb	r2, [r2, #0]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b086      	sub	sp, #24
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	789b      	ldrb	r3, [r3, #2]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d002      	beq.n	800a6ea <USBH_CtlReq+0x20>
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d00f      	beq.n	800a708 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a6e8:	e027      	b.n	800a73a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	88fa      	ldrh	r2, [r7, #6]
 800a6f4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2202      	movs	r2, #2
 800a700:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a702:	2301      	movs	r3, #1
 800a704:	75fb      	strb	r3, [r7, #23]
      break;
 800a706:	e018      	b.n	800a73a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 f81b 	bl	800a744 <USBH_HandleControl>
 800a70e:	4603      	mov	r3, r0
 800a710:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a712:	7dfb      	ldrb	r3, [r7, #23]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <USBH_CtlReq+0x54>
 800a718:	7dfb      	ldrb	r3, [r7, #23]
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d106      	bne.n	800a72c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	761a      	strb	r2, [r3, #24]
      break;
 800a72a:	e005      	b.n	800a738 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d102      	bne.n	800a738 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	709a      	strb	r2, [r3, #2]
      break;
 800a738:	bf00      	nop
  }
  return status;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af02      	add	r7, sp, #8
 800a74a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a74c:	2301      	movs	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a750:	2300      	movs	r3, #0
 800a752:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7e1b      	ldrb	r3, [r3, #24]
 800a758:	3b01      	subs	r3, #1
 800a75a:	2b0a      	cmp	r3, #10
 800a75c:	f200 8156 	bhi.w	800aa0c <USBH_HandleControl+0x2c8>
 800a760:	a201      	add	r2, pc, #4	@ (adr r2, 800a768 <USBH_HandleControl+0x24>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a795 	.word	0x0800a795
 800a76c:	0800a7af 	.word	0x0800a7af
 800a770:	0800a819 	.word	0x0800a819
 800a774:	0800a83f 	.word	0x0800a83f
 800a778:	0800a877 	.word	0x0800a877
 800a77c:	0800a8a1 	.word	0x0800a8a1
 800a780:	0800a8f3 	.word	0x0800a8f3
 800a784:	0800a915 	.word	0x0800a915
 800a788:	0800a951 	.word	0x0800a951
 800a78c:	0800a977 	.word	0x0800a977
 800a790:	0800a9b5 	.word	0x0800a9b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f103 0110 	add.w	r1, r3, #16
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	795b      	ldrb	r3, [r3, #5]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 f943 	bl	800aa2c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	761a      	strb	r2, [r3, #24]
      break;
 800a7ac:	e139      	b.n	800aa22 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	795b      	ldrb	r3, [r3, #5]
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 fa01 	bl	800bbbc <USBH_LL_GetURBState>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d11e      	bne.n	800a802 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	7c1b      	ldrb	r3, [r3, #16]
 800a7c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a7cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	8adb      	ldrh	r3, [r3, #22]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a7d6:	7b7b      	ldrb	r3, [r7, #13]
 800a7d8:	2b80      	cmp	r3, #128	@ 0x80
 800a7da:	d103      	bne.n	800a7e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2203      	movs	r2, #3
 800a7e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7e2:	e115      	b.n	800aa10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2205      	movs	r2, #5
 800a7e8:	761a      	strb	r2, [r3, #24]
      break;
 800a7ea:	e111      	b.n	800aa10 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a7ec:	7b7b      	ldrb	r3, [r7, #13]
 800a7ee:	2b80      	cmp	r3, #128	@ 0x80
 800a7f0:	d103      	bne.n	800a7fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2209      	movs	r2, #9
 800a7f6:	761a      	strb	r2, [r3, #24]
      break;
 800a7f8:	e10a      	b.n	800aa10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2207      	movs	r2, #7
 800a7fe:	761a      	strb	r2, [r3, #24]
      break;
 800a800:	e106      	b.n	800aa10 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b04      	cmp	r3, #4
 800a806:	d003      	beq.n	800a810 <USBH_HandleControl+0xcc>
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	f040 8100 	bne.w	800aa10 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	220b      	movs	r2, #11
 800a814:	761a      	strb	r2, [r3, #24]
      break;
 800a816:	e0fb      	b.n	800aa10 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a81e:	b29a      	uxth	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6899      	ldr	r1, [r3, #8]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	899a      	ldrh	r2, [r3, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	791b      	ldrb	r3, [r3, #4]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f93a 	bl	800aaaa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2204      	movs	r2, #4
 800a83a:	761a      	strb	r2, [r3, #24]
      break;
 800a83c:	e0f1      	b.n	800aa22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	791b      	ldrb	r3, [r3, #4]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f9b9 	bl	800bbbc <USBH_LL_GetURBState>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d102      	bne.n	800a85a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2209      	movs	r2, #9
 800a858:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	2b05      	cmp	r3, #5
 800a85e:	d102      	bne.n	800a866 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a860:	2303      	movs	r3, #3
 800a862:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a864:	e0d6      	b.n	800aa14 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b04      	cmp	r3, #4
 800a86a:	f040 80d3 	bne.w	800aa14 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	220b      	movs	r2, #11
 800a872:	761a      	strb	r2, [r3, #24]
      break;
 800a874:	e0ce      	b.n	800aa14 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6899      	ldr	r1, [r3, #8]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	899a      	ldrh	r2, [r3, #12]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	795b      	ldrb	r3, [r3, #5]
 800a882:	2001      	movs	r0, #1
 800a884:	9000      	str	r0, [sp, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8ea 	bl	800aa60 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a892:	b29a      	uxth	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2206      	movs	r2, #6
 800a89c:	761a      	strb	r2, [r3, #24]
      break;
 800a89e:	e0c0      	b.n	800aa22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	795b      	ldrb	r3, [r3, #5]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f001 f988 	bl	800bbbc <USBH_LL_GetURBState>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d103      	bne.n	800a8be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2207      	movs	r2, #7
 800a8ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8bc:	e0ac      	b.n	800aa18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a8be:	7bbb      	ldrb	r3, [r7, #14]
 800a8c0:	2b05      	cmp	r3, #5
 800a8c2:	d105      	bne.n	800a8d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	220c      	movs	r2, #12
 800a8c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ce:	e0a3      	b.n	800aa18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d103      	bne.n	800a8de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2205      	movs	r2, #5
 800a8da:	761a      	strb	r2, [r3, #24]
      break;
 800a8dc:	e09c      	b.n	800aa18 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	f040 8099 	bne.w	800aa18 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	220b      	movs	r2, #11
 800a8ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f0:	e092      	b.n	800aa18 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	791b      	ldrb	r3, [r3, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f8d5 	bl	800aaaa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a906:	b29a      	uxth	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2208      	movs	r2, #8
 800a910:	761a      	strb	r2, [r3, #24]

      break;
 800a912:	e086      	b.n	800aa22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	791b      	ldrb	r3, [r3, #4]
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f001 f94e 	bl	800bbbc <USBH_LL_GetURBState>
 800a920:	4603      	mov	r3, r0
 800a922:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d105      	bne.n	800a936 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	220d      	movs	r2, #13
 800a92e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a934:	e072      	b.n	800aa1c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d103      	bne.n	800a944 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	220b      	movs	r2, #11
 800a940:	761a      	strb	r2, [r3, #24]
      break;
 800a942:	e06b      	b.n	800aa1c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	2b05      	cmp	r3, #5
 800a948:	d168      	bne.n	800aa1c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a94a:	2303      	movs	r3, #3
 800a94c:	73fb      	strb	r3, [r7, #15]
      break;
 800a94e:	e065      	b.n	800aa1c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	795b      	ldrb	r3, [r3, #5]
 800a954:	2201      	movs	r2, #1
 800a956:	9200      	str	r2, [sp, #0]
 800a958:	2200      	movs	r2, #0
 800a95a:	2100      	movs	r1, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f87f 	bl	800aa60 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a968:	b29a      	uxth	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	220a      	movs	r2, #10
 800a972:	761a      	strb	r2, [r3, #24]
      break;
 800a974:	e055      	b.n	800aa22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	795b      	ldrb	r3, [r3, #5]
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 f91d 	bl	800bbbc <USBH_LL_GetURBState>
 800a982:	4603      	mov	r3, r0
 800a984:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d105      	bne.n	800a998 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	220d      	movs	r2, #13
 800a994:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a996:	e043      	b.n	800aa20 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d103      	bne.n	800a9a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2209      	movs	r2, #9
 800a9a2:	761a      	strb	r2, [r3, #24]
      break;
 800a9a4:	e03c      	b.n	800aa20 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d139      	bne.n	800aa20 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	220b      	movs	r2, #11
 800a9b0:	761a      	strb	r2, [r3, #24]
      break;
 800a9b2:	e035      	b.n	800aa20 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7e5b      	ldrb	r3, [r3, #25]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	765a      	strb	r2, [r3, #25]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	7e5b      	ldrb	r3, [r3, #25]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d806      	bhi.n	800a9d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a9d4:	e025      	b.n	800aa22 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a9dc:	2106      	movs	r1, #6
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	795b      	ldrb	r3, [r3, #5]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f90c 	bl	800ac0c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	791b      	ldrb	r3, [r3, #4]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f906 	bl	800ac0c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aa06:	2302      	movs	r3, #2
 800aa08:	73fb      	strb	r3, [r7, #15]
      break;
 800aa0a:	e00a      	b.n	800aa22 <USBH_HandleControl+0x2de>

    default:
      break;
 800aa0c:	bf00      	nop
 800aa0e:	e008      	b.n	800aa22 <USBH_HandleControl+0x2de>
      break;
 800aa10:	bf00      	nop
 800aa12:	e006      	b.n	800aa22 <USBH_HandleControl+0x2de>
      break;
 800aa14:	bf00      	nop
 800aa16:	e004      	b.n	800aa22 <USBH_HandleControl+0x2de>
      break;
 800aa18:	bf00      	nop
 800aa1a:	e002      	b.n	800aa22 <USBH_HandleControl+0x2de>
      break;
 800aa1c:	bf00      	nop
 800aa1e:	e000      	b.n	800aa22 <USBH_HandleControl+0x2de>
      break;
 800aa20:	bf00      	nop
  }

  return status;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af04      	add	r7, sp, #16
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	4613      	mov	r3, r2
 800aa38:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa3a:	79f9      	ldrb	r1, [r7, #7]
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9303      	str	r3, [sp, #12]
 800aa40:	2308      	movs	r3, #8
 800aa42:	9302      	str	r3, [sp, #8]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	9301      	str	r3, [sp, #4]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	2200      	movs	r2, #0
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f001 f882 	bl	800bb5a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af04      	add	r7, sp, #16
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	460b      	mov	r3, r1
 800aa70:	80fb      	strh	r3, [r7, #6]
 800aa72:	4613      	mov	r3, r2
 800aa74:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa80:	2300      	movs	r3, #0
 800aa82:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa84:	7979      	ldrb	r1, [r7, #5]
 800aa86:	7e3b      	ldrb	r3, [r7, #24]
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	88fb      	ldrh	r3, [r7, #6]
 800aa8c:	9302      	str	r3, [sp, #8]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	2301      	movs	r3, #1
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	2300      	movs	r3, #0
 800aa98:	2200      	movs	r2, #0
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f001 f85d 	bl	800bb5a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b088      	sub	sp, #32
 800aaae:	af04      	add	r7, sp, #16
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	4611      	mov	r1, r2
 800aab6:	461a      	mov	r2, r3
 800aab8:	460b      	mov	r3, r1
 800aaba:	80fb      	strh	r3, [r7, #6]
 800aabc:	4613      	mov	r3, r2
 800aabe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aac0:	7979      	ldrb	r1, [r7, #5]
 800aac2:	2300      	movs	r3, #0
 800aac4:	9303      	str	r3, [sp, #12]
 800aac6:	88fb      	ldrh	r3, [r7, #6]
 800aac8:	9302      	str	r3, [sp, #8]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	2301      	movs	r3, #1
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	2300      	movs	r3, #0
 800aad4:	2201      	movs	r2, #1
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f001 f83f 	bl	800bb5a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aadc:	2300      	movs	r3, #0

}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b088      	sub	sp, #32
 800aaea:	af04      	add	r7, sp, #16
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	80fb      	strh	r3, [r7, #6]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab0a:	7979      	ldrb	r1, [r7, #5]
 800ab0c:	7e3b      	ldrb	r3, [r7, #24]
 800ab0e:	9303      	str	r3, [sp, #12]
 800ab10:	88fb      	ldrh	r3, [r7, #6]
 800ab12:	9302      	str	r3, [sp, #8]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	2301      	movs	r3, #1
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	2200      	movs	r2, #0
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f001 f81a 	bl	800bb5a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af04      	add	r7, sp, #16
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	460b      	mov	r3, r1
 800ab40:	80fb      	strh	r3, [r7, #6]
 800ab42:	4613      	mov	r3, r2
 800ab44:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab46:	7979      	ldrb	r1, [r7, #5]
 800ab48:	2300      	movs	r3, #0
 800ab4a:	9303      	str	r3, [sp, #12]
 800ab4c:	88fb      	ldrh	r3, [r7, #6]
 800ab4e:	9302      	str	r3, [sp, #8]
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	2301      	movs	r3, #1
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	2302      	movs	r3, #2
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f000 fffc 	bl	800bb5a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af04      	add	r7, sp, #16
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	4608      	mov	r0, r1
 800ab76:	4611      	mov	r1, r2
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	70fb      	strb	r3, [r7, #3]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70bb      	strb	r3, [r7, #2]
 800ab82:	4613      	mov	r3, r2
 800ab84:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab86:	7878      	ldrb	r0, [r7, #1]
 800ab88:	78ba      	ldrb	r2, [r7, #2]
 800ab8a:	78f9      	ldrb	r1, [r7, #3]
 800ab8c:	8b3b      	ldrh	r3, [r7, #24]
 800ab8e:	9302      	str	r3, [sp, #8]
 800ab90:	7d3b      	ldrb	r3, [r7, #20]
 800ab92:	9301      	str	r3, [sp, #4]
 800ab94:	7c3b      	ldrb	r3, [r7, #16]
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	4603      	mov	r3, r0
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 ff8f 	bl	800babe <USBH_LL_OpenPipe>

  return USBH_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800abb6:	78fb      	ldrb	r3, [r7, #3]
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 ffae 	bl	800bb1c <USBH_LL_ClosePipe>

  return USBH_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f836 	bl	800ac48 <USBH_GetFreePipe>
 800abdc:	4603      	mov	r3, r0
 800abde:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800abe0:	89fb      	ldrh	r3, [r7, #14]
 800abe2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d00a      	beq.n	800ac00 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800abea:	78fa      	ldrb	r2, [r7, #3]
 800abec:	89fb      	ldrh	r3, [r7, #14]
 800abee:	f003 030f 	and.w	r3, r3, #15
 800abf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	33e0      	adds	r3, #224	@ 0xe0
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	440b      	add	r3, r1
 800abfe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ac00:	89fb      	ldrh	r3, [r7, #14]
 800ac02:	b2db      	uxtb	r3, r3
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	2b0f      	cmp	r3, #15
 800ac1c:	d80d      	bhi.n	800ac3a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ac1e:	78fb      	ldrb	r3, [r7, #3]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	33e0      	adds	r3, #224	@ 0xe0
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ac30:	6879      	ldr	r1, [r7, #4]
 800ac32:	33e0      	adds	r3, #224	@ 0xe0
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]
 800ac58:	e00f      	b.n	800ac7a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	33e0      	adds	r3, #224	@ 0xe0
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	e007      	b.n	800ac84 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	3301      	adds	r3, #1
 800ac78:	73fb      	strb	r3, [r7, #15]
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
 800ac7c:	2b0f      	cmp	r3, #15
 800ac7e:	d9ec      	bls.n	800ac5a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	4a08      	ldr	r2, [pc, #32]	@ (800acc0 <disk_status+0x30>)
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	79fa      	ldrb	r2, [r7, #7]
 800aca8:	4905      	ldr	r1, [pc, #20]	@ (800acc0 <disk_status+0x30>)
 800acaa:	440a      	add	r2, r1
 800acac:	7a12      	ldrb	r2, [r2, #8]
 800acae:	4610      	mov	r0, r2
 800acb0:	4798      	blx	r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	200012c0 	.word	0x200012c0

0800acc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	4603      	mov	r3, r0
 800accc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800acd2:	79fb      	ldrb	r3, [r7, #7]
 800acd4:	4a0e      	ldr	r2, [pc, #56]	@ (800ad10 <disk_initialize+0x4c>)
 800acd6:	5cd3      	ldrb	r3, [r2, r3]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d114      	bne.n	800ad06 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	4a0c      	ldr	r2, [pc, #48]	@ (800ad10 <disk_initialize+0x4c>)
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	79fa      	ldrb	r2, [r7, #7]
 800acea:	4909      	ldr	r1, [pc, #36]	@ (800ad10 <disk_initialize+0x4c>)
 800acec:	440a      	add	r2, r1
 800acee:	7a12      	ldrb	r2, [r2, #8]
 800acf0:	4610      	mov	r0, r2
 800acf2:	4798      	blx	r3
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d103      	bne.n	800ad06 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	4a03      	ldr	r2, [pc, #12]	@ (800ad10 <disk_initialize+0x4c>)
 800ad02:	2101      	movs	r1, #1
 800ad04:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	200012c0 	.word	0x200012c0

0800ad14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ad14:	b590      	push	{r4, r7, lr}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	607a      	str	r2, [r7, #4]
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	4603      	mov	r3, r0
 800ad22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	4a0a      	ldr	r2, [pc, #40]	@ (800ad50 <disk_read+0x3c>)
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	689c      	ldr	r4, [r3, #8]
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
 800ad32:	4a07      	ldr	r2, [pc, #28]	@ (800ad50 <disk_read+0x3c>)
 800ad34:	4413      	add	r3, r2
 800ad36:	7a18      	ldrb	r0, [r3, #8]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	47a0      	blx	r4
 800ad40:	4603      	mov	r3, r0
 800ad42:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd90      	pop	{r4, r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	200012c0 	.word	0x200012c0

0800ad54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ad54:	b590      	push	{r4, r7, lr}
 800ad56:	b087      	sub	sp, #28
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60b9      	str	r1, [r7, #8]
 800ad5c:	607a      	str	r2, [r7, #4]
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	4603      	mov	r3, r0
 800ad62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
 800ad66:	4a0a      	ldr	r2, [pc, #40]	@ (800ad90 <disk_write+0x3c>)
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68dc      	ldr	r4, [r3, #12]
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	4a07      	ldr	r2, [pc, #28]	@ (800ad90 <disk_write+0x3c>)
 800ad74:	4413      	add	r3, r2
 800ad76:	7a18      	ldrb	r0, [r3, #8]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	47a0      	blx	r4
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd90      	pop	{r4, r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	200012c0 	.word	0x200012c0

0800ad94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	603a      	str	r2, [r7, #0]
 800ad9e:	71fb      	strb	r3, [r7, #7]
 800ada0:	460b      	mov	r3, r1
 800ada2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ada4:	79fb      	ldrb	r3, [r7, #7]
 800ada6:	4a09      	ldr	r2, [pc, #36]	@ (800adcc <disk_ioctl+0x38>)
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	79fa      	ldrb	r2, [r7, #7]
 800adb2:	4906      	ldr	r1, [pc, #24]	@ (800adcc <disk_ioctl+0x38>)
 800adb4:	440a      	add	r2, r1
 800adb6:	7a10      	ldrb	r0, [r2, #8]
 800adb8:	79b9      	ldrb	r1, [r7, #6]
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	4798      	blx	r3
 800adbe:	4603      	mov	r3, r0
 800adc0:	73fb      	strb	r3, [r7, #15]
  return res;
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	200012c0 	.word	0x200012c0

0800add0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3301      	adds	r3, #1
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ade0:	89fb      	ldrh	r3, [r7, #14]
 800ade2:	021b      	lsls	r3, r3, #8
 800ade4:	b21a      	sxth	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	b21b      	sxth	r3, r3
 800adec:	4313      	orrs	r3, r2
 800adee:	b21b      	sxth	r3, r3
 800adf0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800adf2:	89fb      	ldrh	r3, [r7, #14]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3714      	adds	r7, #20
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	3303      	adds	r3, #3
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	021b      	lsls	r3, r3, #8
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	3202      	adds	r2, #2
 800ae18:	7812      	ldrb	r2, [r2, #0]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	3201      	adds	r2, #1
 800ae26:	7812      	ldrb	r2, [r2, #0]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	021b      	lsls	r3, r3, #8
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	7812      	ldrb	r2, [r2, #0]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]
	return rv;
 800ae38:	68fb      	ldr	r3, [r7, #12]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
	...

0800ae48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae50:	2300      	movs	r3, #0
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	e010      	b.n	800ae78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ae56:	4a0d      	ldr	r2, [pc, #52]	@ (800ae8c <clear_lock+0x44>)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	4413      	add	r3, r2
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d105      	bne.n	800ae72 <clear_lock+0x2a>
 800ae66:	4a09      	ldr	r2, [pc, #36]	@ (800ae8c <clear_lock+0x44>)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	011b      	lsls	r3, r3, #4
 800ae6c:	4413      	add	r3, r2
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3301      	adds	r3, #1
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d9eb      	bls.n	800ae56 <clear_lock+0xe>
	}
}
 800ae7e:	bf00      	nop
 800ae80:	bf00      	nop
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	200012a0 	.word	0x200012a0

0800ae90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	78db      	ldrb	r3, [r3, #3]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d034      	beq.n	800af0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aea8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	7858      	ldrb	r0, [r3, #1]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	f7ff ff4c 	bl	800ad54 <disk_write>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d002      	beq.n	800aec8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	73fb      	strb	r3, [r7, #15]
 800aec6:	e022      	b.n	800af0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	1ad2      	subs	r2, r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d217      	bcs.n	800af0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	789b      	ldrb	r3, [r3, #2]
 800aee2:	613b      	str	r3, [r7, #16]
 800aee4:	e010      	b.n	800af08 <sync_window+0x78>
					wsect += fs->fsize;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	4413      	add	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7858      	ldrb	r0, [r3, #1]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aefa:	2301      	movs	r3, #1
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	f7ff ff29 	bl	800ad54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	3b01      	subs	r3, #1
 800af06:	613b      	str	r3, [r7, #16]
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d8eb      	bhi.n	800aee6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d01b      	beq.n	800af68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff ffad 	bl	800ae90 <sync_window>
 800af36:	4603      	mov	r3, r0
 800af38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d113      	bne.n	800af68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7858      	ldrb	r0, [r3, #1]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af4a:	2301      	movs	r3, #1
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	f7ff fee1 	bl	800ad14 <disk_read>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d004      	beq.n	800af62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af58:	f04f 33ff 	mov.w	r3, #4294967295
 800af5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af5e:	2301      	movs	r3, #1
 800af60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800af72:	b480      	push	{r7}
 800af74:	b087      	sub	sp, #28
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800af7a:	f04f 33ff 	mov.w	r3, #4294967295
 800af7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d031      	beq.n	800afec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	e002      	b.n	800af96 <get_ldnumber+0x24>
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	3301      	adds	r3, #1
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	d903      	bls.n	800afa6 <get_ldnumber+0x34>
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b3a      	cmp	r3, #58	@ 0x3a
 800afa4:	d1f4      	bne.n	800af90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b3a      	cmp	r3, #58	@ 0x3a
 800afac:	d11c      	bne.n	800afe8 <get_ldnumber+0x76>
			tp = *path;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	60fa      	str	r2, [r7, #12]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	3b30      	subs	r3, #48	@ 0x30
 800afbe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b09      	cmp	r3, #9
 800afc4:	d80e      	bhi.n	800afe4 <get_ldnumber+0x72>
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d10a      	bne.n	800afe4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d107      	bne.n	800afe4 <get_ldnumber+0x72>
					vol = (int)i;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	3301      	adds	r3, #1
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	e002      	b.n	800afee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800afe8:	2300      	movs	r3, #0
 800afea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800afec:	693b      	ldr	r3, [r7, #16]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
	...

0800affc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	70da      	strb	r2, [r3, #3]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f04f 32ff 	mov.w	r2, #4294967295
 800b012:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff ff7e 	bl	800af18 <move_window>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <check_fs+0x2a>
 800b022:	2304      	movs	r3, #4
 800b024:	e038      	b.n	800b098 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3338      	adds	r3, #56	@ 0x38
 800b02a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff fece 	bl	800add0 <ld_word>
 800b034:	4603      	mov	r3, r0
 800b036:	461a      	mov	r2, r3
 800b038:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d001      	beq.n	800b044 <check_fs+0x48>
 800b040:	2303      	movs	r3, #3
 800b042:	e029      	b.n	800b098 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b04a:	2be9      	cmp	r3, #233	@ 0xe9
 800b04c:	d009      	beq.n	800b062 <check_fs+0x66>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b054:	2beb      	cmp	r3, #235	@ 0xeb
 800b056:	d11e      	bne.n	800b096 <check_fs+0x9a>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b05e:	2b90      	cmp	r3, #144	@ 0x90
 800b060:	d119      	bne.n	800b096 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3338      	adds	r3, #56	@ 0x38
 800b066:	3336      	adds	r3, #54	@ 0x36
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff fec9 	bl	800ae00 <ld_dword>
 800b06e:	4603      	mov	r3, r0
 800b070:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b074:	4a0a      	ldr	r2, [pc, #40]	@ (800b0a0 <check_fs+0xa4>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d101      	bne.n	800b07e <check_fs+0x82>
 800b07a:	2300      	movs	r3, #0
 800b07c:	e00c      	b.n	800b098 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	3338      	adds	r3, #56	@ 0x38
 800b082:	3352      	adds	r3, #82	@ 0x52
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff febb 	bl	800ae00 <ld_dword>
 800b08a:	4603      	mov	r3, r0
 800b08c:	4a05      	ldr	r2, [pc, #20]	@ (800b0a4 <check_fs+0xa8>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d101      	bne.n	800b096 <check_fs+0x9a>
 800b092:	2300      	movs	r3, #0
 800b094:	e000      	b.n	800b098 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b096:	2302      	movs	r3, #2
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	00544146 	.word	0x00544146
 800b0a4:	33544146 	.word	0x33544146

0800b0a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b096      	sub	sp, #88	@ 0x58
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff ff58 	bl	800af72 <get_ldnumber>
 800b0c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b0c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	da01      	bge.n	800b0ce <find_volume+0x26>
 800b0ca:	230b      	movs	r3, #11
 800b0cc:	e265      	b.n	800b59a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b0ce:	4a9f      	ldr	r2, [pc, #636]	@ (800b34c <find_volume+0x2a4>)
 800b0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <find_volume+0x3a>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	e25b      	b.n	800b59a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b0e8:	79fb      	ldrb	r3, [r7, #7]
 800b0ea:	f023 0301 	bic.w	r3, r3, #1
 800b0ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d01a      	beq.n	800b12e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fa:	785b      	ldrb	r3, [r3, #1]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7ff fdc7 	bl	800ac90 <disk_status>
 800b102:	4603      	mov	r3, r0
 800b104:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b108:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10c      	bne.n	800b12e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b114:	79fb      	ldrb	r3, [r7, #7]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d007      	beq.n	800b12a <find_volume+0x82>
 800b11a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b11e:	f003 0304 	and.w	r3, r3, #4
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b126:	230a      	movs	r3, #10
 800b128:	e237      	b.n	800b59a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b12a:	2300      	movs	r3, #0
 800b12c:	e235      	b.n	800b59a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b130:	2200      	movs	r2, #0
 800b132:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b136:	b2da      	uxtb	r2, r3
 800b138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13e:	785b      	ldrb	r3, [r3, #1]
 800b140:	4618      	mov	r0, r3
 800b142:	f7ff fdbf 	bl	800acc4 <disk_initialize>
 800b146:	4603      	mov	r3, r0
 800b148:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b14c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b158:	2303      	movs	r3, #3
 800b15a:	e21e      	b.n	800b59a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b15c:	79fb      	ldrb	r3, [r7, #7]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d007      	beq.n	800b172 <find_volume+0xca>
 800b162:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b166:	f003 0304 	and.w	r3, r3, #4
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b16e:	230a      	movs	r3, #10
 800b170:	e213      	b.n	800b59a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b174:	7858      	ldrb	r0, [r3, #1]
 800b176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b178:	330c      	adds	r3, #12
 800b17a:	461a      	mov	r2, r3
 800b17c:	2102      	movs	r1, #2
 800b17e:	f7ff fe09 	bl	800ad94 <disk_ioctl>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <find_volume+0xe4>
 800b188:	2301      	movs	r3, #1
 800b18a:	e206      	b.n	800b59a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18e:	899b      	ldrh	r3, [r3, #12]
 800b190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b194:	d80d      	bhi.n	800b1b2 <find_volume+0x10a>
 800b196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b198:	899b      	ldrh	r3, [r3, #12]
 800b19a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b19e:	d308      	bcc.n	800b1b2 <find_volume+0x10a>
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a2:	899b      	ldrh	r3, [r3, #12]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a8:	899b      	ldrh	r3, [r3, #12]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <find_volume+0x10e>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e1f1      	b.n	800b59a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b1ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b1bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b1be:	f7ff ff1d 	bl	800affc <check_fs>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b1c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d149      	bne.n	800b264 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1d4:	e01e      	b.n	800b214 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b1dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b1e4:	4413      	add	r3, r2
 800b1e6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d006      	beq.n	800b200 <find_volume+0x158>
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff fe02 	bl	800ae00 <ld_dword>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	e000      	b.n	800b202 <find_volume+0x15a>
 800b200:	2200      	movs	r2, #0
 800b202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	3358      	adds	r3, #88	@ 0x58
 800b208:	443b      	add	r3, r7
 800b20a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b20e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b210:	3301      	adds	r3, #1
 800b212:	643b      	str	r3, [r7, #64]	@ 0x40
 800b214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b216:	2b03      	cmp	r3, #3
 800b218:	d9dd      	bls.n	800b1d6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b21a:	2300      	movs	r3, #0
 800b21c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b21e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <find_volume+0x182>
 800b224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b226:	3b01      	subs	r3, #1
 800b228:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b22a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	3358      	adds	r3, #88	@ 0x58
 800b230:	443b      	add	r3, r7
 800b232:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b236:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <find_volume+0x1a2>
 800b23e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b240:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b242:	f7ff fedb 	bl	800affc <check_fs>
 800b246:	4603      	mov	r3, r0
 800b248:	e000      	b.n	800b24c <find_volume+0x1a4>
 800b24a:	2303      	movs	r3, #3
 800b24c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b250:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b254:	2b01      	cmp	r3, #1
 800b256:	d905      	bls.n	800b264 <find_volume+0x1bc>
 800b258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b25a:	3301      	adds	r3, #1
 800b25c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b25e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b260:	2b03      	cmp	r3, #3
 800b262:	d9e2      	bls.n	800b22a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b264:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d101      	bne.n	800b270 <find_volume+0x1c8>
 800b26c:	2301      	movs	r3, #1
 800b26e:	e194      	b.n	800b59a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b270:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b274:	2b01      	cmp	r3, #1
 800b276:	d901      	bls.n	800b27c <find_volume+0x1d4>
 800b278:	230d      	movs	r3, #13
 800b27a:	e18e      	b.n	800b59a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	3338      	adds	r3, #56	@ 0x38
 800b280:	330b      	adds	r3, #11
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fda4 	bl	800add0 <ld_word>
 800b288:	4603      	mov	r3, r0
 800b28a:	461a      	mov	r2, r3
 800b28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28e:	899b      	ldrh	r3, [r3, #12]
 800b290:	429a      	cmp	r2, r3
 800b292:	d001      	beq.n	800b298 <find_volume+0x1f0>
 800b294:	230d      	movs	r3, #13
 800b296:	e180      	b.n	800b59a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29a:	3338      	adds	r3, #56	@ 0x38
 800b29c:	3316      	adds	r3, #22
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff fd96 	bl	800add0 <ld_word>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b2a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <find_volume+0x214>
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b0:	3338      	adds	r3, #56	@ 0x38
 800b2b2:	3324      	adds	r3, #36	@ 0x24
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff fda3 	bl	800ae00 <ld_dword>
 800b2ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2c0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	789b      	ldrb	r3, [r3, #2]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d005      	beq.n	800b2e0 <find_volume+0x238>
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d6:	789b      	ldrb	r3, [r3, #2]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d001      	beq.n	800b2e0 <find_volume+0x238>
 800b2dc:	230d      	movs	r3, #13
 800b2de:	e15c      	b.n	800b59a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e2:	789b      	ldrb	r3, [r3, #2]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fc:	895b      	ldrh	r3, [r3, #10]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d008      	beq.n	800b314 <find_volume+0x26c>
 800b302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b304:	895b      	ldrh	r3, [r3, #10]
 800b306:	461a      	mov	r2, r3
 800b308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30a:	895b      	ldrh	r3, [r3, #10]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	4013      	ands	r3, r2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d001      	beq.n	800b318 <find_volume+0x270>
 800b314:	230d      	movs	r3, #13
 800b316:	e140      	b.n	800b59a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31a:	3338      	adds	r3, #56	@ 0x38
 800b31c:	3311      	adds	r3, #17
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff fd56 	bl	800add0 <ld_word>
 800b324:	4603      	mov	r3, r0
 800b326:	461a      	mov	r2, r3
 800b328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32e:	891b      	ldrh	r3, [r3, #8]
 800b330:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b332:	8992      	ldrh	r2, [r2, #12]
 800b334:	0952      	lsrs	r2, r2, #5
 800b336:	b292      	uxth	r2, r2
 800b338:	fbb3 f1f2 	udiv	r1, r3, r2
 800b33c:	fb01 f202 	mul.w	r2, r1, r2
 800b340:	1a9b      	subs	r3, r3, r2
 800b342:	b29b      	uxth	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	d003      	beq.n	800b350 <find_volume+0x2a8>
 800b348:	230d      	movs	r3, #13
 800b34a:	e126      	b.n	800b59a <find_volume+0x4f2>
 800b34c:	20001298 	.word	0x20001298

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b352:	3338      	adds	r3, #56	@ 0x38
 800b354:	3313      	adds	r3, #19
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff fd3a 	bl	800add0 <ld_word>
 800b35c:	4603      	mov	r3, r0
 800b35e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <find_volume+0x2cc>
 800b366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b368:	3338      	adds	r3, #56	@ 0x38
 800b36a:	3320      	adds	r3, #32
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff fd47 	bl	800ae00 <ld_dword>
 800b372:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b376:	3338      	adds	r3, #56	@ 0x38
 800b378:	330e      	adds	r3, #14
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fd28 	bl	800add0 <ld_word>
 800b380:	4603      	mov	r3, r0
 800b382:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b384:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <find_volume+0x2e6>
 800b38a:	230d      	movs	r3, #13
 800b38c:	e105      	b.n	800b59a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b38e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b392:	4413      	add	r3, r2
 800b394:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b396:	8911      	ldrh	r1, [r2, #8]
 800b398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b39a:	8992      	ldrh	r2, [r2, #12]
 800b39c:	0952      	lsrs	r2, r2, #5
 800b39e:	b292      	uxth	r2, r2
 800b3a0:	fbb1 f2f2 	udiv	r2, r1, r2
 800b3a4:	b292      	uxth	r2, r2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b3aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d201      	bcs.n	800b3b6 <find_volume+0x30e>
 800b3b2:	230d      	movs	r3, #13
 800b3b4:	e0f1      	b.n	800b59a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b3b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3be:	8952      	ldrh	r2, [r2, #10]
 800b3c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3c4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <find_volume+0x328>
 800b3cc:	230d      	movs	r3, #13
 800b3ce:	e0e4      	b.n	800b59a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d802      	bhi.n	800b3e6 <find_volume+0x33e>
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d802      	bhi.n	800b3f6 <find_volume+0x34e>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f8:	1c9a      	adds	r2, r3, #2
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b400:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b402:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b404:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b408:	441a      	add	r2, r3
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b40e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	441a      	add	r2, r3
 800b414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b416:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800b418:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b41c:	2b03      	cmp	r3, #3
 800b41e:	d11e      	bne.n	800b45e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b422:	3338      	adds	r3, #56	@ 0x38
 800b424:	332a      	adds	r3, #42	@ 0x2a
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff fcd2 	bl	800add0 <ld_word>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <find_volume+0x38e>
 800b432:	230d      	movs	r3, #13
 800b434:	e0b1      	b.n	800b59a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b438:	891b      	ldrh	r3, [r3, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <find_volume+0x39a>
 800b43e:	230d      	movs	r3, #13
 800b440:	e0ab      	b.n	800b59a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	3338      	adds	r3, #56	@ 0x38
 800b446:	332c      	adds	r3, #44	@ 0x2c
 800b448:	4618      	mov	r0, r3
 800b44a:	f7ff fcd9 	bl	800ae00 <ld_dword>
 800b44e:	4602      	mov	r2, r0
 800b450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b452:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b45c:	e01f      	b.n	800b49e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b460:	891b      	ldrh	r3, [r3, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <find_volume+0x3c2>
 800b466:	230d      	movs	r3, #13
 800b468:	e097      	b.n	800b59a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b46e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b470:	441a      	add	r2, r3
 800b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b474:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b476:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d103      	bne.n	800b486 <find_volume+0x3de>
 800b47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b480:	69db      	ldr	r3, [r3, #28]
 800b482:	005b      	lsls	r3, r3, #1
 800b484:	e00a      	b.n	800b49c <find_volume+0x3f4>
 800b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b488:	69da      	ldr	r2, [r3, #28]
 800b48a:	4613      	mov	r3, r2
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	4413      	add	r3, r2
 800b490:	085a      	lsrs	r2, r3, #1
 800b492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b494:	69db      	ldr	r3, [r3, #28]
 800b496:	f003 0301 	and.w	r3, r3, #1
 800b49a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b49c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a0:	6a1a      	ldr	r2, [r3, #32]
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a4:	899b      	ldrh	r3, [r3, #12]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b4b0:	8989      	ldrh	r1, [r1, #12]
 800b4b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d201      	bcs.n	800b4be <find_volume+0x416>
 800b4ba:	230d      	movs	r3, #13
 800b4bc:	e06d      	b.n	800b59a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c4:	615a      	str	r2, [r3, #20]
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c8:	695a      	ldr	r2, [r3, #20]
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4cc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	2280      	movs	r2, #128	@ 0x80
 800b4d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b4d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d149      	bne.n	800b570 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4de:	3338      	adds	r3, #56	@ 0x38
 800b4e0:	3330      	adds	r3, #48	@ 0x30
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fc74 	bl	800add0 <ld_word>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d140      	bne.n	800b570 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b4ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4f6:	f7ff fd0f 	bl	800af18 <move_window>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d137      	bne.n	800b570 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	2200      	movs	r2, #0
 800b504:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b508:	3338      	adds	r3, #56	@ 0x38
 800b50a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff fc5e 	bl	800add0 <ld_word>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d127      	bne.n	800b570 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b522:	3338      	adds	r3, #56	@ 0x38
 800b524:	4618      	mov	r0, r3
 800b526:	f7ff fc6b 	bl	800ae00 <ld_dword>
 800b52a:	4603      	mov	r3, r0
 800b52c:	4a1d      	ldr	r2, [pc, #116]	@ (800b5a4 <find_volume+0x4fc>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d11e      	bne.n	800b570 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b534:	3338      	adds	r3, #56	@ 0x38
 800b536:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fc60 	bl	800ae00 <ld_dword>
 800b540:	4603      	mov	r3, r0
 800b542:	4a19      	ldr	r2, [pc, #100]	@ (800b5a8 <find_volume+0x500>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d113      	bne.n	800b570 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54a:	3338      	adds	r3, #56	@ 0x38
 800b54c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff fc55 	bl	800ae00 <ld_dword>
 800b556:	4602      	mov	r2, r0
 800b558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55e:	3338      	adds	r3, #56	@ 0x38
 800b560:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fc4b 	bl	800ae00 <ld_dword>
 800b56a:	4602      	mov	r2, r0
 800b56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b572:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b576:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b578:	4b0c      	ldr	r3, [pc, #48]	@ (800b5ac <find_volume+0x504>)
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	3301      	adds	r3, #1
 800b57e:	b29a      	uxth	r2, r3
 800b580:	4b0a      	ldr	r3, [pc, #40]	@ (800b5ac <find_volume+0x504>)
 800b582:	801a      	strh	r2, [r3, #0]
 800b584:	4b09      	ldr	r3, [pc, #36]	@ (800b5ac <find_volume+0x504>)
 800b586:	881a      	ldrh	r2, [r3, #0]
 800b588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58a:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800b58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58e:	2200      	movs	r2, #0
 800b590:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b592:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b594:	f7ff fc58 	bl	800ae48 <clear_lock>
#endif
	return FR_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3758      	adds	r7, #88	@ 0x58
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	41615252 	.word	0x41615252
 800b5a8:	61417272 	.word	0x61417272
 800b5ac:	2000129c 	.word	0x2000129c

0800b5b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b5c2:	f107 0310 	add.w	r3, r7, #16
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff fcd3 	bl	800af72 <get_ldnumber>
 800b5cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da01      	bge.n	800b5d8 <f_mount+0x28>
 800b5d4:	230b      	movs	r3, #11
 800b5d6:	e02b      	b.n	800b630 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b5d8:	4a17      	ldr	r2, [pc, #92]	@ (800b638 <f_mount+0x88>)
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d005      	beq.n	800b5f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b5e8:	69b8      	ldr	r0, [r7, #24]
 800b5ea:	f7ff fc2d 	bl	800ae48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d002      	beq.n	800b600 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	490d      	ldr	r1, [pc, #52]	@ (800b638 <f_mount+0x88>)
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <f_mount+0x66>
 800b610:	79fb      	ldrb	r3, [r7, #7]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d001      	beq.n	800b61a <f_mount+0x6a>
 800b616:	2300      	movs	r3, #0
 800b618:	e00a      	b.n	800b630 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b61a:	f107 010c 	add.w	r1, r7, #12
 800b61e:	f107 0308 	add.w	r3, r7, #8
 800b622:	2200      	movs	r2, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f7ff fd3f 	bl	800b0a8 <find_volume>
 800b62a:	4603      	mov	r3, r0
 800b62c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3720      	adds	r7, #32
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	20001298 	.word	0x20001298

0800b63c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	4613      	mov	r3, r2
 800b648:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b64a:	2301      	movs	r3, #1
 800b64c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b652:	4b1f      	ldr	r3, [pc, #124]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b654:	7a5b      	ldrb	r3, [r3, #9]
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d131      	bne.n	800b6c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b65c:	4b1c      	ldr	r3, [pc, #112]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b65e:	7a5b      	ldrb	r3, [r3, #9]
 800b660:	b2db      	uxtb	r3, r3
 800b662:	461a      	mov	r2, r3
 800b664:	4b1a      	ldr	r3, [pc, #104]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b666:	2100      	movs	r1, #0
 800b668:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b66a:	4b19      	ldr	r3, [pc, #100]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b66c:	7a5b      	ldrb	r3, [r3, #9]
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	4a17      	ldr	r2, [pc, #92]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b67a:	4b15      	ldr	r3, [pc, #84]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b67c:	7a5b      	ldrb	r3, [r3, #9]
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	461a      	mov	r2, r3
 800b682:	4b13      	ldr	r3, [pc, #76]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b684:	4413      	add	r3, r2
 800b686:	79fa      	ldrb	r2, [r7, #7]
 800b688:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b68a:	4b11      	ldr	r3, [pc, #68]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b68c:	7a5b      	ldrb	r3, [r3, #9]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	b2d1      	uxtb	r1, r2
 800b694:	4a0e      	ldr	r2, [pc, #56]	@ (800b6d0 <FATFS_LinkDriverEx+0x94>)
 800b696:	7251      	strb	r1, [r2, #9]
 800b698:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b69a:	7dbb      	ldrb	r3, [r7, #22]
 800b69c:	3330      	adds	r3, #48	@ 0x30
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	223a      	movs	r2, #58	@ 0x3a
 800b6aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	3302      	adds	r3, #2
 800b6b0:	222f      	movs	r2, #47	@ 0x2f
 800b6b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	3303      	adds	r3, #3
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	371c      	adds	r7, #28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	200012c0 	.word	0x200012c0

0800b6d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b6de:	2200      	movs	r2, #0
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff ffaa 	bl	800b63c <FATFS_LinkDriverEx>
 800b6e8:	4603      	mov	r3, r0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	490e      	ldr	r1, [pc, #56]	@ (800b734 <MX_USB_HOST_Init+0x40>)
 800b6fc:	480e      	ldr	r0, [pc, #56]	@ (800b738 <MX_USB_HOST_Init+0x44>)
 800b6fe:	f7fd fde4 	bl	80092ca <USBH_Init>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b708:	f7f5 fad6 	bl	8000cb8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b70c:	490b      	ldr	r1, [pc, #44]	@ (800b73c <MX_USB_HOST_Init+0x48>)
 800b70e:	480a      	ldr	r0, [pc, #40]	@ (800b738 <MX_USB_HOST_Init+0x44>)
 800b710:	f7fd fe88 	bl	8009424 <USBH_RegisterClass>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b71a:	f7f5 facd 	bl	8000cb8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b71e:	4806      	ldr	r0, [pc, #24]	@ (800b738 <MX_USB_HOST_Init+0x44>)
 800b720:	f7fd ff0c 	bl	800953c <USBH_Start>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b72a:	f7f5 fac5 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b72e:	bf00      	nop
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	0800b755 	.word	0x0800b755
 800b738:	200012cc 	.word	0x200012cc
 800b73c:	20000010 	.word	0x20000010

0800b740 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b744:	4802      	ldr	r0, [pc, #8]	@ (800b750 <MX_USB_HOST_Process+0x10>)
 800b746:	f7fd ff09 	bl	800955c <USBH_Process>
}
 800b74a:	bf00      	nop
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	200012cc 	.word	0x200012cc

0800b754 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b760:	78fb      	ldrb	r3, [r7, #3]
 800b762:	3b01      	subs	r3, #1
 800b764:	2b04      	cmp	r3, #4
 800b766:	d829      	bhi.n	800b7bc <USBH_UserProcess+0x68>
 800b768:	a201      	add	r2, pc, #4	@ (adr r2, 800b770 <USBH_UserProcess+0x1c>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b785 	.word	0x0800b785
 800b774:	0800b7a1 	.word	0x0800b7a1
 800b778:	0800b7bd 	.word	0x0800b7bd
 800b77c:	0800b7af 	.word	0x0800b7af
 800b780:	0800b78d 	.word	0x0800b78d
  {
  case HOST_USER_SELECT_CONFIGURATION:
	  printf("\n USB Config");
 800b784:	4810      	ldr	r0, [pc, #64]	@ (800b7c8 <USBH_UserProcess+0x74>)
 800b786:	f000 fc57 	bl	800c038 <iprintf>
  break;
 800b78a:	e018      	b.n	800b7be <USBH_UserProcess+0x6a>

  case HOST_USER_DISCONNECTION:
	  printf("\n USB Disconnected");
 800b78c:	480f      	ldr	r0, [pc, #60]	@ (800b7cc <USBH_UserProcess+0x78>)
 800b78e:	f000 fc53 	bl	800c038 <iprintf>
	  usb_exp_disk = 1;
 800b792:	4b0f      	ldr	r3, [pc, #60]	@ (800b7d0 <USBH_UserProcess+0x7c>)
 800b794:	2201      	movs	r2, #1
 800b796:	701a      	strb	r2, [r3, #0]
	  Appli_state = APPLICATION_DISCONNECT;
 800b798:	4b0e      	ldr	r3, [pc, #56]	@ (800b7d4 <USBH_UserProcess+0x80>)
 800b79a:	2203      	movs	r2, #3
 800b79c:	701a      	strb	r2, [r3, #0]
  break;
 800b79e:	e00e      	b.n	800b7be <USBH_UserProcess+0x6a>

  case HOST_USER_CLASS_ACTIVE:
	  printf("\n USB READY");
 800b7a0:	480d      	ldr	r0, [pc, #52]	@ (800b7d8 <USBH_UserProcess+0x84>)
 800b7a2:	f000 fc49 	bl	800c038 <iprintf>
  Appli_state = APPLICATION_READY;
 800b7a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b7d4 <USBH_UserProcess+0x80>)
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	701a      	strb	r2, [r3, #0]
  break;
 800b7ac:	e007      	b.n	800b7be <USBH_UserProcess+0x6a>

  case HOST_USER_CONNECTION:
	  printf("\n USB Connected");
 800b7ae:	480b      	ldr	r0, [pc, #44]	@ (800b7dc <USBH_UserProcess+0x88>)
 800b7b0:	f000 fc42 	bl	800c038 <iprintf>
  Appli_state = APPLICATION_START;
 800b7b4:	4b07      	ldr	r3, [pc, #28]	@ (800b7d4 <USBH_UserProcess+0x80>)
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	701a      	strb	r2, [r3, #0]
  break;
 800b7ba:	e000      	b.n	800b7be <USBH_UserProcess+0x6a>

  default:
  break;
 800b7bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b7be:	bf00      	nop
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	0800cc2c 	.word	0x0800cc2c
 800b7cc:	0800cc3c 	.word	0x0800cc3c
 800b7d0:	20000001 	.word	0x20000001
 800b7d4:	200016a4 	.word	0x200016a4
 800b7d8:	0800cc50 	.word	0x0800cc50
 800b7dc:	0800cc5c 	.word	0x0800cc5c

0800b7e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08a      	sub	sp, #40	@ 0x28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	605a      	str	r2, [r3, #4]
 800b7f2:	609a      	str	r2, [r3, #8]
 800b7f4:	60da      	str	r2, [r3, #12]
 800b7f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b800:	d13a      	bne.n	800b878 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b802:	2300      	movs	r3, #0
 800b804:	613b      	str	r3, [r7, #16]
 800b806:	4b1e      	ldr	r3, [pc, #120]	@ (800b880 <HAL_HCD_MspInit+0xa0>)
 800b808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b80a:	4a1d      	ldr	r2, [pc, #116]	@ (800b880 <HAL_HCD_MspInit+0xa0>)
 800b80c:	f043 0301 	orr.w	r3, r3, #1
 800b810:	6313      	str	r3, [r2, #48]	@ 0x30
 800b812:	4b1b      	ldr	r3, [pc, #108]	@ (800b880 <HAL_HCD_MspInit+0xa0>)
 800b814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	613b      	str	r3, [r7, #16]
 800b81c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b81e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b824:	2302      	movs	r3, #2
 800b826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b828:	2300      	movs	r3, #0
 800b82a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b82c:	2303      	movs	r3, #3
 800b82e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b830:	230a      	movs	r3, #10
 800b832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b834:	f107 0314 	add.w	r3, r7, #20
 800b838:	4619      	mov	r1, r3
 800b83a:	4812      	ldr	r0, [pc, #72]	@ (800b884 <HAL_HCD_MspInit+0xa4>)
 800b83c:	f7f5 fef4 	bl	8001628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b840:	4b0f      	ldr	r3, [pc, #60]	@ (800b880 <HAL_HCD_MspInit+0xa0>)
 800b842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b844:	4a0e      	ldr	r2, [pc, #56]	@ (800b880 <HAL_HCD_MspInit+0xa0>)
 800b846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b84a:	6353      	str	r3, [r2, #52]	@ 0x34
 800b84c:	2300      	movs	r3, #0
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	4b0b      	ldr	r3, [pc, #44]	@ (800b880 <HAL_HCD_MspInit+0xa0>)
 800b852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b854:	4a0a      	ldr	r2, [pc, #40]	@ (800b880 <HAL_HCD_MspInit+0xa0>)
 800b856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b85a:	6453      	str	r3, [r2, #68]	@ 0x44
 800b85c:	4b08      	ldr	r3, [pc, #32]	@ (800b880 <HAL_HCD_MspInit+0xa0>)
 800b85e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b868:	2200      	movs	r2, #0
 800b86a:	2100      	movs	r1, #0
 800b86c:	2043      	movs	r0, #67	@ 0x43
 800b86e:	f7f5 fe12 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b872:	2043      	movs	r0, #67	@ 0x43
 800b874:	f7f5 fe2b 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b878:	bf00      	nop
 800b87a:	3728      	adds	r7, #40	@ 0x28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	40023800 	.word	0x40023800
 800b884:	40020000 	.word	0x40020000

0800b888 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fa37 	bl	8009d0a <USBH_LL_IncTimer>
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe fa6f 	bl	8009d96 <USBH_LL_Connect>
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fa78 	bl	8009dc4 <USBH_LL_Disconnect>
}
 800b8d4:	bf00      	nop
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe fa29 	bl	8009d5e <USBH_LL_PortEnabled>
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe fa29 	bl	8009d7a <USBH_LL_PortDisabled>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d12a      	bne.n	800b998 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b942:	4a18      	ldr	r2, [pc, #96]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a15      	ldr	r2, [pc, #84]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b94e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b952:	4b14      	ldr	r3, [pc, #80]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b954:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b958:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b95a:	4b12      	ldr	r3, [pc, #72]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b95c:	2208      	movs	r2, #8
 800b95e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b960:	4b10      	ldr	r3, [pc, #64]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b962:	2201      	movs	r2, #1
 800b964:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b966:	4b0f      	ldr	r3, [pc, #60]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b968:	2200      	movs	r2, #0
 800b96a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b96c:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b96e:	2202      	movs	r2, #2
 800b970:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b972:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b974:	2200      	movs	r2, #0
 800b976:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b978:	480a      	ldr	r0, [pc, #40]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b97a:	f7f6 f83d 	bl	80019f8 <HAL_HCD_Init>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b984:	f7f5 f998 	bl	8000cb8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b988:	4806      	ldr	r0, [pc, #24]	@ (800b9a4 <USBH_LL_Init+0x74>)
 800b98a:	f7f6 fc9d 	bl	80022c8 <HAL_HCD_GetCurrentFrame>
 800b98e:	4603      	mov	r3, r0
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7fe f9aa 	bl	8009cec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	200016a8 	.word	0x200016a8

0800b9a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7f6 fc0a 	bl	80021d8 <HAL_HCD_Start>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 f988 	bl	800bce0 <USBH_Get_USB_Status>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7f6 fc12 	bl	800221e <HAL_HCD_Stop>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 f96d 	bl	800bce0 <USBH_Get_USB_Status>
 800ba06:	4603      	mov	r3, r0
 800ba08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7f6 fc5c 	bl	80022e4 <HAL_HCD_GetCurrentSpeed>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d00c      	beq.n	800ba4c <USBH_LL_GetSpeed+0x38>
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d80d      	bhi.n	800ba52 <USBH_LL_GetSpeed+0x3e>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d002      	beq.n	800ba40 <USBH_LL_GetSpeed+0x2c>
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d003      	beq.n	800ba46 <USBH_LL_GetSpeed+0x32>
 800ba3e:	e008      	b.n	800ba52 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
    break;
 800ba44:	e008      	b.n	800ba58 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ba46:	2301      	movs	r3, #1
 800ba48:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4a:	e005      	b.n	800ba58 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba50:	e002      	b.n	800ba58 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ba52:	2301      	movs	r3, #1
 800ba54:	73fb      	strb	r3, [r7, #15]
    break;
 800ba56:	bf00      	nop
  }
  return  speed;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b084      	sub	sp, #16
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f6 fbed 	bl	8002258 <HAL_HCD_ResetPort>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 f92b 	bl	800bce0 <USBH_Get_USB_Status>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800baaa:	78fa      	ldrb	r2, [r7, #3]
 800baac:	4611      	mov	r1, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	f7f6 fbf5 	bl	800229e <HAL_HCD_HC_GetXferCount>
 800bab4:	4603      	mov	r3, r0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800babe:	b590      	push	{r4, r7, lr}
 800bac0:	b089      	sub	sp, #36	@ 0x24
 800bac2:	af04      	add	r7, sp, #16
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	4608      	mov	r0, r1
 800bac8:	4611      	mov	r1, r2
 800baca:	461a      	mov	r2, r3
 800bacc:	4603      	mov	r3, r0
 800bace:	70fb      	strb	r3, [r7, #3]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70bb      	strb	r3, [r7, #2]
 800bad4:	4613      	mov	r3, r2
 800bad6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bae6:	787c      	ldrb	r4, [r7, #1]
 800bae8:	78ba      	ldrb	r2, [r7, #2]
 800baea:	78f9      	ldrb	r1, [r7, #3]
 800baec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	4623      	mov	r3, r4
 800bafe:	f7f5 ffe2 	bl	8001ac6 <HAL_HCD_HC_Init>
 800bb02:	4603      	mov	r3, r0
 800bb04:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 f8e9 	bl	800bce0 <USBH_Get_USB_Status>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd90      	pop	{r4, r7, pc}

0800bb1c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bb36:	78fa      	ldrb	r2, [r7, #3]
 800bb38:	4611      	mov	r1, r2
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f6 f87b 	bl	8001c36 <HAL_HCD_HC_Halt>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f8ca 	bl	800bce0 <USBH_Get_USB_Status>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bb5a:	b590      	push	{r4, r7, lr}
 800bb5c:	b089      	sub	sp, #36	@ 0x24
 800bb5e:	af04      	add	r7, sp, #16
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	4608      	mov	r0, r1
 800bb64:	4611      	mov	r1, r2
 800bb66:	461a      	mov	r2, r3
 800bb68:	4603      	mov	r3, r0
 800bb6a:	70fb      	strb	r3, [r7, #3]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	70bb      	strb	r3, [r7, #2]
 800bb70:	4613      	mov	r3, r2
 800bb72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb74:	2300      	movs	r3, #0
 800bb76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bb82:	787c      	ldrb	r4, [r7, #1]
 800bb84:	78ba      	ldrb	r2, [r7, #2]
 800bb86:	78f9      	ldrb	r1, [r7, #3]
 800bb88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bb8c:	9303      	str	r3, [sp, #12]
 800bb8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bb90:	9302      	str	r3, [sp, #8]
 800bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	4623      	mov	r3, r4
 800bb9e:	f7f6 f86d 	bl	8001c7c <HAL_HCD_HC_SubmitRequest>
 800bba2:	4603      	mov	r3, r0
 800bba4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 f899 	bl	800bce0 <USBH_Get_USB_Status>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd90      	pop	{r4, r7, pc}

0800bbbc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bbce:	78fa      	ldrb	r2, [r7, #3]
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7f6 fb4e 	bl	8002274 <HAL_HCD_HC_GetURBState>
 800bbd8:	4603      	mov	r3, r0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800bbee:	20c8      	movs	r0, #200	@ 0xc8
 800bbf0:	f7f5 fb52 	bl	8001298 <HAL_Delay>
  return USBH_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b085      	sub	sp, #20
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc14:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bc16:	78fa      	ldrb	r2, [r7, #3]
 800bc18:	68f9      	ldr	r1, [r7, #12]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	011b      	lsls	r3, r3, #4
 800bc1e:	1a9b      	subs	r3, r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	440b      	add	r3, r1
 800bc24:	3317      	adds	r3, #23
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00a      	beq.n	800bc42 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bc2c:	78fa      	ldrb	r2, [r7, #3]
 800bc2e:	68f9      	ldr	r1, [r7, #12]
 800bc30:	4613      	mov	r3, r2
 800bc32:	011b      	lsls	r3, r3, #4
 800bc34:	1a9b      	subs	r3, r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	440b      	add	r3, r1
 800bc3a:	333c      	adds	r3, #60	@ 0x3c
 800bc3c:	78ba      	ldrb	r2, [r7, #2]
 800bc3e:	701a      	strb	r2, [r3, #0]
 800bc40:	e009      	b.n	800bc56 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bc42:	78fa      	ldrb	r2, [r7, #3]
 800bc44:	68f9      	ldr	r1, [r7, #12]
 800bc46:	4613      	mov	r3, r2
 800bc48:	011b      	lsls	r3, r3, #4
 800bc4a:	1a9b      	subs	r3, r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	440b      	add	r3, r1
 800bc50:	333d      	adds	r3, #61	@ 0x3d
 800bc52:	78ba      	ldrb	r2, [r7, #2]
 800bc54:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc7a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800bc7c:	78fa      	ldrb	r2, [r7, #3]
 800bc7e:	68b9      	ldr	r1, [r7, #8]
 800bc80:	4613      	mov	r3, r2
 800bc82:	011b      	lsls	r3, r3, #4
 800bc84:	1a9b      	subs	r3, r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	440b      	add	r3, r1
 800bc8a:	3317      	adds	r3, #23
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800bc92:	78fa      	ldrb	r2, [r7, #3]
 800bc94:	68b9      	ldr	r1, [r7, #8]
 800bc96:	4613      	mov	r3, r2
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	1a9b      	subs	r3, r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	440b      	add	r3, r1
 800bca0:	333c      	adds	r3, #60	@ 0x3c
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	73fb      	strb	r3, [r7, #15]
 800bca6:	e009      	b.n	800bcbc <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800bca8:	78fa      	ldrb	r2, [r7, #3]
 800bcaa:	68b9      	ldr	r1, [r7, #8]
 800bcac:	4613      	mov	r3, r2
 800bcae:	011b      	lsls	r3, r3, #4
 800bcb0:	1a9b      	subs	r3, r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	440b      	add	r3, r1
 800bcb6:	333d      	adds	r3, #61	@ 0x3d
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7f5 fae0 	bl	8001298 <HAL_Delay>
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d817      	bhi.n	800bd24 <USBH_Get_USB_Status+0x44>
 800bcf4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcfc <USBH_Get_USB_Status+0x1c>)
 800bcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfa:	bf00      	nop
 800bcfc:	0800bd0d 	.word	0x0800bd0d
 800bd00:	0800bd13 	.word	0x0800bd13
 800bd04:	0800bd19 	.word	0x0800bd19
 800bd08:	0800bd1f 	.word	0x0800bd1f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd10:	e00b      	b.n	800bd2a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bd12:	2302      	movs	r3, #2
 800bd14:	73fb      	strb	r3, [r7, #15]
    break;
 800bd16:	e008      	b.n	800bd2a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd1c:	e005      	b.n	800bd2a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bd1e:	2302      	movs	r3, #2
 800bd20:	73fb      	strb	r3, [r7, #15]
    break;
 800bd22:	e002      	b.n	800bd2a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd24:	2302      	movs	r3, #2
 800bd26:	73fb      	strb	r3, [r7, #15]
    break;
 800bd28:	bf00      	nop
  }
  return usb_status;
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <malloc>:
 800bd38:	4b02      	ldr	r3, [pc, #8]	@ (800bd44 <malloc+0xc>)
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	6818      	ldr	r0, [r3, #0]
 800bd3e:	f000 b82d 	b.w	800bd9c <_malloc_r>
 800bd42:	bf00      	nop
 800bd44:	2000003c 	.word	0x2000003c

0800bd48 <free>:
 800bd48:	4b02      	ldr	r3, [pc, #8]	@ (800bd54 <free+0xc>)
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	6818      	ldr	r0, [r3, #0]
 800bd4e:	f000 ba63 	b.w	800c218 <_free_r>
 800bd52:	bf00      	nop
 800bd54:	2000003c 	.word	0x2000003c

0800bd58 <sbrk_aligned>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	4e0f      	ldr	r6, [pc, #60]	@ (800bd98 <sbrk_aligned+0x40>)
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	6831      	ldr	r1, [r6, #0]
 800bd60:	4605      	mov	r5, r0
 800bd62:	b911      	cbnz	r1, 800bd6a <sbrk_aligned+0x12>
 800bd64:	f000 f9fa 	bl	800c15c <_sbrk_r>
 800bd68:	6030      	str	r0, [r6, #0]
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	f000 f9f5 	bl	800c15c <_sbrk_r>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	d103      	bne.n	800bd7e <sbrk_aligned+0x26>
 800bd76:	f04f 34ff 	mov.w	r4, #4294967295
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
 800bd7e:	1cc4      	adds	r4, r0, #3
 800bd80:	f024 0403 	bic.w	r4, r4, #3
 800bd84:	42a0      	cmp	r0, r4
 800bd86:	d0f8      	beq.n	800bd7a <sbrk_aligned+0x22>
 800bd88:	1a21      	subs	r1, r4, r0
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f000 f9e6 	bl	800c15c <_sbrk_r>
 800bd90:	3001      	adds	r0, #1
 800bd92:	d1f2      	bne.n	800bd7a <sbrk_aligned+0x22>
 800bd94:	e7ef      	b.n	800bd76 <sbrk_aligned+0x1e>
 800bd96:	bf00      	nop
 800bd98:	20001a88 	.word	0x20001a88

0800bd9c <_malloc_r>:
 800bd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda0:	1ccd      	adds	r5, r1, #3
 800bda2:	f025 0503 	bic.w	r5, r5, #3
 800bda6:	3508      	adds	r5, #8
 800bda8:	2d0c      	cmp	r5, #12
 800bdaa:	bf38      	it	cc
 800bdac:	250c      	movcc	r5, #12
 800bdae:	2d00      	cmp	r5, #0
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	db01      	blt.n	800bdb8 <_malloc_r+0x1c>
 800bdb4:	42a9      	cmp	r1, r5
 800bdb6:	d904      	bls.n	800bdc2 <_malloc_r+0x26>
 800bdb8:	230c      	movs	r3, #12
 800bdba:	6033      	str	r3, [r6, #0]
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be98 <_malloc_r+0xfc>
 800bdc6:	f000 f869 	bl	800be9c <__malloc_lock>
 800bdca:	f8d8 3000 	ldr.w	r3, [r8]
 800bdce:	461c      	mov	r4, r3
 800bdd0:	bb44      	cbnz	r4, 800be24 <_malloc_r+0x88>
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	f7ff ffbf 	bl	800bd58 <sbrk_aligned>
 800bdda:	1c43      	adds	r3, r0, #1
 800bddc:	4604      	mov	r4, r0
 800bdde:	d158      	bne.n	800be92 <_malloc_r+0xf6>
 800bde0:	f8d8 4000 	ldr.w	r4, [r8]
 800bde4:	4627      	mov	r7, r4
 800bde6:	2f00      	cmp	r7, #0
 800bde8:	d143      	bne.n	800be72 <_malloc_r+0xd6>
 800bdea:	2c00      	cmp	r4, #0
 800bdec:	d04b      	beq.n	800be86 <_malloc_r+0xea>
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	4639      	mov	r1, r7
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	eb04 0903 	add.w	r9, r4, r3
 800bdf8:	f000 f9b0 	bl	800c15c <_sbrk_r>
 800bdfc:	4581      	cmp	r9, r0
 800bdfe:	d142      	bne.n	800be86 <_malloc_r+0xea>
 800be00:	6821      	ldr	r1, [r4, #0]
 800be02:	1a6d      	subs	r5, r5, r1
 800be04:	4629      	mov	r1, r5
 800be06:	4630      	mov	r0, r6
 800be08:	f7ff ffa6 	bl	800bd58 <sbrk_aligned>
 800be0c:	3001      	adds	r0, #1
 800be0e:	d03a      	beq.n	800be86 <_malloc_r+0xea>
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	442b      	add	r3, r5
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	f8d8 3000 	ldr.w	r3, [r8]
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	bb62      	cbnz	r2, 800be78 <_malloc_r+0xdc>
 800be1e:	f8c8 7000 	str.w	r7, [r8]
 800be22:	e00f      	b.n	800be44 <_malloc_r+0xa8>
 800be24:	6822      	ldr	r2, [r4, #0]
 800be26:	1b52      	subs	r2, r2, r5
 800be28:	d420      	bmi.n	800be6c <_malloc_r+0xd0>
 800be2a:	2a0b      	cmp	r2, #11
 800be2c:	d917      	bls.n	800be5e <_malloc_r+0xc2>
 800be2e:	1961      	adds	r1, r4, r5
 800be30:	42a3      	cmp	r3, r4
 800be32:	6025      	str	r5, [r4, #0]
 800be34:	bf18      	it	ne
 800be36:	6059      	strne	r1, [r3, #4]
 800be38:	6863      	ldr	r3, [r4, #4]
 800be3a:	bf08      	it	eq
 800be3c:	f8c8 1000 	streq.w	r1, [r8]
 800be40:	5162      	str	r2, [r4, r5]
 800be42:	604b      	str	r3, [r1, #4]
 800be44:	4630      	mov	r0, r6
 800be46:	f000 f82f 	bl	800bea8 <__malloc_unlock>
 800be4a:	f104 000b 	add.w	r0, r4, #11
 800be4e:	1d23      	adds	r3, r4, #4
 800be50:	f020 0007 	bic.w	r0, r0, #7
 800be54:	1ac2      	subs	r2, r0, r3
 800be56:	bf1c      	itt	ne
 800be58:	1a1b      	subne	r3, r3, r0
 800be5a:	50a3      	strne	r3, [r4, r2]
 800be5c:	e7af      	b.n	800bdbe <_malloc_r+0x22>
 800be5e:	6862      	ldr	r2, [r4, #4]
 800be60:	42a3      	cmp	r3, r4
 800be62:	bf0c      	ite	eq
 800be64:	f8c8 2000 	streq.w	r2, [r8]
 800be68:	605a      	strne	r2, [r3, #4]
 800be6a:	e7eb      	b.n	800be44 <_malloc_r+0xa8>
 800be6c:	4623      	mov	r3, r4
 800be6e:	6864      	ldr	r4, [r4, #4]
 800be70:	e7ae      	b.n	800bdd0 <_malloc_r+0x34>
 800be72:	463c      	mov	r4, r7
 800be74:	687f      	ldr	r7, [r7, #4]
 800be76:	e7b6      	b.n	800bde6 <_malloc_r+0x4a>
 800be78:	461a      	mov	r2, r3
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	42a3      	cmp	r3, r4
 800be7e:	d1fb      	bne.n	800be78 <_malloc_r+0xdc>
 800be80:	2300      	movs	r3, #0
 800be82:	6053      	str	r3, [r2, #4]
 800be84:	e7de      	b.n	800be44 <_malloc_r+0xa8>
 800be86:	230c      	movs	r3, #12
 800be88:	6033      	str	r3, [r6, #0]
 800be8a:	4630      	mov	r0, r6
 800be8c:	f000 f80c 	bl	800bea8 <__malloc_unlock>
 800be90:	e794      	b.n	800bdbc <_malloc_r+0x20>
 800be92:	6005      	str	r5, [r0, #0]
 800be94:	e7d6      	b.n	800be44 <_malloc_r+0xa8>
 800be96:	bf00      	nop
 800be98:	20001a8c 	.word	0x20001a8c

0800be9c <__malloc_lock>:
 800be9c:	4801      	ldr	r0, [pc, #4]	@ (800bea4 <__malloc_lock+0x8>)
 800be9e:	f000 b9aa 	b.w	800c1f6 <__retarget_lock_acquire_recursive>
 800bea2:	bf00      	nop
 800bea4:	20001bd0 	.word	0x20001bd0

0800bea8 <__malloc_unlock>:
 800bea8:	4801      	ldr	r0, [pc, #4]	@ (800beb0 <__malloc_unlock+0x8>)
 800beaa:	f000 b9a5 	b.w	800c1f8 <__retarget_lock_release_recursive>
 800beae:	bf00      	nop
 800beb0:	20001bd0 	.word	0x20001bd0

0800beb4 <std>:
 800beb4:	2300      	movs	r3, #0
 800beb6:	b510      	push	{r4, lr}
 800beb8:	4604      	mov	r4, r0
 800beba:	e9c0 3300 	strd	r3, r3, [r0]
 800bebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bec2:	6083      	str	r3, [r0, #8]
 800bec4:	8181      	strh	r1, [r0, #12]
 800bec6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bec8:	81c2      	strh	r2, [r0, #14]
 800beca:	6183      	str	r3, [r0, #24]
 800becc:	4619      	mov	r1, r3
 800bece:	2208      	movs	r2, #8
 800bed0:	305c      	adds	r0, #92	@ 0x5c
 800bed2:	f000 f906 	bl	800c0e2 <memset>
 800bed6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf0c <std+0x58>)
 800bed8:	6263      	str	r3, [r4, #36]	@ 0x24
 800beda:	4b0d      	ldr	r3, [pc, #52]	@ (800bf10 <std+0x5c>)
 800bedc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bede:	4b0d      	ldr	r3, [pc, #52]	@ (800bf14 <std+0x60>)
 800bee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bee2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf18 <std+0x64>)
 800bee4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bee6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf1c <std+0x68>)
 800bee8:	6224      	str	r4, [r4, #32]
 800beea:	429c      	cmp	r4, r3
 800beec:	d006      	beq.n	800befc <std+0x48>
 800beee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bef2:	4294      	cmp	r4, r2
 800bef4:	d002      	beq.n	800befc <std+0x48>
 800bef6:	33d0      	adds	r3, #208	@ 0xd0
 800bef8:	429c      	cmp	r4, r3
 800befa:	d105      	bne.n	800bf08 <std+0x54>
 800befc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf04:	f000 b976 	b.w	800c1f4 <__retarget_lock_init_recursive>
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	bf00      	nop
 800bf0c:	0800c05d 	.word	0x0800c05d
 800bf10:	0800c07f 	.word	0x0800c07f
 800bf14:	0800c0b7 	.word	0x0800c0b7
 800bf18:	0800c0db 	.word	0x0800c0db
 800bf1c:	20001a90 	.word	0x20001a90

0800bf20 <stdio_exit_handler>:
 800bf20:	4a02      	ldr	r2, [pc, #8]	@ (800bf2c <stdio_exit_handler+0xc>)
 800bf22:	4903      	ldr	r1, [pc, #12]	@ (800bf30 <stdio_exit_handler+0x10>)
 800bf24:	4803      	ldr	r0, [pc, #12]	@ (800bf34 <stdio_exit_handler+0x14>)
 800bf26:	f000 b869 	b.w	800bffc <_fwalk_sglue>
 800bf2a:	bf00      	nop
 800bf2c:	20000030 	.word	0x20000030
 800bf30:	0800c955 	.word	0x0800c955
 800bf34:	20000040 	.word	0x20000040

0800bf38 <cleanup_stdio>:
 800bf38:	6841      	ldr	r1, [r0, #4]
 800bf3a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf6c <cleanup_stdio+0x34>)
 800bf3c:	4299      	cmp	r1, r3
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	4604      	mov	r4, r0
 800bf42:	d001      	beq.n	800bf48 <cleanup_stdio+0x10>
 800bf44:	f000 fd06 	bl	800c954 <_fflush_r>
 800bf48:	68a1      	ldr	r1, [r4, #8]
 800bf4a:	4b09      	ldr	r3, [pc, #36]	@ (800bf70 <cleanup_stdio+0x38>)
 800bf4c:	4299      	cmp	r1, r3
 800bf4e:	d002      	beq.n	800bf56 <cleanup_stdio+0x1e>
 800bf50:	4620      	mov	r0, r4
 800bf52:	f000 fcff 	bl	800c954 <_fflush_r>
 800bf56:	68e1      	ldr	r1, [r4, #12]
 800bf58:	4b06      	ldr	r3, [pc, #24]	@ (800bf74 <cleanup_stdio+0x3c>)
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	d004      	beq.n	800bf68 <cleanup_stdio+0x30>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf64:	f000 bcf6 	b.w	800c954 <_fflush_r>
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20001a90 	.word	0x20001a90
 800bf70:	20001af8 	.word	0x20001af8
 800bf74:	20001b60 	.word	0x20001b60

0800bf78 <global_stdio_init.part.0>:
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa8 <global_stdio_init.part.0+0x30>)
 800bf7c:	4c0b      	ldr	r4, [pc, #44]	@ (800bfac <global_stdio_init.part.0+0x34>)
 800bf7e:	4a0c      	ldr	r2, [pc, #48]	@ (800bfb0 <global_stdio_init.part.0+0x38>)
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	4620      	mov	r0, r4
 800bf84:	2200      	movs	r2, #0
 800bf86:	2104      	movs	r1, #4
 800bf88:	f7ff ff94 	bl	800beb4 <std>
 800bf8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf90:	2201      	movs	r2, #1
 800bf92:	2109      	movs	r1, #9
 800bf94:	f7ff ff8e 	bl	800beb4 <std>
 800bf98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa2:	2112      	movs	r1, #18
 800bfa4:	f7ff bf86 	b.w	800beb4 <std>
 800bfa8:	20001bc8 	.word	0x20001bc8
 800bfac:	20001a90 	.word	0x20001a90
 800bfb0:	0800bf21 	.word	0x0800bf21

0800bfb4 <__sfp_lock_acquire>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	@ (800bfbc <__sfp_lock_acquire+0x8>)
 800bfb6:	f000 b91e 	b.w	800c1f6 <__retarget_lock_acquire_recursive>
 800bfba:	bf00      	nop
 800bfbc:	20001bd1 	.word	0x20001bd1

0800bfc0 <__sfp_lock_release>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	@ (800bfc8 <__sfp_lock_release+0x8>)
 800bfc2:	f000 b919 	b.w	800c1f8 <__retarget_lock_release_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	20001bd1 	.word	0x20001bd1

0800bfcc <__sinit>:
 800bfcc:	b510      	push	{r4, lr}
 800bfce:	4604      	mov	r4, r0
 800bfd0:	f7ff fff0 	bl	800bfb4 <__sfp_lock_acquire>
 800bfd4:	6a23      	ldr	r3, [r4, #32]
 800bfd6:	b11b      	cbz	r3, 800bfe0 <__sinit+0x14>
 800bfd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfdc:	f7ff bff0 	b.w	800bfc0 <__sfp_lock_release>
 800bfe0:	4b04      	ldr	r3, [pc, #16]	@ (800bff4 <__sinit+0x28>)
 800bfe2:	6223      	str	r3, [r4, #32]
 800bfe4:	4b04      	ldr	r3, [pc, #16]	@ (800bff8 <__sinit+0x2c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f5      	bne.n	800bfd8 <__sinit+0xc>
 800bfec:	f7ff ffc4 	bl	800bf78 <global_stdio_init.part.0>
 800bff0:	e7f2      	b.n	800bfd8 <__sinit+0xc>
 800bff2:	bf00      	nop
 800bff4:	0800bf39 	.word	0x0800bf39
 800bff8:	20001bc8 	.word	0x20001bc8

0800bffc <_fwalk_sglue>:
 800bffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c000:	4607      	mov	r7, r0
 800c002:	4688      	mov	r8, r1
 800c004:	4614      	mov	r4, r2
 800c006:	2600      	movs	r6, #0
 800c008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c00c:	f1b9 0901 	subs.w	r9, r9, #1
 800c010:	d505      	bpl.n	800c01e <_fwalk_sglue+0x22>
 800c012:	6824      	ldr	r4, [r4, #0]
 800c014:	2c00      	cmp	r4, #0
 800c016:	d1f7      	bne.n	800c008 <_fwalk_sglue+0xc>
 800c018:	4630      	mov	r0, r6
 800c01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c01e:	89ab      	ldrh	r3, [r5, #12]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d907      	bls.n	800c034 <_fwalk_sglue+0x38>
 800c024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c028:	3301      	adds	r3, #1
 800c02a:	d003      	beq.n	800c034 <_fwalk_sglue+0x38>
 800c02c:	4629      	mov	r1, r5
 800c02e:	4638      	mov	r0, r7
 800c030:	47c0      	blx	r8
 800c032:	4306      	orrs	r6, r0
 800c034:	3568      	adds	r5, #104	@ 0x68
 800c036:	e7e9      	b.n	800c00c <_fwalk_sglue+0x10>

0800c038 <iprintf>:
 800c038:	b40f      	push	{r0, r1, r2, r3}
 800c03a:	b507      	push	{r0, r1, r2, lr}
 800c03c:	4906      	ldr	r1, [pc, #24]	@ (800c058 <iprintf+0x20>)
 800c03e:	ab04      	add	r3, sp, #16
 800c040:	6808      	ldr	r0, [r1, #0]
 800c042:	f853 2b04 	ldr.w	r2, [r3], #4
 800c046:	6881      	ldr	r1, [r0, #8]
 800c048:	9301      	str	r3, [sp, #4]
 800c04a:	f000 f959 	bl	800c300 <_vfiprintf_r>
 800c04e:	b003      	add	sp, #12
 800c050:	f85d eb04 	ldr.w	lr, [sp], #4
 800c054:	b004      	add	sp, #16
 800c056:	4770      	bx	lr
 800c058:	2000003c 	.word	0x2000003c

0800c05c <__sread>:
 800c05c:	b510      	push	{r4, lr}
 800c05e:	460c      	mov	r4, r1
 800c060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c064:	f000 f868 	bl	800c138 <_read_r>
 800c068:	2800      	cmp	r0, #0
 800c06a:	bfab      	itete	ge
 800c06c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c06e:	89a3      	ldrhlt	r3, [r4, #12]
 800c070:	181b      	addge	r3, r3, r0
 800c072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c076:	bfac      	ite	ge
 800c078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c07a:	81a3      	strhlt	r3, [r4, #12]
 800c07c:	bd10      	pop	{r4, pc}

0800c07e <__swrite>:
 800c07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	461f      	mov	r7, r3
 800c084:	898b      	ldrh	r3, [r1, #12]
 800c086:	05db      	lsls	r3, r3, #23
 800c088:	4605      	mov	r5, r0
 800c08a:	460c      	mov	r4, r1
 800c08c:	4616      	mov	r6, r2
 800c08e:	d505      	bpl.n	800c09c <__swrite+0x1e>
 800c090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c094:	2302      	movs	r3, #2
 800c096:	2200      	movs	r2, #0
 800c098:	f000 f83c 	bl	800c114 <_lseek_r>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0a6:	81a3      	strh	r3, [r4, #12]
 800c0a8:	4632      	mov	r2, r6
 800c0aa:	463b      	mov	r3, r7
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b2:	f000 b863 	b.w	800c17c <_write_r>

0800c0b6 <__sseek>:
 800c0b6:	b510      	push	{r4, lr}
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0be:	f000 f829 	bl	800c114 <_lseek_r>
 800c0c2:	1c43      	adds	r3, r0, #1
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	bf15      	itete	ne
 800c0c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0d2:	81a3      	strheq	r3, [r4, #12]
 800c0d4:	bf18      	it	ne
 800c0d6:	81a3      	strhne	r3, [r4, #12]
 800c0d8:	bd10      	pop	{r4, pc}

0800c0da <__sclose>:
 800c0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0de:	f000 b809 	b.w	800c0f4 <_close_r>

0800c0e2 <memset>:
 800c0e2:	4402      	add	r2, r0
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d100      	bne.n	800c0ec <memset+0xa>
 800c0ea:	4770      	bx	lr
 800c0ec:	f803 1b01 	strb.w	r1, [r3], #1
 800c0f0:	e7f9      	b.n	800c0e6 <memset+0x4>
	...

0800c0f4 <_close_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d06      	ldr	r5, [pc, #24]	@ (800c110 <_close_r+0x1c>)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	602b      	str	r3, [r5, #0]
 800c100:	f7f4 ffb2 	bl	8001068 <_close>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d102      	bne.n	800c10e <_close_r+0x1a>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	b103      	cbz	r3, 800c10e <_close_r+0x1a>
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	bd38      	pop	{r3, r4, r5, pc}
 800c110:	20001bcc 	.word	0x20001bcc

0800c114 <_lseek_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4d07      	ldr	r5, [pc, #28]	@ (800c134 <_lseek_r+0x20>)
 800c118:	4604      	mov	r4, r0
 800c11a:	4608      	mov	r0, r1
 800c11c:	4611      	mov	r1, r2
 800c11e:	2200      	movs	r2, #0
 800c120:	602a      	str	r2, [r5, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	f7f4 ffc7 	bl	80010b6 <_lseek>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_lseek_r+0x1e>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_lseek_r+0x1e>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20001bcc 	.word	0x20001bcc

0800c138 <_read_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	@ (800c158 <_read_r+0x20>)
 800c13c:	4604      	mov	r4, r0
 800c13e:	4608      	mov	r0, r1
 800c140:	4611      	mov	r1, r2
 800c142:	2200      	movs	r2, #0
 800c144:	602a      	str	r2, [r5, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	f7f4 ff55 	bl	8000ff6 <_read>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_read_r+0x1e>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_read_r+0x1e>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	20001bcc 	.word	0x20001bcc

0800c15c <_sbrk_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4d06      	ldr	r5, [pc, #24]	@ (800c178 <_sbrk_r+0x1c>)
 800c160:	2300      	movs	r3, #0
 800c162:	4604      	mov	r4, r0
 800c164:	4608      	mov	r0, r1
 800c166:	602b      	str	r3, [r5, #0]
 800c168:	f7f4 ffb2 	bl	80010d0 <_sbrk>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_sbrk_r+0x1a>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	b103      	cbz	r3, 800c176 <_sbrk_r+0x1a>
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	20001bcc 	.word	0x20001bcc

0800c17c <_write_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d07      	ldr	r5, [pc, #28]	@ (800c19c <_write_r+0x20>)
 800c180:	4604      	mov	r4, r0
 800c182:	4608      	mov	r0, r1
 800c184:	4611      	mov	r1, r2
 800c186:	2200      	movs	r2, #0
 800c188:	602a      	str	r2, [r5, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	f7f4 ff50 	bl	8001030 <_write>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_write_r+0x1e>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_write_r+0x1e>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	20001bcc 	.word	0x20001bcc

0800c1a0 <__errno>:
 800c1a0:	4b01      	ldr	r3, [pc, #4]	@ (800c1a8 <__errno+0x8>)
 800c1a2:	6818      	ldr	r0, [r3, #0]
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	2000003c 	.word	0x2000003c

0800c1ac <__libc_init_array>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	4d0d      	ldr	r5, [pc, #52]	@ (800c1e4 <__libc_init_array+0x38>)
 800c1b0:	4c0d      	ldr	r4, [pc, #52]	@ (800c1e8 <__libc_init_array+0x3c>)
 800c1b2:	1b64      	subs	r4, r4, r5
 800c1b4:	10a4      	asrs	r4, r4, #2
 800c1b6:	2600      	movs	r6, #0
 800c1b8:	42a6      	cmp	r6, r4
 800c1ba:	d109      	bne.n	800c1d0 <__libc_init_array+0x24>
 800c1bc:	4d0b      	ldr	r5, [pc, #44]	@ (800c1ec <__libc_init_array+0x40>)
 800c1be:	4c0c      	ldr	r4, [pc, #48]	@ (800c1f0 <__libc_init_array+0x44>)
 800c1c0:	f000 fd08 	bl	800cbd4 <_init>
 800c1c4:	1b64      	subs	r4, r4, r5
 800c1c6:	10a4      	asrs	r4, r4, #2
 800c1c8:	2600      	movs	r6, #0
 800c1ca:	42a6      	cmp	r6, r4
 800c1cc:	d105      	bne.n	800c1da <__libc_init_array+0x2e>
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1d4:	4798      	blx	r3
 800c1d6:	3601      	adds	r6, #1
 800c1d8:	e7ee      	b.n	800c1b8 <__libc_init_array+0xc>
 800c1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1de:	4798      	blx	r3
 800c1e0:	3601      	adds	r6, #1
 800c1e2:	e7f2      	b.n	800c1ca <__libc_init_array+0x1e>
 800c1e4:	0800ccd4 	.word	0x0800ccd4
 800c1e8:	0800ccd4 	.word	0x0800ccd4
 800c1ec:	0800ccd4 	.word	0x0800ccd4
 800c1f0:	0800ccd8 	.word	0x0800ccd8

0800c1f4 <__retarget_lock_init_recursive>:
 800c1f4:	4770      	bx	lr

0800c1f6 <__retarget_lock_acquire_recursive>:
 800c1f6:	4770      	bx	lr

0800c1f8 <__retarget_lock_release_recursive>:
 800c1f8:	4770      	bx	lr

0800c1fa <memcpy>:
 800c1fa:	440a      	add	r2, r1
 800c1fc:	4291      	cmp	r1, r2
 800c1fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800c202:	d100      	bne.n	800c206 <memcpy+0xc>
 800c204:	4770      	bx	lr
 800c206:	b510      	push	{r4, lr}
 800c208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c20c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c210:	4291      	cmp	r1, r2
 800c212:	d1f9      	bne.n	800c208 <memcpy+0xe>
 800c214:	bd10      	pop	{r4, pc}
	...

0800c218 <_free_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4605      	mov	r5, r0
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d041      	beq.n	800c2a4 <_free_r+0x8c>
 800c220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c224:	1f0c      	subs	r4, r1, #4
 800c226:	2b00      	cmp	r3, #0
 800c228:	bfb8      	it	lt
 800c22a:	18e4      	addlt	r4, r4, r3
 800c22c:	f7ff fe36 	bl	800be9c <__malloc_lock>
 800c230:	4a1d      	ldr	r2, [pc, #116]	@ (800c2a8 <_free_r+0x90>)
 800c232:	6813      	ldr	r3, [r2, #0]
 800c234:	b933      	cbnz	r3, 800c244 <_free_r+0x2c>
 800c236:	6063      	str	r3, [r4, #4]
 800c238:	6014      	str	r4, [r2, #0]
 800c23a:	4628      	mov	r0, r5
 800c23c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c240:	f7ff be32 	b.w	800bea8 <__malloc_unlock>
 800c244:	42a3      	cmp	r3, r4
 800c246:	d908      	bls.n	800c25a <_free_r+0x42>
 800c248:	6820      	ldr	r0, [r4, #0]
 800c24a:	1821      	adds	r1, r4, r0
 800c24c:	428b      	cmp	r3, r1
 800c24e:	bf01      	itttt	eq
 800c250:	6819      	ldreq	r1, [r3, #0]
 800c252:	685b      	ldreq	r3, [r3, #4]
 800c254:	1809      	addeq	r1, r1, r0
 800c256:	6021      	streq	r1, [r4, #0]
 800c258:	e7ed      	b.n	800c236 <_free_r+0x1e>
 800c25a:	461a      	mov	r2, r3
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	b10b      	cbz	r3, 800c264 <_free_r+0x4c>
 800c260:	42a3      	cmp	r3, r4
 800c262:	d9fa      	bls.n	800c25a <_free_r+0x42>
 800c264:	6811      	ldr	r1, [r2, #0]
 800c266:	1850      	adds	r0, r2, r1
 800c268:	42a0      	cmp	r0, r4
 800c26a:	d10b      	bne.n	800c284 <_free_r+0x6c>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	4401      	add	r1, r0
 800c270:	1850      	adds	r0, r2, r1
 800c272:	4283      	cmp	r3, r0
 800c274:	6011      	str	r1, [r2, #0]
 800c276:	d1e0      	bne.n	800c23a <_free_r+0x22>
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	6053      	str	r3, [r2, #4]
 800c27e:	4408      	add	r0, r1
 800c280:	6010      	str	r0, [r2, #0]
 800c282:	e7da      	b.n	800c23a <_free_r+0x22>
 800c284:	d902      	bls.n	800c28c <_free_r+0x74>
 800c286:	230c      	movs	r3, #12
 800c288:	602b      	str	r3, [r5, #0]
 800c28a:	e7d6      	b.n	800c23a <_free_r+0x22>
 800c28c:	6820      	ldr	r0, [r4, #0]
 800c28e:	1821      	adds	r1, r4, r0
 800c290:	428b      	cmp	r3, r1
 800c292:	bf04      	itt	eq
 800c294:	6819      	ldreq	r1, [r3, #0]
 800c296:	685b      	ldreq	r3, [r3, #4]
 800c298:	6063      	str	r3, [r4, #4]
 800c29a:	bf04      	itt	eq
 800c29c:	1809      	addeq	r1, r1, r0
 800c29e:	6021      	streq	r1, [r4, #0]
 800c2a0:	6054      	str	r4, [r2, #4]
 800c2a2:	e7ca      	b.n	800c23a <_free_r+0x22>
 800c2a4:	bd38      	pop	{r3, r4, r5, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20001a8c 	.word	0x20001a8c

0800c2ac <__sfputc_r>:
 800c2ac:	6893      	ldr	r3, [r2, #8]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	b410      	push	{r4}
 800c2b4:	6093      	str	r3, [r2, #8]
 800c2b6:	da08      	bge.n	800c2ca <__sfputc_r+0x1e>
 800c2b8:	6994      	ldr	r4, [r2, #24]
 800c2ba:	42a3      	cmp	r3, r4
 800c2bc:	db01      	blt.n	800c2c2 <__sfputc_r+0x16>
 800c2be:	290a      	cmp	r1, #10
 800c2c0:	d103      	bne.n	800c2ca <__sfputc_r+0x1e>
 800c2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2c6:	f000 bb6d 	b.w	800c9a4 <__swbuf_r>
 800c2ca:	6813      	ldr	r3, [r2, #0]
 800c2cc:	1c58      	adds	r0, r3, #1
 800c2ce:	6010      	str	r0, [r2, #0]
 800c2d0:	7019      	strb	r1, [r3, #0]
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <__sfputs_r>:
 800c2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2dc:	4606      	mov	r6, r0
 800c2de:	460f      	mov	r7, r1
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	18d5      	adds	r5, r2, r3
 800c2e4:	42ac      	cmp	r4, r5
 800c2e6:	d101      	bne.n	800c2ec <__sfputs_r+0x12>
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e007      	b.n	800c2fc <__sfputs_r+0x22>
 800c2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f0:	463a      	mov	r2, r7
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f7ff ffda 	bl	800c2ac <__sfputc_r>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d1f3      	bne.n	800c2e4 <__sfputs_r+0xa>
 800c2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c300 <_vfiprintf_r>:
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	460d      	mov	r5, r1
 800c306:	b09d      	sub	sp, #116	@ 0x74
 800c308:	4614      	mov	r4, r2
 800c30a:	4698      	mov	r8, r3
 800c30c:	4606      	mov	r6, r0
 800c30e:	b118      	cbz	r0, 800c318 <_vfiprintf_r+0x18>
 800c310:	6a03      	ldr	r3, [r0, #32]
 800c312:	b90b      	cbnz	r3, 800c318 <_vfiprintf_r+0x18>
 800c314:	f7ff fe5a 	bl	800bfcc <__sinit>
 800c318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c31a:	07d9      	lsls	r1, r3, #31
 800c31c:	d405      	bmi.n	800c32a <_vfiprintf_r+0x2a>
 800c31e:	89ab      	ldrh	r3, [r5, #12]
 800c320:	059a      	lsls	r2, r3, #22
 800c322:	d402      	bmi.n	800c32a <_vfiprintf_r+0x2a>
 800c324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c326:	f7ff ff66 	bl	800c1f6 <__retarget_lock_acquire_recursive>
 800c32a:	89ab      	ldrh	r3, [r5, #12]
 800c32c:	071b      	lsls	r3, r3, #28
 800c32e:	d501      	bpl.n	800c334 <_vfiprintf_r+0x34>
 800c330:	692b      	ldr	r3, [r5, #16]
 800c332:	b99b      	cbnz	r3, 800c35c <_vfiprintf_r+0x5c>
 800c334:	4629      	mov	r1, r5
 800c336:	4630      	mov	r0, r6
 800c338:	f000 fb72 	bl	800ca20 <__swsetup_r>
 800c33c:	b170      	cbz	r0, 800c35c <_vfiprintf_r+0x5c>
 800c33e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c340:	07dc      	lsls	r4, r3, #31
 800c342:	d504      	bpl.n	800c34e <_vfiprintf_r+0x4e>
 800c344:	f04f 30ff 	mov.w	r0, #4294967295
 800c348:	b01d      	add	sp, #116	@ 0x74
 800c34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34e:	89ab      	ldrh	r3, [r5, #12]
 800c350:	0598      	lsls	r0, r3, #22
 800c352:	d4f7      	bmi.n	800c344 <_vfiprintf_r+0x44>
 800c354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c356:	f7ff ff4f 	bl	800c1f8 <__retarget_lock_release_recursive>
 800c35a:	e7f3      	b.n	800c344 <_vfiprintf_r+0x44>
 800c35c:	2300      	movs	r3, #0
 800c35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c360:	2320      	movs	r3, #32
 800c362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c366:	f8cd 800c 	str.w	r8, [sp, #12]
 800c36a:	2330      	movs	r3, #48	@ 0x30
 800c36c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c51c <_vfiprintf_r+0x21c>
 800c370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c374:	f04f 0901 	mov.w	r9, #1
 800c378:	4623      	mov	r3, r4
 800c37a:	469a      	mov	sl, r3
 800c37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c380:	b10a      	cbz	r2, 800c386 <_vfiprintf_r+0x86>
 800c382:	2a25      	cmp	r2, #37	@ 0x25
 800c384:	d1f9      	bne.n	800c37a <_vfiprintf_r+0x7a>
 800c386:	ebba 0b04 	subs.w	fp, sl, r4
 800c38a:	d00b      	beq.n	800c3a4 <_vfiprintf_r+0xa4>
 800c38c:	465b      	mov	r3, fp
 800c38e:	4622      	mov	r2, r4
 800c390:	4629      	mov	r1, r5
 800c392:	4630      	mov	r0, r6
 800c394:	f7ff ffa1 	bl	800c2da <__sfputs_r>
 800c398:	3001      	adds	r0, #1
 800c39a:	f000 80a7 	beq.w	800c4ec <_vfiprintf_r+0x1ec>
 800c39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3a0:	445a      	add	r2, fp
 800c3a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f000 809f 	beq.w	800c4ec <_vfiprintf_r+0x1ec>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3b8:	f10a 0a01 	add.w	sl, sl, #1
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	9307      	str	r3, [sp, #28]
 800c3c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3c6:	4654      	mov	r4, sl
 800c3c8:	2205      	movs	r2, #5
 800c3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ce:	4853      	ldr	r0, [pc, #332]	@ (800c51c <_vfiprintf_r+0x21c>)
 800c3d0:	f7f3 ff06 	bl	80001e0 <memchr>
 800c3d4:	9a04      	ldr	r2, [sp, #16]
 800c3d6:	b9d8      	cbnz	r0, 800c410 <_vfiprintf_r+0x110>
 800c3d8:	06d1      	lsls	r1, r2, #27
 800c3da:	bf44      	itt	mi
 800c3dc:	2320      	movmi	r3, #32
 800c3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3e2:	0713      	lsls	r3, r2, #28
 800c3e4:	bf44      	itt	mi
 800c3e6:	232b      	movmi	r3, #43	@ 0x2b
 800c3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3f2:	d015      	beq.n	800c420 <_vfiprintf_r+0x120>
 800c3f4:	9a07      	ldr	r2, [sp, #28]
 800c3f6:	4654      	mov	r4, sl
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f04f 0c0a 	mov.w	ip, #10
 800c3fe:	4621      	mov	r1, r4
 800c400:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c404:	3b30      	subs	r3, #48	@ 0x30
 800c406:	2b09      	cmp	r3, #9
 800c408:	d94b      	bls.n	800c4a2 <_vfiprintf_r+0x1a2>
 800c40a:	b1b0      	cbz	r0, 800c43a <_vfiprintf_r+0x13a>
 800c40c:	9207      	str	r2, [sp, #28]
 800c40e:	e014      	b.n	800c43a <_vfiprintf_r+0x13a>
 800c410:	eba0 0308 	sub.w	r3, r0, r8
 800c414:	fa09 f303 	lsl.w	r3, r9, r3
 800c418:	4313      	orrs	r3, r2
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	46a2      	mov	sl, r4
 800c41e:	e7d2      	b.n	800c3c6 <_vfiprintf_r+0xc6>
 800c420:	9b03      	ldr	r3, [sp, #12]
 800c422:	1d19      	adds	r1, r3, #4
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	9103      	str	r1, [sp, #12]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	bfbb      	ittet	lt
 800c42c:	425b      	neglt	r3, r3
 800c42e:	f042 0202 	orrlt.w	r2, r2, #2
 800c432:	9307      	strge	r3, [sp, #28]
 800c434:	9307      	strlt	r3, [sp, #28]
 800c436:	bfb8      	it	lt
 800c438:	9204      	strlt	r2, [sp, #16]
 800c43a:	7823      	ldrb	r3, [r4, #0]
 800c43c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c43e:	d10a      	bne.n	800c456 <_vfiprintf_r+0x156>
 800c440:	7863      	ldrb	r3, [r4, #1]
 800c442:	2b2a      	cmp	r3, #42	@ 0x2a
 800c444:	d132      	bne.n	800c4ac <_vfiprintf_r+0x1ac>
 800c446:	9b03      	ldr	r3, [sp, #12]
 800c448:	1d1a      	adds	r2, r3, #4
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	9203      	str	r2, [sp, #12]
 800c44e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c452:	3402      	adds	r4, #2
 800c454:	9305      	str	r3, [sp, #20]
 800c456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c52c <_vfiprintf_r+0x22c>
 800c45a:	7821      	ldrb	r1, [r4, #0]
 800c45c:	2203      	movs	r2, #3
 800c45e:	4650      	mov	r0, sl
 800c460:	f7f3 febe 	bl	80001e0 <memchr>
 800c464:	b138      	cbz	r0, 800c476 <_vfiprintf_r+0x176>
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	eba0 000a 	sub.w	r0, r0, sl
 800c46c:	2240      	movs	r2, #64	@ 0x40
 800c46e:	4082      	lsls	r2, r0
 800c470:	4313      	orrs	r3, r2
 800c472:	3401      	adds	r4, #1
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47a:	4829      	ldr	r0, [pc, #164]	@ (800c520 <_vfiprintf_r+0x220>)
 800c47c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c480:	2206      	movs	r2, #6
 800c482:	f7f3 fead 	bl	80001e0 <memchr>
 800c486:	2800      	cmp	r0, #0
 800c488:	d03f      	beq.n	800c50a <_vfiprintf_r+0x20a>
 800c48a:	4b26      	ldr	r3, [pc, #152]	@ (800c524 <_vfiprintf_r+0x224>)
 800c48c:	bb1b      	cbnz	r3, 800c4d6 <_vfiprintf_r+0x1d6>
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	3307      	adds	r3, #7
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	3308      	adds	r3, #8
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c49c:	443b      	add	r3, r7
 800c49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a0:	e76a      	b.n	800c378 <_vfiprintf_r+0x78>
 800c4a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	2001      	movs	r0, #1
 800c4aa:	e7a8      	b.n	800c3fe <_vfiprintf_r+0xfe>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	3401      	adds	r4, #1
 800c4b0:	9305      	str	r3, [sp, #20]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	f04f 0c0a 	mov.w	ip, #10
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4be:	3a30      	subs	r2, #48	@ 0x30
 800c4c0:	2a09      	cmp	r2, #9
 800c4c2:	d903      	bls.n	800c4cc <_vfiprintf_r+0x1cc>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0c6      	beq.n	800c456 <_vfiprintf_r+0x156>
 800c4c8:	9105      	str	r1, [sp, #20]
 800c4ca:	e7c4      	b.n	800c456 <_vfiprintf_r+0x156>
 800c4cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e7f0      	b.n	800c4b8 <_vfiprintf_r+0x1b8>
 800c4d6:	ab03      	add	r3, sp, #12
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	462a      	mov	r2, r5
 800c4dc:	4b12      	ldr	r3, [pc, #72]	@ (800c528 <_vfiprintf_r+0x228>)
 800c4de:	a904      	add	r1, sp, #16
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f3af 8000 	nop.w
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	1c78      	adds	r0, r7, #1
 800c4ea:	d1d6      	bne.n	800c49a <_vfiprintf_r+0x19a>
 800c4ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4ee:	07d9      	lsls	r1, r3, #31
 800c4f0:	d405      	bmi.n	800c4fe <_vfiprintf_r+0x1fe>
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	059a      	lsls	r2, r3, #22
 800c4f6:	d402      	bmi.n	800c4fe <_vfiprintf_r+0x1fe>
 800c4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4fa:	f7ff fe7d 	bl	800c1f8 <__retarget_lock_release_recursive>
 800c4fe:	89ab      	ldrh	r3, [r5, #12]
 800c500:	065b      	lsls	r3, r3, #25
 800c502:	f53f af1f 	bmi.w	800c344 <_vfiprintf_r+0x44>
 800c506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c508:	e71e      	b.n	800c348 <_vfiprintf_r+0x48>
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	462a      	mov	r2, r5
 800c510:	4b05      	ldr	r3, [pc, #20]	@ (800c528 <_vfiprintf_r+0x228>)
 800c512:	a904      	add	r1, sp, #16
 800c514:	4630      	mov	r0, r6
 800c516:	f000 f879 	bl	800c60c <_printf_i>
 800c51a:	e7e4      	b.n	800c4e6 <_vfiprintf_r+0x1e6>
 800c51c:	0800cc98 	.word	0x0800cc98
 800c520:	0800cca2 	.word	0x0800cca2
 800c524:	00000000 	.word	0x00000000
 800c528:	0800c2db 	.word	0x0800c2db
 800c52c:	0800cc9e 	.word	0x0800cc9e

0800c530 <_printf_common>:
 800c530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c534:	4616      	mov	r6, r2
 800c536:	4698      	mov	r8, r3
 800c538:	688a      	ldr	r2, [r1, #8]
 800c53a:	690b      	ldr	r3, [r1, #16]
 800c53c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c540:	4293      	cmp	r3, r2
 800c542:	bfb8      	it	lt
 800c544:	4613      	movlt	r3, r2
 800c546:	6033      	str	r3, [r6, #0]
 800c548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c54c:	4607      	mov	r7, r0
 800c54e:	460c      	mov	r4, r1
 800c550:	b10a      	cbz	r2, 800c556 <_printf_common+0x26>
 800c552:	3301      	adds	r3, #1
 800c554:	6033      	str	r3, [r6, #0]
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	0699      	lsls	r1, r3, #26
 800c55a:	bf42      	ittt	mi
 800c55c:	6833      	ldrmi	r3, [r6, #0]
 800c55e:	3302      	addmi	r3, #2
 800c560:	6033      	strmi	r3, [r6, #0]
 800c562:	6825      	ldr	r5, [r4, #0]
 800c564:	f015 0506 	ands.w	r5, r5, #6
 800c568:	d106      	bne.n	800c578 <_printf_common+0x48>
 800c56a:	f104 0a19 	add.w	sl, r4, #25
 800c56e:	68e3      	ldr	r3, [r4, #12]
 800c570:	6832      	ldr	r2, [r6, #0]
 800c572:	1a9b      	subs	r3, r3, r2
 800c574:	42ab      	cmp	r3, r5
 800c576:	dc26      	bgt.n	800c5c6 <_printf_common+0x96>
 800c578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c57c:	6822      	ldr	r2, [r4, #0]
 800c57e:	3b00      	subs	r3, #0
 800c580:	bf18      	it	ne
 800c582:	2301      	movne	r3, #1
 800c584:	0692      	lsls	r2, r2, #26
 800c586:	d42b      	bmi.n	800c5e0 <_printf_common+0xb0>
 800c588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c58c:	4641      	mov	r1, r8
 800c58e:	4638      	mov	r0, r7
 800c590:	47c8      	blx	r9
 800c592:	3001      	adds	r0, #1
 800c594:	d01e      	beq.n	800c5d4 <_printf_common+0xa4>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	6922      	ldr	r2, [r4, #16]
 800c59a:	f003 0306 	and.w	r3, r3, #6
 800c59e:	2b04      	cmp	r3, #4
 800c5a0:	bf02      	ittt	eq
 800c5a2:	68e5      	ldreq	r5, [r4, #12]
 800c5a4:	6833      	ldreq	r3, [r6, #0]
 800c5a6:	1aed      	subeq	r5, r5, r3
 800c5a8:	68a3      	ldr	r3, [r4, #8]
 800c5aa:	bf0c      	ite	eq
 800c5ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5b0:	2500      	movne	r5, #0
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	bfc4      	itt	gt
 800c5b6:	1a9b      	subgt	r3, r3, r2
 800c5b8:	18ed      	addgt	r5, r5, r3
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	341a      	adds	r4, #26
 800c5be:	42b5      	cmp	r5, r6
 800c5c0:	d11a      	bne.n	800c5f8 <_printf_common+0xc8>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e008      	b.n	800c5d8 <_printf_common+0xa8>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	4652      	mov	r2, sl
 800c5ca:	4641      	mov	r1, r8
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	47c8      	blx	r9
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d103      	bne.n	800c5dc <_printf_common+0xac>
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5dc:	3501      	adds	r5, #1
 800c5de:	e7c6      	b.n	800c56e <_printf_common+0x3e>
 800c5e0:	18e1      	adds	r1, r4, r3
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	2030      	movs	r0, #48	@ 0x30
 800c5e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5ea:	4422      	add	r2, r4
 800c5ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5f4:	3302      	adds	r3, #2
 800c5f6:	e7c7      	b.n	800c588 <_printf_common+0x58>
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	4641      	mov	r1, r8
 800c5fe:	4638      	mov	r0, r7
 800c600:	47c8      	blx	r9
 800c602:	3001      	adds	r0, #1
 800c604:	d0e6      	beq.n	800c5d4 <_printf_common+0xa4>
 800c606:	3601      	adds	r6, #1
 800c608:	e7d9      	b.n	800c5be <_printf_common+0x8e>
	...

0800c60c <_printf_i>:
 800c60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c610:	7e0f      	ldrb	r7, [r1, #24]
 800c612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c614:	2f78      	cmp	r7, #120	@ 0x78
 800c616:	4691      	mov	r9, r2
 800c618:	4680      	mov	r8, r0
 800c61a:	460c      	mov	r4, r1
 800c61c:	469a      	mov	sl, r3
 800c61e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c622:	d807      	bhi.n	800c634 <_printf_i+0x28>
 800c624:	2f62      	cmp	r7, #98	@ 0x62
 800c626:	d80a      	bhi.n	800c63e <_printf_i+0x32>
 800c628:	2f00      	cmp	r7, #0
 800c62a:	f000 80d2 	beq.w	800c7d2 <_printf_i+0x1c6>
 800c62e:	2f58      	cmp	r7, #88	@ 0x58
 800c630:	f000 80b9 	beq.w	800c7a6 <_printf_i+0x19a>
 800c634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c63c:	e03a      	b.n	800c6b4 <_printf_i+0xa8>
 800c63e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c642:	2b15      	cmp	r3, #21
 800c644:	d8f6      	bhi.n	800c634 <_printf_i+0x28>
 800c646:	a101      	add	r1, pc, #4	@ (adr r1, 800c64c <_printf_i+0x40>)
 800c648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c64c:	0800c6a5 	.word	0x0800c6a5
 800c650:	0800c6b9 	.word	0x0800c6b9
 800c654:	0800c635 	.word	0x0800c635
 800c658:	0800c635 	.word	0x0800c635
 800c65c:	0800c635 	.word	0x0800c635
 800c660:	0800c635 	.word	0x0800c635
 800c664:	0800c6b9 	.word	0x0800c6b9
 800c668:	0800c635 	.word	0x0800c635
 800c66c:	0800c635 	.word	0x0800c635
 800c670:	0800c635 	.word	0x0800c635
 800c674:	0800c635 	.word	0x0800c635
 800c678:	0800c7b9 	.word	0x0800c7b9
 800c67c:	0800c6e3 	.word	0x0800c6e3
 800c680:	0800c773 	.word	0x0800c773
 800c684:	0800c635 	.word	0x0800c635
 800c688:	0800c635 	.word	0x0800c635
 800c68c:	0800c7db 	.word	0x0800c7db
 800c690:	0800c635 	.word	0x0800c635
 800c694:	0800c6e3 	.word	0x0800c6e3
 800c698:	0800c635 	.word	0x0800c635
 800c69c:	0800c635 	.word	0x0800c635
 800c6a0:	0800c77b 	.word	0x0800c77b
 800c6a4:	6833      	ldr	r3, [r6, #0]
 800c6a6:	1d1a      	adds	r2, r3, #4
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6032      	str	r2, [r6, #0]
 800c6ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e09d      	b.n	800c7f4 <_printf_i+0x1e8>
 800c6b8:	6833      	ldr	r3, [r6, #0]
 800c6ba:	6820      	ldr	r0, [r4, #0]
 800c6bc:	1d19      	adds	r1, r3, #4
 800c6be:	6031      	str	r1, [r6, #0]
 800c6c0:	0606      	lsls	r6, r0, #24
 800c6c2:	d501      	bpl.n	800c6c8 <_printf_i+0xbc>
 800c6c4:	681d      	ldr	r5, [r3, #0]
 800c6c6:	e003      	b.n	800c6d0 <_printf_i+0xc4>
 800c6c8:	0645      	lsls	r5, r0, #25
 800c6ca:	d5fb      	bpl.n	800c6c4 <_printf_i+0xb8>
 800c6cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	da03      	bge.n	800c6dc <_printf_i+0xd0>
 800c6d4:	232d      	movs	r3, #45	@ 0x2d
 800c6d6:	426d      	negs	r5, r5
 800c6d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6dc:	4859      	ldr	r0, [pc, #356]	@ (800c844 <_printf_i+0x238>)
 800c6de:	230a      	movs	r3, #10
 800c6e0:	e011      	b.n	800c706 <_printf_i+0xfa>
 800c6e2:	6821      	ldr	r1, [r4, #0]
 800c6e4:	6833      	ldr	r3, [r6, #0]
 800c6e6:	0608      	lsls	r0, r1, #24
 800c6e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6ec:	d402      	bmi.n	800c6f4 <_printf_i+0xe8>
 800c6ee:	0649      	lsls	r1, r1, #25
 800c6f0:	bf48      	it	mi
 800c6f2:	b2ad      	uxthmi	r5, r5
 800c6f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6f6:	4853      	ldr	r0, [pc, #332]	@ (800c844 <_printf_i+0x238>)
 800c6f8:	6033      	str	r3, [r6, #0]
 800c6fa:	bf14      	ite	ne
 800c6fc:	230a      	movne	r3, #10
 800c6fe:	2308      	moveq	r3, #8
 800c700:	2100      	movs	r1, #0
 800c702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c706:	6866      	ldr	r6, [r4, #4]
 800c708:	60a6      	str	r6, [r4, #8]
 800c70a:	2e00      	cmp	r6, #0
 800c70c:	bfa2      	ittt	ge
 800c70e:	6821      	ldrge	r1, [r4, #0]
 800c710:	f021 0104 	bicge.w	r1, r1, #4
 800c714:	6021      	strge	r1, [r4, #0]
 800c716:	b90d      	cbnz	r5, 800c71c <_printf_i+0x110>
 800c718:	2e00      	cmp	r6, #0
 800c71a:	d04b      	beq.n	800c7b4 <_printf_i+0x1a8>
 800c71c:	4616      	mov	r6, r2
 800c71e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c722:	fb03 5711 	mls	r7, r3, r1, r5
 800c726:	5dc7      	ldrb	r7, [r0, r7]
 800c728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c72c:	462f      	mov	r7, r5
 800c72e:	42bb      	cmp	r3, r7
 800c730:	460d      	mov	r5, r1
 800c732:	d9f4      	bls.n	800c71e <_printf_i+0x112>
 800c734:	2b08      	cmp	r3, #8
 800c736:	d10b      	bne.n	800c750 <_printf_i+0x144>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	07df      	lsls	r7, r3, #31
 800c73c:	d508      	bpl.n	800c750 <_printf_i+0x144>
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	6861      	ldr	r1, [r4, #4]
 800c742:	4299      	cmp	r1, r3
 800c744:	bfde      	ittt	le
 800c746:	2330      	movle	r3, #48	@ 0x30
 800c748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c74c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c750:	1b92      	subs	r2, r2, r6
 800c752:	6122      	str	r2, [r4, #16]
 800c754:	f8cd a000 	str.w	sl, [sp]
 800c758:	464b      	mov	r3, r9
 800c75a:	aa03      	add	r2, sp, #12
 800c75c:	4621      	mov	r1, r4
 800c75e:	4640      	mov	r0, r8
 800c760:	f7ff fee6 	bl	800c530 <_printf_common>
 800c764:	3001      	adds	r0, #1
 800c766:	d14a      	bne.n	800c7fe <_printf_i+0x1f2>
 800c768:	f04f 30ff 	mov.w	r0, #4294967295
 800c76c:	b004      	add	sp, #16
 800c76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	f043 0320 	orr.w	r3, r3, #32
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	4833      	ldr	r0, [pc, #204]	@ (800c848 <_printf_i+0x23c>)
 800c77c:	2778      	movs	r7, #120	@ 0x78
 800c77e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	6831      	ldr	r1, [r6, #0]
 800c786:	061f      	lsls	r7, r3, #24
 800c788:	f851 5b04 	ldr.w	r5, [r1], #4
 800c78c:	d402      	bmi.n	800c794 <_printf_i+0x188>
 800c78e:	065f      	lsls	r7, r3, #25
 800c790:	bf48      	it	mi
 800c792:	b2ad      	uxthmi	r5, r5
 800c794:	6031      	str	r1, [r6, #0]
 800c796:	07d9      	lsls	r1, r3, #31
 800c798:	bf44      	itt	mi
 800c79a:	f043 0320 	orrmi.w	r3, r3, #32
 800c79e:	6023      	strmi	r3, [r4, #0]
 800c7a0:	b11d      	cbz	r5, 800c7aa <_printf_i+0x19e>
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	e7ac      	b.n	800c700 <_printf_i+0xf4>
 800c7a6:	4827      	ldr	r0, [pc, #156]	@ (800c844 <_printf_i+0x238>)
 800c7a8:	e7e9      	b.n	800c77e <_printf_i+0x172>
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	f023 0320 	bic.w	r3, r3, #32
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	e7f6      	b.n	800c7a2 <_printf_i+0x196>
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	e7bd      	b.n	800c734 <_printf_i+0x128>
 800c7b8:	6833      	ldr	r3, [r6, #0]
 800c7ba:	6825      	ldr	r5, [r4, #0]
 800c7bc:	6961      	ldr	r1, [r4, #20]
 800c7be:	1d18      	adds	r0, r3, #4
 800c7c0:	6030      	str	r0, [r6, #0]
 800c7c2:	062e      	lsls	r6, r5, #24
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	d501      	bpl.n	800c7cc <_printf_i+0x1c0>
 800c7c8:	6019      	str	r1, [r3, #0]
 800c7ca:	e002      	b.n	800c7d2 <_printf_i+0x1c6>
 800c7cc:	0668      	lsls	r0, r5, #25
 800c7ce:	d5fb      	bpl.n	800c7c8 <_printf_i+0x1bc>
 800c7d0:	8019      	strh	r1, [r3, #0]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	6123      	str	r3, [r4, #16]
 800c7d6:	4616      	mov	r6, r2
 800c7d8:	e7bc      	b.n	800c754 <_printf_i+0x148>
 800c7da:	6833      	ldr	r3, [r6, #0]
 800c7dc:	1d1a      	adds	r2, r3, #4
 800c7de:	6032      	str	r2, [r6, #0]
 800c7e0:	681e      	ldr	r6, [r3, #0]
 800c7e2:	6862      	ldr	r2, [r4, #4]
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7f3 fcfa 	bl	80001e0 <memchr>
 800c7ec:	b108      	cbz	r0, 800c7f2 <_printf_i+0x1e6>
 800c7ee:	1b80      	subs	r0, r0, r6
 800c7f0:	6060      	str	r0, [r4, #4]
 800c7f2:	6863      	ldr	r3, [r4, #4]
 800c7f4:	6123      	str	r3, [r4, #16]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7fc:	e7aa      	b.n	800c754 <_printf_i+0x148>
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	4632      	mov	r2, r6
 800c802:	4649      	mov	r1, r9
 800c804:	4640      	mov	r0, r8
 800c806:	47d0      	blx	sl
 800c808:	3001      	adds	r0, #1
 800c80a:	d0ad      	beq.n	800c768 <_printf_i+0x15c>
 800c80c:	6823      	ldr	r3, [r4, #0]
 800c80e:	079b      	lsls	r3, r3, #30
 800c810:	d413      	bmi.n	800c83a <_printf_i+0x22e>
 800c812:	68e0      	ldr	r0, [r4, #12]
 800c814:	9b03      	ldr	r3, [sp, #12]
 800c816:	4298      	cmp	r0, r3
 800c818:	bfb8      	it	lt
 800c81a:	4618      	movlt	r0, r3
 800c81c:	e7a6      	b.n	800c76c <_printf_i+0x160>
 800c81e:	2301      	movs	r3, #1
 800c820:	4632      	mov	r2, r6
 800c822:	4649      	mov	r1, r9
 800c824:	4640      	mov	r0, r8
 800c826:	47d0      	blx	sl
 800c828:	3001      	adds	r0, #1
 800c82a:	d09d      	beq.n	800c768 <_printf_i+0x15c>
 800c82c:	3501      	adds	r5, #1
 800c82e:	68e3      	ldr	r3, [r4, #12]
 800c830:	9903      	ldr	r1, [sp, #12]
 800c832:	1a5b      	subs	r3, r3, r1
 800c834:	42ab      	cmp	r3, r5
 800c836:	dcf2      	bgt.n	800c81e <_printf_i+0x212>
 800c838:	e7eb      	b.n	800c812 <_printf_i+0x206>
 800c83a:	2500      	movs	r5, #0
 800c83c:	f104 0619 	add.w	r6, r4, #25
 800c840:	e7f5      	b.n	800c82e <_printf_i+0x222>
 800c842:	bf00      	nop
 800c844:	0800cca9 	.word	0x0800cca9
 800c848:	0800ccba 	.word	0x0800ccba

0800c84c <__sflush_r>:
 800c84c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c854:	0716      	lsls	r6, r2, #28
 800c856:	4605      	mov	r5, r0
 800c858:	460c      	mov	r4, r1
 800c85a:	d454      	bmi.n	800c906 <__sflush_r+0xba>
 800c85c:	684b      	ldr	r3, [r1, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	dc02      	bgt.n	800c868 <__sflush_r+0x1c>
 800c862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c864:	2b00      	cmp	r3, #0
 800c866:	dd48      	ble.n	800c8fa <__sflush_r+0xae>
 800c868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c86a:	2e00      	cmp	r6, #0
 800c86c:	d045      	beq.n	800c8fa <__sflush_r+0xae>
 800c86e:	2300      	movs	r3, #0
 800c870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c874:	682f      	ldr	r7, [r5, #0]
 800c876:	6a21      	ldr	r1, [r4, #32]
 800c878:	602b      	str	r3, [r5, #0]
 800c87a:	d030      	beq.n	800c8de <__sflush_r+0x92>
 800c87c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c87e:	89a3      	ldrh	r3, [r4, #12]
 800c880:	0759      	lsls	r1, r3, #29
 800c882:	d505      	bpl.n	800c890 <__sflush_r+0x44>
 800c884:	6863      	ldr	r3, [r4, #4]
 800c886:	1ad2      	subs	r2, r2, r3
 800c888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c88a:	b10b      	cbz	r3, 800c890 <__sflush_r+0x44>
 800c88c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	2300      	movs	r3, #0
 800c892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c894:	6a21      	ldr	r1, [r4, #32]
 800c896:	4628      	mov	r0, r5
 800c898:	47b0      	blx	r6
 800c89a:	1c43      	adds	r3, r0, #1
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	d106      	bne.n	800c8ae <__sflush_r+0x62>
 800c8a0:	6829      	ldr	r1, [r5, #0]
 800c8a2:	291d      	cmp	r1, #29
 800c8a4:	d82b      	bhi.n	800c8fe <__sflush_r+0xb2>
 800c8a6:	4a2a      	ldr	r2, [pc, #168]	@ (800c950 <__sflush_r+0x104>)
 800c8a8:	410a      	asrs	r2, r1
 800c8aa:	07d6      	lsls	r6, r2, #31
 800c8ac:	d427      	bmi.n	800c8fe <__sflush_r+0xb2>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	6062      	str	r2, [r4, #4]
 800c8b2:	04d9      	lsls	r1, r3, #19
 800c8b4:	6922      	ldr	r2, [r4, #16]
 800c8b6:	6022      	str	r2, [r4, #0]
 800c8b8:	d504      	bpl.n	800c8c4 <__sflush_r+0x78>
 800c8ba:	1c42      	adds	r2, r0, #1
 800c8bc:	d101      	bne.n	800c8c2 <__sflush_r+0x76>
 800c8be:	682b      	ldr	r3, [r5, #0]
 800c8c0:	b903      	cbnz	r3, 800c8c4 <__sflush_r+0x78>
 800c8c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8c6:	602f      	str	r7, [r5, #0]
 800c8c8:	b1b9      	cbz	r1, 800c8fa <__sflush_r+0xae>
 800c8ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8ce:	4299      	cmp	r1, r3
 800c8d0:	d002      	beq.n	800c8d8 <__sflush_r+0x8c>
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f7ff fca0 	bl	800c218 <_free_r>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8dc:	e00d      	b.n	800c8fa <__sflush_r+0xae>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	47b0      	blx	r6
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	1c50      	adds	r0, r2, #1
 800c8e8:	d1c9      	bne.n	800c87e <__sflush_r+0x32>
 800c8ea:	682b      	ldr	r3, [r5, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d0c6      	beq.n	800c87e <__sflush_r+0x32>
 800c8f0:	2b1d      	cmp	r3, #29
 800c8f2:	d001      	beq.n	800c8f8 <__sflush_r+0xac>
 800c8f4:	2b16      	cmp	r3, #22
 800c8f6:	d11e      	bne.n	800c936 <__sflush_r+0xea>
 800c8f8:	602f      	str	r7, [r5, #0]
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	e022      	b.n	800c944 <__sflush_r+0xf8>
 800c8fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c902:	b21b      	sxth	r3, r3
 800c904:	e01b      	b.n	800c93e <__sflush_r+0xf2>
 800c906:	690f      	ldr	r7, [r1, #16]
 800c908:	2f00      	cmp	r7, #0
 800c90a:	d0f6      	beq.n	800c8fa <__sflush_r+0xae>
 800c90c:	0793      	lsls	r3, r2, #30
 800c90e:	680e      	ldr	r6, [r1, #0]
 800c910:	bf08      	it	eq
 800c912:	694b      	ldreq	r3, [r1, #20]
 800c914:	600f      	str	r7, [r1, #0]
 800c916:	bf18      	it	ne
 800c918:	2300      	movne	r3, #0
 800c91a:	eba6 0807 	sub.w	r8, r6, r7
 800c91e:	608b      	str	r3, [r1, #8]
 800c920:	f1b8 0f00 	cmp.w	r8, #0
 800c924:	dde9      	ble.n	800c8fa <__sflush_r+0xae>
 800c926:	6a21      	ldr	r1, [r4, #32]
 800c928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c92a:	4643      	mov	r3, r8
 800c92c:	463a      	mov	r2, r7
 800c92e:	4628      	mov	r0, r5
 800c930:	47b0      	blx	r6
 800c932:	2800      	cmp	r0, #0
 800c934:	dc08      	bgt.n	800c948 <__sflush_r+0xfc>
 800c936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c93e:	81a3      	strh	r3, [r4, #12]
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c948:	4407      	add	r7, r0
 800c94a:	eba8 0800 	sub.w	r8, r8, r0
 800c94e:	e7e7      	b.n	800c920 <__sflush_r+0xd4>
 800c950:	dfbffffe 	.word	0xdfbffffe

0800c954 <_fflush_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	690b      	ldr	r3, [r1, #16]
 800c958:	4605      	mov	r5, r0
 800c95a:	460c      	mov	r4, r1
 800c95c:	b913      	cbnz	r3, 800c964 <_fflush_r+0x10>
 800c95e:	2500      	movs	r5, #0
 800c960:	4628      	mov	r0, r5
 800c962:	bd38      	pop	{r3, r4, r5, pc}
 800c964:	b118      	cbz	r0, 800c96e <_fflush_r+0x1a>
 800c966:	6a03      	ldr	r3, [r0, #32]
 800c968:	b90b      	cbnz	r3, 800c96e <_fflush_r+0x1a>
 800c96a:	f7ff fb2f 	bl	800bfcc <__sinit>
 800c96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0f3      	beq.n	800c95e <_fflush_r+0xa>
 800c976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c978:	07d0      	lsls	r0, r2, #31
 800c97a:	d404      	bmi.n	800c986 <_fflush_r+0x32>
 800c97c:	0599      	lsls	r1, r3, #22
 800c97e:	d402      	bmi.n	800c986 <_fflush_r+0x32>
 800c980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c982:	f7ff fc38 	bl	800c1f6 <__retarget_lock_acquire_recursive>
 800c986:	4628      	mov	r0, r5
 800c988:	4621      	mov	r1, r4
 800c98a:	f7ff ff5f 	bl	800c84c <__sflush_r>
 800c98e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c990:	07da      	lsls	r2, r3, #31
 800c992:	4605      	mov	r5, r0
 800c994:	d4e4      	bmi.n	800c960 <_fflush_r+0xc>
 800c996:	89a3      	ldrh	r3, [r4, #12]
 800c998:	059b      	lsls	r3, r3, #22
 800c99a:	d4e1      	bmi.n	800c960 <_fflush_r+0xc>
 800c99c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c99e:	f7ff fc2b 	bl	800c1f8 <__retarget_lock_release_recursive>
 800c9a2:	e7dd      	b.n	800c960 <_fflush_r+0xc>

0800c9a4 <__swbuf_r>:
 800c9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a6:	460e      	mov	r6, r1
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	b118      	cbz	r0, 800c9b6 <__swbuf_r+0x12>
 800c9ae:	6a03      	ldr	r3, [r0, #32]
 800c9b0:	b90b      	cbnz	r3, 800c9b6 <__swbuf_r+0x12>
 800c9b2:	f7ff fb0b 	bl	800bfcc <__sinit>
 800c9b6:	69a3      	ldr	r3, [r4, #24]
 800c9b8:	60a3      	str	r3, [r4, #8]
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	071a      	lsls	r2, r3, #28
 800c9be:	d501      	bpl.n	800c9c4 <__swbuf_r+0x20>
 800c9c0:	6923      	ldr	r3, [r4, #16]
 800c9c2:	b943      	cbnz	r3, 800c9d6 <__swbuf_r+0x32>
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f000 f82a 	bl	800ca20 <__swsetup_r>
 800c9cc:	b118      	cbz	r0, 800c9d6 <__swbuf_r+0x32>
 800c9ce:	f04f 37ff 	mov.w	r7, #4294967295
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	6922      	ldr	r2, [r4, #16]
 800c9da:	1a98      	subs	r0, r3, r2
 800c9dc:	6963      	ldr	r3, [r4, #20]
 800c9de:	b2f6      	uxtb	r6, r6
 800c9e0:	4283      	cmp	r3, r0
 800c9e2:	4637      	mov	r7, r6
 800c9e4:	dc05      	bgt.n	800c9f2 <__swbuf_r+0x4e>
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f7ff ffb3 	bl	800c954 <_fflush_r>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d1ed      	bne.n	800c9ce <__swbuf_r+0x2a>
 800c9f2:	68a3      	ldr	r3, [r4, #8]
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	60a3      	str	r3, [r4, #8]
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	6022      	str	r2, [r4, #0]
 800c9fe:	701e      	strb	r6, [r3, #0]
 800ca00:	6962      	ldr	r2, [r4, #20]
 800ca02:	1c43      	adds	r3, r0, #1
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d004      	beq.n	800ca12 <__swbuf_r+0x6e>
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	07db      	lsls	r3, r3, #31
 800ca0c:	d5e1      	bpl.n	800c9d2 <__swbuf_r+0x2e>
 800ca0e:	2e0a      	cmp	r6, #10
 800ca10:	d1df      	bne.n	800c9d2 <__swbuf_r+0x2e>
 800ca12:	4621      	mov	r1, r4
 800ca14:	4628      	mov	r0, r5
 800ca16:	f7ff ff9d 	bl	800c954 <_fflush_r>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	d0d9      	beq.n	800c9d2 <__swbuf_r+0x2e>
 800ca1e:	e7d6      	b.n	800c9ce <__swbuf_r+0x2a>

0800ca20 <__swsetup_r>:
 800ca20:	b538      	push	{r3, r4, r5, lr}
 800ca22:	4b29      	ldr	r3, [pc, #164]	@ (800cac8 <__swsetup_r+0xa8>)
 800ca24:	4605      	mov	r5, r0
 800ca26:	6818      	ldr	r0, [r3, #0]
 800ca28:	460c      	mov	r4, r1
 800ca2a:	b118      	cbz	r0, 800ca34 <__swsetup_r+0x14>
 800ca2c:	6a03      	ldr	r3, [r0, #32]
 800ca2e:	b90b      	cbnz	r3, 800ca34 <__swsetup_r+0x14>
 800ca30:	f7ff facc 	bl	800bfcc <__sinit>
 800ca34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca38:	0719      	lsls	r1, r3, #28
 800ca3a:	d422      	bmi.n	800ca82 <__swsetup_r+0x62>
 800ca3c:	06da      	lsls	r2, r3, #27
 800ca3e:	d407      	bmi.n	800ca50 <__swsetup_r+0x30>
 800ca40:	2209      	movs	r2, #9
 800ca42:	602a      	str	r2, [r5, #0]
 800ca44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca48:	81a3      	strh	r3, [r4, #12]
 800ca4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4e:	e033      	b.n	800cab8 <__swsetup_r+0x98>
 800ca50:	0758      	lsls	r0, r3, #29
 800ca52:	d512      	bpl.n	800ca7a <__swsetup_r+0x5a>
 800ca54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca56:	b141      	cbz	r1, 800ca6a <__swsetup_r+0x4a>
 800ca58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca5c:	4299      	cmp	r1, r3
 800ca5e:	d002      	beq.n	800ca66 <__swsetup_r+0x46>
 800ca60:	4628      	mov	r0, r5
 800ca62:	f7ff fbd9 	bl	800c218 <_free_r>
 800ca66:	2300      	movs	r3, #0
 800ca68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca70:	81a3      	strh	r3, [r4, #12]
 800ca72:	2300      	movs	r3, #0
 800ca74:	6063      	str	r3, [r4, #4]
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	f043 0308 	orr.w	r3, r3, #8
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	6923      	ldr	r3, [r4, #16]
 800ca84:	b94b      	cbnz	r3, 800ca9a <__swsetup_r+0x7a>
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca90:	d003      	beq.n	800ca9a <__swsetup_r+0x7a>
 800ca92:	4621      	mov	r1, r4
 800ca94:	4628      	mov	r0, r5
 800ca96:	f000 f83f 	bl	800cb18 <__smakebuf_r>
 800ca9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca9e:	f013 0201 	ands.w	r2, r3, #1
 800caa2:	d00a      	beq.n	800caba <__swsetup_r+0x9a>
 800caa4:	2200      	movs	r2, #0
 800caa6:	60a2      	str	r2, [r4, #8]
 800caa8:	6962      	ldr	r2, [r4, #20]
 800caaa:	4252      	negs	r2, r2
 800caac:	61a2      	str	r2, [r4, #24]
 800caae:	6922      	ldr	r2, [r4, #16]
 800cab0:	b942      	cbnz	r2, 800cac4 <__swsetup_r+0xa4>
 800cab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cab6:	d1c5      	bne.n	800ca44 <__swsetup_r+0x24>
 800cab8:	bd38      	pop	{r3, r4, r5, pc}
 800caba:	0799      	lsls	r1, r3, #30
 800cabc:	bf58      	it	pl
 800cabe:	6962      	ldrpl	r2, [r4, #20]
 800cac0:	60a2      	str	r2, [r4, #8]
 800cac2:	e7f4      	b.n	800caae <__swsetup_r+0x8e>
 800cac4:	2000      	movs	r0, #0
 800cac6:	e7f7      	b.n	800cab8 <__swsetup_r+0x98>
 800cac8:	2000003c 	.word	0x2000003c

0800cacc <__swhatbuf_r>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	460c      	mov	r4, r1
 800cad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad4:	2900      	cmp	r1, #0
 800cad6:	b096      	sub	sp, #88	@ 0x58
 800cad8:	4615      	mov	r5, r2
 800cada:	461e      	mov	r6, r3
 800cadc:	da0d      	bge.n	800cafa <__swhatbuf_r+0x2e>
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cae4:	f04f 0100 	mov.w	r1, #0
 800cae8:	bf14      	ite	ne
 800caea:	2340      	movne	r3, #64	@ 0x40
 800caec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800caf0:	2000      	movs	r0, #0
 800caf2:	6031      	str	r1, [r6, #0]
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	b016      	add	sp, #88	@ 0x58
 800caf8:	bd70      	pop	{r4, r5, r6, pc}
 800cafa:	466a      	mov	r2, sp
 800cafc:	f000 f848 	bl	800cb90 <_fstat_r>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	dbec      	blt.n	800cade <__swhatbuf_r+0x12>
 800cb04:	9901      	ldr	r1, [sp, #4]
 800cb06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb0e:	4259      	negs	r1, r3
 800cb10:	4159      	adcs	r1, r3
 800cb12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb16:	e7eb      	b.n	800caf0 <__swhatbuf_r+0x24>

0800cb18 <__smakebuf_r>:
 800cb18:	898b      	ldrh	r3, [r1, #12]
 800cb1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb1c:	079d      	lsls	r5, r3, #30
 800cb1e:	4606      	mov	r6, r0
 800cb20:	460c      	mov	r4, r1
 800cb22:	d507      	bpl.n	800cb34 <__smakebuf_r+0x1c>
 800cb24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	6123      	str	r3, [r4, #16]
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	6163      	str	r3, [r4, #20]
 800cb30:	b003      	add	sp, #12
 800cb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb34:	ab01      	add	r3, sp, #4
 800cb36:	466a      	mov	r2, sp
 800cb38:	f7ff ffc8 	bl	800cacc <__swhatbuf_r>
 800cb3c:	9f00      	ldr	r7, [sp, #0]
 800cb3e:	4605      	mov	r5, r0
 800cb40:	4639      	mov	r1, r7
 800cb42:	4630      	mov	r0, r6
 800cb44:	f7ff f92a 	bl	800bd9c <_malloc_r>
 800cb48:	b948      	cbnz	r0, 800cb5e <__smakebuf_r+0x46>
 800cb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb4e:	059a      	lsls	r2, r3, #22
 800cb50:	d4ee      	bmi.n	800cb30 <__smakebuf_r+0x18>
 800cb52:	f023 0303 	bic.w	r3, r3, #3
 800cb56:	f043 0302 	orr.w	r3, r3, #2
 800cb5a:	81a3      	strh	r3, [r4, #12]
 800cb5c:	e7e2      	b.n	800cb24 <__smakebuf_r+0xc>
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	6020      	str	r0, [r4, #0]
 800cb62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb66:	81a3      	strh	r3, [r4, #12]
 800cb68:	9b01      	ldr	r3, [sp, #4]
 800cb6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb6e:	b15b      	cbz	r3, 800cb88 <__smakebuf_r+0x70>
 800cb70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb74:	4630      	mov	r0, r6
 800cb76:	f000 f81d 	bl	800cbb4 <_isatty_r>
 800cb7a:	b128      	cbz	r0, 800cb88 <__smakebuf_r+0x70>
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	f023 0303 	bic.w	r3, r3, #3
 800cb82:	f043 0301 	orr.w	r3, r3, #1
 800cb86:	81a3      	strh	r3, [r4, #12]
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	431d      	orrs	r5, r3
 800cb8c:	81a5      	strh	r5, [r4, #12]
 800cb8e:	e7cf      	b.n	800cb30 <__smakebuf_r+0x18>

0800cb90 <_fstat_r>:
 800cb90:	b538      	push	{r3, r4, r5, lr}
 800cb92:	4d07      	ldr	r5, [pc, #28]	@ (800cbb0 <_fstat_r+0x20>)
 800cb94:	2300      	movs	r3, #0
 800cb96:	4604      	mov	r4, r0
 800cb98:	4608      	mov	r0, r1
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	602b      	str	r3, [r5, #0]
 800cb9e:	f7f4 fa6f 	bl	8001080 <_fstat>
 800cba2:	1c43      	adds	r3, r0, #1
 800cba4:	d102      	bne.n	800cbac <_fstat_r+0x1c>
 800cba6:	682b      	ldr	r3, [r5, #0]
 800cba8:	b103      	cbz	r3, 800cbac <_fstat_r+0x1c>
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	bd38      	pop	{r3, r4, r5, pc}
 800cbae:	bf00      	nop
 800cbb0:	20001bcc 	.word	0x20001bcc

0800cbb4 <_isatty_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d06      	ldr	r5, [pc, #24]	@ (800cbd0 <_isatty_r+0x1c>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	602b      	str	r3, [r5, #0]
 800cbc0:	f7f4 fa6e 	bl	80010a0 <_isatty>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	d102      	bne.n	800cbce <_isatty_r+0x1a>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	b103      	cbz	r3, 800cbce <_isatty_r+0x1a>
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	20001bcc 	.word	0x20001bcc

0800cbd4 <_init>:
 800cbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd6:	bf00      	nop
 800cbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbda:	bc08      	pop	{r3}
 800cbdc:	469e      	mov	lr, r3
 800cbde:	4770      	bx	lr

0800cbe0 <_fini>:
 800cbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe2:	bf00      	nop
 800cbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbe6:	bc08      	pop	{r3}
 800cbe8:	469e      	mov	lr, r3
 800cbea:	4770      	bx	lr
